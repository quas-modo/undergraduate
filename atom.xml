<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://quas-modo.github.io</id>
    <title>Carpe diem</title>
    <subtitle>pluck the day</subtitle>
    <icon>https://quas-modo.github.io/images/favicon.ico</icon>
    <link href="https://quas-modo.github.io" />
    <author>
      <name>quas-modo</name>
    </author>
    <updated>2022-09-15T10:01:24.000Z</updated>
    <entry>
        <id>https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
        <title>Lecture02-计算机体系结构的问题及解决方案</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
        <content type="html">&lt;p&gt;讲述了六个计算机体系结构的问题以及解决方案&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼最重要的思想存储程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼最重要的思想存储程序&#34;&gt;#&lt;/a&gt; 冯诺依曼最重要的思想 —— 存储程序&lt;/h2&gt;
&lt;p&gt;任何要计算机完成的工作都要先被编写成程序，然后将&lt;strong&gt;程序和原始数据送入主存&lt;/strong&gt;并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。&lt;/p&gt;
&lt;p&gt;区分中央处理单元（CPU）和处理器。&lt;/p&gt;
&lt;p&gt;CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。&lt;/p&gt;
&lt;p&gt;目前，苹果 M2 以及可以集成 200 亿的晶体管。&lt;/p&gt;
&lt;h3 id=&#34;可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;#&lt;/a&gt; 可以通过无限增加 CPU 的大小来增加性能嘛？&lt;/h3&gt;
&lt;p&gt;不可以，面积越大，意味着&lt;strong&gt;互联延迟&lt;/strong&gt;越大。一个时钟周期需要大于最长互联延迟。存在物理极限。&lt;/p&gt;
&lt;h3 id=&#34;问题1cpu的频率不能无限提高&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题1cpu的频率不能无限提高&#34;&gt;#&lt;/a&gt; 问题 1：CPU 的频率不能无限提高&lt;/h3&gt;
&lt;p&gt;MOS 管开关、脉冲通过门电路需要时间&lt;/p&gt;
&lt;p&gt;为了信号同步，每个脉冲信号需要持续一定的时间&lt;/p&gt;
&lt;p&gt;面积大，连线延迟大；&lt;/p&gt;
&lt;p&gt;频率越高，开关损耗高，CPU 耗电和散热提高；&lt;/p&gt;
&lt;h3 id=&#34;解决1改变cpu芯片结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决1改变cpu芯片结构&#34;&gt;#&lt;/a&gt; 解决 1：改变 CPU 芯片结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域定制，如面向人工智能的芯片&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题2内存墙的存在-memory-wall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题2内存墙的存在-memory-wall&#34;&gt;#&lt;/a&gt; 问题 2：内存墙的存在 memory wall&lt;/h3&gt;
&lt;p&gt;主存和 CPU 之间传输数据的速度跟不上 CPU 的速度&lt;/p&gt;
&lt;h3 id=&#34;解决2采用高速缓存cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决2采用高速缓存cache&#34;&gt;#&lt;/a&gt; 解决 2：采用高速缓存（cache）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;添加一级或多级缓存以减少存储器访问频率并提高数据传输速率&lt;/li&gt;
&lt;li&gt;增大总线的数据宽度，来增加每次所能取出的位数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题3cpu等待io传输数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题3cpu等待io传输数据&#34;&gt;#&lt;/a&gt; 问题 3：CPU 等待 I/O 传输数据&lt;/h3&gt;
&lt;p&gt;CPU 在等待 I/O 设备时保持空闲&lt;/p&gt;
&lt;h3 id=&#34;解决3中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决3中断&#34;&gt;#&lt;/a&gt; 解决 3：中断&lt;/h3&gt;
&lt;p&gt;其他模块（例如 IO）可以中断正常处理顺序的机制&lt;/p&gt;
&lt;p&gt;中断周期加入指令周期中&lt;/p&gt;
&lt;p&gt;多重中断：顺序中断处理、嵌套中断处理&lt;/p&gt;
&lt;h3 id=&#34;问题4兼顾存储容量-速度和成本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题4兼顾存储容量-速度和成本&#34;&gt;#&lt;/a&gt; 问题 4：兼顾存储容量、速度和成本&lt;/h3&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量：越大越好&lt;/li&gt;
&lt;li&gt;速度：跟上处理器&lt;/li&gt;
&lt;li&gt;成本：相较于其他组件合理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束之间的关系&lt;/p&gt;
&lt;p&gt;​	更短的访问时间，更高的每比特成本&lt;/p&gt;
&lt;h3 id=&#34;解决4层次式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决4层次式存储结构&#34;&gt;#&lt;/a&gt; 解决 4：层次式存储结构&lt;/h3&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大容量数据存储&lt;/li&gt;
&lt;li&gt;高速性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用存储器层次结构而不是依赖单个存储器组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;寄存器 ——cache—— 主存 —— 磁盘 —— 磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储量越来越大，速度越来越慢，离 CPU 越来越远&lt;/p&gt;
&lt;h3 id=&#34;问题5io设备传输速率差异大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题5io设备传输速率差异大&#34;&gt;#&lt;/a&gt; 问题 5：I/O 设备传输速率差异大&lt;/h3&gt;
&lt;p&gt;I/O 性能跟不上 CPU 速度的提升&lt;/p&gt;
&lt;h3 id=&#34;解决5采用缓冲区和改进io操作技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决5采用缓冲区和改进io操作技术&#34;&gt;#&lt;/a&gt; 解决 5：采用缓冲区和改进 I/O 操作技术&lt;/h3&gt;
&lt;p&gt;设立缓存区&lt;/p&gt;
&lt;h3 id=&#34;总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线&#34;&gt;#&lt;/a&gt; 总线&lt;/h3&gt;
&lt;h4 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h4&gt;
&lt;p&gt;所有部件都通过总线传递数据&lt;/p&gt;
&lt;h4 id=&#34;分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时&#34;&gt;#&lt;/a&gt; 分时&lt;/h4&gt;
&lt;p&gt;只有一个部件能够传输数据&lt;/p&gt;
&lt;h3 id=&#34;问题6计算机部件互连复杂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题6计算机部件互连复杂&#34;&gt;#&lt;/a&gt; 问题 6：计算机部件互连复杂&lt;/h3&gt;
&lt;h3 id=&#34;解决6采用总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决6采用总线&#34;&gt;#&lt;/a&gt; 解决 6：采用总线&lt;/h3&gt;
&lt;p&gt;控制线&lt;/p&gt;
&lt;p&gt;地址线&lt;/p&gt;
&lt;p&gt;数据线&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-09-15T10:01:24.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
        <title>Lecture03-结构化程序设计</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
        <content type="html">&lt;p&gt;cpp 第三讲&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture03-结构化程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture03-结构化程序设计&#34;&gt;#&lt;/a&gt; Lecture03 - 结构化程序设计&lt;/h1&gt;
&lt;p&gt;Data Structure + Algorithm&lt;/p&gt;
&lt;p&gt;课程结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算、控制流转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何组织（function 函数的形式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造数据类型（array，struct，union，pointer）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data&#34;&gt;#&lt;/a&gt; Data&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 性质 数据类型 名  值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 地址相关 - 可以操作系统，需要接近底层&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;datatype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datatype&#34;&gt;#&lt;/a&gt; datatype&lt;/h3&gt;
&lt;h4 id=&#34;定义值集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义值集&#34;&gt;#&lt;/a&gt; 定义值集&lt;/h4&gt;
&lt;p&gt;int double 有限 可数 离散&lt;/p&gt;
&lt;p&gt;数据类型决定值集，决定取值范围。需要知道取值范围，从而考虑和控制&lt;strong&gt; overflow 溢出&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;在计算机系统中，数值一律用&lt;strong&gt;补码&lt;/strong&gt;来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;typedef short INT16&lt;/p&gt;
&lt;h4 id=&#34;定义计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义计算&#34;&gt;#&lt;/a&gt; 定义计算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算数（移位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cpp 类型系统 —— 强、动静结合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也有些语言会更加灵活，比如 duck 类型，&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;
&lt;p&gt;char、int、float、double&lt;/p&gt;
&lt;p&gt;Modifiers: long、short、signed、unsigned&lt;/p&gt;
&lt;p&gt;​	char 只能用 signed、unsigned 修饰&lt;/p&gt;
&lt;p&gt;​	float 不能被修饰&lt;/p&gt;
&lt;p&gt;​	double 只能用 long 修饰&lt;/p&gt;
&lt;p&gt;​	int 可以用 4 种修饰符组合修饰&lt;/p&gt;
&lt;p&gt;省略表示&lt;/p&gt;
&lt;p&gt;操作符 sizeof&lt;/p&gt;
&lt;p&gt;ANSI C++: wchar_t、bool&lt;/p&gt;
&lt;h2 id=&#34;表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式&#34;&gt;#&lt;/a&gt; 表达式&lt;/h2&gt;
&lt;h3 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h3&gt;
&lt;p&gt;operand&lt;/p&gt;
&lt;p&gt;operator&lt;/p&gt;
&lt;p&gt;others&lt;/p&gt;
&lt;h3 id=&#34;求值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求值&#34;&gt;#&lt;/a&gt; 求值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优先级&lt;/li&gt;
&lt;li&gt;结合性&lt;/li&gt;
&lt;li&gt;类型转换约定&lt;/li&gt;
&lt;li&gt;求值次序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#种类&#34;&gt;#&lt;/a&gt; 种类&lt;/h3&gt;
&lt;p&gt;赋值表达式&lt;/p&gt;
&lt;p&gt;算数表达式&lt;/p&gt;
&lt;p&gt;条件运算符表达式（三目运算符）&lt;/p&gt;
&lt;p&gt;逗号表达式&lt;/p&gt;
&lt;p&gt;字位运算符表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异或运算 ^&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与全 0 的二进制串的运算 —— 不变&lt;/p&gt;
&lt;p&gt;与全 1 的二进制串的运算 —— 取反&lt;/p&gt;
&lt;p&gt;与本身的运算 —— 清零&lt;/p&gt;
&lt;p&gt;与同一个对象运算两次 —— 还原&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一个小应用 —— 交换 ab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;操作符可重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作符可重载&#34;&gt;#&lt;/a&gt; 操作符可重载&lt;/h3&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h2&gt;
&lt;h3 id=&#34;表达式语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式语句&#34;&gt;#&lt;/a&gt; 表达式语句&lt;/h3&gt;
&lt;h3 id=&#34;io语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io语句&#34;&gt;#&lt;/a&gt; IO 语句&lt;/h3&gt;
&lt;p&gt;stdio.h&lt;/p&gt;
&lt;p&gt;iostream.h&lt;/p&gt;
&lt;p&gt;cin&lt;/p&gt;
&lt;p&gt;cout&lt;/p&gt;
&lt;h3 id=&#34;控制流语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制流语句&#34;&gt;#&lt;/a&gt; 控制流语句&lt;/h3&gt;
&lt;p&gt;顺序、选择、重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;switch case 中只用整型表达式&lt;/strong&gt; 还可以搭配 enum 语句使用，这样可以更方便阅读，也不用在文件中硬编码，可以存到文件当中。&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
        <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
        <updated>2022-09-15T08:12:37.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/</id>
        <title>自杀专卖店</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;生者才会感到悲伤。&lt;/li&gt;
&lt;li&gt;同样，生者才会感到快乐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;灰暗、沮丧、病态、压抑……&lt;br /&gt;
 自杀专卖店提供了各种自杀的方式，简单粗暴的上吊，和香水一样优雅的毒药，充满男子气概的武术刀，开枪自杀，沉入水中…… 最让我难过的，是一个穷人用一个塑料袋套在了自己的头上，随着塑料袋内的氧气越来越少，最终在痛苦中窒息身亡。&lt;br /&gt;
动画并没有让我感受到过于的压抑或者难过，突出的绘画风格和法语歌曲反而更吸引我一点（歌很好听捏）。听说原著当中 alan 真的在父亲的追杀下选择了自杀，可能更具悲剧色彩和感染力。&lt;br /&gt;
一直是个情感很寡淡的人，不会特别喜欢什么，也不会特别讨厌什么，不会很高兴，也不会很生气。死亡在我眼里是件很平淡的事情，可能是因为我没有什么牵挂的人或者东西吧。&lt;br /&gt;
祝好。&lt;/p&gt;
</content>
        <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
        <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
        <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
        <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
        <updated>2022-09-14T16:21:46.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
        <title>Lecture03-传输层</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
        <content type="html">&lt;p&gt;动画有助于更好地理解&lt;/p&gt;
&lt;p&gt;interactive animation speaks a thousand words&lt;/p&gt;
&lt;p&gt;断更好几天了（趴）&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第三章-运输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章-运输层&#34;&gt;#&lt;/a&gt; 第三章 运输层&lt;/h1&gt;
&lt;p&gt;在网络层的基础上增加了&lt;strong&gt;端口号&lt;/strong&gt;来实现进程到进程的通信。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;：可靠的、保序的传输，提供多路复用、解复用，拥塞控制、流量控制、建立连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;：不可靠的、不保序的传输，提供多路复用和解复用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都不提供延时保证和带宽保证，延时和带宽依赖于网络层的服务&lt;/p&gt;
&lt;h2 id=&#34;多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用与多路分解&#34;&gt;#&lt;/a&gt; 多路复用与多路分解&lt;/h2&gt;
&lt;p&gt;multiplexing and demultiplexing&lt;/p&gt;
&lt;p&gt;在源主机从不同的套接字中收集数据块，并为每个数据块封装上首部信息，从而生成报文段，然后将报文段传递到网络层，所有这些工作称&lt;strong&gt;多路复用&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个套接字有唯一标志符&lt;/li&gt;
&lt;li&gt;传输层 / 运输层报文段中包含源端口号、目的端口号、传输数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将运输层报文段中的数据交付到正确的套接字的工作称为&lt;strong&gt;多路分解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以上可用两家小孩寄邮件类比理解。&lt;/p&gt;
&lt;h3 id=&#34;端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口号&#34;&gt;#&lt;/a&gt; 端口号&lt;/h3&gt;
&lt;p&gt;0-65535&lt;/p&gt;
&lt;p&gt;0-1023 周知端口号 / 著名端口号 well-known port number&lt;/p&gt;
&lt;p&gt;一般而言，应用程序的客户端让运输层自动地（也是透明地）分配端口号，而服务器端则分配一个特定的端口号。&lt;/p&gt;
&lt;h3 id=&#34;面向无连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向无连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向无连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 UDP 套接字是由一个&lt;strong&gt;二元组&lt;/strong&gt;全面标识的，包含一个目标 IP 地址和一个目的端口号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果两个 UDP 报文段有不同的源 IP 地址和 / 或源端口号，但具有相同的目的 IP 地址和目的端口号，那么这两个报文段将通过相同的目的套接字被定向到相同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;面向连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 TCP 套接字是由一个&lt;strong&gt;四元组&lt;/strong&gt;全面标识的，包含源地址、源端口、目的 IP 地址、目的端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同的源将定向到不同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;web服务器与tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器与tcp&#34;&gt;#&lt;/a&gt; Web 服务器与 TCP&lt;/h3&gt;
&lt;p&gt;连接套接字与进程之间并非总是有着一一对应的关系。如今一些高性能的 Web 服务器通常只有一个进程，但是为每个新的客户连接创建一个具有新连接套接字的新线程。&lt;/p&gt;
&lt;h2 id=&#34;无连接运输udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无连接运输udp&#34;&gt;#&lt;/a&gt; 无连接运输：UDP&lt;/h2&gt;
&lt;h3 id=&#34;udp的优点为什么要使用udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp的优点为什么要使用udp&#34;&gt;#&lt;/a&gt; UDP 的优点 / 为什么要使用 UDP：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关于发送什么数据以及何时发送的应用层控制得更为精细&lt;/li&gt;
&lt;li&gt;无须连接建立&lt;/li&gt;
&lt;li&gt;无连接状态&lt;/li&gt;
&lt;li&gt;分组首部开销小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp检验和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp检验和&#34;&gt;#&lt;/a&gt; UDP 检验和&lt;/h3&gt;
&lt;p&gt;端到端原则：某种功能必须是基于端到端的实现，“与在较高级别提供这些功能的代价相比，在较低级别设置的功能可能是冗余的或几乎没有价值的、”&lt;/p&gt;
&lt;p&gt;回卷、反码&lt;/p&gt;
&lt;p&gt;在目标地址，将四个比特字加在一起，每一位为 1，则无差错。&lt;/p&gt;
&lt;h2 id=&#34;可靠数据传输rdt的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输rdt的原理&#34;&gt;#&lt;/a&gt; 可靠数据传输（rdt）的原理&lt;/h2&gt;
&lt;p&gt;rdt: reliable data transfer protocol&lt;/p&gt;
&lt;p&gt;双向的数据传输协议就是两个单向的数据传输协议的综合&lt;/p&gt;
&lt;p&gt;FSM Finite-State Machine&lt;/p&gt;
&lt;h3 id=&#34;构造可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造可靠数据传输协议&#34;&gt;#&lt;/a&gt; 构造可靠数据传输协议&lt;/h3&gt;
&lt;h4 id=&#34;基于完全可靠信道-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于完全可靠信道-rdt10&#34;&gt;#&lt;/a&gt; 基于完全可靠信道 rdt1.0&lt;/h4&gt;
&lt;p&gt;直接传就好了 Orz&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;#&lt;/a&gt; 经具有比特差错信道的可靠数据传输 rdt2.0&lt;/h4&gt;
&lt;p&gt;ARQ Automatic Repeat reQuest 自动重传请求协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;差错检测&lt;/li&gt;
&lt;li&gt;接收方反馈（ACK, NAK）&lt;/li&gt;
&lt;li&gt;重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停等（stop-wait）协议：发送方将不会发送一块新数据，除非发送方确信接收方已正确接受当前分组。&lt;/p&gt;
&lt;h4 id=&#34;如果acknak出错-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果acknak出错-rdt21&#34;&gt;#&lt;/a&gt; 如果 ACK/NAK 出错 -&amp;gt; rdt2.1&lt;/h4&gt;
&lt;p&gt;增加序号 0,1&lt;/p&gt;
&lt;p&gt;根据收到的序号即可确定是否正在重传前一个发送分组&lt;/p&gt;
&lt;h4 id=&#34;nak-free-在ack后加序号-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nak-free-在ack后加序号-rdt22&#34;&gt;#&lt;/a&gt; NAK free 在 ACK 后加序号 -&amp;gt; rdt2.2&lt;/h4&gt;
&lt;p&gt;为后面发送多个数据做准备&lt;/p&gt;
&lt;p&gt;确认信息减少一般，协议简单&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;#&lt;/a&gt; 经具有比特差错的丢包信道的可靠数据传输 rdt3.0&lt;/h4&gt;
&lt;p&gt;比特交替协议 alternating-bit protocol&lt;/p&gt;
&lt;p&gt;设置倒计数计时器 (countdown timer) ，一旦超过时间，则重传&lt;/p&gt;
&lt;p&gt;虽然可能造成冗余数据分组（duplicate data packet），但 rdt2.0 已经处理了这部分内容&lt;/p&gt;
&lt;h3 id=&#34;流水线可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流水线可靠数据传输协议&#34;&gt;#&lt;/a&gt; 流水线可靠数据传输协议&lt;/h3&gt;
&lt;p&gt;rdt3.0 的&lt;strong&gt;停等协议&lt;/strong&gt;降低了传输的性能，等待到收到回复后才进行下一步操作，链路的利用率太低。&lt;/p&gt;
&lt;p&gt;因此，开发了流水线技术，即一次传输多个分组。&lt;/p&gt;
&lt;h3 id=&#34;回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; 回退 N 步 Go-Back-N —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;p&gt;N - window size 窗口长度&lt;/p&gt;
&lt;p&gt;sliding-window protocol 滑动窗口协议&lt;/p&gt;
&lt;h4 id=&#34;发送方响应的事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方响应的事件&#34;&gt;#&lt;/a&gt; 发送方响应的事件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上层调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到一个 ACK 累计确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时事件&lt;/p&gt;
&lt;p&gt;如果出现超时，发送方重传所有已发送但还未被确认过的分组。&lt;/p&gt;
&lt;p&gt;如果收到一个 ACK，但仍有已发送但未被确认的分组，则定时器被重新启动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接收方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;接收方若收到 失序、错误分组，则丢弃该分组，并为&lt;strong&gt;最近按序接收的分组&lt;/strong&gt;重新发送 ACK。&lt;/p&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;p&gt;接收缓存简单&lt;/p&gt;
&lt;h4 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;单个分组的差错就能引起 GBN 重传大量分组&lt;/p&gt;
&lt;p&gt;（配套的 GBN Java 小程序好好玩&lt;/p&gt;
&lt;h3 id=&#34;selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; Selective Repeat SR —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;h4 id=&#34;接收方-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方-2&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;失序的分组将被缓存直到所有丢失分组（即序号更小的分组）皆被接收&lt;/p&gt;
&lt;p&gt;接收到后为&lt;strong&gt;接收的分组&lt;/strong&gt;发送 ACK&lt;/p&gt;
&lt;p&gt;不在缓存范围内的分组将被丢失&lt;/p&gt;
&lt;h4 id=&#34;发送方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方&#34;&gt;#&lt;/a&gt; 发送方&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从上层收到数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时 —— 每个分组都要有自己的逻辑计时器，超时发送后只能发送一个分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到 ACK—— 窗口基序号向前移动到具有最小序号的未确认分组处，如果窗口移动了并且有序号落在窗口内的为发送分组，则发送这些分组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可实际操作一下小程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出错率低适合用 GBN，链路容量大适合用 SR&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;面向连接的运输tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的运输tcp&#34;&gt;#&lt;/a&gt; 面向连接的运输：TCP&lt;/h2&gt;
&lt;h3 id=&#34;tcp连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接&#34;&gt;#&lt;/a&gt; TCP 连接&lt;/h3&gt;
&lt;p&gt;全双工服务 full-duplex service&lt;/p&gt;
&lt;p&gt;最大报文段长度 MSS Maximum Segment Size&lt;/p&gt;
&lt;h3 id=&#34;tcp报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp报文段结构&#34;&gt;#&lt;/a&gt; TCP 报文段结构&lt;/h3&gt;
&lt;p&gt;Holy &amp;amp;^%@! That idiot made a TCP header diagram in Lego(TM)!&lt;/p&gt;
&lt;p&gt;有趣，但孩子不玩乐高（x&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yaWdodGVvdXNpdC53b3JkcHJlc3MuY29tLzIwMTAvMDYvMjcvcHJhY3RpY2FsLXZpc3VhbC10aHJlZS1kaW1lbnNpb25hbC1wZWRhZ29neS1mb3ItaW50ZXJuZXQtcHJvdG9jb2wtcGFja2V0LWhlYWRlci1jb250cm9sLWZpZWxkcy8=&#34;&gt;https://righteousit.wordpress.com/2010/06/27/practical-visual-three-dimensional-pedagogy-for-internet-protocol-packet-header-control-fields/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;源端口号、目标端口、序号、确认号、首部长度、保留未用、标志字段、接收窗口、因特网检验和、紧急数据指针、选项、数据&lt;/p&gt;
&lt;h4 id=&#34;序号和确认号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序号和确认号&#34;&gt;#&lt;/a&gt; 序号和确认号&lt;/h4&gt;
&lt;p&gt;在主机 A 的一个进程与主机 B 的一个进程的连接中，主机 A 填充进报文段的&lt;strong&gt;确认号&lt;/strong&gt;是主机 A 期望从主机 B 收到的下一字节的序号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;累积确认&lt;/strong&gt;：TCP 只确认该流中至第一个丢失字节为止的字节&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;捎带&lt;/strong&gt;：对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据的报文段中&lt;/p&gt;
&lt;h3 id=&#34;往返时间的估计与超时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#往返时间的估计与超时&#34;&gt;#&lt;/a&gt; 往返时间的估计与超时&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;指数加权移动平均&lt;/strong&gt;：根据较近的 SampleRTT 的值估计目前的平均&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时间隔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;TimeoutInterval = EstimatedRTT + 4 * DevRTT
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（用了一些公式计算出了 EstimatedRTT 和 DevRTT，进而估算 TimeoutInterval）&lt;/p&gt;
&lt;h3 id=&#34;可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输&#34;&gt;#&lt;/a&gt; 可靠数据传输&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;超时间隔加倍&lt;/strong&gt;：再次超时，超时间隔设置为原来的两倍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冗余 ACK&lt;/strong&gt;：一旦收到 3 个冗余 ACK，TCP 就执行快速重传（fast retransmit）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 是 GBN 和 SR 协议的混合体&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h3&gt;
&lt;p&gt;区分流量控制和拥塞控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量控制&lt;/strong&gt;是端到端的控制，例如 A 通过网络给 B 发数据，A 发送的太快导致 B 没法接收 (B 缓冲窗口过小或者处理过慢)，这时候的控制就是流量控制，原理是通过&lt;strong&gt;滑动窗口的大小&lt;/strong&gt;改变来实现。 其中，rwnd 指接收窗口 receive window。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;LastByteSent - LastByteAcked &amp;lt;= rwnd
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;是 A 与 B 之间的网络发生堵塞导致传输过慢或者丢包，来不及传输。防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络性能有关的所有因素。&lt;/p&gt;
&lt;h3 id=&#34;tcp连接管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接管理&#34;&gt;#&lt;/a&gt; TCP 连接管理&lt;/h3&gt;
&lt;p&gt;SYN&lt;/p&gt;
&lt;p&gt;FIN&lt;/p&gt;
&lt;p&gt;通过三次握手建立连接，两次握手会造成半连接（只有一端维护了连接）&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制原理&#34;&gt;#&lt;/a&gt; 拥塞控制原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;拥塞表现&lt;/strong&gt;：分组丢失、延时较长&lt;/p&gt;
&lt;h3 id=&#34;拥塞原因与代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因与代价&#34;&gt;#&lt;/a&gt; 拥塞原因与代价&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当分组的到达速率接近链路容量时，分组经历巨大的排队时延&lt;/li&gt;
&lt;li&gt;发送方必须执行重传以补偿因为缓存溢出而丢失（丢弃）的分组&lt;/li&gt;
&lt;li&gt;发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽转发不必要的分组副本&lt;/li&gt;
&lt;li&gt;当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费调了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;端到端拥塞控制&lt;/li&gt;
&lt;li&gt;网络辅助拥塞控制（NI 字段表示轻微拥塞，CI 字段表示拥塞指示）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;TCP 使用端到端的拥塞控制，而不是网络辅助的拥塞控制。网络辅助的拥塞控制代价过高。&lt;/p&gt;
&lt;h3 id=&#34;指导性原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指导性原则&#34;&gt;#&lt;/a&gt; 指导性原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个丢失的报文段意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率。&lt;/li&gt;
&lt;li&gt;一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率。&lt;/li&gt;
&lt;li&gt;宽带检测&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp拥塞控制算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制算法&#34;&gt;#&lt;/a&gt; TCP 拥塞控制算法&lt;/h3&gt;
&lt;h4 id=&#34;慢启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢启动&#34;&gt;#&lt;/a&gt; 慢启动&lt;/h4&gt;
&lt;p&gt;指数增长，每过一个 RTT，发送速率就翻番&lt;/p&gt;
&lt;h4 id=&#34;拥塞避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞避免&#34;&gt;#&lt;/a&gt; 拥塞避免&lt;/h4&gt;
&lt;p&gt;线性增长，无论何时到达一个新的确认，就将 cwnd 增加一个 MSS 字节&lt;/p&gt;
&lt;h4 id=&#34;快速恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速恢复&#34;&gt;#&lt;/a&gt; 快速恢复&lt;/h4&gt;
</content>
        <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
        <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
        <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2022-09-13T09:43:01.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/</id>
        <title>Lecture02-应用层</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
        <content type="html">&lt;p&gt;TCP 和 UDP 编程相关总结暂缺。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第二章-应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章-应用层&#34;&gt;#&lt;/a&gt; 第二章 应用层&lt;/h1&gt;
&lt;h2 id=&#34;应用层协议原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层协议原理&#34;&gt;#&lt;/a&gt; 应用层协议原理&lt;/h2&gt;
&lt;h3 id=&#34;网络应用程序体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用程序体系结构&#34;&gt;#&lt;/a&gt; 网络应用程序体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户 - 服务器体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2P 体系结构&lt;/p&gt;
&lt;p&gt;主机为对等方，具有自扩展性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/S 和 P2P 体系结构的混合体&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进程通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程通信&#34;&gt;#&lt;/a&gt; 进程通信&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端与服务器的进程&lt;/p&gt;
&lt;p&gt;发起通信的进程被识别为客户，在会话开始时等待联系的进程是服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程与计算机网络之间的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;套接字&lt;/strong&gt;接口，也成为应用程序编程接口，是同一台主机内应用层与运输层直接的接口。&lt;/p&gt;
&lt;p&gt;层间接口必须要携带：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传什么（要传输的报文）&lt;/li&gt;
&lt;li&gt;谁传的（IP + 端口号）&lt;/li&gt;
&lt;li&gt;传给谁（IP + 端口号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 四元组（源 IP、源端口号、目标 IP、目标端口号）&lt;/li&gt;
&lt;li&gt;UDP 二元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可供应用程序使用的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可供应用程序使用的运输服务&#34;&gt;#&lt;/a&gt; 可供应用程序使用的运输服务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可靠的数据传输&lt;/li&gt;
&lt;li&gt;吞吐量&lt;/li&gt;
&lt;li&gt;定时&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;因特网提供的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网提供的运输服务&#34;&gt;#&lt;/a&gt; 因特网提供的运输服务&lt;/h3&gt;
&lt;h4 id=&#34;tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; TCP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;面向连接的服务&lt;/li&gt;
&lt;li&gt;可靠的数据传送服务&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;SSL 加密&lt;/li&gt;
&lt;li&gt;不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp&#34;&gt;#&lt;/a&gt; UDP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以区分进程，无需建立链接&lt;/li&gt;
&lt;li&gt;不可靠&lt;/li&gt;
&lt;li&gt;没有拥塞、流量控制，不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web和http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web和http&#34;&gt;#&lt;/a&gt; Web 和 HTTP&lt;/h2&gt;
&lt;h3 id=&#34;http概况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http概况&#34;&gt;#&lt;/a&gt; HTTP 概况&lt;/h3&gt;
&lt;p&gt;HyperText Transfer Protocal, HTTP 超文本传输协议&lt;/p&gt;
&lt;p&gt;HTTP 定义了 Web 客户向 Web 服务器请求 Web 页面的方式，以及服务器向客户传送 Web 页面的方式。&lt;/p&gt;
&lt;p&gt;HTTP 使用 TCP 作为它的支撑运输协议。&lt;/p&gt;
&lt;p&gt;HTTP 是一个无状态协议，因为 HTTP 不保存关于客户的任何信息。&lt;/p&gt;
&lt;h3 id=&#34;非持续性连接和持续连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非持续性连接和持续连接&#34;&gt;#&lt;/a&gt; 非持续性连接和持续连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非持续连接：每个请求 / 相应对是经一个单独的 TCP 连接发送，HTTP/1.0 使用非持久连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持续连接：所有的请求及其相应经相同的 TCP 连接发送，HTTP/1.1 默认使用持久连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非流水方式的持久 HTTP（客户端在收到前一个请求的相应之后再发出下一个请求）&lt;/li&gt;
&lt;li&gt;流水方式的持久 HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文格式&#34;&gt;#&lt;/a&gt; HTTP 报文格式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 请求报文
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 响应报文
&lt;ul&gt;
&lt;li&gt;状态行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h3&gt;
&lt;p&gt;提高 Web 服务器的性能，希望把内容和用户身份联系起来。&lt;/p&gt;
&lt;p&gt;cookie 的技术有 4 个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 HTTP 响应报文中有一个 cookie 首部行&lt;/li&gt;
&lt;li&gt;在 HTTP 请求报文中有一个 cookie 的首部行&lt;/li&gt;
&lt;li&gt;在用户端系统中存有 cookie 组件，并由用户的浏览器进行管理&lt;/li&gt;
&lt;li&gt;位于 Web 站点的一个后端数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web缓存&#34;&gt;#&lt;/a&gt; Web 缓存&lt;/h3&gt;
&lt;p&gt;web 缓存器也叫代理服务器&lt;/p&gt;
&lt;h3 id=&#34;get方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get方法&#34;&gt;#&lt;/a&gt; Get 方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;缓存是为了性能，清除是为了更新&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;因特网中的电子邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网中的电子邮件&#34;&gt;#&lt;/a&gt; 因特网中的电子邮件&lt;/h2&gt;
&lt;p&gt;SMTP&lt;/p&gt;
&lt;p&gt;POP3 - 本地管理文件夹&lt;/p&gt;
&lt;p&gt;IMAP - 远程管理文件夹&lt;/p&gt;
&lt;h2 id=&#34;dns因特网的目录服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns因特网的目录服务&#34;&gt;#&lt;/a&gt; DNS：因特网的目录服务&lt;/h2&gt;
&lt;p&gt;DNS - Domain Name System 域名系统&lt;/p&gt;
&lt;p&gt;DNS 协议运行在 UDP 之上，使用 53 号端口。&lt;/p&gt;
&lt;h3 id=&#34;目的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的&#34;&gt;#&lt;/a&gt; 目的&lt;/h3&gt;
&lt;p&gt;实现域名和 IP 地址的转换&lt;/p&gt;
&lt;p&gt;主机别名&lt;/p&gt;
&lt;p&gt;邮件服务器别名&lt;/p&gt;
&lt;p&gt;负载分配&lt;/p&gt;
&lt;h3 id=&#34;集中式设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式设计&#34;&gt;#&lt;/a&gt; 集中式设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单点故障&lt;/li&gt;
&lt;li&gt;通信容量&lt;/li&gt;
&lt;li&gt;远距离的集中式数据库&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式-层次数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式-层次数据库&#34;&gt;#&lt;/a&gt; 分布式、层次数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根 DNS 服务器&lt;/li&gt;
&lt;li&gt;顶级域 DNS 服务器&lt;/li&gt;
&lt;li&gt;权威 DNS 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;域与物理划分无关，是逻辑的划分&lt;/p&gt;
&lt;h3 id=&#34;查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询&#34;&gt;#&lt;/a&gt; 查询&lt;/h3&gt;
&lt;p&gt;迭代查询&lt;/p&gt;
&lt;p&gt;递归查询&lt;/p&gt;
&lt;h3 id=&#34;报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文&#34;&gt;#&lt;/a&gt; 报文&lt;/h3&gt;
&lt;p&gt;DNS 查询和响应的报文格式相同&lt;/p&gt;
&lt;h2 id=&#34;p2p文件分发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p文件分发&#34;&gt;#&lt;/a&gt; P2P 文件分发&lt;/h2&gt;
&lt;p&gt;可扩展性好，随着用户数增加，最短分配时间上升得较慢&lt;/p&gt;
&lt;p&gt;BitTorrent 是一种用于文件分发的流行的 P2P 协议，参与一个特定文件夹分发的所有对等方的集合被称为一个洪流。&lt;/p&gt;
&lt;h3 id=&#34;最稀缺优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最稀缺优先&#34;&gt;#&lt;/a&gt; 最稀缺优先&lt;/h3&gt;
&lt;p&gt;首先请求最稀缺的块&lt;/p&gt;
&lt;h3 id=&#34;一报还一报&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一报还一报&#34;&gt;#&lt;/a&gt; 一报还一报&lt;/h3&gt;
&lt;p&gt;向给自己提供最大宽带的服务发送块&lt;/p&gt;
&lt;p&gt;每个 30s，随机选择其他 peer 发送块&lt;/p&gt;
&lt;h3 id=&#34;结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h3&gt;
&lt;p&gt;集中&lt;/p&gt;
&lt;p&gt;分散&lt;/p&gt;
&lt;p&gt;半分散&lt;/p&gt;
&lt;h2 id=&#34;视频流和内容分发网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视频流和内容分发网&#34;&gt;#&lt;/a&gt; 视频流和内容分发网&lt;/h2&gt;
&lt;h3 id=&#34;dash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dash&#34;&gt;#&lt;/a&gt; DASH&lt;/h3&gt;
&lt;p&gt;Dynamic Adaptive Streaming over HTTP 经 HTTP 的动态适应性流&lt;/p&gt;
&lt;p&gt;服务器：将视频文件分割成多个块，每个块独立存储，编码于不同码率，告示文件提供不同块的 URL&lt;/p&gt;
&lt;p&gt;客户端：获取告示文件，测量服务器到客户端的带宽，选择合适的码率的编码块&lt;/p&gt;
&lt;h3 id=&#34;内容分发网cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内容分发网cdn&#34;&gt;#&lt;/a&gt; 内容分发网 CDN&lt;/h3&gt;
&lt;p&gt;Content Distribution Network CDN&lt;/p&gt;
&lt;p&gt;做一些 copy&lt;/p&gt;
&lt;h2 id=&#34;套接字编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字编程&#34;&gt;#&lt;/a&gt; 套接字编程&lt;/h2&gt;
&lt;h3 id=&#34;tcp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp编程&#34;&gt;#&lt;/a&gt; TCP 编程&lt;/h3&gt;
&lt;h3 id=&#34;udp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp编程&#34;&gt;#&lt;/a&gt; UDP 编程&lt;/h3&gt;
</content>
        <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
        <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
        <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2022-09-10T16:20:37.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/</id>
        <title>Lecture01</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/"/>
        <content type="html">&lt;p&gt;本系列参考中科大郑铨老师网课和《计算机网络：自顶向下》整理。&lt;/p&gt;
&lt;p&gt;因为是听完课很久之后整理的，所以只整理了纲要（趴&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一章-概论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-概论&#34;&gt;#&lt;/a&gt; 第一章 概论&lt;/h1&gt;
&lt;h2 id=&#34;什么是internet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是internet&#34;&gt;#&lt;/a&gt; 什么是 Internet？&lt;/h2&gt;
&lt;h3 id=&#34;从构成因特网的基本硬件和软件组件理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从构成因特网的基本硬件和软件组件理解&#34;&gt;#&lt;/a&gt; 从构成因特网的基本硬件和软件组件理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;节点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机及其上运行的应用程序&lt;/li&gt;
&lt;li&gt;路由器、交换机等网络交换设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接入网链路：主机连接到互联网的链路&lt;/li&gt;
&lt;li&gt;主干链路：路由器间的链路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;#&lt;/a&gt; 从服务角度、分布式应用提供服务的联网基础设施理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用通信设施进行通信的分布式应用&lt;/li&gt;
&lt;li&gt;通信基础设施为 apps 提供编程接口（通信服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是协议&#34;&gt;#&lt;/a&gt; 什么是协议？&lt;/h2&gt;
&lt;p&gt;协议定义了在两个或多个通信实体之间交换的报文的&lt;strong&gt;格式和顺序&lt;/strong&gt;，以及报文发送和 / 或接收一条报文或其他事件所采取的&lt;strong&gt;动作&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;网络结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络结构&#34;&gt;#&lt;/a&gt; 网络结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络边缘&lt;/p&gt;
&lt;p&gt;端系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端 / 服务器模式&lt;/li&gt;
&lt;li&gt;对等（peer-peer）模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络核心&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电路交换&lt;/p&gt;
&lt;p&gt;频分复用（FDM，Frequency-Division Multiplexing）和时分复用（TDM, Time-Division Multiplexing）&lt;/p&gt;
&lt;p&gt;独享资源，不共享，用于电话，不适合计算机之间的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换&lt;/p&gt;
&lt;p&gt;储存和转发、时延（节点处理时延、排队时延、传输时延、传播时延）和分组丢失、转发表和路由选择协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据报网络&lt;/li&gt;
&lt;li&gt;虚电路网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接入网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家庭接入：DSL（数字用户线）、电缆、FTTH（光纤到户）、拨号和卫星&lt;/li&gt;
&lt;li&gt;企业（和家庭）接入：以太网和 WiFi&lt;/li&gt;
&lt;li&gt;广域无线接入：3G 和 LTE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理媒体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导引型媒体
&lt;ul&gt;
&lt;li&gt;双绞铜线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非导引型媒体
&lt;ul&gt;
&lt;li&gt;陆地无线电信道&lt;/li&gt;
&lt;li&gt;卫星无线电信道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;internet结构和isp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#internet结构和isp&#34;&gt;#&lt;/a&gt; Internet 结构和 ISP&lt;/h2&gt;
&lt;p&gt;互联网络结构：网络的网络&lt;/p&gt;
&lt;p&gt;端系统通过接入 ISPs（Internet Service Providers）连接到互联网中&lt;/p&gt;
&lt;p&gt;因特网内容服务商（ICP, Internet Content Providers）会构建自己的网络&lt;/p&gt;
&lt;h2 id=&#34;协议层次及其服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议层次及其服务模型&#34;&gt;#&lt;/a&gt; 协议层次及其服务模型&lt;/h2&gt;
&lt;p&gt;上层依赖下层提供的服务，并创造新的服务和功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;p&gt;为人类用户或者其他用户进程提供网络应用服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运输层&lt;/p&gt;
&lt;p&gt;主机和主机的数据传输&lt;/p&gt;
&lt;p&gt;细分网络层的服务，进程到进程（port）&lt;/p&gt;
&lt;p&gt;将不可靠的通信变成可靠的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层&lt;/p&gt;
&lt;p&gt;为数据报从源到目的选择路由&lt;/p&gt;
&lt;p&gt;主机主机之间的通信，端到端通信，不可靠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路层&lt;/p&gt;
&lt;p&gt;point to point 相邻网络节点间的数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理层&lt;/p&gt;
&lt;p&gt;在线路上传送 bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
        <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
        <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2022-09-09T01:54:05.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
        <title>Lecture01-计算机系统概述</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;第一讲，以及对于书籍的第一章重点知识点整理&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;课程随笔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程随笔&#34;&gt;#&lt;/a&gt; 课程随笔&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用 电子 数字 计算机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用&lt;/p&gt;
&lt;p&gt;电子&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;h3 id=&#34;组织与结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组织与结构&#34;&gt;#&lt;/a&gt; 组织与结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;结构 (对于程序员是可见的)
&lt;ul&gt;
&lt;li&gt;一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别&lt;/li&gt;
&lt;li&gt;包括：指令集、各类数据类型的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织 (对于程序员是不可见的)
&lt;ul&gt;
&lt;li&gt;一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。&lt;/li&gt;
&lt;li&gt;包括：控制信号、存储技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机发展历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历史&#34;&gt;#&lt;/a&gt; 计算机发展历史&lt;/h2&gt;
&lt;p&gt;真空管&lt;/p&gt;
&lt;p&gt;晶体管&lt;/p&gt;
&lt;p&gt;集成电路（scale 越来越大，SSI-&amp;gt;MSI-&amp;gt;LSI-&amp;gt;VLSI-&amp;gt;ULSI）&lt;/p&gt;
&lt;p&gt;摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼结构的实现与演变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼结构的实现与演变&#34;&gt;#&lt;/a&gt; 冯诺依曼结构的实现与演变&lt;/h2&gt;
&lt;h3 id=&#34;cpu-北桥-南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-北桥-南桥&#34;&gt;#&lt;/a&gt; CPU + 北桥 + 南桥&lt;/h3&gt;
&lt;p&gt;芯片近北桥，远离南桥。&lt;/p&gt;
&lt;h4 id=&#34;南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#南桥&#34;&gt;#&lt;/a&gt; 南桥&lt;/h4&gt;
&lt;p&gt;南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理&lt;strong&gt;低速信号&lt;/strong&gt;，通过北桥与中央处理器联系。&lt;br /&gt;
南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。&lt;br /&gt;
PCI、SATA、IDE、USB。&lt;/p&gt;
&lt;h4 id=&#34;北桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#北桥&#34;&gt;#&lt;/a&gt; 北桥&lt;/h4&gt;
&lt;p&gt;北桥设计用来处理&lt;strong&gt;高速信号&lt;/strong&gt;，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。&lt;br /&gt;
芯片组（chipset）的名称就是以北桥芯片的名称来命名的。&lt;br /&gt;
北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。&lt;br /&gt;
PCIE/AGP、Memory、CPU。&lt;/p&gt;
&lt;h3 id=&#34;cpu-pch集成显卡-显示部件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-pch集成显卡-显示部件&#34;&gt;#&lt;/a&gt; CPU + PCH（集成显卡 - 显示部件）&lt;/h3&gt;
&lt;p&gt;PCH 全称为 Platform Controller Hub，是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==&#34;&gt; intel 公司&lt;/span&gt;的集成南桥。&lt;/p&gt;
&lt;p&gt;北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.&lt;/p&gt;
&lt;h2 id=&#34;计算机性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机性能&#34;&gt;#&lt;/a&gt; 计算机性能&lt;/h2&gt;
&lt;h3 id=&#34;cpu性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
&lt;p&gt;时钟频率 / 时钟周期&lt;/p&gt;
&lt;p&gt;CPI&lt;/p&gt;
&lt;p&gt;MIPS（每秒百万条指令）&lt;/p&gt;
&lt;p&gt;MRLOPS（每秒百万条浮点操作）&lt;/p&gt;
&lt;p&gt;基准程序&lt;/p&gt;
&lt;h3 id=&#34;性能设计的基本原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能设计的基本原则&#34;&gt;#&lt;/a&gt; 性能设计的基本原则&lt;/h3&gt;
&lt;p&gt;大概率事件优先原则&lt;/p&gt;
&lt;p&gt;阿姆代尔定律 Amdahl 定律&lt;/p&gt;
&lt;h1 id=&#34;对应书籍整理-计算机系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应书籍整理-计算机系统概述&#34;&gt;#&lt;/a&gt; 对应书籍整理 - 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机结构&#34;&gt;#&lt;/a&gt; 计算机结构&lt;/h2&gt;
&lt;h3 id=&#34;硬件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件&#34;&gt;#&lt;/a&gt; 硬件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器 —— 各种算数逻辑运算&lt;/li&gt;
&lt;li&gt;控制器 —— 对指令译码并送出操作控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器 —— 存放指令和数据&lt;/p&gt;
&lt;p&gt;包括 ROM 芯片和 RAM 芯片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;li&gt;高速缓存（cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外存储器&lt;/p&gt;
&lt;p&gt;磁盘、磁带存储器、光盘存储器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 设备 —— 计算机和用户之间的信息交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件&#34;&gt;#&lt;/a&gt; 软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统软件 —— 介于计算机硬件和应用软件之间的各种软件
&lt;ul&gt;
&lt;li&gt;操作系统软件&lt;/li&gt;
&lt;li&gt;语言处理系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;各类实用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件
&lt;ul&gt;
&lt;li&gt;办公自动化软件&lt;/li&gt;
&lt;li&gt;互联网应用软件&lt;/li&gt;
&lt;li&gt;多媒体处理软件&lt;/li&gt;
&lt;li&gt;股票分析软件&lt;/li&gt;
&lt;li&gt;游戏软件&lt;/li&gt;
&lt;li&gt;管理信息系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;程序开发和执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序开发和执行过程&#34;&gt;#&lt;/a&gt; 程序开发和执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;高级语言、低级语言（汇编语言）-&amp;gt; 机器语言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;对应计算机用户&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;最终用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级语言虚拟机&lt;/td&gt;
&lt;td&gt;高级语言程序员或者应用程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汇编语言虚拟机&lt;/td&gt;
&lt;td&gt;汇编语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统虚拟机&lt;/td&gt;
&lt;td&gt;系统管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器语言虚拟机&lt;/td&gt;
&lt;td&gt;机器语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源程序&lt;/strong&gt;通过&lt;strong&gt;编译程序和汇编程序&lt;/strong&gt;得到&lt;strong&gt;目标程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu性能-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能-2&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-09-08T12:30:32.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</id>
        <title>Lecture01-计算机网络概述</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;鉴于 zhy 妈妈的笔记过于全面，此系列笔记仅作一些补充和重点记忆强化。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;易混的英文单词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#易混的英文单词&#34;&gt;#&lt;/a&gt; 易混的英文单词&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;单元英文&lt;/th&gt;
&lt;th&gt;单元中文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;packets&lt;/td&gt;
&lt;td&gt;报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;frames&lt;/td&gt;
&lt;td&gt;帧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;运输层&lt;/td&gt;
&lt;td&gt;segments&lt;/td&gt;
&lt;td&gt;段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;osi-和-tcpip模型对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#osi-和-tcpip模型对比&#34;&gt;#&lt;/a&gt; OSI 和 TCP/IP 模型对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层次&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;对应的层&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;二进制传输&lt;/td&gt;
&lt;td&gt;信号和介质&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;网络接入层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;介质访问&lt;/td&gt;
&lt;td&gt;帧和介质访问控制&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;网络接入层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;路径选择&lt;/td&gt;
&lt;td&gt;路径选择，最优路径&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;互联网层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;终端到终端通信&lt;/td&gt;
&lt;td&gt;可靠性，流控制，错误纠正&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;进程之间通信如何用户交流&lt;/td&gt;
&lt;td&gt;对话和交流&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;展示层&lt;/td&gt;
&lt;td&gt;展示&lt;/td&gt;
&lt;td&gt;标准&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;给用户展示交互接口&lt;/td&gt;
&lt;td&gt;浏览&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;网络拓扑topology&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络拓扑topology&#34;&gt;#&lt;/a&gt; 网络拓扑 Topology&lt;/h2&gt;
&lt;p&gt;分为物理拓扑和逻辑拓扑&lt;/p&gt;
&lt;p&gt;总线 bus&lt;/p&gt;
&lt;p&gt;环型 ring   双环 dual ring&lt;/p&gt;
&lt;p&gt;星型 star&lt;/p&gt;
&lt;p&gt;树型 tree&lt;/p&gt;
&lt;p&gt;渔网型 complete（mesh）&lt;/p&gt;
&lt;p&gt;蜂窝型 cellular 非常低效&lt;/p&gt;
&lt;h2 id=&#34;网络设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络设备&#34;&gt;#&lt;/a&gt; 网络设备&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;层级&lt;/th&gt;
&lt;th&gt;应用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;media&lt;/td&gt;
&lt;td&gt;介质&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;携带信息流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repeaters&lt;/td&gt;
&lt;td&gt;中继器&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;延长网络的长度，转发，不做过滤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hubs&lt;/td&gt;
&lt;td&gt;集线器&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;不解决冲突，转发，不做过滤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bridges&lt;/td&gt;
&lt;td&gt;网桥&lt;/td&gt;
&lt;td&gt;第二层&lt;/td&gt;
&lt;td&gt;在 lan 上过滤流量，创建冲突域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;switches&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;交换机&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;第二层&lt;/td&gt;
&lt;td&gt;结合网桥和交换机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;routers&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;路由器&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;第三层&lt;/td&gt;
&lt;td&gt;路径选择，ip 逻辑划分，切换到最佳路由&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="互联网计算" scheme="https://quas-modo.github.io/categories/NJUSE/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/" />
        <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2022-09-08T11:49:55.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/07/linear-algebra/Lecture-1-%E8%A1%8C%E5%88%97%E5%BC%8F/</id>
        <title>Lecture 1 行列式</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/07/linear-algebra/Lecture-1-%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
        <content type="html">&lt;h2 id=&#34;n阶行列式的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n阶行列式的性质&#34;&gt;#&lt;/a&gt; n 阶行列式的性质&lt;/h2&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;行列式与它的转置行列式的值相等&lt;/strong&gt;【证明较繁琐】【由此可得，对于行成立的性质，对于列也同样成立】&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对调两行（列）的位置，行列式的值相差一个符号&lt;/strong&gt;【证明较繁琐】&lt;/li&gt;
&lt;li&gt;两行（列）相等的行列式的值为 0（由&lt;strong&gt;定理 2&lt;/strong&gt; 推导）&lt;/li&gt;
&lt;li&gt;行列式可以按任一行（列）展开（由&lt;strong&gt;定理 2&lt;/strong&gt; 推导）&lt;/li&gt;
&lt;li&gt;行列式的任一行（列）元素的公因子可以提到行列式外面&lt;/li&gt;
&lt;li&gt;若行列式某两行（列）对应元素成比例，则行列式的值为 0。&lt;strong&gt;包括 k=0 的情况&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;行列式的任意一行（列）乘以数 k 加到另一行（列）上去，行列式的值不便&lt;/li&gt;
&lt;li&gt;行列式任一行（列）的元素与另一行（列）元素的代数余子式对应乘积之和为零。（由&lt;strong&gt;定理 7&lt;/strong&gt; 推导）&lt;/li&gt;
&lt;li&gt;n 阶范德蒙德行列式&lt;/li&gt;
&lt;li&gt;块三角行列式（AB 在正对角线上）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;n阶行列式解题技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n阶行列式解题技巧&#34;&gt;#&lt;/a&gt; n 阶行列式解题技巧&lt;/h2&gt;
&lt;p&gt;将一行或一列化为大量的 0，然后展开计算&lt;/p&gt;
&lt;p&gt;在转换时，写清楚如何转换，便于后期检查和校对&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;奇数阶反对称行列式值为 0&lt;/li&gt;
&lt;li&gt;上三角、下三角、对角行列式 为对角线上的数的乘积&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="线性代数" scheme="https://quas-modo.github.io/categories/NJUSE/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
        <category term="数学" scheme="https://quas-modo.github.io/tags/%E6%95%B0%E5%AD%A6/" />
        <updated>2022-09-07T08:00:59.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/</id>
        <title>欢迎来到我的世界</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"/>
        <content type="html">&lt;h1 id=&#34;欢迎朋友们来到我的世界~&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欢迎朋友们来到我的世界~&#34;&gt;#&lt;/a&gt; 欢迎朋友们来到我的世界～&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;会在这里&lt;s&gt;不定期&lt;/s&gt;（希望是定期）更新课程笔记、专业书籍笔记整理、书影音杂感以及一些胡言乱语&lt;/p&gt;
&lt;p&gt;欢迎交流&lt;/p&gt;
&lt;p&gt;欢迎加友链&lt;/p&gt;
&lt;p&gt;（逃&lt;/p&gt;
</content>
        <category term="书影音" scheme="https://quas-modo.github.io/categories/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
        <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E4%B9%A6%E5%BD%B1%E9%9F%B3/%E6%9D%82%E8%B0%88/" />
        <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
        <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
        <updated>2022-09-07T07:18:58.000Z</updated>
    </entry>
</feed>
