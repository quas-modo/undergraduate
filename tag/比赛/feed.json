{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/09/26/%E6%AF%94%E8%B5%9B/%E5%A6%82%E4%BD%95%E6%89%8B%E6%90%93%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%BC%96%E8%AF%91%E5%99%A8-1-%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF/",
            "url": "https://quas-modo.github.io/2023/09/26/%E6%AF%94%E8%B5%9B/%E5%A6%82%E4%BD%95%E6%89%8B%E6%90%93%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%BC%96%E8%AF%91%E5%99%A8-1-%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF/",
            "title": "如何手搓一个简易编译器(1)——前端",
            "date_published": "2023-09-26T02:15:24.000Z",
            "content_html": "<p>本篇依托于 2023 年华为毕昇杯 CompilerBagel 组参赛作品和本院 lab 教程。</p>\n<p>受比赛时间限制，性能优化做得比较少，只先考虑满足正确性。</p>\n<p><span id=\"more\"></span></p>\n<p>仓库地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbXBpbGVyQmFnZWwvQ29tcGlsZXJCYWdlbA==\">CompilerBagel</span></p>\n<p>课程网站：<span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MuY29tcGlsZXJzLmNwbC5pY3UvIy8=\">NJU 软件学院编译原理课程</span>，涉及本院课程教程的地方不再赘述。另外，也可以在 b 站关注 <code>ant-hengxin</code> ，我们伟大的蚂蚁老师，并观看相关课程视频。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230926010443166.png\" alt=\"image-20230926010443166\" /></p>\n<p>好用的编译网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2Rib2x0Lm9yZw==\">https://godbolt.org</span></p>\n<p>语言：java（使用语言识别工具 antlr4）</p>\n<p>目标翻译高级语言：sysy（简易删减版的 c）</p>\n<p>中间代码：LLVM</p>\n<p>汇编语言：risc-v</p>\n<p>注：语言要求和测试用例均可在华为毕昇杯的官网上找到，感兴趣的话，也可以来参加这项蛮有趣且在我心中含金量很高的比赛。</p>\n<h2 id=\"antlr\"><a class=\"anchor\" href=\"#antlr\">#</a> antlr</h2>\n<p>首先，将一个高级语言翻译成汇编语言，先要分析它的词法和语法，就和学习英语需要理解单词和句型一样。</p>\n<p>我们使用 antlr 进行词法和语法的分析，我们编写的.g4 文件可参考 <code>/src/main/java/antlr</code>  文件夹。</p>\n<p>在词法和语法方面，在课程实验之外，我们实现增加了浮点数的内容。在编写完.g4 文件之后，可利用下载好的 antlr 包（工具）自动生成辅助类。</p>\n<h2 id=\"仿llvm-api构建\"><a class=\"anchor\" href=\"#仿llvm-api构建\">#</a> 仿 LLVM API 构建</h2>\n<p>参考 <code>/IRBuilder</code>   <code>/Instruction</code></p>\n<p>比赛中，是不允许调用 LLVM 的 API 的（显然，这是一个编译系统设计赛）。</p>\n<p>因此，我们选择手搓了一个简陋版 LLVM API 的系统。</p>\n<p>如何存储基本块、指令的信息？我们构建了一个 Module-FunctionBlock-BaseBlock-Instruction-Operand/Operator 的自上而下的系统存储，以及针对每个指令，我们输出对应的 LLVM 代码 String（在 <code>emit</code>  方法中）</p>\n<p>如何设计 API？我们直接对标了 lab 中使用过的 API，可见下面的部分 API 文档，介绍了部分常用的 API 功能，如生成函数、添加指令、声明变量、模块跳转等。</p>\n<p><strong>输出 LLVM IR 到文件</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PrintModuleToFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>创建模块</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 module</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IRModule</span> <span class=\"token keyword\">module</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">IRModuleCreateWithName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化 IRBuilder，后续将使用这个 builder 去生成 LLVM IR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IRBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token class-name\">IRCreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 可以通过下面的语句为 LLVM 的 int 型和 float 型重命名方便以后使用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Type</span> int32Type <span class=\"token operator\">=</span> <span class=\"token class-name\">IRInt32Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Type</span> floatType <span class=\"token operator\">=</span> <span class=\"token class-name\">IRFloatType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>创建全局变量 / 局部变量</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 局部变量 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 为变量分配内存地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ValueRef</span> <span class=\"token class-name\">IRBuildAlloca</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">,</span> <span class=\"token string\">\"_tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将 valueRef 存入 pointer 指向的内存中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">ValueRef</span> <span class=\"token class-name\">IRBuildStore</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> valueRef<span class=\"token punctuation\">,</span> pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 从内存中将值取出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">ValueRef</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">IRBuildLoad</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*pointer: ValueRef*/</span>pointer<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*varName:String*/</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 申明全局变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">ValueRef</span> <span class=\"token class-name\">IRAddGlobal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span> <span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">,</span> <span class=\"token string\">\"globalVarName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 初始化全局变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">IRSetInitializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span> <span class=\"token punctuation\">,</span> valueRef <span class=\"token punctuation\">,</span> valueRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>生成函数</strong></p>\n<p>● 先生成返回值类型 (Type)</p>\n<p>● 多个参数时需先生成函数的参数类型，再生成函数类型</p>\n<p>● 用生成的函数类型去生成函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生成返回值类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Type</span> returnType <span class=\"token operator\">=</span> int32Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 生成函数参数类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>int32Type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>floatType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 生成函数类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Type</span> funcType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctionType</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 生成函数，即向之前创建的 module 中添加函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">FunctionBlock</span> function <span class=\"token operator\">=</span> <span class=\"token class-name\">IRAddFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> funcType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>创建基本块并添加指令</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过如下语句在函数中加入基本块，一个函数可以加入多个基本块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BaseBlock</span> block1 <span class=\"token operator\">=</span> <span class=\"token class-name\">IRAppendBasicBlock</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mainEntry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 选择要在哪个基本块后追加指令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IRPositionBuilderAtEnd</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> block1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// TODO：Add, Sub, Mul, (F/S)Div, Br, ... </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">ValueRef</span> <span class=\"token class-name\">IRBuildAdd</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> lhsValRef<span class=\"token punctuation\">,</span> rhsValRef<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 决定跳转到哪个块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">IRBuildBr</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> block1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 条件跳转指令，选择跳转到哪个块</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">IRBuildCondBr</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/*condition:ValueRef*/</span> condition<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*ifTrue:BaseBlock*/</span> ifTrue<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*ifFalse:BaseBlock*/</span> ifFalse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 生成比较指令</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">ValueRef</span> condition <span class=\"token operator\">=</span> <span class=\"token class-name\">IRBuildICmp</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* 这是个 int 型常量，表示比较的方式 */</span><span class=\"token class-name\">IRIntEQ</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> zero<span class=\"token punctuation\">,</span> <span class=\"token string\">\"condition = n == 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/* 上面参数中的常量包含如下取值</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    IRIntEQ,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    IRIntNE,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    IRIntUGT,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    IRIntUGE,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    IRIntULT,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    IRIntULE,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    IRIntSGT,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    IRIntSGE,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    IRIntSLT,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    IRIntSLE,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 函数返回指令</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">LLVMBuildRet</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*result:ValueRef*/</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"visitor的改写\"><a class=\"anchor\" href=\"#visitor的改写\">#</a> visitor 的改写</h2>\n<p>参考 <code>IRGenVisitor.java</code></p>\n<p>这里采用 visitor 遍历语法树的方式生成类 LLVM 中间代码。</p>\n<p>课程实验中，我们逐步实现了返回常数的主函数、局部变量定义、加减乘除、函数定义和调用、全局变量定义、条件表达式、控制流（无条件跳转、条件跳转、if、while、break、continue）、一维数组。</p>\n<p>相较于课程实验，我们增加了浮点数、类型转换、多维数组的访问和初始化等内容。</p>\n<h2 id=\"写在最后\"><a class=\"anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>虽然编译原理课程并不完整，比如没有教更多后端和性能优化的内容，但是没有前端积累的 lab 经验，我们就没有信心走完剩下的全部，在此感谢蚂蚁和 fy 老师的悉心教导，也希望你软 byyl 课越来越好～</p>\n<p>下一篇来聊聊如何手搓后端。</p>\n",
            "tags": [
                "比赛",
                "华为毕昇杯"
            ]
        }
    ]
}