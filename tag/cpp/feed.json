{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "url": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "title": "Lecture14-模板",
            "date_published": "2023-02-08T09:49:10.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140245554.png\" alt=\"image-20221213140245554\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140325903.png\" alt=\"image-20221213140325903\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140639104.png\" alt=\"image-20221213140639104\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140700118.png\" alt=\"image-20221213140700118\" /></p>\n<p>反而变得复杂、可读性变差</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140851851.png\" alt=\"image-20221213140851851\" /></p>\n<p>添加新的声明 <code>template &lt;typename T&gt;</code></p>\n<p>使用 typename 来声明类型参数而不是 class，防止产生歧义。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142015728.png\" alt=\"image-20221213142015728\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142501077.png\" alt=\"image-20221213142501077\" /></p>\n<p>如何处理 max (x,m) 的处理【x 和 m 的类型不一样】？</p>\n<p>可以定义一个 max 的重载函数。</p>\n<p>非模板函数、模板函数（显式具体化）、重载函数 —— 编译器会优先调用重载函数、显式具体化的模板函数，然后是非模板函数，不会出现歧义。函数模板和函数重载可以配合在一起使用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142850552.png\" alt=\"image-20221213142850552\" /></p>\n<p>类也可以模板化。</p>\n<p>左边是初始版本，右边是类模板。</p>\n<p>在类外定义函数的时候，需要再次声明类型参数 T。 <code>template &lt;class T&gt;</code></p>\n<p>创建的时候需要显式实例化，int 和 double 的 Stack 是两个类。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143356564.png\" alt=\"image-20221213143356564\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143809099.png\" alt=\"image-20221213143809099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144212201.png\" alt=\"image-20221213144212201\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144522445.png\" alt=\"image-20221213144522445\" /></p>\n<p>cpp 完整的定义通常定义在头文件中</p>\n<p>file2.cpp 找不到 max 定义，也找不到完整的 S 代码</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144541044.png\" alt=\"image-20221213144541044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213150026993.png\" alt=\"image-20221213150026993\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141328851.png\" alt=\"image-20221220141328851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141344849.png\" alt=\"image-20221220141344849\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141355901.png\" alt=\"image-20221220141355901\" /></p>\n<p>输入输出流的重定向</p>\n<p>先新建一个输入流  <code>ifstream in(&quot;in.txt&quot;);</code></p>\n<p>保存输入流</p>\n<p>重置输入流</p>\n<p>测试用例可以从文件读入并输出到文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141909130.png\" alt=\"image-20221220141909130\" /></p>\n<p>不能作为类的成员函数进行重载</p>\n<p>不正确的解决方案</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141922509.png\" alt=\"image-20221220141922509\" /></p>\n<p>正确的解决方案</p>\n<p>非虚函数进行虚化，非虚接口。</p>\n<p>全局函数针对不同的类也有派生类。调用虚函数。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141942718.png\" alt=\"image-20221220141942718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142000257.png\" alt=\"image-20221220142000257\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142011316.png\" alt=\"image-20221220142011316\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142028306.png\" alt=\"image-20221220142028306\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture13-newdelete/",
            "url": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture13-newdelete/",
            "title": "Lecture13-newdelete",
            "date_published": "2023-02-08T09:49:01.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152207062.png\" alt=\"image-20221208152207062\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152217123.png\" alt=\"image-20221208152217123\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152525691.png\" alt=\"image-20221208152525691\" /></p>\n<p>如何记录可用的位置？</p>\n<p>用数组或者链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153029941.png\" alt=\"image-20221208153029941\" /></p>\n<p>如何 new</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153043266.png\" alt=\"image-20221208153043266\" /></p>\n<p>如何 delete</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153107962.png\" alt=\"image-20221208153107962\" /></p>\n<p>自嵌入链表形式的缺点：</p>\n<p>？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153833507.png\" alt=\"image-20221208153833507\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153642961.png\" alt=\"image-20221208153642961\" /></p>\n<p>这样可以减少 new 和 delete 的次数</p>\n<p>使用 template 推广到其他使用场景。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "url": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "title": "Lecture12-多态",
            "date_published": "2023-02-08T09:48:46.000Z",
            "content_html": "<h1 id=\"lecture12-多态\"><a class=\"anchor\" href=\"#lecture12-多态\">#</a> Lecture12 - 多态</h1>\n<p>&amp; 引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p>\n<p>引用的声明方法：类型标识符 &amp; 引用名 = 目标变量名；</p>\n<p>return *this 返回的是当前对象的克隆或者本身（若返回类型为 A， 则是拷贝， 若返回类型为 A&amp;， 则是本身 ）。return this 返回当前对象的地址（指向当前对象的指针）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206140630613.png\" alt=\"image-20221206140630613\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129140810020.png\" alt=\"image-20221129140810020\" /></p>\n<h2 id=\"操作符重载\"><a class=\"anchor\" href=\"#操作符重载\">#</a> 操作符重载</h2>\n<h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3>\n<ol>\n<li><strong>名同、参数不同</strong>，返回值不同没有用的：参数顺序、参数类型匹配 (找到最佳匹配)</li>\n<li>静态绑定</li>\n</ol>\n<h3 id=\"歧义控制\"><a class=\"anchor\" href=\"#歧义控制\">#</a> 歧义控制</h3>\n<p>最佳匹配:</p>\n<ol>\n<li>原则一：这个匹配每一个参数不必其他的匹配更差</li>\n<li>原则二：这个匹配有一个参数更精确匹配</li>\n</ol>\n<p>整型提升：标准转化都是一视同仁的（char to unsigned char, char to double）</p>\n<p>窄转换：是被允许的，把表数范围大的 赋值给表数范围小的叫做窄转换，特点是 不安全 不是自动的 可能会发生精度丢失 需要进行强制类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129141712045.png\" alt=\"image-20221129141712045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129142310557.png\" alt=\"image-20221129142310557\" /></p>\n<p>至少要包含一个用户自定义的类型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143856395.png\" alt=\"image-20221129143856395\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143908332.png\" alt=\"image-20221129143908332\" /></p>\n<h3 id=\"可重载的操作符\"><a class=\"anchor\" href=\"#可重载的操作符\">#</a> 可重载的操作符</h3>\n<p>操作符的重载本质上是函数的调用，不能够改变原来的语法</p>\n<p>不可以重载的操作符：</p>\n<p><code>.</code>  (成员访问操作符)、</p>\n<p><code>.*</code>  (成员指针访问运算符，如下)、</p>\n<p><code>::</code>  (域操作符)、</p>\n<p><code>?:</code>  (条件操作符)、</p>\n<p><code>sizeof</code>  也不重载</p>\n<ol>\n<li>原因：前两个为了防止类访问出现混乱</li>\n<li>:: 后面是名称不是变量</li>\n<li>?: 条件运算符是跳转和流程控制，重载之后会出现理解的偏差</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150203584.png\" alt=\"image-20221129150203584\" /></p>\n<ol>\n<li>格式: <code>&lt;ret type&gt;operator #(&lt;arg&gt;)</code></li>\n<li>this: 隐含，必然是第一个参数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150334475.png\" alt=\"image-20221129150334475\" /></p>\n<p>全局函数要有两个参数</p>\n<p>？不懂</p>\n<p>注意: <code>=</code> 、 <code>()</code> 、 <code>[]</code> 、 <code>-&gt;</code>  不可以作为全局函数重载</p>\n<ul>\n<li>大体上来讲，C++ 一个类本身对这几个运算符就已经有了相应的解释了。</li>\n<li>如果将这四种符号进行友元全局重载，则会出现一些冲突</li>\n<li>下标和箭头运算符为什么？有保留调用顺序，我们希望能保留原来的顺序，而全局不能要求，而成员函数的 this 就可以解决这个问题</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDc4MTEwNy9hcnRpY2xlL2RldGFpbHMvOTgxNDc5Mzg=\">参考</span></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129151553515.png\" alt=\"image-20221129151553515\" /></p>\n<p>需要支持一些交换律，全局函数可以作为补充</p>\n<p>全局函数作为补充：</p>\n<ol>\n<li>单目运算符、类型转换函数最好重载为类的成员函数（不存在上图出现的情况）（单目操作不需要补充）</li>\n<li>双目运算符最好重载为类的友元函数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141107489.png\" alt=\"image-20221206141107489\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141117260.png\" alt=\"image-20221206141117260\" /></p>\n<p>​\t返回什么值，由应用场景决定，返回右值的就要按值传递，临时变量。</p>\n<p>​\t四则运算大多数都是右值。</p>\n<p>​\t其他大多数都是左值。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141829112.png\" alt=\"image-20221206141829112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141838660.png\" alt=\"image-20221206141838660\" /></p>\n<p>prefix 和 postfix 是不一样的。</p>\n<p>prefix &amp; 返回引用</p>\n<p>postfix 返回值 dummy argument 传值没有用，仅作为区分</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> =</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206142025129.png\" alt=\"image-20221206142025129\" /></p>\n<p>如果程序员没有提供等号的操作符重载，编译器会提供默认的赋值操作符重载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值操作符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// A a (b); 拷贝构造函数</span></pre></td></tr></table></figure><p>必须同时有赋值操作符和拷贝构造函数。</p>\n<p>一个对象只能被初始化一次，所以需要有赋值。</p>\n<p>拷贝构造函数效率更高，且会被经常使用（函数的传参）。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144008728.png\" alt=\"image-20221206144008728\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>等号是右结合的</p>\n<p>a = b = c</p>\n<p>(a = b) = c</p>\n<p>可以按左值 -》传递引用</p>\n<p>内存可能不够？</p>\n<p>这段代码写得不好，应该<strong>先申请，再释放</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>temp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144737520.png\" alt=\"image-20221206144737520\" /></p>\n<p>上面那个代码如果出现 “自我赋值”，会出现错误，把数据删除了。</p>\n<p>解决方法 1：做一个额外的检测。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// rhs  right hand side</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加上正同测试</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上只是一个很简单的操作</span></pre></td></tr></table></figure><p>解决方法 2：先申请再释放可以解决。</p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> []</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206150836412.png\" alt=\"image-20221206150836412\" /></p>\n<p>可以有两个重载函数吗？可以。</p>\n<p>在前文歧义控制的最佳匹配中，可以解释，为什么 s 的构建会匹配第一个重载函数，cs 则会调用第二个重载函数。因为是” 更精确的匹配 “</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aacd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一个重载加上 const 可以使得 const 或者非 const 对象都可以调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span><span class=\"token char\">'const'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const 版本不想被赋值 (返回 const 的)，非 const 版本想要被赋值，之后再进行重载的时候就需要同时重载两个</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206152243321.png\" alt=\"image-20221206152243321\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153301599.png\" alt=\"image-20221206153301599\" /></p>\n<p>用于内存资源、多维数组的管理。</p>\n<p>wrapper</p>\n<p>隐式转换，explicit 禁用。</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> ()</h3>\n<p>函数调用、类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153818186.png\" alt=\"image-20221206153818186\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206154436607.png\" alt=\"image-20221206154436607\" /></p>\n<p>问题：为什么禁止在类外禁止重载赋值操作符？</p>\n<ol>\n<li>如果没有类内提供一个赋值操作符，则编译器会默认提供一个类内的复制操作符</li>\n<li>查找操作符优先查找类内，之后查找全局，所以全局重载赋值操作符不可能被用到</li>\n</ol>\n<h3 id=\"-\"><a class=\"anchor\" href=\"#-\">#</a> -&gt;</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208141511572.png\" alt=\"image-20221208141511572\" /></p>\n<p>CPanel 中有一个 CPen，需要修改 pen 的颜色</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPanel c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">getPen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 箭头重定义之后</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c<span class=\"token operator\">-></span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重载时按照一元操作符重载描述</p>\n<p>必须返回指针类型？不是，还可以返回一些能够进行箭头操作的引用。</p>\n<h3 id=\"prevent-memory-leak\"><a class=\"anchor\" href=\"#prevent-memory-leak\">#</a> prevent memory leak</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208143634290.png\" alt=\"image-20221208143634290\" /></p>\n<p>一定不会出现内存泄漏吗？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//return 的时候就没有办法 delete 了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以上是</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>多出口</strong>程序的处理出现了问题。</p>\n<ol>\n<li>\n<p>用 RAII 进行处理。将 <code>A *p = new A;</code>  写成  <code>AWrapper p(new A);</code> ，资源和对象同生命周期，栈上的对象一定会消亡，不需要管理多出口问题，且是可控的。</p>\n<p>将箭头操作符重载  <code>A *operator -&gt; () &#123; return p;&#125; </code>  使得申请的资源暴露，就像普通的指针一样使用。</p>\n</li>\n<li>\n<p>所有类型都需要写一个 wrapper 吗？</p>\n<p>不需要，利用泛型 / 模板解决。</p>\n</li>\n<li>\n<p>如此用 wrapper 封装，有什么局限性？</p>\n<p>资源和对象必须同生命周期。</p>\n<p>解决方法：例如，shared_ptr</p>\n</li>\n</ol>\n<h3 id=\"new-delete\"><a class=\"anchor\" href=\"#new-delete\">#</a> new、delete</h3>\n<p>new 和 delete 的操作步骤</p>\n<p>new</p>\n<ol>\n<li>获得一块内存空间</li>\n<li>调用构造函数</li>\n<li>返回一个正确的指针</li>\n</ol>\n<p>delete</p>\n<ol>\n<li>调用析构函数</li>\n<li>确定指向分配空间的指针</li>\n<li>归还内存空间</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144624639.png\" alt=\"image-20221208144624639\" /></p>\n<p>系统自助管理的缺点：系统频繁调用系统的存储管理，影响效率。并且会造成内存碎片。</p>\n<p>重载 new 和 delete 之后：程序自身管理内存，提高效率</p>\n<p>重载过的 new 和 delete 是静态成员：默认是 static，不能调用非静态函数</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144830546.png\" alt=\"image-20221208144830546\" /> 返回类型：void * ，不知道 new 什么类型</p>\n<p>返回参数：第一个参数是固定的，其他参数可有可无。系统知道要申请的大小，参数 size_t 是给程序员用的。</p>\n<p>new 是可以被继承的。</p>\n<p>定位 new   <code>A *p =  new (place) A</code></p>\n<p>可以自己在栈上申请一块内存，反复新建和销毁 A。好处是，效率高（？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208151134563.png\" alt=\"image-20221208151134563\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture11-%E7%BB%A7%E6%89%BF%E3%80%81%E8%99%9A%E5%87%BD%E6%95%B0/",
            "url": "https://quas-modo.github.io/2023/02/08/NJUSE/cpp/Lecture11-%E7%BB%A7%E6%89%BF%E3%80%81%E8%99%9A%E5%87%BD%E6%95%B0/",
            "title": "Lecture11-继承、虚函数",
            "date_published": "2023-02-08T09:47:48.000Z",
            "content_html": "<h1 id=\"lecture11-继承-虚函数\"><a class=\"anchor\" href=\"#lecture11-继承-虚函数\">#</a> Lecture11 - 继承、虚函数</h1>\n<p><strong>能声明成 const 就声明成 const</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115142752636.png\" alt=\"image-20221115142752636\" /></p>\n<h2 id=\"单继承\"><a class=\"anchor\" href=\"#单继承\">#</a> 单继承</h2>\n<ol>\n<li>\n<p>protected:</p>\n<ol>\n<li>如果没有继承的话，protected 和 private 是相同的</li>\n<li>派生类可以访问基类中 protected 的属性的成员。（student 可以访问自己的 id）</li>\n<li>派生类不可以访问<strong>基类中的对象</strong>的 protected 的属性。（Undergraduate_Student 不能访问自己引用的 student 的 protected 属性）</li>\n<li><strong>派生类含有基类的所有成员变量</strong></li>\n</ol>\n</li>\n<li>\n<p>class 和 struct 的默认权限<br />\n使用 <strong>class</strong> 时，类中的成员默认都是<strong> private</strong> 属性的；</p>\n<p>而使用 <strong>struct</strong> 时，结构体中的成员默认都是 <strong>public</strong> 属性的。</p>\n<p>class 继承默认是 private 继承，而 struct 继承默认是 public 继承</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115144636871.png\" alt=\"image-20221115144636871\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">//id 在 Undergraduated_Student 中仍然是私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> nickname<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">set_ID</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>id <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">strcpy</span> <span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> dept_no<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学院编号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setDeptNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>dept_no <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">set_ID</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>……<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Student<span class=\"token double-colon punctuation\">::</span>nickname<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这样在才能修改可见性</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新定义了一个 private 方法，父类对应方法被隐藏</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Undergraduated_Student us<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>us<span class=\"token punctuation\">.</span><span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以吗？不可以，因为是新的名空间，重定义后面的名空间访问不到</span></pre></td></tr></table></figure><p>基类的方法，将函数指针传给派生类。</p>\n<p>虚函数，virtual，延迟到运行的时候确定调用的函数类型，和 java 类似。</p>\n<p><code>class Undergraduated_Studnet: public Student</code>  在函数定义的时候需要写出 Student</p>\n<h3 id=\"继承方式\"><a class=\"anchor\" href=\"#继承方式\">#</a> 继承方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115143338570.png\" alt=\"image-20221115143338570\" /></p>\n<h3 id=\"继承声明方式\"><a class=\"anchor\" href=\"#继承声明方式\">#</a> 继承声明方式</h3>\n<p>区分声明和定义，前向声明只是告诉别人有这个东西，定义要明确需要占用多少内存空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明的时候是不用声明继承的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 正确声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"基类和继承类的方法关系\"><a class=\"anchor\" href=\"#基类和继承类的方法关系\">#</a> 基类和继承类的方法关系</h3>\n<h4 id=\"基类与派生类中的showinfo访问\"><a class=\"anchor\" href=\"#基类与派生类中的showinfo访问\">#</a> 基类与派生类中的 showInfo 访问</h4>\n<p><strong>隐藏 (不是重写 / 覆盖)</strong>，隐藏基类的所有的 showInfo () 函数，重定义将名空间进行了覆盖</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">//id 在 Undergraduated_Student 中仍然是私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> nickname<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> dept_no<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学院编号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Undergraduated_Student <span class=\"token operator\">*</span>student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Undergraduated_Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    student<span class=\"token operator\">-></span><span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不能够运行，在 undergraduated_student 里面设置之后，student 含参和无参的函数都没有了。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>区分重载、隐藏、重写（覆盖）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4MzUxNzI4OC9hcnRpY2xlL2RldGFpbHMvNDg5NzYwOTc=\">https://blog.csdn.net/zx3517288/article/details/48976097</span></p>\n<p>如何访问父类中被隐藏的函数？</p>\n<p>父类中的所有的函数都不可见：但是我们可以通过指定名空间来完成访问: <code>using Student::showInfo</code> , 所有的版本都可以见，这时候是重写。</p>\n<h4 id=\"继承权限修改\"><a class=\"anchor\" href=\"#继承权限修改\">#</a> 继承权限修改</h4>\n<ol>\n<li>class ABC : private XYZ        //private derivation</li>\n<li>class ABC : public XYZ        //public derivation</li>\n<li>class ABC : protected XYZ        //protected derivation</li>\n<li>class ABC: XYZ               //private derivation by default</li>\n</ol>\n<p>public 继承，protected 继承，private 继承</p>\n<h3 id=\"不可以被继承的部分\"><a class=\"anchor\" href=\"#不可以被继承的部分\">#</a> 不可以被继承的部分</h3>\n<ol>\n<li>\n<p>构造函数和析构函数是不可以被继承的：是对类进行初始化的，无法继承</p>\n</li>\n<li>\n<p>运算符重载函数也是不可以被继承的</p>\n</li>\n</ol>\n<h3 id=\"访问权限的修改方法\"><a class=\"anchor\" href=\"#访问权限的修改方法\">#</a> 访问权限的修改方法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Student<span class=\"token double-colon punctuation\">::</span>nickname<span class=\"token punctuation\">;</span><span class=\"token comment\">//char nickname [16]; 语法上没问题，没有将原来的 nickname 变为私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新定义了一个 private 方法，父类对应方法被隐藏</span></pre></td></tr></table></figure><p>如果重新声明 <code>char nickname[16];</code> ， 并没有修改原来父类中 nickname 访问等级，语法无误，但是语义不对；</p>\n<h3 id=\"友元和protected\"><a class=\"anchor\" href=\"#友元和protected\">#</a> 友元和 protected</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153353920.png\" alt=\"image-20221115153353920\" /></p>\n<p><code>void clobber(Sneaky &amp;s)</code>  通过传入派生类访问基类的 protected 成员。 <code>void clovver(Base &amp;b) </code> 传入基类不能够访问。</p>\n<p>protected 只能由派生类来访问。否则只要声明某基类的派生类，就能够访问该基类的 protected 成员，绕过保护机制，随意访问保护成员。</p>\n<p>友元不具有传递性。不能通过成为派生类的友元而成为基类的友元。</p>\n<h2 id=\"继承的初始化\"><a class=\"anchor\" href=\"#继承的初始化\">#</a> 继承的初始化</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153818892.png\" alt=\"image-20221115153818892\" /></p>\n<p>4<img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115154011142.png\" alt=\"image-20221115154011142\" /></p>\n<p>没有在成员初始化表中指出，则调用默认构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> B<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>B <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 有 B 的 copy 构造函数，b2 的值 copy 错误，编译器无法明确是只 copy x 还是都 copy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b1 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>b2 <span class=\"token number\">0</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造函数调用顺序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如果没有 B 的 copy 构造函数，b2 的值 copy 正确</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>b1 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b2 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 可以 copy x 的 copy 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> B<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>语法糖</p>\n<p><code>using A::A;</code>  继承 A 的构造函数</p>\n<h2 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122101802410.png\" alt=\"image-20221122101802410\" /></p>\n<p>类型相容：类型相同、派生类</p>\n<p>赋值相容（不丢失信息）：类型相同、派生类【发生<strong>对象切片</strong>，属于派生类的属性不复存在】</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A a<span class=\"token punctuation\">;</span> B b<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 相当于调用了 A 的拷贝构造函数，调用哪个，取决于声明的变量是什么类型的</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103030879.png\" alt=\"image-20221122103030879\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tpa<span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 均调用 A 的 f</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103419160.png\" alt=\"image-20221122103419160\" /></p>\n<ol>\n<li>\n<p>前期绑定</p>\n<p>在编译的时候就可以确定【func1\\func2 在编译时就已经确定调用 A 的 f】</p>\n<p>cpp 默认前期绑定</p>\n</li>\n<li>\n<p>动态绑定</p>\n<p>java 虚拟机动态地决定调用哪个版本</p>\n</li>\n<li>\n<p>cpp 是一门注重效率的语言</p>\n<p>cpp 需要通过<strong>显式指出使用后期绑定</strong></p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103808406.png\" alt=\"image-20221122103808406\" /></p>\n<p>在方法前加 virtual 关键字动态绑定</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103859475.png\" alt=\"image-20221122103859475\" /></p>\n<h3 id=\"限制\"><a class=\"anchor\" href=\"#限制\">#</a> 限制</h3>\n<ol>\n<li>成员函数才可以时虚函数，全局函数不能是虚函数</li>\n<li>静态成员函数通过类来调用，编译期间确定，相当于全局函数</li>\n<li>内联成员函数编译时要展开，在编译时需要确定</li>\n<li>构造函数，虚函数表需要构造函数构造，虚函数只有在声明基类指向子类的时候才会调用，构造函数不存在声明类型与构造函数的类型不一致的情况。没有实际意义。</li>\n<li>析构函数（子类会声明新的变量）</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122104329491.png\" alt=\"image-20221122104329491\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 b 的函数</span></pre></td></tr></table></figure><p>如何确定调用哪个？传入一个虚函数表【vtable】</p>\n<p>如何确定虚函数表的偏移？传入一个虚函数指针，vpointer，确认排序，查找函数。</p>\n<p>如何实现查表的操作？ <code>(**((char *)p-4))(p) </code>    (char*) p -4，偏移 4 个字节，第一次解引用解出了虚函数表的指针，第二次解引用解出了 f 的函数指针。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122111714347.png\" alt=\"image-20221122111714347\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>B b<span class=\"token punctuation\">;</span><span class=\"token comment\">//A 的构造函数 A 的 f B 的构造函数，B 的构造函数还未调用，vtable 还没有改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// B::f</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// A::g g 是非虚函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// A::h, B::f, A::g</span></pre></td></tr></table></figure><p>构造函数不应该调用莫名其妙的东西（比如虚函数）</p>\n<p>直到构造函数返回之后，对象方可正常使用（虚函数表才构建好）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// B::f() B::g()</span></pre></td></tr></table></figure><p>虚函数调用非虚函数，类型变为一致。</p>\n<p>非虚函数调用虚函数，非虚函数就是非虚函数，虚函数就是虚函数。【 <strong>非虚接口</strong>， 可以用不同的虚函数来实现这个非虚函数，非虚函数调用虚函数来获得虚函数的特性】【实现算法骨架的复用】</p>\n<h3 id=\"final-override\"><a class=\"anchor\" href=\"#final-override\">#</a> final, override</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122113523933.png\" alt=\"image-20221122113523933\" /></p>\n<p>override 告诉编译器是一个虚函数的重定义。</p>\n<p>final 不能够再 override。</p>\n<p>不能够写成 <code>void f1(int) override</code> ， 这样更改了 f1 的类型</p>\n<p><code>void f2(int)</code>  名隐藏，不能够再调用 <code>d.f2()</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122114428240.png\" alt=\"image-20221122114428240\" /></p>\n<p>纯虚函数用于抽象类，抽象类用于框架中</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122114804082.png\" alt=\"image-20221122114804082\" /></p>\n<p>为什么不能直接设置 display 的空函数，而是设置纯虚函数？</p>\n<p>因为抽象类不能创建对象，而且会出现对象切片，出现在栈上（降低效率）；抽象类不能创建对象，只能通过指针和引用的方式传递参数，保证了一定会出现多态的特性。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122115451339.png\" alt=\"image-20221122115451339\" /></p>\n<p>通过构建非虚函数 <code>CreateButton()</code> ，可以实现更好的代码复用</p>\n<p><strong>抽象工厂模式</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124141423470.png\" alt=\"image-20221124141423470\" /></p>\n<p>是否需要新的析构函数，看是否声明了新的成员变量。</p>\n<p>需要释放新的变量，与基类不同，需要新的析构函数，需要是虚函数。</p>\n<p>调用完 D 的析构函数后，就会调用 B 的析构函数。【<strong>倒着</strong>的次序调用】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124142320235.png\" alt=\"image-20221124142320235\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">*</span>p_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p_a <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 打印 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A <span class=\"token operator\">*</span>p_a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>C c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p_a1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p_a1 <span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 打印 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 如果 class C:public B 仍然打印 0</span></pre></td></tr></table></figure><p>编译器不知道指针指向谁，默认参数值为声明的类型的默认值。</p>\n<p>从效率的角度出发，没有动态绑定参数值，参数值相当于一个全局或者静态的变量，不被改变。</p>\n<p>只有虚函数表示动态的，默认参数是静态的。</p>\n<h3 id=\"公有继承-is_a\"><a class=\"anchor\" href=\"#公有继承-is_a\">#</a> 公有继承 is_a</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124143344316.png\" alt=\"image-20221124143344316\" /></p>\n<p>（嘿嘿公开继承应该不考</p>\n<p><strong>前置条件更弱，后置条件更强。</strong></p>\n<p>比如 base.f (x)，参数要求正整数，返回 int；derive.f (x)，参数要求整数，返回 int 的子集。以上，derive.f (x) 就可以替代 base.f (x)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//v1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不修改的声明为 const 是好习惯</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">// 设置为 private 可以避免父类的方法被单独调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前后校验不变式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Square <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Rectangle <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span><span class=\"token comment\">// 即使 square 声明成 private 方法，改成 rectangle 指针之后，还是可以调用方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token operator\">-></span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//v2 添加虚函数声明</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">// 注意是 public 的</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 问题：如下的操作如果传入正方形</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Widen</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> oldHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原来的高和现在的高不一致，长宽一起增加了</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//v3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">// 修改为 private</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 完全无效，编译时函数即被确定</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Widen</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 编译的时候检查 rectangle 是 public 的，可以通过编译。</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 之后调用的时候发现是虚函数，然后从虚函数表能找到 private 的函数，并且调用。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> oldHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>长方形的性质和正方形的性质不兼容</p>\n<p>程序中的基类和子类，与生活中的一般与特殊并不一致</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    <span class=\"token keyword\">void</span> <span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>D x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>B<span class=\"token operator\">*</span> pB <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pB<span class=\"token operator\">-></span><span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//B:mf</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>D<span class=\"token operator\">*</span> pD <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pD<span class=\"token operator\">-></span><span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//D:mf</span></pre></td></tr></table></figure><p>同一个对象更换指针，就出现了不同的行为。实际上是更换了名空间。</p>\n<p>修改：不要定义继承而来的同名函数。</p>\n<h3 id=\"私有继承-has_a\"><a class=\"anchor\" href=\"#私有继承-has_a\">#</a> 私有继承 has_a</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124151137410.png\" alt=\"image-20221124151137410\" /></p>\n<p>实际上是 Has-A 关系（is a，是这个类的一种，继承，派生类是一个基类对象；has a, 含有这个类，包含，在派生类中拥有一个基类对象）</p>\n<p>Student 私有继承 HumanBeing，则不能够调用 b.eat。</p>\n<p>函数参数无法从派生类隐式转换为基类：如果两个类的继承是私有的，则不能在派生类外将派生类转换成基类对象。不能在派生类外部隐式转化。</p>\n<p>一般私有继承是很罕见的，仅是可以使用基类的 protected 成员。</p>\n<h3 id=\"虚函数的使用情景\"><a class=\"anchor\" href=\"#虚函数的使用情景\">#</a> 虚函数的使用情景</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124152246426.png\" alt=\"image-20221124152246426\" /></p>\n<p>纯虚函数 —— 每个派生类依赖小，自己实现自己的。</p>\n<p>一般虚函数 —— 覆盖功能多，派生类只需要修改部分。依赖性强。</p>\n<p>非虚函数 —— 绝对不要重定义。保证所有的行为一致。</p>\n<h2 id=\"多继承\"><a class=\"anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124152817915.png\" alt=\"image-20221124152817915\" /></p>\n<h3 id=\"名冲突\"><a class=\"anchor\" href=\"#名冲突\">#</a> 名冲突</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153222563.png\" alt=\"image-20221124153222563\" /></p>\n<p>出现名冲突的问题，Bed 和 Sofa 同时都有 SetWeight ()</p>\n<p>如何解决名冲突的问题：</p>\n<ol>\n<li>都是自己设计 —— 基类分解 Base-Class Decomposition，形成<strong>格</strong>的结构</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153341543.png\" alt=\"image-20221124153341543\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153456359.png\" alt=\"image-20221124153456359\" /></p>\n<ol start=\"2\">\n<li>不是自己设计的类 —— 用<strong>名空间的调用</strong>来消除名冲突</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153711861.png\" alt=\"image-20221124153711861\" /></p>\n<h3 id=\"虚基类\"><a class=\"anchor\" href=\"#虚基类\">#</a> 虚基类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124154018657.png\" alt=\"image-20221124154018657\" /></p>\n<p>virtual public 和 public virtual 等价</p>\n<p>虚基类什么时候构造？D 只有一个 A，不能有两个 A。D 先构造 A，BC 不再构造 A。所有对象中只有一个 A 的对象。解决了在菱形设计中名冲突的问题。</p>\n<h3 id=\"内存存储\"><a class=\"anchor\" href=\"#内存存储\">#</a> 内存存储</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124154455909.png\" alt=\"image-20221124154455909\" /></p>\n<p>多继承有多个虚函数表指针 B1、B2、B3。</p>\n<p>B1、B2 中都有 virtual 的 f，那么 D 重写，父类中的虚函数 f 全部都被重写。</p>\n<h1 id=\"期末题型\"><a class=\"anchor\" href=\"#期末题型\">#</a> 期末题型</h1>\n<p>读程序理解（编译是否正确，如果错误，在哪里出了错) 要么得分，要么没分</p>\n<p>手写代码</p>\n<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">using</span> B<span class=\"token double-colon punctuation\">::</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  B <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115152301500.png\" alt=\"image-20221115152301500\" /></p>\n<p>只能修改原来就是可见（public）的</p>\n<p>x 原本就没有权限</p>\n<h2 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  D <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 打印出来为 0，调用的是 B 的 getY</span></pre></td></tr></table></figure><h2 id=\"3\"><a class=\"anchor\" href=\"#3\">#</a> 3</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  D <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里多了参数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 打印出来是 10</span></pre></td></tr></table></figure><h2 id=\"4\"><a class=\"anchor\" href=\"#4\">#</a> 4</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  B <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里声明为 B</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//B 中没有无参数的 setX 函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153218615.png\" alt=\"image-20221115153218615\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/21/NJUSE/cpp/Homework4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://quas-modo.github.io/2022/11/21/NJUSE/cpp/Homework4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "Homework4-内存管理",
            "date_published": "2022-11-20T17:01:58.000Z",
            "content_html": "<p>深拷贝、shared_ptr、memory context<br />\nmap、pair 的应用<br />\n收获很大的一次作业 qvq<br />\n<span id=\"more\"></span></p>\n<h1 id=\"homework4-内存管理相关\"><a class=\"anchor\" href=\"#homework4-内存管理相关\">#</a> Homework4 - 内存管理相关</h1>\n<h2 id=\"编写深拷贝容器\"><a class=\"anchor\" href=\"#编写深拷贝容器\">#</a> 编写深拷贝容器</h2>\n<p>基于我们给的代码框架，编写一个容器 MyContainer，用该容器维护一个堆内存上的数组</p>\n<p>该内存容器是一个典型的 RAII 容器，通过这个练习学习如何使用 RAII 来安全管理资源</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContainer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        _count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            _data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止二次释放</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        _count <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            _data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        _count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    MyContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _data<span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">,</span> Other<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> _data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 去掉了参数当中的 const，写了另外一个版本，没有考虑自己 move 给自己的情况，不然会丢失数据……</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//log：看错题目了，这个函数实现的是拷贝赋值不是移动构造，那没事了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    MyContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        _data <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        Other<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        Other<span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> _count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> _count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// C++11 引入的 initializer_list</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> MyContainer<span class=\"token double-colon punctuation\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    MyContainer <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    MyContainer <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    MyContainer m3 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 1 2 0</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">//copy</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> prev_ptr <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> prev_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 1 2 0 2 0 2 0 2 1</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">// 1 2 0 2 0 2 0 1</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h3>\n<p>无参数、无返回值、不能重载</p>\n<p>离开作用域后自动销毁</p>\n<p>释放空间时记得将指针设为 nullptr，防止出现多次释放和悬挂指针的情况</p>\n<h3 id=\"拷贝构造函数\"><a class=\"anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h3>\n<p>一个对象，多个副本，副本之间是独立的关系。</p>\n<p>创建对象时，用一同类的对象对其初始化的时候进行调用。</p>\n<p>复制拷贝构造、传参拷贝构造、返回值拷贝构造</p>\n<h3 id=\"移动构造函数\"><a class=\"anchor\" href=\"#移动构造函数\">#</a> 移动构造函数</h3>\n<p>移动构造函数移动堆中的资源，即不像复制构造函数复制现有对象的数据并将其分配给新对象移动构造函数只是使<strong>声明对象的指针指向临时对象的数据并清空临时对象的指针</strong>。因此，移动构造函数可以防止在内存中不必要地复制数据。</p>\n<p>移动构造函数的工作看起来有点像默认的成员复制构造函数，但在这种情况下，它会清空临时对象的指针，防止多个对象指向同一内存位置。</p>\n<h3 id=\"扩展学习\"><a class=\"anchor\" href=\"#扩展学习\">#</a> 扩展学习</h3>\n<h4 id=\"explicit关键字\"><a class=\"anchor\" href=\"#explicit关键字\">#</a> explicit 关键字</h4>\n<ol>\n<li>指定构造函数或转换函数 (C++11 起) 为显式，即它不能用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2ltcGxpY2l0X2NvbnZlcnNpb24=\">隐式转换</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2NvcHlfaW5pdGlhbGl6YXRpb24=\">复制初始化</span>.</li>\n<li>explicit 指定符可以与常量表达式一同使用。函数若且唯若该常量表达式求值为 true 才为显式. (C++20 起)</li>\n</ol>\n<p>构造函数为什么会使用 explicit 关键字进行标注</p>\n<ul>\n<li>\n<p>如果不使用 explicit，对于 <code>MyContainer m = 10</code> ，编译器会进行隐式类型转换，此时程序的行为可能不符合我们预期</p>\n</li>\n<li>\n<p>有的时候利用 explicit 的特性可以帮助我们简化代码，但可能会对可读性造成影响</p>\n</li>\n</ul>\n<h4 id=\"成员变量定义时为什么加上\"><a class=\"anchor\" href=\"#成员变量定义时为什么加上\">#</a> 成员变量定义时为什么加上</h4>\n<p>这是一个好习惯，可以防止一些因未初始化问题导致的难以分析的 bug</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"可以尝试在构造函数-拷贝构造-拷贝赋值中插入打印语句查看下列代码的输出\"><a class=\"anchor\" href=\"#可以尝试在构造函数-拷贝构造-拷贝赋值中插入打印语句查看下列代码的输出\">#</a> 可以尝试在构造函数、拷贝构造、拷贝赋值中插入打印语句，查看下列代码的输出</h4>\n<h4 id=\"oo优化\"><a class=\"anchor\" href=\"#oo优化\">#</a> OO 优化</h4>\n<pre><code class=\"language-c++\">MyContainer get()&#123;\n  MyContainer m &#123;1&#125;;\n  return m;\n&#125;\nint main()&#123;\n  MyContainer m = get();\n  return 0;\n&#125;\n</code></pre>\n<ul>\n<li>\n<p>可以先猜测一下共输出多少语句，再运行程序</p>\n<ul>\n<li>\n<p>拷贝了 1 次？2 次？3 次？</p>\n</li>\n<li>\n<p>我在 x86-64 gcc 7.5 上用 - O0 优化的输出结果中，并没有任何拷贝的发生，只有一次构造和一次析构</p>\n<p>cxy 的测试，输出结果如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create my container<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>destroy my container<span class=\"token operator\">!</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>如果实际输出的结果比你预想的要少，可以查看以下链接进一步了解</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTI5NTMxMjcvd2hhdC1hcmUtY29weS1lbGlzaW9uLWFuZC1yZXR1cm4tdmFsdWUtb3B0aW1pemF0aW9u\">https://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization</span></p>\n<p>copy elision 拷贝的省略</p>\n<p>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible 可行的 in practice (restrictions apply 限制应用).</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"报错\"><a class=\"anchor\" href=\"#报错\">#</a> 报错</h3>\n<p>free(): double free detected in tcache 2<br />\nfree（）：在 tcache 2 中检测到双空闲，在执行程序的过程中对同一块内存单元进行了两次 free () 操作</p>\n<h3 id=\"操作符重载\"><a class=\"anchor\" href=\"#操作符重载\">#</a> 操作符重载</h3>\n<p>对于系统的所有操作符，一般情况下，只支持基本数据类型和标准库中提供的 class，对于用户自己定义的 class，如果想支持基本操作，比如比较大小，判断是否相等，等等，则需要用户自己来定义关于这个操作符的具体实现。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWlktRHJlYW0vcC8xMDA2ODk5My5odG1s\">https://www.cnblogs.com/ZY-Dream/p/10068993.html</span></p>\n<h2 id=\"引用计数的共享内存容器-shared-container\"><a class=\"anchor\" href=\"#引用计数的共享内存容器-shared-container\">#</a> 引用计数的共享内存容器 Shared Container</h2>\n<p>目标</p>\n<p>基于我们给的代码框架，编写一个容器 SharedContainer，用该容器维护一个堆内存上的 Content 对象。</p>\n<p>这个堆内存上的对象可被一个或多个 SharedContainer 所共享，当没有 SharedContainer 持有这个对象的话，则销毁这个对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"create \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroy \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedContainer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mem_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>mem_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">delete</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    _data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  SharedContainer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    _data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  SharedContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  Content <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_ref_count<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">//TODO: design your own reference counting mechanism</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  SharedContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  SharedContainer <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  SharedContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  m1 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 需要考虑拷贝构造的时候，自己给自己赋值的情况</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    SharedContainer m3 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  SharedContainer <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    SharedContainer <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m3<span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时已经没有指向 Content1 的指针，应该手动销毁</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"扩展学习待查看\"><a class=\"anchor\" href=\"#扩展学习待查看\">#</a> 扩展学习【待查看】</h3>\n<ol>\n<li>\n<p>思考如何扩展本练习中的共享内存容器，以支持对任意类型内存的共享</p>\n<ul>\n<li>请参考 shared_ptr 的基本原理，可能需要一些模板编程的知识</li>\n</ul>\n</li>\n<li>\n<p>有了 shared_ptr，我们是不是可以只需要创建资源，剩下的都交给 shared_ptr 管理</p>\n<ul>\n<li>\n<p>shared_ptr 可能产生循环引用而导致的内存泄漏</p>\n</li>\n<li>\n<p>shared_ptr 的额外性能开销</p>\n<ul>\n<li>标准库的 shared_ptr 不是线程安全的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>shared_ptr 既然能清理不被使用的内存，那么垃圾收集又是什么？</p>\n<ul>\n<li>前者回收资源是 eager 的；后者回收资源是 lazy 的</li>\n<li>前者有循环引用问题；后者没有</li>\n<li>...</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"智能指针的简介\"><a class=\"anchor\" href=\"#智能指针的简介\">#</a> 智能指针的简介</h4>\n<p>垃圾回收机制已经大行其道，得到了诸多编程语言的支持，例如 Java、Python、C#、PHP 等。而 C++ 虽然从来没有公开得支持过垃圾回收机制，但 C<ins>98/03 标准中，支持使用 auto_ptr 智能指针来实现堆内存的自动回收；C</ins>11 新标准在废弃 auto_ptr 的同时，增添了 unique_ptr、shared_ptr 以及 weak_ptr 这 3 个智能指针来实现堆内存的自动回收。</p>\n<p>相较于普通指针，智能指针可以在适当时机<strong>自动释放分配的内存</strong>。</p>\n<p>C++ 智能指针底层是采用<strong>引用计数</strong>的方式实现的。</p>\n<p>均可直接参考 cppreference。</p>\n<h4 id=\"shared_ptr\"><a class=\"anchor\" href=\"#shared_ptr\">#</a> shared_ptr</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3Lzc4OTguaHRtbA==\">http://c.biancheng.net/view/7898.html</span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 不传入任何实参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 传入空指针 nullptr, 指向空指针，计数为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 明确指向</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者 std::shared_ptr&lt;int> p4 = p3;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 调用移动构造函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 或者 std::shared_ptr&lt;int> p5 = std::move (p4);</span></pre></td></tr></table></figure><p>空的 shared_ptr 指针，其初始引用计数为 0，而不是 1。</p>\n<p>同一普通指针不能同时为多个 shared_ptr 对象赋值，否则会导致程序发生异常。</p>\n<p>在初始化 shared_ptr 智能指针时，还可以自定义所指堆内存的释放规则。对于申请的动态数组来说，shared_ptr 指针默认的释放规则是不支持释放数组的，只能自定义对应的释放规则，才能正确地释放申请的堆内存。</p>\n<h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a> unique_ptr</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94aHkzMDU0LmdpdGh1Yi5pby9jcHAtdW5pcXVlLXB0ci8=\">https://xhy3054.github.io/cpp-unique-ptr/</span></p>\n<ol>\n<li><code>unique_ptr</code>  内部存储一个内置指针，当 <code>unique_ptr</code>  析构时，它的析构函数将会负责析构它持有的对象。</li>\n<li><code>unique_ptr</code>  提供了 <code>operator*()</code>  和 <code>operator-&gt;()</code>  成员函数，像内置指针一样，我们可以使用 * <strong>解引用</strong> unique_ptr，使用 -&gt; 来<strong>访问</strong> unique_ptr 所持有对象的成员。</li>\n<li><code>unique_ptr</code>  并不提供 <strong>copy</strong> 操作，这是为了防止多个 <code>unique_ptr</code>  指向同一对象。</li>\n<li>但 <code>unique_ptr</code>  提供了 <strong>move</strong> 操作，因此我们可以用 <code>std::move()</code>  来转移 unique_ptr。</li>\n</ol>\n<h4 id=\"weak_ptr\"><a class=\"anchor\" href=\"#weak_ptr\">#</a> weak_ptr</h4>\n<p>weak_ptr 是为了配合 shared_ptr 而引入的一种智能指针，它指向一个由 shared_ptr 管理的对象而不影响所指对象的生命周期，也就是将<strong>一个 weak_ptr 绑定到一个 shared_ptr 不会改变 shared_ptr 的引用计数</strong>。不论是否有 weak_ptr 指向，一旦最后一个指向对象的 shared_ptr 被销毁，对象就会被释放。从这个角度看，weak_ptr 更像是 shared_ptr 的一个助手而不是智能指针。</p>\n<p>我们不能使用 weak_ptr 直接访问对象。那么我们如何判断 weak_ptr 指向对象是否存在呢？C++ 中提供了 lock 函数来实现该功能。如果对象存在，lock () 函数返回一个指向共享对象的 shared_ptr，否则返回一个空 shared_ptr。</p>\n<h3 id=\"pointer-指针还是地址自增\"><a class=\"anchor\" href=\"#pointer-指针还是地址自增\">#</a> *pointer  指针还是地址自增？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODIwODAyMS9ob3ctdG8taW5jcmVtZW50LWEtcG9pbnRlci1hZGRyZXNzLWFuZC1wb2ludGVycy12YWx1ZQ==\">https://stackoverflow.com/questions/8208021/how-to-increment-a-pointer-address-and-pointers-value</span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value pointed at by ptr is incremented</span></pre></td></tr></table></figure><p>注意<strong> operator precedence</strong>—— the ++ operator takes precedence over the * operator, and the () operators take precedence over everything else.</p>\n<h2 id=\"内存管理-memory-contextmc\"><a class=\"anchor\" href=\"#内存管理-memory-contextmc\">#</a> 内存管理 memory context (MC)</h2>\n<blockquote>\n<p>主要考察析构函数</p>\n</blockquote>\n<p>由于 libc 原生的内存管理 API 的种种问题（例如，内存泄露和 double-free），某些数据库管理系统基于这些 API  实现了新的动态内存管理机制。具体地，这些实现中引入了一个称为 “memory  context” 的概念（后文简称为 “MC”），动态内存管理不再直接使用  <code>malloc</code>  /  <code>free</code>  等函数，而是调用某个 MC 对象提供的 API 进行。这些 MC 对象被组织为树状结构，如图 1 所示。这样，使用者不再需要为之前分配的每个内存块调用  <code>free</code>  等函数，而是等到相应的 MC 对象被销毁时统一地归还其下的动态内存。同时，由于树状结构的存在，在销毁较为高层的 MC 对象时，处于低层次的  MC 对象也同样会被销毁。这种机制极大降低了管理动态内存的心智负担，更好地避免了内存泄露和 double-free 等问题。</p>\n<p>可参考 Homework4 中 “内存管理” 的 pdf</p>\n<p>经过分析，用左子树表示子节点，用右子树表示兄弟节点构造树的结构。</p>\n<p>“如果一个 MC 有多个子 MC，那么按照创建这些子 MC 的顺序进行销毁”-》可以看出应该采用<strong>后序遍历</strong></p>\n<p>“如果一个 MC 下的内存块，按照分配顺序的逆序（即，后进先出）的顺序进行销毁”-》可以看出用<strong> stack</strong> 的数据结构模拟</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 除了 TODO 标出的部分，不要修改原有的声明和定义，否则后果自负！</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryContext</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   * @param parent 父节点，可能为 nullptr</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 禁止拷贝和移动</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">using</span> chunk_id_t <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk_id_t <span class=\"token operator\">&amp;</span>chunk_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> parentMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> leftMC<span class=\"token punctuation\">;</span><span class=\"token comment\">// 子节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> rightMC<span class=\"token punctuation\">;</span><span class=\"token comment\">// 兄弟节点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  stack<span class=\"token operator\">&lt;</span>chunk_id_t<span class=\"token operator\">></span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  parentMC <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  leftMC <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  rightMC <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parentMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    MemoryContext <span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>leftMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      parent <span class=\"token operator\">-></span> leftMC <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">-></span> rightMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>rightMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      tmp <span class=\"token operator\">-></span> rightMC <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> pointer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pointer <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pointer<span class=\"token operator\">-></span>parentMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    pointer <span class=\"token operator\">=</span> pointer <span class=\"token operator\">-></span> parentMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>leftMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    next <span class=\"token operator\">=</span> child <span class=\"token operator\">-></span> rightMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// delete child;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    child <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  chunk_id_t str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    str <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Chunk \"</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\" freed.\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk_id_t <span class=\"token operator\">&amp;</span>chunk_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  chunk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>E <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>E <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  E<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  F<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3/5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1024/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1024/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8192/1/4095\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">REGISTER_TEST_CASE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span> #name<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>      test_functions_by_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string test_case_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> test_case_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> test_functions_by_name<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test_case_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> test_functions_by_name<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token keyword\">auto</span> fn <span class=\"token operator\">=</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token comment\">// 摸了 1h30min 但是不是很懂</span></pre></td></tr></table></figure><h3 id=\"cpp中this的理解\"><a class=\"anchor\" href=\"#cpp中this的理解\">#</a> cpp 中 this 的理解</h3>\n<p>在 C++ 中，每一个对象都能通过 <strong>this</strong> 指针来访问自己的地址。<strong>this</strong> 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象。</p>\n<h3 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h3>\n<p>pop 不返回参数，只是弹出</p>\n<p>需要用 top 函数进行顶层元素的访问</p>\n<h3 id=\"报错-2\"><a class=\"anchor\" href=\"#报错-2\">#</a> 报错</h3>\n<p>basic_string::_M_construct null not valid 错误的原因</p>\n<p>将 String 初始化为 NULL，这显然是非常降智的</p>\n<h2 id=\"ui-设计\"><a class=\"anchor\" href=\"#ui-设计\">#</a> UI 设计</h2>\n<p>公司 A 开发设计软件。请逐步实现功能。</p>\n<p>具体可参见 UI.pdf</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 改代码的 group 功能有些问题，无法正常访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rectangle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  string id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">double</span> grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">group</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle <span class=\"token operator\">*</span><span class=\"token operator\">></span> mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  string gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> aid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aid <span class=\"token operator\">&lt;</span> bid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp2</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">double</span> agrey <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">double</span> bgrey <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agrey <span class=\"token operator\">&lt;</span> bgrey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agrey <span class=\"token operator\">></span> bgrey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  string delimiter <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  string token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">+</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle<span class=\"token operator\">></span> rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>group<span class=\"token operator\">></span> grp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    op <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      rectangle foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>grey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      rec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      group foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            foo<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      grp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Gray\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>      item<span class=\"token punctuation\">.</span>grey <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token operator\">-></span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象了一个 set 函数，缩了 20 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rectangle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  string id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">red</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">green</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">blue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//struct 的初始化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">double</span> <span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> red <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> green <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> blue <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">//set 归 set， 初始化归初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    red <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> green <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span> blue <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">group</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  string gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">int</span> aid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aid <span class=\"token operator\">&lt;</span> bid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp2</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  string delimiter <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  string token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">+</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle<span class=\"token operator\">></span> rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>group<span class=\"token operator\">></span> grp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    op <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      rectangle foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      rec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      group foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            foo<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      grp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            item<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> gpmem <span class=\"token operator\">=</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gpmem<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>              <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> gpmem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                  item<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Gray\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 佬的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">RECT</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> G<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 将 set 的函数抽象出来重复调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        R <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> G <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span> B <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            R <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            G <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> G<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            B <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            G <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            B <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 不用单独存一个 gray 的量，用函数进行比较</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> R<span class=\"token operator\">*</span><span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> G<span class=\"token operator\">*</span><span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> B<span class=\"token operator\">*</span><span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmpgray</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmpi</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> rects<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>N<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        string cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cin <span class=\"token operator\">>></span> cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            RECT tmp<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            rects<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                cin <span class=\"token operator\">>></span> r <span class=\"token operator\">>></span> g <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                rects<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" G%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> gr <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                cin <span class=\"token operator\">>></span> r <span class=\"token operator\">>></span> g <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">:</span> gr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">int</span> N1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            cin <span class=\"token operator\">>></span> N1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>N1 <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">int</span> gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" G%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            groups<span class=\"token punctuation\">[</span>gid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    string o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    cin <span class=\"token operator\">>></span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">>></span> outputs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> r<span class=\"token operator\">:</span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        outputs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmpgray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> r<span class=\"token operator\">:</span> outputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P\"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>R <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>G <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h3>\n<p>struct 默认成员函数是<strong> public</strong> 的</p>\n<p>struct 可以写函数</p>\n<h3 id=\"pair\"><a class=\"anchor\" href=\"#pair\">#</a> pair</h3>\n<p>pair 的定义 ——pair 可以理解为一个<strong>结构体</strong>，pair 将一对值 (T1 和 T2) 组合成一个值，这一对值可以具有<strong>不同的数据类型</strong>（T1 和 T2），两个值可以分别用 pair 的两个公有函数<strong> first</strong> 和<strong> second</strong> 访问。</p>\n<p>pair 的应用 ——pair 是将 2 个数据组合成一组数据，当需要这样的需求时就可以使用 pair，如 stl 中的 map 就是将 key 和 value 放在一起来保存。另一个应用是，当一个函数需要返回 2 个数据的时候，可以选择 pair。</p>\n<h4 id=\"pair的定义\"><a class=\"anchor\" href=\"#pair的定义\">#</a> pair 的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 创建一个空的 pair 对象（使用默认构造），它的两个元素分别是 T1 和 T2 类型，采用值初始化。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 创建一个 pair 对象，它的两个元素分别是 T1 和 T2 类型，其中 first 成员初始化为 v1，second 成员初始化为 v2。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 以 v1 和 v2 的值创建一个新的 pair 对象，其元素类型分别是 v1 和 v2 的类型。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1 <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 两个 pair 对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者！(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回 true。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p1 <span class=\"token operator\">==</span> p2；                  <span class=\"token comment\">// 如果两个对象的 first 和 second 依次相等，则这两个对象相等；该运算使用元素的 == 操作符。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 返回对象 p1 中名为 first 的公有数据成员</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 返回对象 p1 中名为 second 的公有数据成员</span></pre></td></tr></table></figure><h4 id=\"pair的初始化\"><a class=\"anchor\" href=\"#pair的初始化\">#</a> pair 的初始化</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> anon<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 创建一个空对象 anon，两个元素类型都是 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> word_count<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 创建一个空对象 word_count, 两个元素类型分别是 string 和 int 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> line<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个空对象 line，两个元素类型分别是 string 和 vector 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Joy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 创建一个 author 对象，两个元素类型分别为 string 类型，并默认初始值为 James 和 Joy。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">name_age</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">name_age2</span><span class=\"token punctuation\">(</span>name_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 拷贝构造初始化</span></pre></td></tr></table></figure><h4 id=\"typedef简化\"><a class=\"anchor\" href=\"#typedef简化\">#</a> typedef 简化</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> Author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author <span class=\"token function\">proust</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"March\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Proust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Author <span class=\"token function\">Joy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Joy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"make_pair\"><a class=\"anchor\" href=\"#make_pair\">#</a> make_pair</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1 <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//output: 1 1.2</span></pre></td></tr></table></figure><h3 id=\"struct-initialization\"><a class=\"anchor\" href=\"#struct-initialization\">#</a> struct initialization</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117152152036.png\" alt=\"image-20221117152152036\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhdWxrZzEyL2FydGljbGUvZGV0YWlscy84NTE5ODYyNA==\">https://blog.csdn.net/paulkg12/article/details/85198624</span></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/02/NJUSE/cpp/Lecture10-OOP/",
            "url": "https://quas-modo.github.io/2022/11/02/NJUSE/cpp/Lecture10-OOP/",
            "title": "Lecture10-OOP",
            "date_published": "2022-11-02T12:40:09.000Z",
            "content_html": "<p>OOP 相关<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture10-oop\"><a class=\"anchor\" href=\"#lecture10-oop\">#</a> Lecture10-OOP</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpY29kZXIuZ2l0aHViLmlvLzIwMjAvMDcvMDEvMjAyMC1DLXBsdXMtcGx1cy1hZHZhbmNlZC1wcm9ncmFtbWluZy9DKystT09QLzIwMjAtQy1wbHVzLXBsdXMtYWR2YW5jZWQtcHJvZ3JhbW1pbmctQysrJTIwJUU3JUIxJUJCJUU3JTlBJTg0JUU1JUIwJTgxJUU4JUEzJTg1LyM2LSVFNyVCMSVCQiVFNyU5QSU4NCVFNyVBNyVCQiVFNSU4QSVBOCVFNiU5RSU4NCVFOSU4MCVBMCVFNSU4NyVCRCVFNiU5NSVCMA==\">https://spricoder.github.io/2020/07/01/2020-C-plus-plus-advanced-programming/C++-OOP/2020-C-plus-plus-advanced-programming-C++ 类的封装 /#6 - 类的移动构造函数</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190551858.png\" alt=\"image-20221101190551858\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221029222347755.png\" alt=\"image-20221029222347755\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190605135.png\" alt=\"image-20221101190605135\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190615624.png\" alt=\"image-20221101190615624\" /></p>\n<ol>\n<li>encapsulation\n<ol>\n<li>减少类之间的耦合</li>\n<li>类内部的结构可以自由的进行修改</li>\n<li>对成员进行控制</li>\n<li>对代码的理解性更好</li>\n</ol>\n</li>\n<li>information hidding：不需要知道如何初始化，只需要使用提供的接口</li>\n<li>Cfront 第一个 C++ 的编译器，转为 C</li>\n</ol>\n<ul>\n<li>基于对象：没有继承</li>\n<li>面向对象：封装、继承、多态</li>\n</ul>\n<h2 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101140737002.png\" alt=\"image-20221101140737002\" /></p>\n<p>类中包含成员变量、成员函数</p>\n<p>头文件、源文件：C++ 是一个个编译单元进行编译，所以需要提前知道其他编译单元的相关信息（存储在头文件中），只需要知道声明，不需要知道具体定义，减少编译复杂度</p>\n<ol>\n<li>如果直接将函数定义直接放在头文件里，会建议 compiler 将其作为 inline 函数进行编译。</li>\n<li>如果函数长度很长的话，反复调用的函数调用时间就会占比很小，而相反的话则会很大。</li>\n<li>随便使用内联函数可能是的代码很烂:get 和 set 函数我们选择使用 inline 方式</li>\n<li>代码长度不超过 10 行，不包含 for、switch 等语句。</li>\n</ol>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101140754215.png\" alt=\"image-20221101140754215\" /></p>\n<h4 id=\"构造函数-2\"><a class=\"anchor\" href=\"#构造函数-2\">#</a> 构造函数</h4>\n<ul>\n<li>\n<p>当类中未提供构造函数的时候，编译系统会提供默认构造函数。</p>\n</li>\n<li>\n<p>程序员无论提供有参数的还是无参数的构造函数，编译系统都不再提供，防止干扰程序员本身的意思。</p>\n</li>\n<li>\n<p>成员变量如果是成员对象，则总是会初始化的，需要为成员对象设置构造函数</p>\n</li>\n</ul>\n<h4 id=\"变量的初始化\"><a class=\"anchor\" href=\"#变量的初始化\">#</a> 变量的初始化</h4>\n<ul>\n<li>全局变量和静态变量，未初始化，默认为 0</li>\n<li>局部变量、成员变量，未初始化，默认为不确定的值</li>\n<li>如果没有指定 c++ 默认初始化，则各种变量都会有不确定的值</li>\n<li>编译系统提供的默认构造函数不会对成员变量进行处理，主要功能是<strong>完成对象的初始化，创建标识符，开辟内存空间</strong>，最后再根据传入的参数或者默认值进行对数据的处理。</li>\n<li>构造函数可定义为 <code>private</code> ，避免在其他代码中创建该对象，所以<strong>只能通过类内部的方法进行创建</strong>，而类内部的方法是我自己写的，因此<strong>可以接管对象的创建</strong>，例如保证单例，或者保证只有十个对象创建</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141207824.png\" alt=\"image-20221101141207824\" /></p>\n<p>按照参数列表来对应构造函数</p>\n<h2 id=\"成员初始化表构造函数初始化成员变量的一种方法\"><a class=\"anchor\" href=\"#成员初始化表构造函数初始化成员变量的一种方法\">#</a> 成员初始化表（构造函数初始化成员变量的一种方法）</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTMyNjEvYXJ0aWNsZS9kZXRhaWxzLzg1MDM2MDI1\">https://blog.csdn.net/u010853261/article/details/85036025</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141220879.png\" alt=\"image-20221101141220879\" /></p>\n<h4 id=\"c构造函数的初始化列表定义\"><a class=\"anchor\" href=\"#c构造函数的初始化列表定义\">#</a> C++ 构造函数的初始化列表定义</h4>\n<p>C++ 的构造函数与其他函数不同，构造函数除了有名字，参数列表和函数体之外，还可以有初始化列表，初始化列表<strong>以冒号开头，后跟一系列以逗号分隔的初始化字段</strong>。</p>\n<p>比如下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> id <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化列表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>构造函数的补充\n<ol>\n<li>构造函数：先开辟空间并赋默认值</li>\n<li>成员初始化表：开辟空间的时候就赋值</li>\n</ol>\n</li>\n<li>执行：(常量和引用的声明和定义要放在一起，只能通过这个方法来完成)\n<ol>\n<li><strong>先于构造函数执行</strong></li>\n<li><strong>按类数据成员声明次序</strong>：下面的例子中先 x 再 y 再 z</li>\n</ol>\n</li>\n<li><code>static const</code> : 常量数字，这个是可以在类内部进行初始化 ( <code>static const a = 1;</code> )</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 非静态成员可以初始化</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> z<span class=\"token punctuation\">;</span><span class=\"token comment\">// 引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 签名的冒号后面，用变量 (值) 来进行初始化，这就是初始化表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">z</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>减轻 Compiler 负担:</li>\n</ol>\n<ul>\n<li>正常构造函数中赋值 <code>x = 100</code> ：首先对象构造的时候进行了赋值，之后再次进行了赋值，共计 2 次</li>\n<li>成员初始化表的时候，<strong>只进行了赋值一次</strong>。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>初始化顺序问题</strong>：先执行 p，再执行 size 有问题，按照字面序进行。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CString</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101191054488.png\" alt=\"image-20221101191054488\" /></p>\n<p>必须放在成员初始化表中：</p>\n<ul>\n<li>常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面</li>\n<li>引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</li>\n<li>没有默认构造函数的 class type，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化。</li>\n</ul>\n<h2 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141330420.png\" alt=\"image-20221101141330420\" /></p>\n<p><strong>程序员负责资源的申请和释放</strong></p>\n<p>类的析构函数，它是类的一个成员函数，名字由波浪号加类名构成，是执行与构造函数相反的操作：释放对象使用的资源，并销毁非 static 成员。</p>\n<p>同样的，我们来看看析构函数的几个特点：</p>\n<ol>\n<li>函数名是在类名前加上～，无参数且无返回值。</li>\n<li>一个类只能有且有一个析构函数，如果没有显式的定义，系统会生成一个缺省的析构函数（合成析构函数）。</li>\n<li>析构函数不能重载。<strong>每有一次构造函数的调用就会有一次析构函数的调用。</strong></li>\n</ol>\n<p><strong>声明为 private</strong></p>\n<ol>\n<li>\n<p>系统无法调用析构函数，因为是自动消亡的，内存分配在栈中，<strong>离开作用域就会自动消亡</strong></p>\n</li>\n<li>\n<p><strong>通过将对象的析构函数定义为</strong> <code>**private**</code> <strong>，强制在堆上分配内存</strong>，场景：栈的内存有限，对象的内存很大</p>\n</li>\n<li>\n<p>better solution：这种方法也能够将 <code>p</code>  指针重新定义为空指针，更好</p>\n</li>\n</ol>\n<p><strong>GC 垃圾回收</strong></p>\n<ol>\n<li>存在效率障碍，发生时间不确定</li>\n<li>存在不能使用 GC 的场合</li>\n<li>只能回收内存，不能回收文件操作的句柄等  <code>finalize</code></li>\n<li>不能由程序员自己控制</li>\n</ol>\n<p>**RAII  Resource Acquisition Is Initialization **</p>\n<ol>\n<li>什么时候获取什么时候释放都是确定的</li>\n<li>对象获得的资源都是要在析构函数中释放的</li>\n<li>栈上的内存资源自动释放，堆上的内存资源需要通过析构函数释放</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101191747419.png\" alt=\"image-20221101191747419\" /></p>\n<h2 id=\"拷贝构造函数-copy-constructor一种特殊的构造函数\"><a class=\"anchor\" href=\"#拷贝构造函数-copy-constructor一种特殊的构造函数\">#</a> 拷贝构造函数 copy constructor—— 一种特殊的构造函数</h2>\n<p>拷贝构造函数是来复制对象用的。一个对象，多个副本，副本之间是独立的关系。</p>\n<p>将地址传递和值传递统一起来，归根结底还是传递的是 &quot;值&quot;(地址也是值，只不过通过它可以找到另一个值)！</p>\n<ol>\n<li>相同类型的类对象是通过拷贝构造函数来完成整个复制过程：自动调用：创建对象时，用一同类的对象对其初始化的时候进行调用。</li>\n<li>默认拷贝构造函数\n<ol>\n<li><strong>逐个成员初始化</strong> (member-wise initialization)</li>\n<li><strong>对于对象成员，该定义是递归的</strong></li>\n</ol>\n</li>\n<li>什么时候需要拷贝构造函数:\n<ol>\n<li>赋值拷贝构造</li>\n<li>传参进行拷贝</li>\n<li>返回值进行拷贝</li>\n</ol>\n</li>\n<li>拷贝构造函数私有：目的是让编译器不能调用拷贝构造函数，防止对象按值传递，只能引用传递 (对象比较大)</li>\n</ol>\n<h3 id=\"拷贝函数的使用情况以及定义\"><a class=\"anchor\" href=\"#拷贝函数的使用情况以及定义\">#</a> 拷贝函数的使用情况以及定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101192544506.png\" alt=\"image-20221101192544506\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 赋值拷贝构造</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 传参进行拷贝</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>A a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>A b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回值进行拷贝</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>A <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    A a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//const 避免出现修改</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一定要写引用，不然就递归调用了</span></pre></td></tr></table></figure><p>为什么对象是一个<strong>引用类型</strong>，而不是<strong>值传递</strong>？</p>\n<p>不然会出现<strong>循环拷贝</strong>问题：如果没有引用的话，传参则会拷贝，那么就会出现循环拷贝，也就是防止递归引用。</p>\n<h3 id=\"拷贝构造函数的深浅拷贝\"><a class=\"anchor\" href=\"#拷贝构造函数的深浅拷贝\">#</a> 拷贝构造函数的深 / 浅拷贝</h3>\n<h4 id=\"默认拷贝构造函数\"><a class=\"anchor\" href=\"#默认拷贝构造函数\">#</a> 默认拷贝构造函数</h4>\n<p>“默认拷贝构造函数”，这个构造函数很简单，仅仅使用 “老对象” 的数据成员的值对 “新对象” 的数据成员一一进行赋值，它一般具有以下形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Rect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Rect<span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twidth <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\theight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>默认拷贝构造函数会在处理静态数据成员和指针数据成员的时候出现错误。</p>\n<h4 id=\"深拷贝浅拷贝\"><a class=\"anchor\" href=\"#深拷贝浅拷贝\">#</a> 深拷贝 / 浅拷贝</h4>\n<p>深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，<strong>资源重新分配</strong>，这个过程就是<strong>深拷贝</strong>，反之，<strong>没有重新分配资源，就是浅拷贝。</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMjExMDExOTI1NTU3NDAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101192555740.png</span>&quot; alt=&quot;image-20221101192555740&quot; style=&quot;zoom:200%;&quot; /&gt;</p>\n<ol>\n<li>原来 S1 和 S2 两个指针都指向 &quot;abcd&quot;, 但是随着 S1 的归还，S2 就变成了一个空指针了。</li>\n<li>此时我们通过深拷贝完成拷贝</li>\n<li>没有深拷贝需求的时候，使用编译器默认构造函数即可</li>\n</ol>\n<h3 id=\"拷贝构造函数的初始化问题\"><a class=\"anchor\" href=\"#拷贝构造函数的初始化问题\">#</a> 拷贝构造函数的初始化问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141650806.png\" alt=\"image-20221101141650806\" /></p>\n<p>“接管编译器行为”</p>\n<ol>\n<li>\n<p>包含成员对象的类</p>\n<ol>\n<li>默认拷贝构造函数：调用<strong>成员对象</strong>的<strong>拷贝构造函数</strong></li>\n<li>自定义拷贝构造函数：调用成员对象的<strong>默认构造函数</strong>：程序员如果接管这件事情，则编译器不再负责任何默认参数。</li>\n</ol>\n</li>\n<li>\n<p>拷贝函数的拷贝过程没有处理静态数据成员</p>\n</li>\n<li>\n<p>默认拷贝构造函数:</p>\n<ol>\n<li>\n<p>逐个成员初始化</p>\n</li>\n<li>\n<p>对于对象成员，该定义是递归的</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM5MzcwNTExL2FydGljbGUvZGV0YWlscy85MTk4MTAzMw==\">https://blog.csdn.net/sinat_39370511/article/details/91981033</span></p>\n<h2 id=\"移动构造函数-move-constructor\"><a class=\"anchor\" href=\"#移动构造函数-move-constructor\">#</a> 移动构造函数 move constructor</h2>\n<p>官方文档：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL21vdmVfY29uc3RydWN0b3I=\">https://en.cppreference.com/w/cpp/language/move_constructor</span></p>\n<p>一些参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjU0MTIyNjI=\">https://zhuanlan.zhihu.com/p/365412262</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1Mzk0MDQzL2FydGljbGUvZGV0YWlscy83ODcyODUwNA==\">https://blog.csdn.net/sinat_25394043/article/details/78728504</span></p>\n<p>所谓移动语义（Move 语义），指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。对于程序执行过程中产生的临时对象，往往只用于传递数据（没有其它的用处），并且会很快会被销毁。因此在使用临时对象初始化新对象时，我们可以<strong>将其包含的指针成员指向的内存资源直接移给新对象所有</strong>，无需再新拷贝一份，这大大提高了初始化的执行效率。（看上去，原来的成员没有访问资源的权限了？</p>\n<p>从一个对象拷贝到了另一个对象。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141853347.png\" alt=\"image-20221101141853347\" /></p>\n<ol>\n<li>\n<p><strong>左值和右值</strong></p>\n<p>左值：赋值操作符左边的值。是可以赋值的，通常是一个变量</p>\n<p>右值：赋值操作符右边的值。是一个值，通常是一个常数、表达式、函数调用</p>\n<p>能出现在赋值号左边的表达式称为 “左值”，不能出现在赋值号左边的表达式称为 “右值”。一般来说，左值是可以取地址的，右值则不可以。</p>\n<p>非 const 的变量都是左值。函数调用的返回值若不是引用，则该函数调用就是右值。一般的 “引用” 都是引用变量的，而变量是左值，因此它们都是 “左值引用”。</p>\n<p>C++11 新增了一种引用，可以引用右值，因而称为 “右值引用”。无名的临时变量不能出现在赋值号左边，因而是右值。右值引用就可以引用无名的临时变量。</p>\n</li>\n<li>\n<p>Const 只能被绑定到右值上</p>\n<ol>\n<li>不可以写成 <code>int &amp;x = 5</code></li>\n<li>为什么不可以对非 const 引用绑定一个右值？可能会导致可以修改临时变量的值，不允许被修改。</li>\n</ol>\n</li>\n<li>\n<p>移动构造函数：直接将对应的右值移动过来 (我们已经将 vector 和 String 进行了是此岸)</p>\n</li>\n<li>\n<p><strong>&amp;&amp; 是右值引用</strong>，不会被左值调用。</p>\n</li>\n<li>\n<p>五删原则：拷贝构造、拷贝赋值、析构函数、移动构造、移动复制</p>\n<ol>\n<li>提供上面的 5 个函数之一，则需要自己提供默认函数</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"临时变量与普通变量\"><a class=\"anchor\" href=\"#临时变量与普通变量\">#</a> 临时变量与普通变量</h2>\n<p>临时变量为右值，优先匹配移动构造函数【临时变量不能绑定到左值，改变临时变量的值不合理】；普通变量为左值，优先匹配拷贝构造函数。</p>\n<p>const A ( &amp; A);</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5OTgzNS9hcnRpY2xlL2RldGFpbHMvMTA1NzgwNjI3\">https://blog.csdn.net/weixin_45799835/article/details/105780627</span></p>\n<h2 id=\"动态对象\"><a class=\"anchor\" href=\"#动态对象\">#</a> 动态对象</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101143939590.png\" alt=\"image-20221101143939590\" /></p>\n<p>在<strong>堆</strong>上创建</p>\n<p>引入 new 和 delete 操作符，除了可以分配内存，还可以调用构造函数，消除对象时，能归还内存，还可以调用析构函数。</p>\n<p>malloc 不调用构造函数</p>\n<p>new 可重载</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101144552660.png\" alt=\"image-20221101144552660\" /></p>\n<p>new 可以重载：开辟内存（new 的第一步）可以重载，调用构造函数初始化和返回地址赋值（new 的二三步）不能重载。</p>\n<p>delete [] 告诉编译器，此指针带了一个头，存储了别的信息，有偏移量。</p>\n<h3 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101144604251.png\" alt=\"image-20221101144604251\" /></p>\n<ol>\n<li>\n<p>new（new 的时候一般带指针）</p>\n<ol>\n<li>使用原始类型</li>\n<li>使用类类型</li>\n</ol>\n</li>\n<li>\n<p>Syntax 语法</p>\n<ol>\n<li>原始类型: <code>type* ptrName = new type;</code></li>\n<li>使用类类型: <code>type* ptrName = new type(params);</code></li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101145458897.png\" alt=\"image-20221101145458897\" /></p>\n<ol start=\"3\">\n<li>注意：这是没有变量名字的物体【堆上的对象，只有通过指针去访问对象】；指针的大小都是一样的，无论数据有多大。</li>\n</ol>\n<h3 id=\"对象删除\"><a class=\"anchor\" href=\"#对象删除\">#</a> 对象删除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101150246371.png\" alt=\"image-20221101150246371\" /></p>\n<ol>\n<li>\n<p>delete：</p>\n<ol>\n<li>唤起指向物体的指针</li>\n<li>处理原始类型或类类型</li>\n</ol>\n</li>\n<li>\n<p>语法: <code>delete ptrName;</code></p>\n</li>\n<li>\n<p>注意: <strong>删除之后，要将指针置为空指针</strong>，这样子之后可以继续使用，避免意外的引用对象，如果指针没有修改的话，可能是一个悬挂指针 (有可能出现段错误等等)</p>\n<p>dangling pointer 悬垂指针</p>\n<p>double free 两次删除</p>\n<p>如果 delete 后指向 null，没有任何作用，可以防止很多的内存安全问题。这样写可以提高程序的鲁棒性。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果没有办法确定 p 的类型，那么只会释放内存，但是不会调用析构函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对于 cpp 这种编译语言来说，类型的声明是非常重要的</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"动态对象数组\"><a class=\"anchor\" href=\"#动态对象数组\">#</a> 动态对象数组</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101150739939.png\" alt=\"image-20221101150739939\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p = new A;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上两种写法返回的都是 A 的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[] 不能够省略，省略之后不知道指向的是一个 A，还是一个数组</span></pre></td></tr></table></figure><p>在指针前存储 4 个字节，存储了数据类型，如果没有 []，就不会去访问 4 个字节。那么后面的对象都没有调用析构函数，没有内存释放，造成内存泄漏。</p>\n<p>同时，会出现段错误。段错误是指访问的内存超出了系统给这个程序所设定的内存空间，例如访问了不存在的内存地址、访问了系统保护的内存地址、访问了只读的内存地址等等情况。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上这段代码没有问题，对于内置的类型 int，不需要存储 4 个字节，也不需要调用析构函数。p 是一块完整的内存。</p>\n<p>但是，为了简单起见，<strong>new []</strong> 与 <strong>delete[]</strong> 搭配使用。</p>\n<p><strong>注意</strong></p>\n<p>在堆上分配的内存默认不进行初始化</p>\n<ol>\n<li><code>int *p1 = new int[5];</code>  默认不进行初始化</li>\n<li><code>int *p2 = new int[5]();</code>  进行默认初始化</li>\n<li><code>int *p2 = new int[5]&#123;0,1,2,3,4&#125;</code> : 进行显式对应函数初始化</li>\n</ol>\n<p><strong>隐式初始化 / 显式初始化</strong></p>\n<p>显式初始化即为手工给予初值，否则为隐式初始化，将内容设置为默认值。</p>\n<p>自动变量在运行时进入函数的时候，才进行分配空间赋值。非自动变量会自隐式清零，而自动变量是不会自隐式清零的。若没有在定义变量时显式初始化，未赋值前，该变量的内容是不确定值。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> F1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 0 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string F2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> F3 <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 25 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>string F4 <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化为 “abcd”</span></pre></td></tr></table></figure><h3 id=\"动态2d数组\"><a class=\"anchor\" href=\"#动态2d数组\">#</a> 动态 2D 数组</h3>\n<h4 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101152237726.png\" alt=\"image-20221101152237726\" /></p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101152523993.png\" alt=\"image-20221101152523993\" /></p>\n<p>先 delete char*，再 delete char**</p>\n<p>先 delete 三个粉红块块，再 delete 一个粉红块块</p>\n<p>多维数组很少用现在这种方式做，都是用一维数组模拟多维数组。</p>\n<h2 id=\"const成员\"><a class=\"anchor\" href=\"#const成员\">#</a> Const 成员</h2>\n<p>const 是程序中最稳定的部分。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101153137329.png\" alt=\"image-20221101153137329\" /></p>\n<ol>\n<li>初始化放在构造函数的成员初始化表中进行：\n<ol>\n<li>常量在初始化的时候必须被给值，而不是赋值，所以不能写在构造函数内</li>\n<li>所以我们通过<strong>初始化表</strong>的方式完成。</li>\n</ol>\n</li>\n<li><strong>不同的对象，可以有不同的 const 成员变量的值</strong>。对象一旦有了，在对象的生命周期内不变。不同的对象可以有不一样的值。A (1); A (2);</li>\n<li><strong>所有的对象共享一个</strong> static const: 编译器内的常量，所有的对象都是一样的，最好在定义的地方进行初始化。</li>\n</ol>\n<p>静态成员变量一般在类外进行定义。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101153818760.png\" alt=\"image-20221101153818760\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如何判断不是 const？</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前后要保证一致，const 在后面，在不改变成员变量的函数后面增加 const。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 编译器怎么能发现不是 const 的？转化为防止变量被赋值，见下面，所以 const 指针不能修改</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 上面的函数相当于这个</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span>x <span class=\"token operator\">&lt;&lt;</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//const 改变参数声明</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 上面的函数相当于这个，第一个 const 表示指向对象常量，后一个 const 表示指针本身是常量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">const</span> A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明了一个常对象 a: 这个对象是不可以修改的</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，常对象无法调用非常方法</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确</span></pre></td></tr></table></figure><p>我们将不修改对象内变量的值的时候，将对应方法声明为 const，如 <code>const A a(0,0);</code></p>\n<p>const 成员函数，在声明编译的函数后面，增加关键字 const。 <code>void show(); const</code></p>\n<p>当对象声明为 const 的时候，只能调用 const 成员函数；类似于对象声明为 static 时，只能调用 static 函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 指针不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//this 指针所指向的内存的内容不可变</span></pre></td></tr></table></figure><p>const 有 <code>就近原则</code> ，const 靠近 this，this 不可变，const 靠近 A，A 的内容不可变</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> indirect_int<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">indirect_int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">delete</span> <span class=\"token operator\">&amp;</span>indirect_int<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 只要不是直接修改变量的值就 OK</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 引用本身是不能修改的，所以编译器认为没问题</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            indirect_int<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只是指向的内容发生了变化</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>int &amp; —— 变量的引用：</p>\n<ol>\n<li>这里的 &amp; 不是取地址符号，而是引用符号，引用是 C++ 对 C 的一个重要补充。</li>\n<li>声明引用时必须指定它代表的是哪一个变量，即对它初始化。</li>\n<li>引用与其所代表的变量共享同一内存单元，系统并不为引用另外分配存储单元；</li>\n<li>对引用的初始化，可以是一个变量名，也可以是另一个引用。</li>\n<li>引用初始化后不能再被重新声明为另一变量的别名</li>\n</ol>\n<p>对象外的内存与类没有什么关系。indirect_int 可以 ++。</p>\n<p>如何解决用 a 做 indirect_int 初始化，并且改变 indirect_int 的引用对象的值：</p>\n<ol>\n<li>关键词 mutable: 表示成员可以在 <code>const</code>  中进行修改，而不是用间接的方式来做。给程序员一些自由度，语言设计逻辑自洽即可。</li>\n<li>去掉 const 转换:  <code>(const_cast)&lt;A*&gt;(this)-&gt;x</code>  转换后可以修改原来的成员。利用原有的语法实现 mutable，非常优雅。</li>\n</ol>\n<h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<p>类刻画了一组具有相同属性的对象。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108150231596.png\" alt=\"image-20221108150231596\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108150545400.png\" alt=\"image-20221108150545400\" /></p>\n<p>静态成员变量放在类外的.cpp 文件中定义，只能定义一次。</p>\n<p>const static 是个例外，是个符号，不在全局数据区，在声明的时候初始化，不在初始化表种初始化。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108151154641.png\" alt=\"image-20221108151154641\" /></p>\n<ol>\n<li>f 只能存取静态成员变量，调用静态成员函数。</li>\n<li>类访问控制（public\\private\\static...）：在类上直接访问只能是静态成员变量</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108151245618.png\" alt=\"image-20221108151245618\" /></p>\n<p>A::f (); 类似于 std::cout;</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108151737798.png\" alt=\"image-20221108151737798\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108151757514.png\" alt=\"image-20221108151757514\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单例模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span>  <span class=\"token class-name\">singleton</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">// 构造函数外部不可以使用，可以控制类的对象的个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> singleton <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> singleton <span class=\"token operator\">*</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 每次访问的时候判断是否为 null，在这个名空间下，可以调用 new 创建对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span>  m_instance <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">?</span> m_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> singleton<span class=\"token operator\">:</span> m_instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_instance<span class=\"token punctuation\">;</span> m_instance <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> singleton <span class=\"token operator\">*</span>m_instance<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存对象的指针也是 static 的，指针指向本身</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>singleton <span class=\"token operator\">*</span>singleton<span class=\"token double-colon punctuation\">::</span>m_instance<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化</span></pre></td></tr></table></figure><h2 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<ol>\n<li>类外部不能访问该类的 private 成员\n<ol>\n<li>通过该类的 public 方法</li>\n<li>会降低对 private 成员的访问效率，缺乏灵活性：如果使用 public 方法使用这些成员则是实行调用函数，降低调用效率，消耗时间</li>\n<li>例：矩阵类 (Matrix)、向量类 (Vector) 和全局函数 (multiply)，全局函数实现矩阵和向量相乘</li>\n<li>隐藏细节、保持一致性</li>\n</ol>\n</li>\n<li>友元是<strong>数据保护和访问效率</strong>的折衷方案</li>\n<li>友元可以访问 private 和 protected 的成员</li>\n</ol>\n<h3 id=\"matrix-vector\"><a class=\"anchor\" href=\"#matrix-vector\">#</a> matrix vector</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Matrix</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Matrix</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 逻辑二维，一维存储</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> lin<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">Matrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            lin <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            col <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            p_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>lin<span class=\"token operator\">*</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Matrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p_data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>col<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指针类型的偏移是根据指针指向对象的类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">dimension</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            l <span class=\"token operator\">=</span> lin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            c <span class=\"token operator\">=</span> col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>p_data<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>lin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//Vector</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            num <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            p_data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">~</span><span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>p_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">return</span> p_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">dimension</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> n <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>p_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 实现 矩阵和一个向量进行计算，效率比较</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>Matrix <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> Vector <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span> Vector <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">int</span> lin<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    m<span class=\"token punctuation\">.</span><span class=\"token function\">dimension</span><span class=\"token punctuation\">(</span>lin<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>lin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        r<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>col<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里的调用效率会比较低</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    Matrix <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Vector <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Vector <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    m<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108154057903.png\" alt=\"image-20221108154057903\" /></p>\n<p>没有 classC，可以声明友元吗？不可以，因为需要知道内存空间【先声明后使用】</p>\n<p>没有 classB，可以声明友元吗？可以</p>\n<p>第一种情况:friend class B:</p>\n<ol>\n<li>编译器会寻找有没有类 B</li>\n<li>如果没有则会引入一个 B</li>\n</ol>\n<p>第二种情况:friend B</p>\n<ol>\n<li>省略关键字的时候不会引入 B，如果没有 B 会报错模板类</li>\n<li>但是这种形式常用于模板类 (T 或者 typedef 的时候来写)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108154417929.png\" alt=\"image-20221108154417929\" /></p>\n<p>需要前向声明：在 class Matrix 前声明 <code>class Vector</code></p>\n<p>友元不具有传递性:</p>\n<ol>\n<li>\n<p>不能说 A 是 B 的友元，B 是 C 的友元就可以得出 A 是 C 的友元</p>\n</li>\n<li>\n<p>友元必须显式声明</p>\n</li>\n</ol>\n<h3 id=\"相互引用的两个类\"><a class=\"anchor\" href=\"#相互引用的两个类\">#</a> 相互引用的两个类</h3>\n<p>如果两个类相互引用可能是出现了一些结构上的问题。一起用和只用一个类，拆开来没什么意思。</p>\n<p>完整的定义必须在声明之后，必然有一个类缺少完整的声明。</p>\n<p>复用和维护的考虑。（继承……，有派生和继承相互引用就有意义）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221108155019945.png\" alt=\"image-20221108155019945\" /></p>\n<p>如果每一个数据都可以 get 和 set，并没有做好封装，相当于每一个 private 都是 public 的。所以要设置好类型的</p>\n<h4 id=\"迪米特法则lod\"><a class=\"anchor\" href=\"#迪米特法则lod\">#</a> 迪米特法则 LoD</h4>\n<ul>\n<li>Each unit should have only limited knowledge about other units: only units &quot;closely&quot; related to the current unit.</li>\n<li>Each unit should only talk to its friends; don't talk to strangers.</li>\n<li>Only talk to your immediate friends.</li>\n</ul>\n<p>迪米特法则 (Law of Demeter) 又叫做最少知识原则，也就是说，一个对象应当对其他对象尽可能少的了解。不和陌生人说话。英文简写为: LoD。</p>\n<p>迪米特法则的目的在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p>\n<p>迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系 —— 这在一定程度上增加了系统的复杂度。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/01/NJUSE/cpp/Lecture09-%E6%8C%87%E9%92%88/",
            "url": "https://quas-modo.github.io/2022/11/01/NJUSE/cpp/Lecture09-%E6%8C%87%E9%92%88/",
            "title": "Lecture09-指针",
            "date_published": "2022-11-01T12:42:02.000Z",
            "content_html": "<p><span id=\"more\"></span></p>\n<h1 id=\"lecture09-指针\"><a class=\"anchor\" href=\"#lecture09-指针\">#</a> Lecture09 - 指针</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144621124.png\" alt=\"image-20221018144621124\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144628629.png\" alt=\"image-20221018144628629\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">*</span>p 只读</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 经常使用，赋予所有权限，但只要读的权限</span></pre></td></tr></table></figure><p><strong>use CONST whenever possible</strong> 只要不改变成员变量的值，就一定要加上 const</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150257160.png\" alt=\"image-20221018150257160\" /></p>\n<p>为什么 c 和 * q 中的值不一样？</p>\n<p>因为 compiler 把 c 直接替换成 128。但是 q 中存储的确实变成了 111。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150447107.png\" alt=\"image-20221018150447107\" /></p>\n<p>指针自己是常量，不可以改变</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150811366.png\" alt=\"image-20221018150811366\" /></p>\n<p><strong>不懂</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150633134.png\" alt=\"image-20221018150633134\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152026024.png\" alt=\"image-20221018152026024\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018151849436.png\" alt=\"image-20221018151849436\" /></p>\n<p>(x+n-1) / n * n</p>\n<p>对齐</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152011730.png\" alt=\"image-20221018152011730\" /></p>\n<p>struct —— 访问控制默认 public</p>\n<p>class —— 访问控制默认 private</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152118088.png\" alt=\"image-20221018152118088\" /></p>\n<p>插入一个，丢一个（？）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018153026760.png\" alt=\"image-20221018153026760\" /></p>\n<p>剥离出来，方便增改</p>\n<p>利用 #宏来保证函数名的一一对应 #compose</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018154617288.png\" alt=\"image-20221018154617288\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018154635527.png\" alt=\"image-20221018154635527\" /></p>\n<p>char 数组型不可以</p>\n<p>只能用 copy</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/18/NJUSE/cpp/Lecture08-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/",
            "url": "https://quas-modo.github.io/2022/10/18/NJUSE/cpp/Lecture08-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/",
            "title": "Lecture08-数组和指针",
            "date_published": "2022-10-18T11:53:25.000Z",
            "content_html": "<p>一维数组、指针的指针、RAII、union、函数指针<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture08-数组和指针\"><a class=\"anchor\" href=\"#lecture08-数组和指针\">#</a> Lecture08 - 数组和指针</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011193356316.png\" alt=\"image-20221011193356316\" /></p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h3>\n<p>相同类型，连续存储</p>\n<h3 id=\"一维数组\"><a class=\"anchor\" href=\"#一维数组\">#</a> 一维数组</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMjEwMTExOTM2MjIxNjQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011193622164.png</span>&quot; alt=&quot;image-20221011193622164&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>函数接口中，数组的长度需要显式的表达。即需要 f (int A [], int n); 其中，n 表示数组的长度。</p>\n<p>int a[6];</p>\n<p>a 是数组类型。</p>\n<p>f (a) 中的 a 是地址，因为在函数中，a 变成了右值，进行了隐式的类型转换。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194122070.png\" alt=\"image-20221011194120299\" /></p>\n<p>第二种写法是错误的<br />\n栈中未初始化填充 0xCC，对应中文的烫（在 vscode 中）<br />\n堆中未初始化填充 0xCSD，对应中文的屯（在 vscode 中)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194633177.png\" alt=\"image-20221011194633177\" /></p>\n<p>工具<br />\n / RTC1<br />\nmallopt<br />\nvalgrind ——Valgrind 基于仿真方式对程序进行调试，它先于应用程序获取实际处理器的控制权，并在实际处理器的基础上仿真一个虚拟处理器，并使应用程序运行于这个虚拟处理器之上，从而对应用程序的运行进行监视。</p>\n<p>debug 文件中有符号表，release 中没有。</p>\n<h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194756090.png\" alt=\"image-20221011194756090\" /></p>\n<p>pointer literal<br />\n 指针定义为 null，保护内存。<br />\n（void *）0 —— 未定义的 datatype，无法对其做解地址操作。<br />\n（void *）可作为任何类型的接口。<br />\ndouble * q;<br />\nInt * p;<br />\nVoid * v;<br />\nV = q;<br />\nV = p;<br />\n 但是 q 和 p 不能赋值为 v。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194829940.png\" alt=\"image-20221011194829940\" /></p>\n<p>例如：</p>\n<p>void memset(void *p, int n){<br />\n// 内存清空<br />\n char * q = (char <em>)p;<br />\nFor(int I = 0; i &lt; n; i++)<br />\n{<br />\n<em>(q+i) = 0;\t<br />\n}<br />\n}<br />\nInt a[100];<br />\nA b;<br />\nmemset(&amp;a[0], 100</em>4);<br />\nMemset(&amp;b, );<br />\n 可以传递进 int</em> 类型，也可以传入 A 类型。</p>\n<h2 id=\"指针与数组\"><a class=\"anchor\" href=\"#指针与数组\">#</a> 指针与数组</h2>\n<p><img data-src=\"C:%5CUsers%5CQUAS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221011195335516.png\" alt=\"image-20221011195335516\" /></p>\n<p>a 是一个 const，不能用 a++ 的方式改变访问</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195419924.png\" alt=\"image-20221011195419924\" /></p>\n<p>P [i] 用指针实现动态数组</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195822103.png\" alt=\"image-20221011195822103\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195702881.png\" alt=\"image-20221011195702881\" /></p>\n<p>多维数组</p>\n<p>关注不同的定义方式</p>\n<p>using T = int [2];</p>\n<p>ragged array——java 中并非整齐排列，可以锯齿排列。cpp 中可以自己实现。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195308401.png\" alt=\"image-20221011195308401\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012000657463.png\" alt=\"image-20221012000657463\" /></p>\n<p>关于如何理解取 a00 的地址和取 a0 的地址一样，并且取 q+1 的地址仍然是它自身，我的理解是，编译器识别的它的类型不一样，因此解一个指针的指针仍然是一个指针，也不存在另外存储了一个指针数组来表示。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195953872.png\" alt=\"image-20221011195953872\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200024133.png\" alt=\"image-20221011200024133\" /></p>\n<p>cpp 是允许数组越界的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200038340.png\" alt=\"image-20221011200038340\" /></p>\n<p>在传入参数的时候，先进行升维的操作，在打印地址时，再进行降维的操作。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思考为什么地址是这样的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>k <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" :\"</span>  <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思考如何不另外计数完成每隔四个就打印一次 endl</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token operator\">+</span>j<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200055610.png\" alt=\"image-20221011200055610\" /></p>\n<p>C<br />\nint *p = (int <em>) malloc(sizeof(int) * 8);<br />\n 因为 malloc 为 void</em>，需要定义 int * 来使用。</p>\n<p>Cpp<br />\nInt *p1= new int;<br />\nInt *q1 = new int[8];</p>\n<p>用 new 的时候，会强制类型转换，并一个一个调用构造函数进行构造。因为 new 知道新建的类型，但是 malloc 不知道新建的类型，无法进行调用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018140518525.png\" alt=\"image-20221018140518525\" /></p>\n<p>delete [] 另外存储 4byte 记录空间的大小（如果是 32 位存储）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//delete 的时候，无法删除且会造成归还的错误</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 解决方案是另外开一个指针进行遍历</span></pre></td></tr></table></figure><p>RAII</p>\n<p>Resource Acquisition Is Initialization</p>\n<p>RAII，也称为 “资源获取就是初始化”，是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9jJTJCJTJCLzk5MjcyP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\"> c++</span> 等编程语言常用的管理资源、避免内存泄露的方法。它保证在任何情况下，使用对象时先构造对象，最后析构对象。</p>\n<p>compiler 帮助程序员管理资源，防止资源泄露。~auto_ptr ()</p>\n<p>类中能够同时使用 operator * 和 operato -&gt;</p>\n<p>shared_ptr 的表示方式</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018142936362.png\" alt=\"image-20221018142936362\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018142519655.png\" alt=\"image-20221018142519655\" /></p>\n<p>struct B sizeof 不是 7，需要对齐</p>\n<p>也许是 12，一一对齐</p>\n<p>也许是 8【char b; short c; int a】变量的顺序也会影响内存的存放方式</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143235958.png\" alt=\"image-20221018143235958\" /></p>\n<p>Union 和 Struct 的区别是可以共享存储空间。</p>\n<p>对于 Struct，三个赋值都有效；对于 Union 来说，只有最后一个语句有效【共享空间】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143001639.png\" alt=\"image-20221018143001639\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143334428.png\" alt=\"image-20221018143334428\" /></p>\n<p>原本各开 100 个空间，耗费资源，正好时候 union 的定义【只需要 Line\\Rectangle\\Ellipse 中的一种】。</p>\n<p>但是值存储 Line 或 Rectangle 或 Ellipse 不能知道是哪种，需要 tag，且每个类型都需要 tag，不然 tag 会覆盖掉别的数据。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143902650.png\" alt=\"image-20221018143902650\" /></p>\n<p>不止 OO 中存在多态性，cpp 也可以通过 union 实现多态。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143952177.png\" alt=\"image-20221018143952177\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144156718.png\" alt=\"image-20221018144156718\" /></p>\n<p>Struct Programming 也可以去实现 OO 的功能</p>\n<p>OO 实际上是编译器帮助做了一些工作。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/04/NJUSE/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/",
            "url": "https://quas-modo.github.io/2022/10/04/NJUSE/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/",
            "title": "Lecture07-程序组织",
            "date_published": "2022-10-04T12:07:08.000Z",
            "content_html": "<p>内联函数、ROP、头文件、namespace、宏</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture-07\"><a class=\"anchor\" href=\"#lecture-07\">#</a> Lecture 07</h1>\n<h1 id=\"程序组织\"><a class=\"anchor\" href=\"#程序组织\">#</a> 程序组织</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194251637.png\" alt=\"image-20221004194251637\" /></p>\n<h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194306679.png\" alt=\"image-20221004194306679\" /></p>\n<h3 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>程序级</p>\n<p>文件级</p>\n<p>函数级</p>\n<p>块级</p>\n<h3 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p>main 函数中的变量的生命周期一般是整个程序。</p>\n<p>idle pointer</p>\n<h3 id=\"头文件中包含的内容\"><a class=\"anchor\" href=\"#头文件中包含的内容\">#</a> 头文件中包含的内容</h3>\n<ol>\n<li>\n<p>常量定义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195026698.png\" alt=\"image-20221004195026698\" /></p>\n</li>\n<li>\n<p>变量 / 函数定义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194957282.png\" alt=\"image-20221004194957282\" /></p>\n</li>\n<li>\n<p>编译预处理</p>\n</li>\n<li>\n<p>类型定义（class\\ 接口）</p>\n</li>\n<li>\n<p>内联函数</p>\n</li>\n</ol>\n<pre><code># include&quot;a.h&quot;\n</code></pre>\n<p><strong>井号</strong></p>\n<p>编译预处理，把头文件的<strong>复制</strong>过来</p>\n<p><strong>static</strong></p>\n<p>只要不在头文件中，就不能更改 —— 加上<strong> static <strong>，把变量或者函数的程序级限制到</strong>文件级</strong></p>\n<p><strong>const</strong></p>\n<p>默认属性是 static</p>\n<p>写在另外 &quot;const.h&quot; 文件中</p>\n<h2 id=\"namespace\"><a class=\"anchor\" href=\"#namespace\">#</a> namespace</h2>\n<h3 id=\"两种形式\"><a class=\"anchor\" href=\"#两种形式\">#</a> 两种形式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195211541.png\" alt=\"image-20221004195211541\" /></p>\n<ul>\n<li>declaration (绝对路径)</li>\n<li>directive（批量处理）</li>\n</ul>\n<h3 id=\"details\"><a class=\"anchor\" href=\"#details\">#</a> details</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004200112776.png\" alt=\"image-20221004200112776\" /></p>\n<ol>\n<li>\n<p>别名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> American_Telephone_and_Telegraph <span class=\"token punctuation\">&#123;</span>…… <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>……<span class=\"token punctuation\">.</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> ATT <span class=\"token operator\">=</span> American_Telephone_and_Telegraph</pre></td></tr></table></figure></li>\n<li>\n<p>全局</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> X</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         X<span class=\"token double-colon punctuation\">::</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token double-colon punctuation\">::</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>开放</p>\n<p>可以在代码别的位置重新增加函数、变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可嵌套</p>\n<p>软工：：三班::quasdo</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> L1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     ……<span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">namespace</span> L2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>L1<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">L2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> L1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">L2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重载</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> B</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>‘<span class=\"token number\">1</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>重载 —— 有可能造成冲突和语义的错误</p>\n<p>可能在 namespace A 和 namespace B 中均定义了同一个函数名，因此<strong>不建议在同一作用域两次使用 using-directive</strong></p>\n<h3 id=\"编译预处理\"><a class=\"anchor\" href=\"#编译预处理\">#</a> 编译预处理</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195709681.png\" alt=\"image-20221004195709681\" /></p>\n<blockquote>\n<p><em>gcc</em> <em>-7 -<strong>Dsqrt</strong>=rand -<strong>Dreturn</strong>=exit</em></p>\n<p>define sqrt rand</p>\n</blockquote>\n<p>虽然编译预处理可能会造成问题，但因为难以找到更好的结构且高效的替代品，没有取缔。</p>\n<h2 id=\"宏\"><a class=\"anchor\" href=\"#宏\">#</a> 宏</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195913290.png\" alt=\"image-20221004195913290\" /></p>\n<p>while 后缺少；</p>\n<p>形成完美的语句（不产生多余的空语句）</p>\n<p>eight queen 八皇后问题，可用递归的方式求解</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/29/NJUSE/cpp/Lecture06-%E5%87%BD%E6%95%B0/",
            "url": "https://quas-modo.github.io/2022/09/29/NJUSE/cpp/Lecture06-%E5%87%BD%E6%95%B0/",
            "title": "Lecture06-函数",
            "date_published": "2022-09-29T08:22:20.000Z",
            "content_html": "<p>cpp 中的函数<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture06-函数\"><a class=\"anchor\" href=\"#lecture06-函数\">#</a> Lecture06 - 函数</h1>\n<h2 id=\"运行时环境-runtime-environment\"><a class=\"anchor\" href=\"#运行时环境-runtime-environment\">#</a> 运行时环境 runtime environment</h2>\n<p>永远分配 full stay（？）-- 早期变量存储不分全局变量和局部变量，比较浪费空间，无法使用 recursive 递归</p>\n<p>dynamic-- 函数调用完即刻回收，支持递归，节约空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//x 地址什么时候填入（符号表、link 时）</span></pre></td></tr></table></figure><p>增加函数 function 需要在 stack 中付出代价 cost</p>\n<p>stack 编译器帮助程序员做好</p>\n<p>heap 中存储动态变量，编译器未知</p>\n<p>Dynamic-link library DLL 动态链接库</p>\n<p>在代码段中，以一个函数为基本单位</p>\n<p>为什么 code、data、stack、heap 中不能 x（执行）？</p>\n<blockquote>\n<p>攻击（断章取义）—— 利用看似正常的代码段。攻击操作系统。从头操作则没有问题。避免攻击，取消了执行。</p>\n</blockquote>\n<h3 id=\"name-mangling\"><a class=\"anchor\" href=\"#name-mangling\">#</a> name mangling</h3>\n<p>c 中 func 不可以重载，但是 cpp 中函数可以重载（参数可以不同），func 不能够唯一指代。</p>\n<p>cpp 中加了一些表示 --name mangling。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//_Z4funci  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//_Z4funcid</span></pre></td></tr></table></figure><p>要告诉编译器</p>\n<blockquote>\n<p>extern = &quot;C&quot; // 编译的是 c</p>\n</blockquote>\n<h2 id=\"原则和执行机制\"><a class=\"anchor\" href=\"#原则和执行机制\">#</a> 原则和执行机制</h2>\n<h3 id=\"原则\"><a class=\"anchor\" href=\"#原则\">#</a> 原则</h3>\n<ol>\n<li>定义不允许嵌套（函数中不能有另外一个 definition）</li>\n<li>先定义后使用</li>\n</ol>\n<h3 id=\"函数的执行机制\"><a class=\"anchor\" href=\"#函数的执行机制\">#</a> 函数的执行机制</h3>\n<ol>\n<li>\n<p>建立被调用函数的栈空间</p>\n</li>\n<li>\n<p>参数传递</p>\n<ul>\n<li>值传递 call by value（c 中只有值传递，想要改变原值需要指针）</li>\n<li>引用传递 call by reference（cpp 中的隐式指针）int &amp;a</li>\n</ul>\n</li>\n<li>\n<p>保存调用函数的运行状态（回来之后还要接着执行）</p>\n</li>\n<li>\n<p>将控制转交被调函数</p>\n</li>\n</ol>\n<p><strong>EBP</strong> extended base pointer</p>\n<p><strong>ESP</strong> extended stack pointer</p>\n<p><strong>EIP</strong> is a register in x86 architectures (32bit). It holds the &quot;Extended Instruction Pointer&quot; for the stack. In other words, it tells the computer where to go next to execute the next command and controls the flow of a program.</p>\n<p>stack <strong>从 high 到 low 增长</strong></p>\n<h2 id=\"如何调用函数-以及函数付出的代价\"><a class=\"anchor\" href=\"#如何调用函数-以及函数付出的代价\">#</a> 如何调用函数 以及函数付出的代价</h2>\n<blockquote>\n<p>__cdecl</p>\n<p>__stdcall</p>\n<p>__fastcall</p>\n<p>__thiscall</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 从右往左传递参数</span></pre></td></tr></table></figure><p>在函数中需要初始化变量，编译器在返回时，不会主动清理 stack 中的数据</p>\n<h3 id=\"cost\"><a class=\"anchor\" href=\"#cost\">#</a> cost</h3>\n<ol>\n<li>\n<p>付出指令的开销</p>\n</li>\n<li>\n<p>付出栈的开销</p>\n</li>\n</ol>\n<h3 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h3>\n<ol>\n<li>加载参数 (进栈)</li>\n<li>保存上下文环境\n<ul>\n<li>保存返回地址</li>\n<li>保存调用者基指针</li>\n</ul>\n</li>\n<li>执行函数\n<ul>\n<li>设置新的基指针</li>\n<li>分配空间 (可选)</li>\n<li>执行一些任务</li>\n<li>释放空间 (如果分配了的话)</li>\n</ul>\n</li>\n<li>恢复上下文环境\n<ul>\n<li>加载调用者基指针</li>\n<li>加载返回指针</li>\n</ul>\n</li>\n<li>继续执行调用者的功能 a</li>\n</ol>\n<h3 id=\"静态成员函数和非静态成员函数的差别\"><a class=\"anchor\" href=\"#静态成员函数和非静态成员函数的差别\">#</a> 静态成员函数和非静态成员函数的差别</h3>\n<p>静态成员函数中没有 this，非静态成员函数有 this</p>\n<p>静态成员函数形同于全局函数</p>\n<h3 id=\"printf和cout\"><a class=\"anchor\" href=\"#printf和cout\">#</a> printf 和 cout</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可变参数可被利用，进行攻击。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>cout 是个<strong>对象</strong>，cout &lt;&lt;&quot;c&quot; 是一个新的对象</p>\n<h3 id=\"stdcall\"><a class=\"anchor\" href=\"#stdcall\">#</a> stdcall</h3>\n<p>调用者借还参数</p>\n<p>参数未知长度</p>\n<p>复用次数多，消耗空间和时间</p>\n<h3 id=\"fastcall\"><a class=\"anchor\" href=\"#fastcall\">#</a> fastcall</h3>\n<p>寄存器有限，如果要用更多的寄存器，就要保存更多的数据（现场）</p>\n<p>其实最多有两个参数 move 到寄存器，再有多的参数，就需要 push 了</p>\n<h2 id=\"函数原型\"><a class=\"anchor\" href=\"#函数原型\">#</a> 函数原型</h2>\n<p><strong>原型，只需要类型</strong></p>\n<ol>\n<li>\n<p>遵守先定义后使用原则</p>\n</li>\n<li>\n<p>自由安排函数定义位置</p>\n</li>\n<li>\n<p>语句</p>\n</li>\n<li>\n<p>只需参数类型，无需参数名称</p>\n</li>\n<li>\n<p>编译器检查</p>\n</li>\n<li>\n<p>函数原型：只需要看到函数名和参数读取到即可:</p>\n<pre><code>int func(int,int)\n</code></pre>\n<ul>\n<li>在调用点一定要能看到接口</li>\n<li>仅仅需要函数名和参数类型即可</li>\n</ul>\n</li>\n<li>\n<p>函数原型应当放置在头文件中</p>\n</li>\n</ol>\n<h2 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h2>\n<p>type conversion</p>\n<h3 id=\"原则-2\"><a class=\"anchor\" href=\"#原则-2\">#</a> 原则</h3>\n<ol>\n<li>名同，参数不同（个数、类型、顺序）</li>\n<li>返回值类型不作为区别重载函数的依据</li>\n</ol>\n<h3 id=\"匹配原则\"><a class=\"anchor\" href=\"#匹配原则\">#</a> 匹配原则</h3>\n<p><strong>Polymorphism 多态</strong> -&gt; 增强语言的丰富性和灵活性 -&gt; 一名多用，并不只存在 OO programming 中</p>\n<ol>\n<li>严格</li>\n<li>内部转换</li>\n<li>用户定义的转换</li>\n</ol>\n<blockquote>\n<p><em>void f(long); void f(double);</em></p>\n<p><em>f(10);</em></p>\n</blockquote>\n<p>10 既可以是 int 也可以是 double，编译器会感到困惑，<strong>ambiguous</strong>。</p>\n<h2 id=\"函数-默认参数\"><a class=\"anchor\" href=\"#函数-默认参数\">#</a> 函数 - 默认参数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"默认参数的声明\"><a class=\"anchor\" href=\"#默认参数的声明\">#</a> 默认参数的声明</h3>\n<ol>\n<li>函数<strong>原型</strong>中给出  -&gt;  <strong>是给使用点看的</strong></li>\n<li>先定义的函数中给出</li>\n</ol>\n<h3 id=\"默认参数的顺序\"><a class=\"anchor\" href=\"#默认参数的顺序\">#</a> 默认参数的顺序</h3>\n<ol>\n<li>从右到左</li>\n<li>不间断</li>\n</ol>\n<h3 id=\"默认参数与函数重载\"><a class=\"anchor\" href=\"#默认参数与函数重载\">#</a> 默认参数与函数重载</h3>\n<p><em>void f(int);  void f(int, int=2);</em></p>\n<p><strong>ambiguous</strong></p>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>Q1、能在不降低可读性的前提下，降低 COST 吗？</p>\n<p>HL src ---compiler----》 machine language</p>\n<p>程序员看到的是函数，compiler 把 block 移到调用处</p>\n<p>问题：</p>\n<ol>\n<li>假设 function 有 1000 行，代码拉长，存储占用率大</li>\n<li>不再有递归</li>\n</ol>\n<p>程序员主动提出：在 function 前写<strong> inline</strong></p>\n<p>Q2、使用 lib 需要注意什么？</p>\n<p>注意区分是哪种调用方式，哪种 compiler。</p>\n<p>c 中不允许重载，cpp 可以</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004190900029.png\" alt=\"image-20221004190900029\" /></p>\n<h2 id=\"内联函数inline\"><a class=\"anchor\" href=\"#内联函数inline\">#</a> 内联函数 inline</h2>\n<ol>\n<li>\n<p>目的:</p>\n<ol>\n<li>提高可读性</li>\n<li>提高效率</li>\n<li>解决了两个 cost 的问题</li>\n</ol>\n</li>\n<li>\n<p>对象: <strong>使用频率高、简单、小段代码</strong></p>\n<p>简单：没有 loop 或者 switch，不要有多个接口</p>\n<p>例如：OO 的 class 的 constructor 函数（构造函数）</p>\n</li>\n<li>\n<p>实现方法：编译系统将为 inline 函数创建一段代码，在调用点，用相应的代码替换</p>\n</li>\n<li>\n<p>限制：</p>\n<ol>\n<li>\n<p>递归 —— 必须是非递归函数，因为已经加入主体部分了</p>\n</li>\n<li>\n<p>函数指针 —— 由编译系统控制，和编译器是完全相关的</p>\n<p>函数指针最主要的作用为写框架（framework）</p>\n</li>\n</ol>\n</li>\n<li>\n<p>inline 关键字 <strong>仅仅是请求</strong></p>\n<ol>\n<li>有可能是递归，无法加入</li>\n<li>也有可能是很复杂的函数，导致无法理解 (上下文比较复杂)</li>\n</ol>\n</li>\n<li>\n<p>提请 inline<strong> 被拒绝时是有代价的</strong></p>\n</li>\n<li>\n<p>如果对象的初始化 - 构造函数为明确给出，计算机会给出 inline 的构造函数</p>\n</li>\n<li>\n<p>宏: <code>max(a,b) (a) &gt; (b) ? (a) : (b)</code> ：不同于 inline 函数，一定要有括号，因为运算数据中的优先级不同</p>\n</li>\n<li>\n<p><strong>时间局部性</strong>：是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 空间局部性是指一旦程序访问了某个存储单元，则不久之后。</p>\n<p><strong>空间局部性</strong>：执行周边的代码的可能性很大，将附近的代码放到 cache 中，如果代码块过大，会造成抖动，cache 不断切换内存中的代码段。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191015068.png\" alt=\"image-20221004191015068\" /></p>\n<h2 id=\"攻击\"><a class=\"anchor\" href=\"#攻击\">#</a> 攻击</h2>\n<h3 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h3>\n<p>攻击：在 stack 中写入地址执行</p>\n<p>解决：</p>\n<ol>\n<li>W 正交 X</li>\n<li>禁止写入</li>\n</ol>\n<h3 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h3>\n<p>攻击：利用已有的代码进行攻击，比如利用 return 之前的语句</p>\n<p>解决：</p>\n<ol>\n<li>R 正交 X</li>\n<li>打乱顺序 load</li>\n<li>检测，如果多次跳转 / 踩点，则可能是攻击的代码</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191213187.png\" alt=\"image-20221004191213187\" /></p>\n<h3 id=\"rop\"><a class=\"anchor\" href=\"#rop\">#</a> ROP</h3>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>Return-oriented programming 返回导向编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名【<strong>代码签名</strong>是对可执行文件或脚本进行数字签名。用来确认软件的来源并保证在签名后未被修改或损坏的措施】等。</p>\n<p>通过上一篇文章走进栈溢出，我们可以发现栈溢出的控制点是 ret 处，那么 ROP 的核心思想就是<strong>利用以 ret 结尾的指令序列把栈中的应该返回 EIP 的地址更改成我们需要的值</strong>，从而控制程序的执行流程。</p>\n<p>ROP 方法技巧性很强，那它能完全胜任所有攻击吗？返回语句前的指令是否会因为功能单一，而无法实施预期的攻击目标呢？业界大牛已经过充分<span class=\"exturl\" data-url=\"aHR0cDovL2RsLmFjbS5vcmcvY2l0YXRpb24uY2ZtP2RvaWQ9MTEwMjEyMC4xMTAyMTY1\">研究并证明</span> ROP 方法是图灵完备的，换句话说， ROP 可以借用 libc 的指令实现任何逻辑功能。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/22/NJUSE/cpp/105-STL/",
            "url": "https://quas-modo.github.io/2022/09/22/NJUSE/cpp/105-STL/",
            "title": "105 STL",
            "date_published": "2022-09-21T23:56:44.000Z",
            "content_html": "<p>STL 算法概述<br />\n<span id=\"more\"></span></p>\n<h1 id=\"stl-standard-template-library\"><a class=\"anchor\" href=\"#stl-standard-template-library\">#</a> STL Standard Template Library</h1>\n<p>roil expressive codes<br />\nSpectacular</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmx1ZW50Y3BwLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy93b3JsZF9tYXBfODAwLmpwZw==\">img</span></p>\n<p><img data-src=\"https://www.fluentcpp.com/wp-content/uploads/2018/03/world_map_800.jpg\" alt=\"img\" /></p>\n<h2 id=\"heap\"><a class=\"anchor\" href=\"#heap\">#</a> Heap</h2>\n<p>the parent is bigger<br />\nMake_heap<br />\nPush_heap<br />\nPop_heap</p>\n<h2 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> Sort</h2>\n<p>Partial_sort<br />\nNth_element<br />\nSort_heap<br />\nInplace_merge</p>\n<h2 id=\"partition\"><a class=\"anchor\" href=\"#partition\">#</a> Partition</h2>\n<p>boolean<br />\nPartition_point</p>\n<h2 id=\"permutations\"><a class=\"anchor\" href=\"#permutations\">#</a> Permutations</h2>\n<p>Rotate</p>\n<p>​\t  put the last to the first<br />\nShuffle</p>\n<p>​\tdo randomly<br />\nNext_permutation<br />\nPrev_permutation<br />\nReverse</p>\n<h2 id=\"secret-runes\"><a class=\"anchor\" href=\"#secret-runes\">#</a> Secret runes</h2>\n<p>Stable_*<br />\nRelative order<br />\nIs_*\t<br />\nIs_*_until<br />\nDon’t hold anymore</p>\n<h2 id=\"queries\"><a class=\"anchor\" href=\"#queries\">#</a> Queries</h2>\n<h3 id=\"numeric-algorithms\"><a class=\"anchor\" href=\"#numeric-algorithms\">#</a> Numeric algorithms</h3>\n<p>Count<br />\nAccumulate<br />\nPartial_sum<br />\nInner_product<br />\nAdjacent_difference<br />\nSample<br />\nselect randomly</p>\n<h3 id=\"querying-a-property\"><a class=\"anchor\" href=\"#querying-a-property\">#</a> Querying a property</h3>\n<p>All_of<br />\nAny_of<br />\nNone_of</p>\n<h3 id=\"querying-a-property-on-2-ranges\"><a class=\"anchor\" href=\"#querying-a-property-on-2-ranges\">#</a> Querying a property on 2 ranges</h3>\n<p>Equal<br />\nSame size<br />\nEach equal<br />\nLexicographical_compare<br />\nMismatch<br />\nReturn pair&lt;iterator, iterator&gt;</p>\n<h3 id=\"searching-a-value\"><a class=\"anchor\" href=\"#searching-a-value\">#</a> Searching a value</h3>\n<p>Not sorted<br />\nFind<br />\nAdjacent_find<br />\nSorted<br />\nEqual_range<br />\nUpper_bound<br />\nBinary_search</p>\n<h3 id=\"searching-a-range\"><a class=\"anchor\" href=\"#searching-a-range\">#</a> Searching a range</h3>\n<p>Search<br />\nFind_end<br />\nFind_first_of</p>\n<h3 id=\"searching-a-relative-value\"><a class=\"anchor\" href=\"#searching-a-relative-value\">#</a> Searching a relative value</h3>\n<p>Max_element<br />\nMin_element<br />\nMinmax_element</p>\n<h2 id=\"glorious-county-of-lagos-on-sets\"><a class=\"anchor\" href=\"#glorious-county-of-lagos-on-sets\">#</a> Glorious county of Lagos on sets</h2>\n<p>Set_difference<br />\nSet_intersection<br />\nSet_union<br />\nSet_symmetric_difference<br />\nIncludes<br />\nMerge</p>\n<h2 id=\"movers\"><a class=\"anchor\" href=\"#movers\">#</a> Movers</h2>\n<p>Copy<br />\nMove<br />\nSwap_ranges<br />\nCopy_backward<br />\nMove_backward</p>\n<p>##Value Modifiers</p>\n<p>Fill<br />\nFill the same number<br />\nGenerate<br />\nIota<br />\nIncrement number<br />\nReplace</p>\n<h2 id=\"structure-changes\"><a class=\"anchor\" href=\"#structure-changes\">#</a> Structure changes</h2>\n<p>Remove<br />\nErase<br />\nUnique<br />\nRemove the adjacent same element, and move the element forward</p>\n<h3 id=\"_copy\"><a class=\"anchor\" href=\"#_copy\">#</a> *_copy</h3>\n<p>Remove_copy<br />\nUnique_copy<br />\nReverse_copy<br />\nRotate_copy<br />\nReplace_copy<br />\nPartition_copy<br />\nPartial_sort_copy</p>\n<h3 id=\"_if\"><a class=\"anchor\" href=\"#_if\">#</a> *_if</h3>\n<p>Find_if<br />\nFind_if_not<br />\nCount_if<br />\nRemove_if<br />\nRemove_copy_if<br />\nReplace_if<br />\nReplace_copy_if<br />\nCopy_if</p>\n<h2 id=\"lone-islnad\"><a class=\"anchor\" href=\"#lone-islnad\">#</a> lone islnad</h2>\n<p>Transform<br />\nIt can has more than one collection(parameters) to transform.</p>\n<p>For_each</p>\n<h2 id=\"raw-memory\"><a class=\"anchor\" href=\"#raw-memory\">#</a> Raw memory</h2>\n<p>Uninitialized_fill<br />\nUninitialized_copy<br />\nUninitialized_move<br />\nDestroy</p>\n<p>_n<br />\nFill_n<br />\nSearch_n<br />\n…</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/21/NJUSE/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/",
            "url": "https://quas-modo.github.io/2022/09/21/NJUSE/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/",
            "title": "Lecture04-第一次cpp编程",
            "date_published": "2022-09-21T15:02:26.000Z",
            "content_html": "<p>主要整理了第一次 cpp 作业的问题和想法，以及一些函数和 io。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture04\"><a class=\"anchor\" href=\"#lecture04\">#</a> Lecture04</h1>\n<h1 id=\"课程\"><a class=\"anchor\" href=\"#课程\">#</a> 课程</h1>\n<h2 id=\"imperative-programming-paradigm\"><a class=\"anchor\" href=\"#imperative-programming-paradigm\">#</a> Imperative Programming Paradigm</h2>\n<p>structure programming</p>\n<p>单入口单出口</p>\n<p>Object-Oriented Programming</p>\n<p>并没有改变 imperative programming 状态转换的思想</p>\n<h2 id=\"declarative-programming-paradigm\"><a class=\"anchor\" href=\"#declarative-programming-paradigm\">#</a> Declarative Programming Paradigm</h2>\n<p>Functional Programming</p>\n<p>Logical Programming</p>\n<h1 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h1>\n<h2 id=\"作业1复盘binary2decimal\"><a class=\"anchor\" href=\"#作业1复盘binary2decimal\">#</a> 作业 1 复盘：binary2decimal</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 一开始没有注意到边界条件，如果 b 是 0 的话，ans 为 a 不是 1，会导致返回值的错误。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 问题出在这里，弄错了 substr 的参数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cur <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> cur <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    ans <span class=\"token operator\">+=</span> cur <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>输入：1001</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>输出：str:1</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>str:00</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>str:01</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>str:1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>**/</span></pre></td></tr></table></figure><h2 id=\"作业3完成汉诺塔的最小移动次数\"><a class=\"anchor\" href=\"#作业3完成汉诺塔的最小移动次数\">#</a> 作业 3：完成汉诺塔的最小移动次数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  n <span class=\"token operator\">-=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：超时，建议用通项解决</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Created by QUAS on 2022/9/20.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 错误原因，没有及时返回 return 0，也就是遗漏讨论了三种情况</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 不用打表，通项是一样的</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"作业4倒数第i个单词的长度\"><a class=\"anchor\" href=\"#作业4倒数第i个单词的长度\">#</a> 作业 4：倒数第 i 个单词的长度</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 学习一下 split 自制函数的写法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delimiter<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> end <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    begin <span class=\"token operator\">=</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 不要忘记处理末尾部分</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  string inp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">,</span><span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"作业5\"><a class=\"anchor\" href=\"#作业5\">#</a> 作业 5：</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> ch_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> words <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ch_num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span> ret <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">></span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      flag <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> words<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ch_num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：最大的问题是出在，我没有认真看清楚题目。</p>\n<blockquote>\n<p>实现如下功能：给出一段文本，输出这段文本包含的字符数、单词数（以空格和换行符为界）和行数。</p>\n<p>输入描述 —— 保证输入中只<strong>会出现英文字母、空格（ <code>' '</code> ）和换行符（ <code>'\\n'</code> ）</strong>。输入保证每行末尾都有一个换行符。</p>\n<p>输出描述 ——<strong> 字符数、单词数和行数</strong>，用空格分隔。</p>\n</blockquote>\n<p>只会出现空格和换行符，我却企图讨论制表符等其他空字符。</p>\n<p>要求输出字符数、单词数和行数，我却在纠结空格如何计算。</p>\n<p>收获是<strong>明白了如何使用 cin.get () 和自制的 split</strong></p>\n<h2 id=\"作业6复盘找出唯一只出现一次的数其他均出现两次\"><a class=\"anchor\" href=\"#作业6复盘找出唯一只出现一次的数其他均出现两次\">#</a> 作业 6 复盘：找出唯一只出现一次的数（其他均出现两次）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> inp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">^</span> inp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意如何输入不定个数<strong> cin&gt;&gt;inp</strong>，另外可以用 **^** 操作解决</p>\n<h2 id=\"作业7复盘\"><a class=\"anchor\" href=\"#作业7复盘\">#</a> 作业 7 复盘：</h2>\n<p>INT_MAX 在 &lt;limits.h&gt; 头文件中</p>\n<h2 id=\"作业8复盘\"><a class=\"anchor\" href=\"#作业8复盘\">#</a> 作业 8 复盘：</h2>\n<p>翻转数字</p>\n<p>给定一个  <code>int</code>  类型的整数  <code>N</code> ，请你将它<em>数字部分</em> 翻转，正负性不变，并输出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> negative <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 判断是不是 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 判断是不是负数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    negative <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>negative<span class=\"token punctuation\">)</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 防止开头是 0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      l<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 判断数值有没有溢出</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 计算答案</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">==</span> INT_MIN <span class=\"token operator\">&amp;&amp;</span> negative <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>negative<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：</p>\n<ol>\n<li>未区分 0 与 '0'</li>\n<li>没有考虑到原来<strong>数字末尾有 0</strong> 的情况</li>\n<li>没有考虑到<strong>数字 0</strong> 的特殊情况</li>\n<li>因为题目要求倒序，所以在代码逻辑中有一部分比较绕（就是到底哪边是大的），然后被绕进去了，导致判断越界错误</li>\n<li>可以略略记忆一下 INT_MAX（<strong>2^31-1=2147483647</strong>）和 INT_MIN（ <strong>-2^31=-2147483648</strong>）</li>\n</ol>\n<h2 id=\"作业9复盘最大单词后缀\"><a class=\"anchor\" href=\"#作业9复盘最大单词后缀\">#</a> 作业 9 复盘：最大单词后缀</h2>\n<p>好像没什么好复盘的（</p>\n<p>一道很常见的简单算法题</p>\n<h2 id=\"作业10复盘matrix的加法-减法-乘法-卷积操作\"><a class=\"anchor\" href=\"#作业10复盘matrix的加法-减法-乘法-卷积操作\">#</a> 作业 10 复盘：matrix 的加法、减法、乘法、卷积操作</h2>\n<p>思考如何设计并简化代码</p>\n<p>呃呃一遍过，把输入写了一个函数，把 add、sub 和 mul 进行了合并，conv 没想出来怎么合并。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    item<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>elem <span class=\"token operator\">:</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      cin <span class=\"token operator\">>></span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">operateMatrix</span><span class=\"token punctuation\">(</span>string operation<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>mat1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>mat2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">||</span> operation <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span> <span class=\"token operator\">||</span> operation <span class=\"token operator\">==</span> <span class=\"token string\">\"mul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 命令为 add sub mul 的情况</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 命令为 conv 的情况</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> hei <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> wid <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hei<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> wid<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> q <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              ans <span class=\"token operator\">+=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> mat2<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> mat1<span class=\"token punctuation\">,</span> mat2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    cin <span class=\"token operator\">>></span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    cin <span class=\"token operator\">>></span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    cin <span class=\"token operator\">>></span> operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cin <span class=\"token operator\">>></span> mat1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    cin <span class=\"token operator\">>></span> mat2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">operateMatrix</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>mat1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>mat2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>顺带贴一贴 sa 酱的 60 行代码（</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bitsdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> hw<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cin <span class=\"token operator\">>></span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cin <span class=\"token operator\">>></span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cin <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        string cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cin <span class=\"token operator\">>></span> cmd <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">!=</span> <span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            res <span class=\"token operator\">+=</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关于我不会同时输入多个，和把某些值嵌入表达式中求解这件事</p>\n<h2 id=\"函数用法\"><a class=\"anchor\" href=\"#函数用法\">#</a> 函数用法</h2>\n<h3 id=\"关于substr的用法\"><a class=\"anchor\" href=\"#关于substr的用法\">#</a> 关于 substr 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">substr</span> <span class=\"token punctuation\">(</span>size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_t len <span class=\"token operator\">=</span> npos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"关于find的用法\"><a class=\"anchor\" href=\"#关于find的用法\">#</a> 关于 find 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InputIterator <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中，first 和 last 为输入迭代器，[first, last) 用于指定该函数的查找范围；val 为要查找的目标元素。</p>\n<blockquote>\n<p>正因为 first 和 last 的类型为输入迭代器，因此该函数适用于所有的序列式容器。</p>\n</blockquote>\n<p>另外，该函数会返回一个输入迭代器，当 find () 函数查找成功时，其指向的是在 [first, last) 区域内查找到的第一个目标元素；如果查找失败，则该迭代器的指向和 last 相同。</p>\n<p>值得一提的是，find () 函数的底层实现，其实就是用 <code>==</code>  运算符将 val 和 [first, last) 区域内的元素逐个进行比对。这也就意味着，[first, last) 区域内的元素必须支持 <code>==</code>  运算符。</p>\n<h3 id=\"关于自制split\"><a class=\"anchor\" href=\"#关于自制split\">#</a> 关于自制 split</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">split</span> <span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delimiter<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    begin <span class=\"token operator\">=</span> end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在我的实验（debug）中发现，如果两个字符串之间有 n（n&gt;=1）个空格，那么 vector 会插入 n-1 个空的数据。自制 split 并不能排除掉连续的多个空格。</p>\n<h3 id=\"关于自制pow\"><a class=\"anchor\" href=\"#关于自制pow\">#</a> 关于自制 pow</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>今天看数据结构，递归处理貌似更快，试一下（</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 处理边界条件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"关于vector构建多维数组-初始化-访问的方法\"><a class=\"anchor\" href=\"#关于vector构建多维数组-初始化-访问的方法\">#</a> 关于 vector 构建多维数组、初始化、访问的方法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    item<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>elem <span class=\"token operator\">:</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      cin <span class=\"token operator\">>></span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> vec1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">vec1_2D</span> <span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">vec1_3D</span><span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WIDTH<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>DEPTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zaXRpb25pc2V2ZXJ5dGhpbmcubmV0L2NwcC1tdWx0aWRpbWVuc2lvbmFsLXZlY3Rvci8=\">讲得很清楚的链接</span></p>\n<h3 id=\"关于cpp中的一些类型转换\"><a class=\"anchor\" href=\"#关于cpp中的一些类型转换\">#</a> 关于 cpp 中的一些类型转换</h3>\n<ul>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoi/\"><strong>stoi</strong></a></p>\n<p>Convert string to integer (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stol/\"><strong>stol</strong></a></p>\n<p>Convert string to long int (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoul/\"><strong>stoul</strong></a></p>\n<p>Convert string to unsigned integer (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoll/\"><strong>stoll</strong></a></p>\n<p>Convert string to long long (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoull/\"><strong>stoull</strong></a></p>\n<p>Convert string to unsigned long long (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stof/\"><strong>stof</strong></a></p>\n<p>Convert string to float (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stod/\"><strong>stod</strong></a></p>\n<p>Convert string to double (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stold/\"><strong>stold</strong></a></p>\n<p>Convert string to long double (function template)</p>\n</li>\n</ul>\n<h4 id=\"stoi\"><a class=\"anchor\" href=\"#stoi\">#</a> stoi</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> wstring<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>str</li>\n</ul>\n<p>​\t\tString object with the representation of an integral number.</p>\n<ul>\n<li>\n<p>idx</p>\n<p>Pointer to an object of type <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3NpemVfdA==\">size_t</span>, whose value is set by the function to position of the next character in <em>str</em> after the numerical value.</p>\n<p>This parameter can also be a null pointer, in which case it is not used.</p>\n</li>\n<li>\n<p>base</p>\n<p>Numerical base (radix) that determines the valid characters and their interpretation.</p>\n<p>If this is  <code>0</code> , the base used is determined by the format in the sequence (see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3N0cnRvbA==\">strtol</span> for details). Notice that by default this argument is  <code>10</code> , not  <code>0</code> .</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// stoi example</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>   <span class=\"token comment\">// std::cout</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span>     <span class=\"token comment\">// std::string, std::stoi</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_dec <span class=\"token operator\">=</span> <span class=\"token string\">\"2001, A Space Odyssey\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_hex <span class=\"token operator\">=</span> <span class=\"token string\">\"40c3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_bin <span class=\"token operator\">=</span> <span class=\"token string\">\"-10010110001\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_auto <span class=\"token operator\">=</span> <span class=\"token string\">\"0x7f\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// alias of size_t</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> i_dec <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_dec<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> i_hex <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_hex<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> i_bin <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_bin<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> i_auto <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_auto<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and [\"</span> <span class=\"token operator\">&lt;&lt;</span> str_dec<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_bin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_bin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_auto <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_auto <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"stof\"><a class=\"anchor\" href=\"#stof\">#</a> stof</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">stof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">float</span> <span class=\"token function\">stof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> wstring<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> IO</h2>\n<h3 id=\"关于读入int\"><a class=\"anchor\" href=\"#关于读入int\">#</a> 关于读入 int</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>cin &gt;&gt; n 不会读取‘\\n' ， 需要另外做处理</strong></p>\n<h3 id=\"关于ch-cinget的用法\"><a class=\"anchor\" href=\"#关于ch-cinget的用法\">#</a> 关于 ch = cin.get（）的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这样写返回字符编码（整型），其中 32 为空格，10 为换行符，小于 32 不是一般意义上的字符。</span></pre></td></tr></table></figure><h3 id=\"关于cingetch的用法\"><a class=\"anchor\" href=\"#关于cingetch的用法\">#</a> 关于 cin.get (ch) 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这样写赋值给参数 ch</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 会读入空白符</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>cin.get(ch)</th>\n<th>ch = cin.get()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传递输入字符的方式</td>\n<td>赋值给参数 ch</td>\n<td>将函数返回值赋给 ch</td>\n</tr>\n<tr>\n<td>用于字符输入时函数的返回值</td>\n<td>istream 对象（执行 bool 转换后为 true  ）</td>\n<td>int 类型的字符编码</td>\n</tr>\n<tr>\n<td>到达 EOF 时函数的返回值</td>\n<td>istream 对象（执行 bool 转换后为 false  ）</td>\n<td>EOF</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"输入string\"><a class=\"anchor\" href=\"#输入string\">#</a> 输入 string</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 以空白符或 EOF 为终止</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以换行符为终止</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 以 delimiter 为终止</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"关于getline的用法\"><a class=\"anchor\" href=\"#关于getline的用法\">#</a> 关于 getline 的用法</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">getline</span> <span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">getline</span> <span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>成功读取时返回 true，错误读取时返回 false</p>\n<p><strong>delim 会被读取！注意区分 cin 和 getline 的用法</strong></p>\n<h1 id=\"todo\"><a class=\"anchor\" href=\"#todo\">#</a> todo</h1>\n<p>复习各种数据结构的基本函数</p>\n<p>学习 template 等 cpp 中不懂的名词（孩子一无所知</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/15/NJUSE/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "url": "https://quas-modo.github.io/2022/09/15/NJUSE/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "title": "Lecture03-结构化程序设计",
            "date_published": "2022-09-15T08:12:37.000Z",
            "content_html": "<p>cpp 第三讲<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture03-结构化程序设计\"><a class=\"anchor\" href=\"#lecture03-结构化程序设计\">#</a> Lecture03 - 结构化程序设计</h1>\n<p>Data Structure + Algorithm</p>\n<p>课程结构</p>\n<ol>\n<li>\n<p>Data</p>\n</li>\n<li>\n<p>计算、控制流转换</p>\n</li>\n<li>\n<p>如何组织（function 函数的形式）</p>\n</li>\n<li>\n<p>构造数据类型（array，struct，union，pointer）</p>\n</li>\n</ol>\n<h2 id=\"data\"><a class=\"anchor\" href=\"#data\">#</a> Data</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 性质 数据类型 名  值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 地址相关 - 可以操作系统，需要接近底层</span></pre></td></tr></table></figure><h3 id=\"datatype\"><a class=\"anchor\" href=\"#datatype\">#</a> datatype</h3>\n<h4 id=\"定义值集\"><a class=\"anchor\" href=\"#定义值集\">#</a> 定义值集</h4>\n<p>int double 有限 可数 离散</p>\n<p>数据类型决定值集，决定取值范围。需要知道取值范围，从而考虑和控制<strong> overflow 溢出</strong>的问题。</p>\n<p>在计算机系统中，数值一律用<strong>补码</strong>来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>INT_MAX <span class=\"token operator\">=</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INT_MAX <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INT_MAX <span class=\"token operator\">+</span> INT_MAX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>INT_MIN <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483648</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INT_MIN <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INT_MIN <span class=\"token operator\">+</span> INT_MIN <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>typedef short INT16</p>\n<h4 id=\"定义计算\"><a class=\"anchor\" href=\"#定义计算\">#</a> 定义计算</h4>\n<ul>\n<li>\n<p>算数（移位）</p>\n</li>\n<li>\n<p>逻辑</p>\n</li>\n<li>\n<p>I/O</p>\n</li>\n</ul>\n<p><strong>cpp 类型系统 —— 强、动静结合</strong></p>\n<p>也有些语言会更加灵活，比如 duck 类型，</p>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<p>char、int、float、double</p>\n<p>Modifiers: long、short、signed、unsigned</p>\n<p>​\tchar 只能用 signed、unsigned 修饰</p>\n<p>​\tfloat 不能被修饰</p>\n<p>​\tdouble 只能用 long 修饰</p>\n<p>​\tint 可以用 4 种修饰符组合修饰</p>\n<p>省略表示</p>\n<p>操作符 sizeof</p>\n<p>ANSI C++: wchar_t、bool</p>\n<h2 id=\"表达式\"><a class=\"anchor\" href=\"#表达式\">#</a> 表达式</h2>\n<h3 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h3>\n<p>operand</p>\n<p>operator</p>\n<p>others</p>\n<h3 id=\"求值\"><a class=\"anchor\" href=\"#求值\">#</a> 求值</h3>\n<ul>\n<li>优先级</li>\n<li>结合性</li>\n<li>类型转换约定</li>\n<li>求值次序</li>\n</ul>\n<h3 id=\"种类\"><a class=\"anchor\" href=\"#种类\">#</a> 种类</h3>\n<p>赋值表达式</p>\n<p>算数表达式</p>\n<p>条件运算符表达式（三目运算符）</p>\n<p>逗号表达式</p>\n<p>字位运算符表达式</p>\n<p><strong>异或运算 ^</strong></p>\n<p>与全 0 的二进制串的运算 —— 不变</p>\n<p>与全 1 的二进制串的运算 —— 取反</p>\n<p>与本身的运算 —— 清零</p>\n<p>与同一个对象运算两次 —— 还原</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个小应用 —— 交换 ab</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> b <span class=\"token operator\">^</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"操作符可重载\"><a class=\"anchor\" href=\"#操作符可重载\">#</a> 操作符可重载</h3>\n<h2 id=\"语句\"><a class=\"anchor\" href=\"#语句\">#</a> 语句</h2>\n<h3 id=\"表达式语句\"><a class=\"anchor\" href=\"#表达式语句\">#</a> 表达式语句</h3>\n<h3 id=\"io语句\"><a class=\"anchor\" href=\"#io语句\">#</a> IO 语句</h3>\n<p>stdio.h</p>\n<p>iostream.h</p>\n<p>cin</p>\n<p>cout</p>\n<h3 id=\"控制流语句\"><a class=\"anchor\" href=\"#控制流语句\">#</a> 控制流语句</h3>\n<p>顺序、选择、重复</p>\n<p><strong>switch case 中只用整型表达式</strong> 还可以搭配 enum 语句使用，这样可以更方便阅读，也不用在文件中硬编码，可以存到文件当中。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        }
    ]
}