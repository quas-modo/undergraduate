{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture8-Graph/",
            "url": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture8-Graph/",
            "title": "Lecture8-Graph",
            "date_published": "2023-02-14T14:01:29.000Z",
            "content_html": "<h1 id=\"lecture8-图\"><a class=\"anchor\" href=\"#lecture8-图\">#</a> Lecture8 - 图</h1>\n<ul>\n<li>\n<p>考试重点</p>\n</li>\n<li>\n<p>概念：选择填空为主</p>\n</li>\n<li>\n<p>重点是理解</p>\n</li>\n<li>\n<p>连通性、各种性质</p>\n</li>\n<li>\n<p>强连通性、加权图、生成树 概念判断</p>\n</li>\n<li>\n<p><strong>邻接表、邻接矩阵</strong>要求掌握</p>\n</li>\n<li>\n<p>邻接二重表不考</p>\n</li>\n<li>\n<p>遍历要求</p>\n</li>\n<li>\n<p><strong>最小生成树算法</strong> 要求掌握重点</p>\n<ul>\n<li>kruskal</li>\n<li>prim</li>\n</ul>\n</li>\n<li>\n<p><strong>最短路径</strong> 要求掌握重点</p>\n<ul>\n<li>Dijkstra</li>\n<li><strong>BellmanFord</strong></li>\n<li><strong>Floyed</strong></li>\n</ul>\n</li>\n<li>\n<p>证明都不要求</p>\n</li>\n<li>\n<p>算法思想：除了动态规划不要求</p>\n<ul>\n<li>基本就是考考概念</li>\n</ul>\n</li>\n<li>\n<p><strong>BellmanFord 算法</strong>和<strong> Floyed 算法</strong>的算法流程要求</p>\n</li>\n<li>\n<p><strong>活动网络</strong>常考</p>\n<ul>\n<li>\n<p>包括拓扑排序</p>\n</li>\n<li>\n<p>AOV 网络：<strong>概念</strong>多，爱出题</p>\n<p>关键路径算法</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码再仔细看看</strong></p>\n<h1 id=\"图的定义\"><a class=\"anchor\" href=\"#图的定义\">#</a> 图的定义</h1>\n<ol>\n<li>\n<p><strong>Graph = (V, E)</strong></p>\n<ol>\n<li>V: nonempty finite vertice set(<strong>顶点集</strong>)  一个非空确定顶点个数的集合</li>\n<li>E: edge set (边集)</li>\n</ol>\n</li>\n<li>\n<p>Undirected Graph 无向图</p>\n<p>if the tuple denoting an edge is unordered, then (v1, v2) and (v2, v1) are the same edge.</p>\n</li>\n</ol>\n<h2 id=\"有向图\"><a class=\"anchor\" href=\"#有向图\">#</a> 有向图</h2>\n<p>If the tuple (元组) denoting an edge is ordered, then &lt;v1,v2&gt; and &lt;v2,v1&gt; are different edges.</p>\n<p>(如果表示的边的<strong>元组是有序</strong>的，也就是 &lt;v1,v2&gt; 和 &lt; v2,v1 &gt; 是不同的)</p>\n<p>v1: 始点</p>\n<p>v2: 终点</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\" alt=\"img\" /></a></p>\n<p>In a directed graph with n nodes, the number of edges &lt;=n*(n-1).  If “=” is satisfied, then it is called a complete directed  graph*.</p>\n<p>(一个有 n 个节点的有向图，其边的个数 &lt;= <em><em>n</em>(n-1)</em><em>，如果相等，则为是一个</em><em>完全有向图</em> *)</p>\n<p>完全图 (有向完全图): 指有向图中每两个顶点都相互指向。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209141507512.png\" alt=\"image-20221209141507512\" /></p>\n<h2 id=\"无向图\"><a class=\"anchor\" href=\"#无向图\">#</a> 无向图</h2>\n<p>If the tuple denoting an edge is unordered, then (v1,v2) and (v2,v1) are the same edge.</p>\n<p>(如果表示边的<strong>元组是无序</strong>的，则 (v1，v2) 和 (v2，v1) 是相同的边。)</p>\n<p>In an undirected graph with n nodes,  the number of edges &lt;=  n*(n-1)/2. If “=” is satisfied, then it is called a complete undirect  graph.</p>\n<p>(在一个有 n 个顶点的无向图中，边的个数 &lt;= <strong>n(n-1)/2</strong>，如果刚好相等，则被称为完全无向图)</p>\n<p>完全图 (无向完全图): 就是指每两个顶点之间都有一条边。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\" alt=\"img\" /></a></p>\n<h2 id=\"其他图\"><a class=\"anchor\" href=\"#其他图\">#</a> 其他图</h2>\n<p>以下两种图在我们的数据结构中不进行讨论</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\" alt=\"img\" /></a></p>\n<p><strong>不考虑 自环 (ring) 和 多重边</strong> 的多重图。</p>\n<h2 id=\"概念顶点的度数入度和出度\"><a class=\"anchor\" href=\"#概念顶点的度数入度和出度\">#</a> 概念 —— 顶点的度数（入度和出度）</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214131905817.png\" alt=\"image-20230214131905817\" /></p>\n<ol>\n<li>\n<p>对于无向图只有度数，而对于有向图不仅仅有入度，还有出度。</p>\n</li>\n<li>\n<p>degree dv of vertex v, <strong>TD(v)</strong>: is the number of edges incident on vertex v. In a directed graph :</p>\n<p>(顶点 v 的度数为 dv，TD (V) 是顶点 v 的度数，在有向图中)</p>\n<ol>\n<li>\n<p>in-degree of vertex v is the number of edges incident to v, <strong>ID(v)</strong>.</p>\n<p>(顶点 v 的入度是指向顶点 v 的边的个数)</p>\n</li>\n<li>\n<p>out-degree of vertex v is the number of edges incident from the v, <strong>OD(v)</strong>.</p>\n<p>(顶点 v 的出度从 v 出发的边的个数)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>性质：(度数)<strong>TD(v)=ID(v)+OD(v)</strong></p>\n<p>度数可以理解为，这个顶点的边</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\" alt=\"img\" /></a></p>\n<h2 id=\"图的性质\"><a class=\"anchor\" href=\"#图的性质\">#</a> 图的性质</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\" alt=\"img\" /></a></p>\n<p>所有的度数加起来是边的个数的两倍。</p>\n<h2 id=\"子图\"><a class=\"anchor\" href=\"#子图\">#</a> 子图</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132334890.png\" alt=\"image-20230214132334890\" /></p>\n<p>Graph G=(V,E),G’=(V‘,E‘), if V’包含于 V, E’包含于 E, and the vertices  incident on the edges in E’ are in V’, then G’ is the subgraph of G.</p>\n<p>如果图 G 和图 G’，如果 V’包含于 V，E’包含于 E, 并且 E’中顶点的边也在 G’中，那么 G’是 G 的子图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\" alt=\"img\" /></a></p>\n<h2 id=\"路径path\"><a class=\"anchor\" href=\"#路径path\">#</a> 路径 (path)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132326704.png\" alt=\"image-20230214132326704\" /></p>\n<p>A sequence of vertices P=i1,i2,……ik is an i1 to ik path in the graph of graph G=(V,E) iff the edge(ij,ij+1)is in E for every j, 1 &lt;= j &lt; k.</p>\n<p>在图 G=(V，E) 中，如果每 j 的边 (ij，ij+1) 在 E 中，1&lt;= j&lt; k，则顶点序列 P=i1，i2，…,ik 是 i1 到 ik 的路径。</p>\n<h2 id=\"简单路径和环simple-path-and-cycle\"><a class=\"anchor\" href=\"#简单路径和环simple-path-and-cycle\">#</a> 简单路径和环 (Simple path and cycle)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132416033.png\" alt=\"image-20230214132416033\" /></p>\n<ol>\n<li>\n<p>A Simple path is a path in which all vertices except possibly the first and last , are different.</p>\n<p>(简单路径：路径除了第一个和最后一个顶点中<strong>没有出现相同</strong>的顶点)</p>\n</li>\n<li>\n<p>A Simple cycle is a simple path with the same start and end vertex.</p>\n<p>(简单回路：起点和终点相同的时候的简单路径)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132549580.png\" alt=\"image-20230214132549580\" /></p>\n</li>\n</ol>\n<h2 id=\"连通图和连通分量connected-graph-connected-component\"><a class=\"anchor\" href=\"#连通图和连通分量connected-graph-connected-component\">#</a> 连通图和连通分量 (Connected graph &amp; Connected component)</h2>\n<ol>\n<li>\n<p>In a undirected graph, if there is a path from vertex v1 to v2, then v1 and v2 are connected.</p>\n<p>(在无向图中，如果 v1 到 v2 之间<strong>有一条路径</strong>，那么 v1 和 v2 是连通的)</p>\n</li>\n<li>\n<p>In a undirected graph ,if two <strong>arbitrary</strong> vertices are connected, then the graph is a connected graph</p>\n<p>(在无向图中，如果<strong>任意两个顶点是连通的，则该图是连通图</strong>)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\" alt=\"img\" /></a></p>\n<p><strong>极大连通子图</strong>：就是结点个数最多的连通的子图。</p>\n<h2 id=\"强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\"><a class=\"anchor\" href=\"#强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\">#</a> 强联通图和强联通分量 (Strong connected graph and strongly connected component)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132823488.png\" alt=\"image-20230214132823488\" /></p>\n<ol>\n<li>\n<p>强连通图</p>\n<p>有向图 digraph 是强连通的，当它包含从 i 到 j 和从 j 到 i 的有向路径时，对于每对不同的顶点 i 和 j</p>\n<p>简单来说就是既要过的去，也要回得来</p>\n</li>\n<li>\n<p>强连通分量</p>\n<p>The maximum strong connected subgraph (极大强连通子图) of a non-strongly  connected graph is called strongly connected conponent  (强连通分量).</p>\n<p>(一个<strong>非强连通图的最大强连通子图</strong> (South-South-PosialSuth-Posiple  Fug) 称为强连通构 (Suth-Posiple Stand))</p>\n</li>\n</ol>\n<h2 id=\"加权图network\"><a class=\"anchor\" href=\"#加权图network\">#</a> 加权图 (Network)</h2>\n<ol>\n<li>\n<p>When weights and costs are assigned to edges, the resulting data  object is called <strong>weighted graph</strong> and <strong>weighted  digraph.</strong></p>\n<p>(当权值和代价分配给边时，得到的数据对象称为<strong>加权图</strong>和<strong>加权有向图</strong>。)</p>\n</li>\n<li>\n<p>The term <strong>network</strong> refers to weighted  connected graph and weighted connected digraph.</p>\n<p>(<strong>加权图</strong>是用来代指加权连通图和加权连通有向图)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\" alt=\"img\" /></a></p>\n<h2 id=\"生成树spanning-tree\"><a class=\"anchor\" href=\"#生成树spanning-tree\">#</a> 生成树 (Spanning tree)</h2>\n<p>A spanning tree of a connected graph is its minimum connected subgraph(<strong>极小连通子图</strong>).  An n-vertex spanning tree has n-1 edges.</p>\n<p>(连通图的<strong>生成树</strong>是其极小连通子图。n 顶点生成树有 n-1 条边。)</p>\n<p>保持联通的最小边数的图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\" alt=\"img\" /></a></p>\n<h1 id=\"adt-graph-and-digraph\"><a class=\"anchor\" href=\"#adt-graph-and-digraph\">#</a> ADT Graph and Digraph</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209142531480.png\" alt=\"image-20221209142531480\" /></p>\n<h1 id=\"representation-of-graphs-and-diagraphs\"><a class=\"anchor\" href=\"#representation-of-graphs-and-diagraphs\">#</a> Representation of graphs and diagraphs</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214133528703.png\" alt=\"image-20230214133528703\" /></p>\n<h2 id=\"adjacency-matrix-邻接矩阵\"><a class=\"anchor\" href=\"#adjacency-matrix-邻接矩阵\">#</a> Adjacency Matrix 邻接矩阵</h2>\n<p>graph 无向图</p>\n<p>digraph 有向图</p>\n<h3 id=\"无向图-2\"><a class=\"anchor\" href=\"#无向图-2\">#</a> 无向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143030813.png\" alt=\"image-20221209143030813\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143125763.png\" alt=\"image-20221209143125763\" /></p>\n<ol>\n<li>无向图的邻接矩阵是一个<strong>对称矩阵</strong></li>\n<li><strong>无向图的每个顶点的度数等于矩阵中每一行的和</strong>。</li>\n</ol>\n<h3 id=\"有向图-2\"><a class=\"anchor\" href=\"#有向图-2\">#</a> 有向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143144805.png\" alt=\"image-20221209143144805\" /></p>\n<p>出度，一行的和；</p>\n<p>入度，一列的和</p>\n<h3 id=\"加权图\"><a class=\"anchor\" href=\"#加权图\">#</a> 加权图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143821067.png\" alt=\"image-20221209143821067\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143829081.png\" alt=\"image-20221209143829081\" /></p>\n<h2 id=\"代码实现数组\"><a class=\"anchor\" href=\"#代码实现数组\">#</a> 代码实现 —— 数组</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143933283.png\" alt=\"image-20221209143933283\" /></p>\n<p>dist 距离（权）</p>\n<p>template&lt;class NameType, class DistType&gt; 是一种模板，意味着 class 用 NameType 和 DistType 进行定义</p>\n<p>SeqList 是顺序表的意思</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143953116.png\" alt=\"image-20221209143953116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144000077.png\" alt=\"image-20221209144000077\" /></p>\n<h2 id=\"代码实现链表\"><a class=\"anchor\" href=\"#代码实现链表\">#</a> 代码实现 —— 链表</h2>\n<p><strong>邻接表</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144907924.png\" alt=\"image-20221209144907924\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144916071.png\" alt=\"image-20221209144916071\" /></p>\n<h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145022064.png\" alt=\"image-20221209145022064\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145032715.png\" alt=\"image-20221209145032715\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145043254.png\" alt=\"image-20221209145043254\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145423763.png\" alt=\"image-20221209145423763\" /></p>\n<h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145442706.png\" alt=\"image-20221209145442706\" /></p>\n<h3 id=\"找到在顶点表的位置\"><a class=\"anchor\" href=\"#找到在顶点表的位置\">#</a> 找到在顶点表的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145450950.png\" alt=\"image-20221209145450950\" /></p>\n<h3 id=\"给出顶点v的第一个邻接顶点的位置\"><a class=\"anchor\" href=\"#给出顶点v的第一个邻接顶点的位置\">#</a> 给出顶点 V 的第一个邻接顶点的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214134749181.png\" alt=\"image-20230214134749181\" /></p>\n<h3 id=\"找到下一个邻居\"><a class=\"anchor\" href=\"#找到下一个邻居\">#</a> 找到下一个邻居</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145509374.png\" alt=\"image-20221209145509374\" /></p>\n<h2 id=\"不考邻接多重表adjacency-multilist\"><a class=\"anchor\" href=\"#不考邻接多重表adjacency-multilist\">#</a> 【不考】邻接多重表（adjacency multilist）</h2>\n<ol>\n<li>在无向图中，如果边数为 m, 则在邻接表表示中需 2m 个单位来存储。为了克服这一缺点，采用邻接多重表，每条边用一个结点表示.\n<ul>\n<li>其中的两个结点号就是边的两个点。</li>\n<li>path1 指向的就是同样始点 (vertex1)，顺序终点的结果。</li>\n<li>path2 执行的是以 vertex2 为始点顺序向下的。</li>\n</ul>\n</li>\n<li>Eg. 使用正常的邻接表，则右边应该有 10 个点，但是多重表就是只有 5 个表\n<ul>\n<li>默认情况下边的始点的编号要小于终点的编号大小。</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151914910.png\" alt=\"image-20221209151914910\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151930870.png\" alt=\"image-20221209151930870\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\" alt=\"img\" /></a></p>\n<ol>\n<li>邻接表和邻接多重表之间的区别在于有几个顶点，有几个边。</li>\n<li>data 部分只记录 first-in 和 first-out，也就是第一条出边和第一条入边</li>\n</ol>\n<h1 id=\"图的遍历与连通性\"><a class=\"anchor\" href=\"#图的遍历与连通性\">#</a> 图的遍历与连通性</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144224188.png\" alt=\"image-20221209144224188\" /></p>\n<h2 id=\"深度优先搜索depth-first-search\"><a class=\"anchor\" href=\"#深度优先搜索depth-first-search\">#</a> 深度优先搜索 (Depth-first-search)</h2>\n<h3 id=\"算法思想\"><a class=\"anchor\" href=\"#算法思想\">#</a> 算法思想</h3>\n<p>从图中某个顶点 V0 出发，访问它，然后选择一个<strong> V0</strong> 邻接到的<strong>未被访问的一个邻接点 V1</strong> 出发深度优先遍历图，当遇到一个所有邻接于它的结点都被访问过了的结点 U 时，回退到前一次<strong>刚被访问过的拥有未被访问的邻接点 W</strong>, 再从 W 出发深度遍历，…… 直到连通图中的所有顶点都被访问过为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\" alt=\"img\" /></a></p>\n<p>递归方法实现 算法中用一个辅助数组<strong> visited []</strong>:</p>\n<p>0: 未访问</p>\n<p>1: 访问过了</p>\n<p>我们假设图为连通图</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153919037.png\" alt=\"image-20221209153919037\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153931254.png\" alt=\"image-20221209153931254\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"广度优先搜索breadth-search\"><a class=\"anchor\" href=\"#广度优先搜索breadth-search\">#</a> 广度优先搜索 (Breadth search)</h2>\n<h3 id=\"思想\"><a class=\"anchor\" href=\"#思想\">#</a> 思想</h3>\n<p>从图中某顶点 V0 出发，在访问了 V0 之后依次访问 v0 的各个未曾访问过的邻接点，然后分别从这些邻接点出发广度优先遍历图，直至图中所有顶点都被访问到为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\" alt=\"img\" /></a></p>\n<p>算法同样需要一个辅助数组<strong> visited []</strong> 表示顶点是否被访问过。还需要一个队列，记正在访问的这一层和上一层的顶点。算法显然是<strong>非递归</strong>的.</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154815385.png\" alt=\"image-20221209154815385\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154826520.png\" alt=\"image-20221209154826520\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"连通分量\"><a class=\"anchor\" href=\"#连通分量\">#</a> 连通分量</h2>\n<p>连通图：任意两个顶点是连通的。</p>\n<p>以上讨论的是对一个无向的连通图或一个强连通图的有向图进行遍历，得到一棵深度优先或广度优先生成树。但当无向图（以无向图为例）为<strong>非连通图</strong>时，从图的某一顶点出发进行遍历（深度，广度）只能访问到该顶点所在的<strong>最大连通子图</strong>（即连通分量）的所有顶点。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209155103515.png\" alt=\"image-20221209155103515\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209160239621.png\" alt=\"image-20221209160239621\" /></p>\n<p><strong>加一个循环语句即可</strong></p>\n<h1 id=\"最小生成树minimum-cost-spinning-tree-mst\"><a class=\"anchor\" href=\"#最小生成树minimum-cost-spinning-tree-mst\">#</a> 最小生成树 minimum-cost spinning tree MST</h1>\n<h2 id=\"生成树\"><a class=\"anchor\" href=\"#生成树\">#</a> 生成树</h2>\n<h3 id=\"生成树的定义\"><a class=\"anchor\" href=\"#生成树的定义\">#</a> 生成树的定义</h3>\n<ol>\n<li>设<strong> G =(V，E)<strong> 是一个</strong>连通</strong>的无向图 (或是强连通有向图) 从图 G 中的任一顶点出发作遍历图的操作，把遍历走过的边的集合记为 TE (G)，显然 **G‘=(V，TE)** 是 G 之子图， <strong>G‘被称为 G 的生成树 (spanning tree)</strong>，也称为一个连通图.</li>\n<li>n 个结点的生成树有 n-1 条边。</li>\n<li>生成树的代价 (cost)：<strong>TE (G) 上诸边的代价之和</strong></li>\n<li>生成树不唯一</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小代价生成树\"><a class=\"anchor\" href=\"#最小代价生成树\">#</a> 最小代价生成树</h3>\n<p>各边权的<strong>总和</strong>为最小的生成树</p>\n<h2 id=\"贪心grandy求解最小代价生成树\"><a class=\"anchor\" href=\"#贪心grandy求解最小代价生成树\">#</a> 贪心 (Grandy) 求解最小代价生成树</h2>\n<p>6 个城市已固定，现从一个城市发出信息到每一个城市如何选择或铺设通信线路，使花费 (造价) 最低。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\" alt=\"img\" /></a></p>\n<p>两个算法：Prim, Kruskal.</p>\n<p>它们都使用了逐步求解（贪心算法）的策略。</p>\n<h3 id=\"贪心策略的具体内容\"><a class=\"anchor\" href=\"#贪心策略的具体内容\">#</a> 贪心策略的具体内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163354394.png\" alt=\"image-20230214163354394\" /></p>\n<p>Grandy 策略：</p>\n<p>设：连通网络 N={V,E}, V 中有 n 个顶点。</p>\n<ol>\n<li T0,T1,……,Tn-1=\"\">先构造 n 个顶点，0 条边的<strong>森林</strong> F =</li>\n<li>每次向 F 中加入一条边。该边是一端在 F 的某棵树 Ti 上而另一端不在 Ti 上的所有边中具有最小权值的边。 这样使 F 中两棵树合并为一棵，树的棵数 - 1</li>\n<li>重复上述操作 n-1 次</li>\n</ol>\n<p>去掉所有边，每次加入的边是当前最小的边，并且保证这个边不是回边。</p>\n<h3 id=\"最小生成树的类声明\"><a class=\"anchor\" href=\"#最小生成树的类声明\">#</a> 最小生成树的类声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163836664.png\" alt=\"image-20221209163836664\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163925674.png\" alt=\"image-20221209163925674\" /></p>\n<h3 id=\"kruskal算法对边进行排序然后生成\"><a class=\"anchor\" href=\"#kruskal算法对边进行排序然后生成\">#</a> Kruskal 算法 (对边进行排序，然后生成)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163725826.png\" alt=\"image-20230214163725826\" /></p>\n<p>把无向图的所有边排序</p>\n<p>一开始的最小生成树为</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\" alt=\"img\" /></a></p>\n<p>在 E 中选一条代价最小的边 (u,v) 加入 T，一定要满足 (u,v) 不和 TE 中已有的边构成回路</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\" alt=\"img\" /></a></p>\n<p>一直到 TE 中加满 n-1 条边为止。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164108267.png\" alt=\"image-20221209164108267\" /></p>\n<p><strong>邻接矩阵</strong></p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164144977.png\" alt=\"image-20221209164144977\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164151523.png\" alt=\"image-20221209164151523\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164158409.png\" alt=\"image-20221209164158409\" /></p>\n<p>排序：建立最小堆</p>\n<p>出堆操作：找到最小值</p>\n<p>find 操作：？</p>\n<p>union 操作：添加到数集中</p>\n<h3 id=\"prim算法任何起点选可通达的最小权重的边\"><a class=\"anchor\" href=\"#prim算法任何起点选可通达的最小权重的边\">#</a> Prim 算法（任何起点，选可通达的最小权重的边）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214165855967.png\" alt=\"image-20230214165855967\" /></p>\n<p>设：原图的顶点集合 V (有 n 个) 生成树的顶点集合 U (最后也有 n 个)，一开始为空 TE 集合为 {}</p>\n<p>步骤：</p>\n<ol>\n<li>U={1}<strong> 任何起始顶点</strong>，TE={}</li>\n<li>每次生成 (选择) 一条边。这条边是所有边 (u,v) 中代价 (权) 最小的边， u∈U,v∈V-U TE=TE+[(u,v)]; U=U+[v]</li>\n<li>当 U≠V，返回上面一个步骤</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\" alt=\"img\" /></a></p>\n<ol>\n<li>一开始只考虑从 1 号顶点到其他顶点之间的边。\n<ul>\n<li>泛泛而言，考虑 u 和 v 之间的边</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小生成树不唯一\"><a class=\"anchor\" href=\"#最小生成树不唯一\">#</a> 最小生成树不唯一</h3>\n<ol>\n<li>对于一般的图来讲，最小生成树不唯一。</li>\n<li>所以相应的 Prime 算法和 Kruskal 算法也会出现多解的情况</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214170520688.png\" alt=\"image-20230214170520688\" /></p>\n<h3 id=\"prim算法实例\"><a class=\"anchor\" href=\"#prim算法实例\">#</a> prim 算法实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171319803.png\" alt=\"image-20230214171319803\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171407861.png\" alt=\"image-20230214171407861\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171416308.png\" alt=\"image-20230214171416308\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171427973.png\" alt=\"image-20230214171427973\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171433658.png\" alt=\"image-20230214171433658\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171439317.png\" alt=\"image-20230214171439317\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171444611.png\" alt=\"image-20230214171444611\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171452042.png\" alt=\"image-20230214171452042\" /></p>\n<h3 id=\"prim算法实现\"><a class=\"anchor\" href=\"#prim算法实现\">#</a> Prim 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172406455.png\" alt=\"image-20230214172406455\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172414957.png\" alt=\"image-20230214172414957\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172423013.png\" alt=\"image-20230214172423013\" /></p>\n<h1 id=\"最短路径\"><a class=\"anchor\" href=\"#最短路径\">#</a> 最短路径</h1>\n<ol>\n<li>设 G=(V,E) 是一个带权图 (有向，无向)，如果从顶点 v 到顶点 w 的一条路径为 (v,v1,v2,…,w)，其路径长度不大于从 v 到 w 的所有其它路径的长度，则该路径为从 v 到 w 的最短路径。</li>\n<li>背景：在交通网络中，求各城镇间的最短路径。</li>\n<li>三种算法:\n<ol>\n<li>边上权值为非负情况的从一个结点到其它各结点的最短路径 (单源最短路径)(Dijkstra 算法)</li>\n<li>边上权值为任意值的单源最短路径【边上存在负权值，但是没有负环】【不能出现小于零的环（负环），此时最小路径没有意义】</li>\n<li>边上权值为非负情况的所有顶点之间的最短路径</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"含非负权值的单源最短路径dijkstra\"><a class=\"anchor\" href=\"#含非负权值的单源最短路径dijkstra\">#</a> 含非负权值的单源最短路径 (Dijkstra)</h2>\n<p>每次从 「未求出最短路径的点」中 <strong>取出</strong> 距离距离起点 <strong>最小路径的点</strong>，以这个点为桥梁 <strong>刷新</strong>「未求出最短路径的点」的距离</p>\n<ol>\n<li>问题</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\" alt=\"img\" /></a></p>\n<h3 id=\"贪心思想\"><a class=\"anchor\" href=\"#贪心思想\">#</a> 贪心思想</h3>\n<p>起点 V0，首先直接连接，不管是否直接连接。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\" alt=\"img\" /></a></p>\n<p>排好序后，V0-V1 10 已经是最小的了，不可能再找到更短的路径</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\" alt=\"img\" /></a></p>\n<p>接下来，尝试 V0-v2 通过 V1 绕会不会比原来的更短 (考虑 V1-V2 直连)，V0-V4 从 V1 绕会不会比原来更短 (考虑 V2-V3 直连)，如果短则更新，此时 V0-V3 是三者中最小值，所以选择 V0-V3。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\" alt=\"img\" /></a></p>\n<p>尝试绕行 V3，计算直连，更新掉，然后重复</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\" alt=\"img\" /></a></p>\n<p>红色是已经选择好的，绿色是绕行选择。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\" alt=\"img\" /></a></p>\n<p><strong>贪心：当前新产生的一条最短路径能否使已有路径在一步以内变短。</strong></p>\n<p>进一步思考，就是只进行一步，不进行多步。</p>\n<p>总体来讲：不可能走更长的路径，然后回来</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\" alt=\"img\" /></a></p>\n<p>数值更新，路径数组对应位置更新</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\" alt=\"img\" /></a></p>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173554247.png\" alt=\"image-20230214173554247\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173607549.png\" alt=\"image-20230214173607549\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NumVertices <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大于所有边的权重的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> Edge<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> dist<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> path<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//v 为当前节点，dist 数组是表示距离的数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 遍历 n 次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果可达，则用 path 数组记录下路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果不可达，则用 path 数组记录下不可达 (-1)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        s<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 表示访问过当前节点，并且距离为 0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">float</span> min<span class=\"token operator\">=</span>MAXNUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>  j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 如果结点 j 还没有访问过，并且 dist [j] 小于最小值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    u <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    min <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            s<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">//dist [u] 就是起点到 u 的距离，下面是关键条件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//for</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173613313.png\" alt=\"image-20230214173613313\" /></p>\n<h2 id=\"边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\"><a class=\"anchor\" href=\"#边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\">#</a> 边上权值为任意值的单源最短路径（贝尔曼 - 福特）BellemanFord</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174453911.png\" alt=\"image-20230214174453911\" /></p>\n<p>distk 从<strong>源点 v</strong> 开始最多经过<strong>不构成带负长度边回路</strong>的<strong> k</strong> 条边的最短路径长度</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174554207.png\" alt=\"image-20230214174554207\" /></p>\n<p><strong>递推公式</strong></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/49.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/49.png\" alt=\"img\" /></a></p>\n<ol>\n<li>更新的时候都是根据前面结果，遍历计算存储</li>\n<li>所有<strong>第 k 步，只受第 k-1 步的影响</strong></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214175305102.png\" alt=\"image-20230214175305102\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BellmanFord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 动态规划</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 初始化 dist 距离数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 初始化路径数组 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>u <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>u<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\">// 一直算到 n-1 步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        path<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>时间复杂度：O (n3)</li>\n</ol>\n<h2 id=\"所有顶点之间的最短路径floyed\"><a class=\"anchor\" href=\"#所有顶点之间的最短路径floyed\">#</a> 所有顶点之间的最短路径（Floyed）</h2>\n<ol>\n<li>前提：各边权值<strong>均大于 0</strong> 的带权<strong>有向图</strong>。\n<ul>\n<li>每个顶点到自己的代价为 0</li>\n</ul>\n</li>\n<li>方法：\n<ol>\n<li>把有向图的每一个顶点作为源点，重复执行 Dijkstra 算法 n 次，执行时间为 O (n<sup>3</sup>)</li>\n<li>Floyed 方法，算法形式更简单些，但是时间仍然是 O (n<sup>3</sup>)</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/50.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/50.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/51.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/51.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/52.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/52.png\" alt=\"img\" /></a></p>\n<ol>\n<li>简单来说就是：每次都会选择一个<strong>中介点</strong>，然后遍历整个数组，更新相应的需要更新的数组。</li>\n</ol>\n<h3 id=\"floyed算法实现\"><a class=\"anchor\" href=\"#floyed算法实现\">#</a> floyed 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214193445295.png\" alt=\"image-20230214193445295\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Alllength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>j<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 路由表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>path<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>矩阵S中的元素a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>表示顶点<span class=\"token function\">i</span><span class=\"token punctuation\">(</span>第i个顶点<span class=\"token punctuation\">)</span>到顶点<span class=\"token function\">j</span><span class=\"token punctuation\">(</span>第j个顶点<span class=\"token punctuation\">)</span>的距离。矩阵P中的元素b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>，表示顶点i到顶点j经过了b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>记录的值所表示的顶点。</pre></td></tr></table></figure><ol>\n<li>算法复杂度：O (n3)</li>\n<li>参考:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">Floyed 算法</span></li>\n</ol>\n<h2 id=\"64-floyed算法参考\"><a class=\"anchor\" href=\"#64-floyed算法参考\">#</a> 6.4. Floyed 算法参考</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">最短路径问题</span></li>\n</ol>\n<h1 id=\"活动网络-activity-network常考\"><a class=\"anchor\" href=\"#活动网络-activity-network常考\">#</a> 活动网络 Activity Network（常考）</h1>\n<ol>\n<li>用顶点表示活动的网络 (AOV 网络)</li>\n<li>用边表示活动的网络 (AOE 网络)</li>\n<li>用顶点表示活动的网络</li>\n</ol>\n<h2 id=\"71-aov网络activity-on-vertex-network\"><a class=\"anchor\" href=\"#71-aov网络activity-on-vertex-network\">#</a> 7.1. AOV 网络 Activity On Vertex network</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200449558.png\" alt=\"image-20230214200449558\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/53.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/53.png\" alt=\"img\" /></a></p>\n<h3 id=\"aov网络结构\"><a class=\"anchor\" href=\"#aov网络结构\">#</a> AOV 网络结构</h3>\n<ol>\n<li><strong>图中表示课程</strong> (活动)，有向边 (弧) 表示先决条件。 若课程 i 是课程 j 的预修课程，则图中有弧 &lt; i,j&gt;</li>\n<li>AOV 网 (<strong>Activity On Vertex network</strong>)\n<ul>\n<li>用顶点表示活动，用弧表示活动间的优先关系的有向图称为 AOV 网。</li>\n</ul>\n</li>\n<li>直接前驱，直接后继\n<ul>\n<li>&lt;i,j&gt; 是网中一条弧，则 i 是 j 的直接前驱，j 是 i 的直接后继。</li>\n</ul>\n</li>\n<li>前驱，后继\n<ul>\n<li>从顶点 i-&gt; 顶点 j 有一条有向路径，则称 i 是 j 的前驱，j 是 i 的后继。</li>\n</ul>\n</li>\n<li><strong>AOV 网中，不应该出现有向环</strong></li>\n</ol>\n<h3 id=\"aov图的拓扑排序\"><a class=\"anchor\" href=\"#aov图的拓扑排序\">#</a> AOV 图的拓扑排序</h3>\n<ol>\n<li>有向图 G=(V,E),V 里结点的线性序列 (vi1,vi2,…,vin), 如果满足：在 G 中从结点 vi 到 vj 有一条路径，则序列中结点 Vi 必先于结点 vj ，称这样的线性序列为<strong>一拓扑序列</strong>。</li>\n<li>不是任何有向图的结点都可以排成拓扑序列，有环图是显然没有拓扑排序的。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200713804.png\" alt=\"image-20230214200713804\" /></p>\n<h3 id=\"拓扑算法思想\"><a class=\"anchor\" href=\"#拓扑算法思想\">#</a> 拓扑算法思想</h3>\n<ol>\n<li>从图中选择一个<strong>入度为 0</strong> 的结点输出之。(如果一个图中，同时存在多个入度为 0 的结点，则随便输出任意一个结点)</li>\n<li>从图中<strong>删掉此结点及其所有的出边</strong>。</li>\n<li>反复执行以上步骤\n<ol>\n<li>直到所有结点都输出了，则算法结束</li>\n<li><strong>如果图中还有结点，但入度不为 0</strong>，则说明有环路</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"拓扑算法实现\"><a class=\"anchor\" href=\"#拓扑算法实现\">#</a> 拓扑算法实现</h3>\n<ol>\n<li>\n<p>具体实现算法：AOV 网用<strong>邻接表</strong>来实现</p>\n<p>数组<strong> count</strong> 存放各顶点的<strong>入度</strong></p>\n</li>\n<li>\n<p>并且为了避免每次从头到尾查找入度为 0 的顶点，建立<strong>入度为 0 的顶点栈</strong>，栈顶指针为 top，初始化时为 - 1.</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/66.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/66.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/54.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/54.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214202307026.png\" alt=\"image-20230214202307026\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203538043.png\" alt=\"image-20230214203538043\" /></p>\n<p>没看懂，甚至可能是错的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//AOV 网的声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> Edge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> nodeTable <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count <span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放入度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Graph</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> vertices<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">n</span> <span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            NodeTable<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">topologicalorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 拓扑排序</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span> <span class=\"token function\">Topologicalsort</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//top 是当前找到的入度为 0 的点，top==-1 表示找不到入度为 0 的点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 初始化无入度顶点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> top <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            top <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 进行正式排序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 如果 top 变为 - 1，那么显然存在回路</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Network has a cycle\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            top <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            Edge<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> l <span class=\"token operator\">=</span> NodeTable<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>connt<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 如果完成所有节点的删除</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    top <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            l <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc29uZ2xpc29uZ2xpc29uZy9hcnRpY2xlL2RldGFpbHMvNDU1NDM0NTE=\">https://blog.csdn.net/lisonglisonglisong/article/details/45543451</span></p>\n<p>java 实现</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203659497.png\" alt=\"image-20230214203659497\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">topsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CycleFound</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Queue</span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">// 队列或者栈都可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Vertex</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> each vertex v</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        v<span class=\"token punctuation\">.</span>topNum <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span><span class=\"token comment\">//Assign next number </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> each w adjacent <span class=\"token keyword\">to</span> <span class=\"token namespace\">v</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>w<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> counter <span class=\"token operator\">!=</span> <span class=\"token constant\">NUM_VERTICES</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CycleFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h3>\n<ol>\n<li>算法分析：n 个顶点，e 条边</li>\n<li>建立链式栈 O (n)，每个结点输出一次，每条边被检查一次 O (n＋e)，所以为：O (n＋n＋e)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214201617082.png\" alt=\"image-20230214201617082\" /></p>\n<h2 id=\"72-aoe网络-activity-on-edge-network\"><a class=\"anchor\" href=\"#72-aoe网络-activity-on-edge-network\">#</a> 7.2. AOE 网络 Activity On Edge Network</h2>\n<ol>\n<li>用边表示活动的网络 (AOE 网络，Activity On Edge Network) 又称为<strong>事件顶点网络</strong></li>\n<li>顶点：\n<ul>\n<li>表示事件 (event)</li>\n<li>事件 —— 状态。表示它的入边代表的活动已完成，它的出边代表的活动可以开始，如下图 v0 表示整个工程开始，v4 表示 a4，a5 活动已完成 a7，a8 活动可开始。</li>\n</ul>\n</li>\n<li>有向边：表示活动\n<ul>\n<li>边上的权 —— 表示完成一项活动需要的时间</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/55.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/55.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/56.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/56.png\" alt=\"img\" /></a></p>\n<p><strong>有唯一的入度为 0 的开始节点</strong></p>\n<p><strong>有唯一的出度为 0 的完成结点</strong></p>\n<h3 id=\"关键路径\"><a class=\"anchor\" href=\"#关键路径\">#</a> 关键路径</h3>\n<ol>\n<li>目的：利用事件顶点网络，研究完成整个工程需要多少时间 加快那些活动的速度后，可使整个工程提前完成。</li>\n<li>关键路径：具有<strong>从开始顶点 (源点)-&gt; 完成顶点 (汇点) 的最长的路径</strong></li>\n</ol>\n<h3 id=\"一些定义\"><a class=\"anchor\" href=\"#一些定义\">#</a> 一些定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204156511.png\" alt=\"image-20230214204156511\" /></p>\n<ol>\n<li>\n<p>对于事件:</p>\n<ol>\n<li>\n<p>Ve [i]－表示事件 Vi 的可能最早发生时间：定义为从源点 V0-&gt;Vi 的<strong>最长路径长度</strong>，如 Ve [4]=7 天</p>\n</li>\n<li>\n<p>Vl [i]－表示事件 Vi 的允许的最晚发生时间：是在保证汇点 Vn-1 在 Ve [n-1] 时刻 (18) 完成的前提下，事件 Vi 允许发生的最晚时间＝ Ve [n-1]－ Vi-&gt;Vn－1 的最长路径长度。</p>\n<p><strong>是从最后汇点时间长度 - 两者之间最长路径</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/57.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/57.png\" alt=\"img\" /></a></p>\n<ol>\n<li>解释:\n<ol>\n<li>计算到最后汇点的总共最短时间：找到从源点到汇点的最大路径</li>\n<li>最早 12，因为之前不能做。</li>\n<li>最晚 12，是因为如果这时候不开始，最后完成不了。</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204912475.png\" alt=\"image-20230214204912475\" /></p>\n<p>对于活动:</p>\n<ol>\n<li>e [k]－表示活动 ak=&lt;Vi,Vj &gt; 的可能的最早开始时间。 即等于事件 Vi 的可能最早发生时间。 e [k]=Ve [i]</li>\n<li>l [k]－表示活动 ak= &lt;Vi,Vj&gt; 的允许的最迟开始时间 l [k]＝Vl [j]-dur (&lt;i,j&gt;);</li>\n<li>l [k]-e [k]－表示活动 ak 的最早可能开始时间和最迟允许开始时间的时间余量。也称为松弛时间。 (slack  time)</li>\n<li>l [k]==e [k]－表示活动 ak 是没有时间余量的<strong>关键活动</strong></li>\n<li>一开始的例子中\n<ol>\n<li>a8 的最早可能开始时间 e [8]=Ve [4]=7</li>\n<li>最迟允许开始时间 l [8]=Vl [7]-dur (&lt;4,7&gt;) =14-7=7, 所以 a8 是关键路径上的关键活动</li>\n<li>a9 的最早可能开始时间 e [9]=Ve [5]=7</li>\n<li>最迟允许开始时间 l [9]=Vl [7]-dur (&lt;5,7&gt;) =14-4=10</li>\n</ol>\n</li>\n<li>所以 l [9]-e [9]=3, 该活动的时间余量为 3，即推迟 3 天或延迟 3 天完成都不 影响整个工程的完成，它不是关键活动</li>\n</ol>\n<h3 id=\"寻找关键路径的算法\"><a class=\"anchor\" href=\"#寻找关键路径的算法\">#</a> 寻找关键路径的算法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205249995.png\" alt=\"image-20230214205249995\" /></p>\n<ol>\n<li>求各事件的可能最早发生时间 从 Ve [0]=0 开始，向前推进求其它事件的 Ve Ve [i]=max {Ve [j]+dur (&lt; Vj,Vi &gt;)},  &lt;Vj,Vi &gt; 属于 S2, i=1,2,…n－1 j S2 是所有指向顶点 Vi 的有向边 &lt; Vj,Vi  &gt; 的集合</li>\n<li>求各事件的允许最晚发生时间 从 Vl [n-1]=Ve [n-1] 开始，反向递推 Vl [i]=min {Vl [j]-dur  (&lt;Vi,Vj&gt;)},  &lt;Vi,Vj &gt; 属于 S1,  i=n-2,n-3,…0 j  S1 是所有从顶点 Vi 出发的有向边 &lt; Vi,Vj &gt; 的集合</li>\n<li>以上的计算必须在拓扑有序及逆拓扑有序的前提下进行，求 Ve [i] 必须使 Vi 的所有前驱结点的 Ve 都求得求 Vl [i] 必须使 Vi 的所有后继结点最晚发生时间都求得。</li>\n<li>求每条边 (活动) ak= &lt;Vi,Vj&gt; 的 e [k], l [k] e [k]=Ve [i];l [k]=Vl [j]-dur (&lt;Vi,Vj&gt; ),k=1,2,…e</li>\n<li><strong>如果 e [k]==l [k]，则 ak 是关键活动</strong></li>\n<li>AOE 网用邻接表来表示，并且假设顶点序列已按拓扑有序与逆拓扑有序排好。如上例:\n<ul>\n<li>先正向推，然后反向推回来。(分别计算最早时间和最晚时间)</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205442329.png\" alt=\"image-20230214205442329\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/58.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/58.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/59.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/59.png\" alt=\"img\" /></a></p>\n<h3 id=\"算法实现\"><a class=\"anchor\" href=\"#算法实现\">#</a> 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205814211.png\" alt=\"image-20230214205814211\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205823058.png\" alt=\"image-20230214205823058\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205833772.png\" alt=\"image-20230214205833772\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CriticalPath</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> e<span class=\"token punctuation\">,</span> l <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Ve<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Vl<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 初始化 Ve 数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 开始正向拓扑计算</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Edge <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span> cost <span class=\"token operator\">></span> Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 反向 Ve 数组，初始化 Vl 数组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 反向计算事件最迟开始时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            k<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost<span class=\"token operator\">&lt;</span>Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 用来比较最早开始时间和最晚开始时间，确定是否是关键路径</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            k<span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            e<span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            l<span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&lt;\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>k<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\">\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"is critical Activity\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/60.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/60.png\" alt=\"img\" /></a></p>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture04-1-%E7%89%B9%E6%AE%8A%E6%A0%91/",
            "url": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture04-1-%E7%89%B9%E6%AE%8A%E6%A0%91/",
            "title": "Lecture04.1-特殊树",
            "date_published": "2023-02-14T14:01:12.000Z",
            "content_html": "<h1 id=\"lecture041-特殊树\"><a class=\"anchor\" href=\"#lecture041-特殊树\">#</a> Lecture04.1 - 特殊树</h1>\n<p>考点</p>\n<ul>\n<li>二叉搜索树考的概率比较低（？</li>\n<li>AVL 很可能考\n<ul>\n<li>AVL 具体算法</li>\n</ul>\n</li>\n<li>证明不考\n<ul>\n<li>证明的结论要考：AVL 的复杂度</li>\n</ul>\n</li>\n<li>m - 路搜索树不太考</li>\n<li>B 树经常考，B 树的<strong>复杂度指标</strong>和<strong>算法</strong></li>\n<li>B 树算法不要求写代码、只需要知道代码流程、增删改查流程、复杂度记住</li>\n<li>AVL 树也有可能涉及代码</li>\n</ul>\n<h2 id=\"二叉搜索树-binary-search-tree\"><a class=\"anchor\" href=\"#二叉搜索树-binary-search-tree\">#</a> 二叉搜索树 Binary Search Tree</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222132740.png\" alt=\"image-20230213222132740\" /></p>\n<p>Definition: A binary search tree is a binary tree that may be empty. A  nonempty binary search tree satisfies the following  properties:(二叉搜索树是一个可以为空的二叉树。一个非空的二叉树都满足如下性质)</p>\n<ol>\n<li>每一个元素都含有一个关键字，并且每一个元素都有<strong>独一无二</strong>的关键字</li>\n<li>一个树的<strong>左子树</strong>的关键字<strong>小于</strong>根中的关键字</li>\n<li>一个树的<strong>右子树</strong>的关键字<strong>大于</strong>根中的关键字</li>\n<li>根的左右子树还是二叉搜索树</li>\n</ol>\n<p><strong>它的左子树中所有项的值小于 X 中的值，它的右子树中所有项的值大于 X 中的值。</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222444146.png\" alt=\"image-20230213222444146\" /></p>\n<h3 id=\"索引二叉树\"><a class=\"anchor\" href=\"#索引二叉树\">#</a> 索引二叉树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222507520.png\" alt=\"image-20230213222507520\" /></p>\n<p>索引二叉搜索树是通过将字段 leftSize 添加到每个树节点，从普通二叉搜索树派生而来的。</p>\n<p>leftsize = 左子树大小 + 1</p>\n<h3 id=\"类代码\"><a class=\"anchor\" href=\"#类代码\">#</a> 类代码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222605657.png\" alt=\"image-20230213222605657\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">BinaryNode</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> theElement <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span> theElement<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用本类中的其他构造方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">BinaryNode</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span>  theElement<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">BinaryNode</span> lt<span class=\"token punctuation\">,</span><span class=\"token class-name\">BinaryNode</span> rt <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        element <span class=\"token operator\">=</span> theElement</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        left <span class=\"token operator\">=</span> lt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        right <span class=\"token operator\">=</span> rt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Comparable</span> element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">BinaryNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">BinaryNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"方法定义\"><a class=\"anchor\" href=\"#方法定义\">#</a> 方法定义</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222746263.png\" alt=\"image-20230213222746263\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222859297.png\" alt=\"image-20230213222859297\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222909131.png\" alt=\"image-20230213222909131\" /></p>\n<h4 id=\"方法代码\"><a class=\"anchor\" href=\"#方法代码\">#</a> 方法代码</h4>\n<h5 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213222959678.png\" alt=\"image-20230213222959678\" /></p>\n<p>层层递归查找，按照左小右大</p>\n<h5 id=\"findmin\"><a class=\"anchor\" href=\"#findmin\">#</a> findMin</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223124884.png\" alt=\"image-20230213223124884\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用递归查找结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BinaryNode</span> t <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>left <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 迭代找最小结点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryNode</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"findmax\"><a class=\"anchor\" href=\"#findmax\">#</a> findMax</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223131680.png\" alt=\"image-20230213223131680\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 递归找到最大结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BinaryNode</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 迭代找到最大结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BinaryNode</span> t <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"insertion\"><a class=\"anchor\" href=\"#insertion\">#</a> insertion</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223308352.png\" alt=\"image-20230213223308352\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223317803.png\" alt=\"image-20230213223317803\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将数值插入固定位置的算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BinaryNode</span> t <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 先查找一次，如果找到了就不用进行查找</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryNode</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>left <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//duplicate; do nothing</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//compareTo () 方法如果小于返回负数，大于返回正数</span></pre></td></tr></table></figure><h5 id=\"删除算法\"><a class=\"anchor\" href=\"#删除算法\">#</a> 删除算法</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223544672.png\" alt=\"image-20230213223544672\" /></p>\n<ol>\n<li>如果结点本身不在树内，那么不需要删除</li>\n<li>如果结点本身在树里面，删除需要分类\n<ol>\n<li>无子树：删除叶节点</li>\n<li>一颗子树：直接连接</li>\n<li>两颗子树：可以选择<strong>左子树的最大结点</strong>或者<strong>右子树的最小节点</strong>作为新结点</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213223555578.png\" alt=\"image-20230213223555578\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BinaryNode</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BinaryNode</span> t <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//x 为需要删除的节点的值，t 为需要遍历的二叉搜索树</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>left <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        t<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把右树最小的复制给 t</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 递归的删除</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span><span class=\"token comment\">// 一颗子树的情况</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"高度\"><a class=\"anchor\" href=\"#高度\">#</a> 高度</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224123444.png\" alt=\"image-20230213224123444\" /></p>\n<p>二叉搜索树的<strong>高度</strong>会影响搜索，插入和删除算法的<strong>时间复杂度</strong></p>\n<p>最坏的情况：就是把一个有序的数列添加进入到空的二叉搜索树中去。时间复杂度为 O (n)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224232979.png\" alt=\"image-20230213224232979\" /></p>\n<p>最好的情况：时间复杂度为<strong> O (log<sub>2</sub>n)</strong></p>\n<h2 id=\"avl-tree-自平衡的二叉搜索树\"><a class=\"anchor\" href=\"#avl-tree-自平衡的二叉搜索树\">#</a> AVL Tree 自平衡的二叉搜索树</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224354966.png\" alt=\"image-20230213224354966\" /></p>\n<p>AVL 是人的名字</p>\n<p>目的：AVL 树是一个用来增加二叉搜索树的平衡性并且减小平均搜索高度</p>\n<p>AVL 的高度是 **O (log2n)** 的，所以对应的算法复杂度也是这样的。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224412073.png\" alt=\"image-20230213224412073\" /></p>\n<h3 id=\"avl的定义\"><a class=\"anchor\" href=\"#avl的定义\">#</a> AVL 的定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224420656.png\" alt=\"image-20230213224420656\" /></p>\n<ol>\n<li>是二叉搜索树（<strong>左小右大</strong>）</li>\n<li><strong>左右子树的高度差不超过 1</strong></li>\n<li>注：树叶之间之差未必小于一，但是一个节点的左右子树的高度不能大于一</li>\n</ol>\n<h3 id=\"高度-2\"><a class=\"anchor\" href=\"#高度-2\">#</a> 高度</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224643499.png\" alt=\"image-20230213224643499\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224926723.png\" alt=\"image-20230213224926723\" /></p>\n<p>AVL 树高从根节点到每一个叶节点之间的所有路径的最长的一条</p>\n<p>x 节点 x 的平衡因子 = <strong>x 的右树的高度 - x 的左树的高度</strong>（可参考下图理解）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213224849053.png\" alt=\"image-20230213224849053\" /></p>\n<h3 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213225132354.png\" alt=\"image-20230213225132354\" /></p>\n<h4 id=\"情况1单旋转调整\"><a class=\"anchor\" href=\"#情况1单旋转调整\">#</a> 情况 1：单旋转调整</h4>\n<p><strong>外侧</strong> —— 从不平衡结点沿刚才回溯的路径取<strong>直接下两层</strong>，如果三个节点处于一直线 ACE</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105103638784.png\" alt=\"image-20221105103638784\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105104653916.png\" alt=\"image-20221105104653916\" /></p>\n<p>考试会考如何构造 AVL 树</p>\n<h4 id=\"情况2双旋转调整\"><a class=\"anchor\" href=\"#情况2双旋转调整\">#</a> 情况 2：双旋转调整</h4>\n<p>内侧 —— 从不平衡结点沿刚才回溯的路径取直接下两层，如果三个结点处于一折线 ACD</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105103654182.png\" alt=\"image-20221105103654182\" /></p>\n<p><strong>优先调整子树的平衡性</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105103816114.png\" alt=\"image-20221105103816114\" /></p>\n<h4 id=\"优先调整子树的平衡性\"><a class=\"anchor\" href=\"#优先调整子树的平衡性\">#</a> 优先调整子树的平衡性</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213230838077.png\" alt=\"image-20230213230838077\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213230942435.png\" alt=\"image-20230213230942435\" /></p>\n<h3 id=\"构建例子\"><a class=\"anchor\" href=\"#构建例子\">#</a> 构建例子</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213231007733.png\" alt=\"image-20230213231007733\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213231051393.png\" alt=\"image-20230213231051393\" /></p>\n<p>单旋转：<strong>外侧</strong> — 从不平衡结点沿刚才回溯的路径取直接下两层如果三个结点处于<strong>一直线 A，C，E</strong></p>\n<p>双旋转：<strong>内侧</strong> — 从不平衡结点沿刚才回溯的路径取直接下两层如果三个结点处于<strong>一折线 A，C，D</strong></p>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105104940044.png\" alt=\"image-20221105104940044\" /></p>\n<h4 id=\"insert\"><a class=\"anchor\" href=\"#insert\">#</a> insert</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105104956823.png\" alt=\"image-20221105104956823\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105105125369.png\" alt=\"image-20221105105125369\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AVLNode</span> t <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLNode</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        t<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不仅 x 插入左子树，而其左子树已经调平衡了，也就会子树已经旋转过了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> – <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 根据大小进行调整</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                t <span class=\"token operator\">=</span> rotateWithLeftChild <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 左子树的左子树，只要做一次左向单旋</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">doubleWithLeftChild</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 左子树的右子树，需要做一次左向双选</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 下面是对称的插入在右子树上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>–<span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                t <span class=\"token operator\">=</span> <span class=\"token function\">rotateWithRightChild</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">else</span> t <span class=\"token operator\">=</span> <span class=\"token function\">doubleWithRightChild</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关键码为 x，需要插入的树根为 t</p>\n<h4 id=\"rotatewithleftchild\"><a class=\"anchor\" href=\"#rotatewithleftchild\">#</a> rotateWithLeftChild</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105105956266.png\" alt=\"image-20221105105956266\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AVLNode</span> <span class=\"token function\">rotateWithLeftChild</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">AVLNode</span> k2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">AVLNode</span> k1 <span class=\"token operator\">=</span> k2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span><span class=\"token comment\">//k1 持有 k2 的左子树</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    k2<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> k1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span><span class=\"token comment\">//k1 的右子树挂到 k2 的左子树上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    k1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> k2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 k2 自己挂到 k1 的右子树上</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    k2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>k2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>k2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    k1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> k1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>右下旋</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt6/9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/9.png\" alt=\"img\" /></a></p>\n<p>右内侧</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt6/27.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/27.png\" alt=\"img\" /></a></p>\n<pre><code>private  static AVLNode doubleWithLeftChild( AVLNode k3 ) &#123;\n    k3.left = rotateWithRightChild(k3.left);\n    return rotateWithLeftChild( k3 );\n&#125;\n</code></pre>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232225699.png\" alt=\"image-20230213232225699\" /></p>\n<h3 id=\"avl树的删除\"><a class=\"anchor\" href=\"#avl树的删除\">#</a> AVL 树的删除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232253583.png\" alt=\"image-20230213232253583\" /></p>\n<p><strong>与二叉搜索树一样，但是会影响平衡</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232403217.png\" alt=\"image-20230213232403217\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232518673.png\" alt=\"image-20230213232518673\" /></p>\n<h3 id=\"算法分析\"><a class=\"anchor\" href=\"#算法分析\">#</a> 算法分析</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105142740797.png\" alt=\"image-20221105142740797\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105142754321.png\" alt=\"image-20221105142754321\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105142834762.png\" alt=\"image-20221105142834762\" /></p>\n<h2 id=\"b树\"><a class=\"anchor\" href=\"#b树\">#</a> B 树</h2>\n<h3 id=\"m叉搜索树\"><a class=\"anchor\" href=\"#m叉搜索树\">#</a> m 叉搜索树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232626574.png\" alt=\"image-20230213232626574\" /></p>\n<p>m-way 搜索树可能为空。如果是一个非空的树，则为满足以下属性的树：</p>\n<ol>\n<li>在相应的扩展搜索树 (用外部节点替换零指针获得) 中，每个内部节点最多有 m 个子节点，在 1 到 m-1 个元素之间。</li>\n<li>每个具有 p 元素的节点正好有 p+1 子节点。</li>\n<li>假设任何节点都有 p 个元素，那么 C0 - Cp 是他们对应的 p+1 个子元素。</li>\n</ol>\n<p>区分<strong> element</strong> 和<strong> children</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213232657935.png\" alt=\"image-20230213232657935\" /></p>\n<ul>\n<li>C0: The elements in the subtree with root c0 have  keys smaller than k1 (在以 C0 为根的所有子树中的结点的值都小于 k1)</li>\n<li>Cp: Elements in the subtree with root cp have keys larger than kp (在以 Cp 为根的子树中的所有子树的值都大于 Kp)</li>\n<li>Ci: Elements in the subtree with root ci have keys larger than ki but smaller than ki+1, 1&lt;=i&lt;=p.</li>\n</ul>\n<h4 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233303051.png\" alt=\"image-20230213233303051\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233335199.png\" alt=\"image-20230213233335199\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233341110.png\" alt=\"image-20230213233341110\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233412312.png\" alt=\"image-20230213233412312\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105141619942.png\" alt=\"image-20221105141619942\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233512147.png\" alt=\"image-20230213233512147\" /></p>\n<h4 id=\"m路搜索树的高度\"><a class=\"anchor\" href=\"#m路搜索树的高度\">#</a> m 路搜索树的高度</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233532576.png\" alt=\"image-20230213233532576\" /></p>\n<p>一个高为 h 的 m 路搜索树最少有 h 个结点 (每一层只有一个结点)，最多有 mh-1 个结点</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233552960.png\" alt=\"image-20230213233552960\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233602712.png\" alt=\"image-20230213233602712\" /></p>\n<p>n 个元素的 m 路搜索树，高度在 log<sub>m</sub>(n+1) and n</p>\n<p>n: 2005-1 =32*1010-1</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213233611096.png\" alt=\"image-20230213233611096\" /></p>\n<h3 id=\"平衡的m路搜索树b树\"><a class=\"anchor\" href=\"#平衡的m路搜索树b树\">#</a> 平衡的 m 路搜索树 ——B 树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105141136931.png\" alt=\"image-20221105141136931\" /></p>\n<ol>\n<li>树根至少要有两个分叉（树根至少有一个 key 值）</li>\n<li>除了树根，其他结点至少要有 m/2 向上取值的分叉</li>\n<li>外结点要在同一层</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213234004145.png\" alt=\"image-20230213234004145\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213234158821.png\" alt=\"image-20230213234158821\" /></p>\n<p>3 路 b 树的示例</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213234203657.png\" alt=\"image-20230213234203657\" /></p>\n<h4 id=\"性质\"><a class=\"anchor\" href=\"#性质\">#</a> 性质</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221105141741349.png\" alt=\"image-20221105141741349\" /></p>\n<p>所有的外部结点都有相同的层数</p>\n<p>外部结点的个数，是所有的 key 值个数加 1。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213234309056.png\" alt=\"image-20230213234309056\" /></p>\n<p>B 树的搜索算法和 m 叉搜索树的搜索算法是一样的。</p>\n<p>算法分析：</p>\n<ul>\n<li>对于高度为 h 的 B 树，访问磁盘的次数最多为 h 次</li>\n<li>T 是 m 阶高度为 h 的 B 树，在 T 中的结点个数为 n，每一次我们把一个结点读入内存。那么 n+1 个外部结点在第 h 层</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221111140753407.png\" alt=\"image-20221111140753407\" /></p>\n<p>高度为 h，key 值最少。【B 树每层有最少节点要求】</p>\n<p>key 值最少为  2*(m/2)<sup>h-1</sup> - 1， 小于此值到不了高度 h</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221111141238435.png\" alt=\"image-20221111141238435\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235151318.png\" alt=\"image-20230213235151318\" /></p>\n<h4 id=\"插入-2\"><a class=\"anchor\" href=\"#插入-2\">#</a> 插入</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235156688.png\" alt=\"image-20230213235156688\" /></p>\n<p>如果叶节点还没有满的时候，直接插入即可</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235206136.png\" alt=\"image-20230213235206136\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235210520.png\" alt=\"image-20230213235210520\" /></p>\n<p>如果叶节点已经满了的时候，会进行分类，将中间节点的一个值拉到上级结点 (这个结点在中间)。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235523691.png\" alt=\"image-20230213235523691\" /></p>\n<p>插入到一个有 m 个子结点的节点中，比如 25 插入上面那个例子中，满了的节点会分裂成两个节点，就是把<strong>中间的提升，将剩下的裂开</strong></p>\n<p>一个新的指针会被添加指向满了的结点的父结点</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235528749.png\" alt=\"image-20230213235528749\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235533045.png\" alt=\"image-20230213235533045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235538373.png\" alt=\"image-20230213235538373\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235546867.png\" alt=\"image-20230213235546867\" /></p>\n<p>如果插入操作会导致 s 个结点进行分裂，那么磁盘查找次数为</p>\n<p>树高 h (在搜索路径上读，查找)+2s (写入 2s 次的分裂)+1 (有可能是创建新的结点，也可能是修改一个节点</p>\n<p><strong>h + 2s + 1</strong></p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235555527.png\" alt=\"image-20230213235555527\" /></p>\n<ol>\n<li>将要被删除的元素的关键码的子节点是外部结点 [小正方形]\n<ul>\n<li>如果有超过 (m/2)(向上取整) 个关键码，直接删除</li>\n<li>如果关键码个数不足 (m/2)(向上取整) 个，那么向邻居<strong>借关键码</strong>，如果够借，那么进行调整。如果不够借，那么合并邻居与此节点 (还要拉下来一个上级节点的关键码)，这样子也可能会导致上级节点的关键码不足，如果根节点合并，则其高度被减少 1</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235601059.png\" alt=\"image-20230213235601059\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235614382.png\" alt=\"image-20230213235614382\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235606960.png\" alt=\"image-20230213235606960\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235621252.png\" alt=\"image-20230213235621252\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235625986.png\" alt=\"image-20230213235625986\" /></p>\n<ol start=\"2\">\n<li>要被删除的结点是一个非叶节点</li>\n</ol>\n<ul>\n<li>删除这个节点</li>\n<li>把这个节点替换成右子树中的最小关键码 (或者左子树中的最大关键码)</li>\n<li>因为相当于删除了右子树的最小关键码 (或者左子树中的最大关键码)，所以重复删除叶结点关键码的操作。</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235632642.png\" alt=\"image-20230213235632642\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235637916.png\" alt=\"image-20230213235637916\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213235644153.png\" alt=\"image-20230213235644153\" /></p>\n<ol>\n<li>S is the number of elements in the node (是节点的元素的个数)</li>\n<li>ei are the elements in ascending order of key (将元素按照键值升序排列)</li>\n<li>Ci are children pointers (子树结点)</li>\n</ol>\n<h2 id=\"b树考试不考\"><a class=\"anchor\" href=\"#b树考试不考\">#</a> B + 树（考试不考）</h2>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture04-%E6%A0%91/",
            "url": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture04-%E6%A0%91/",
            "title": "Lecture04-树",
            "date_published": "2023-02-14T14:00:55.000Z",
            "content_html": "<h1 id=\"树\"><a class=\"anchor\" href=\"#树\">#</a> 树</h1>\n<ul>\n<li>概念：选择填空</li>\n<li>完全二叉树的表示法、物理层表示法、链接表示法、游标表示法、静态数组表示法</li>\n<li><strong>遍历</strong>肯定要考：先序中序后序</li>\n<li>广义表一般不考</li>\n<li>字符串只有考的很简单的时候才会考，考的概率不大</li>\n<li><strong>双亲表示法</strong>在并查集里会用、会考</li>\n<li>左子女右兄弟</li>\n<li>遍历\n<ul>\n<li>二叉树</li>\n<li>森林</li>\n</ul>\n</li>\n<li><strong>线索化树</strong>常考</li>\n<li><strong>霍夫曼树、霍夫曼编码</strong>（偶尔会考，像并查集、散列表</li>\n</ul>\n<h2 id=\"数据结构的分类\"><a class=\"anchor\" href=\"#数据结构的分类\">#</a> 数据结构的分类</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030172022029.png\" alt=\"image-20221030172022029\" /></p>\n<ol>\n<li>线性的</li>\n<li>非线性的</li>\n</ol>\n<h2 id=\"树的基本定义\"><a class=\"anchor\" href=\"#树的基本定义\">#</a> 树的基本定义</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030172228179.png\" alt=\"image-20221030172228179\" /></p>\n<ol>\n<li>定义: A tree T is a collection of nodes (element). <strong>树 T 是结点的集合</strong></li>\n<li>The collection can be empty; otherwise, a tree consists of a  distinguished node r, called the root, and zero or more  nonempty(sub)trees T1, T2, ……, Tk(<strong>这个集合可能为空，否则这个树是由一个特殊的根节点和 0 个或多个子树组成</strong>)</li>\n</ol>\n<p><strong>递归</strong>的方式定义 ——</p>\n<p>树保证了最坏情形下的时间界，其大部分操作的运行时间平均为 O (log N)。</p>\n<p>这种数据结构叫作二叉查找树，是两种库集合类 TreeSet 和 TreeMap 实现的基础。</p>\n<h2 id=\"与树有关的概念\"><a class=\"anchor\" href=\"#与树有关的概念\">#</a> 与树有关的概念</h2>\n<h3 id=\"度\"><a class=\"anchor\" href=\"#度\">#</a> 度</h3>\n<p>Degree of an elements (node) 节点的度数：有多少个子节点</p>\n<p>Degree of a tree 树的度：树里面结点的最大的度数</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030172256295.png\" alt=\"image-20221030172256295\" /></p>\n<h3 id=\"叶\"><a class=\"anchor\" href=\"#叶\">#</a> 叶</h3>\n<p>Leaf 叶节点：树里面度数为 0 的节点。</p>\n<h3 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h3>\n<p>Branch 分支节点：树里面度数不为 0 的节点。</p>\n<h3 id=\"层\"><a class=\"anchor\" href=\"#层\">#</a> 层</h3>\n<p>root 的层次为 0 或 1</p>\n<p>节点的层次等于其父结点的层次 + 1</p>\n<h3 id=\"深度\"><a class=\"anchor\" href=\"#深度\">#</a> 深度</h3>\n<p>从根到 Ni 的唯一的路径的长</p>\n<h3 id=\"高度\"><a class=\"anchor\" href=\"#高度\">#</a> 高度</h3>\n<p>Ni 到一片树叶的最长路径的长</p>\n<p>一棵树的高度取决于它根的高度</p>\n<p>高度和深度是一样的，<strong>最大的层次</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213165124492.png\" alt=\"image-20230213165124492\" /></p>\n<h2 id=\"树的实现\"><a class=\"anchor\" href=\"#树的实现\">#</a> 树的实现</h2>\n<p>由链表或数组实现</p>\n<h2 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<ol>\n<li>二叉树的定义：A binary tree t is a finite (possibly empty) collection of elements.(<strong>二叉树 t 是一个有限的节点的集合</strong>)</li>\n<li>二叉树的特点:\n<ul>\n<li>每个结点<strong>最多</strong>有两棵子树，即二叉树不存在度大于 2 的结点。</li>\n<li>二叉树的子树有左右之分，其子树的次序不能颠倒。</li>\n</ul>\n</li>\n</ol>\n<p>每个节点都不能有<strong>多于两个</strong>的儿子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Class BinaryNode<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tObject element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tBinaryNode left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBinaryNode right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213170133517.png\" alt=\"image-20230213170133517\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213170140095.png\" alt=\"image-20230213170140095\" /></p>\n<h3 id=\"二叉树的性质考前重点\"><a class=\"anchor\" href=\"#二叉树的性质考前重点\">#</a> 二叉树的性质 (考前重点)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213165500823.png\" alt=\"image-20230213165500823\" /></p>\n<p>n 个结点的二叉树之间有 n-1 条边。</p>\n<p>第 i 层的节点数最多是 2i 个</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213165516649.png\" alt=\"image-20230213165516649\" /></p>\n<p>高度为 h (从 0 开始计) 的二叉树中结点最少 h+1 个，最多 2h+1-1</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213165553577.png\" alt=\"image-20230213165553577\" /></p>\n<p>如果一颗二叉树有 n0 个树叶，并且结点度数为 2 的节点有 n2 个，则 n0=n2+1 个</p>\n<p><code>n = B + 1</code></p>\n<p>结点数是 1*（一个子节点） + 2 *（两个子节点） + 根节点</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213165601962.png\" alt=\"image-20230213165601962\" /></p>\n<p>有 n 个结点的二叉树的高度最大为 n-1，最小为 log2 (n+1)(向上取整)-1</p>\n<h3 id=\"满二叉树\"><a class=\"anchor\" href=\"#满二叉树\">#</a> 满二叉树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030174641480.png\" alt=\"image-20221030174641480\" /></p>\n<p>树中每个分支结点（非叶结点）都有两棵非空子树【定义略有不同】</p>\n<h3 id=\"完全二叉树\"><a class=\"anchor\" href=\"#完全二叉树\">#</a> 完全二叉树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030174745525.png\" alt=\"image-20221030174745525\" /></p>\n<p>定义：Suppose we number the elements in a full binary tree of height h using the number 1 through 2h+1 (假设我们为一个高度为 h 的满二叉树进行使用 1 - 2h+1 的数字进行编码)</p>\n<p>We began at level 0 and go down to level h.Within levels the elements are numbered left to right. （我们从 0 层到 h 层，<strong>从上到下，从左到右</strong>进行编码）</p>\n<p>完全二叉树和满二叉树是不同的，完全二叉树的最后一层可以不全满，但是必须从左开始顺序无空缺。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213173126203.png\" alt=\"image-20230213173126203\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213173311857.png\" alt=\"image-20230213173311857\" /></p>\n<p>完全二叉树的性质</p>\n<h3 id=\"数组实现\"><a class=\"anchor\" href=\"#数组实现\">#</a> 数组实现</h3>\n<ol>\n<li>其标记为其在数组中的下标，使用数组来存储。</li>\n<li>常规二叉树的数组表示的位置上一定有空的。\n<ul>\n<li>很稀疏的二叉树会导致数组存储二叉树有大量的内存空间被浪费掉。</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213173727696.png\" alt=\"image-20230213173727696\" /></p>\n<h3 id=\"链表实现\"><a class=\"anchor\" href=\"#链表实现\">#</a> 链表实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213173752665.png\" alt=\"image-20230213173752665\" /></p>\n<p>Linked representation (also called L-R linked storage) 也被称为 L-R 链表存储。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt5/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a></p>\n<h3 id=\"cursor\"><a class=\"anchor\" href=\"#cursor\">#</a> cursor</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213173845845.png\" alt=\"image-20230213173845845\" /></p>\n<h3 id=\"二叉树的实现\"><a class=\"anchor\" href=\"#二叉树的实现\">#</a> 二叉树的实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030175627472.png\" alt=\"image-20221030175627472\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030175641624.png\" alt=\"image-20221030175641624\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213174146030.png\" alt=\"image-20230213174146030\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213174209464.png\" alt=\"image-20230213174209464\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213174224136.png\" alt=\"image-20230213174224136\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> BinaryTree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> leftch<span class=\"token punctuation\">,</span>BinaryTree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rightch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    root<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">BinaryNode</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> leftch<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span> rightch<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    leftch<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> rightch<span class=\"token punctuation\">.</span>root<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BreakTree</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> data<span class=\"token punctuation\">,</span> BinaryTree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> leftch<span class=\"token punctuation\">,</span>BinaryTree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> rightch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">BadInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//tree empty </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    data<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    leftch<span class=\"token punctuation\">.</span>root<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">;</span> rightch<span class=\"token punctuation\">.</span>root<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    root<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;binary.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BinaryTree<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ct</span><span class=\"token punctuation\">(</span>BinaryTreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    a<span class=\"token punctuation\">.</span><span class=\"token function\">MakeTree</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    z<span class=\"token punctuation\">.</span><span class=\"token function\">MakeTree</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    x<span class=\"token punctuation\">.</span><span class=\"token function\">MakeTree</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    y<span class=\"token punctuation\">.</span><span class=\"token function\">MakeTree</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    y<span class=\"token punctuation\">.</span><span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>count<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二叉树的遍历递归和迭代访问\"><a class=\"anchor\" href=\"#二叉树的遍历递归和迭代访问\">#</a> 二叉树的遍历（递归和迭代访问）</h3>\n<ol>\n<li>以下算法中的二叉树是通过链表实现的。</li>\n<li>Each element is visited exactly once\n<ul>\n<li>V----- 表示访问一个结点 vertice</li>\n<li>L----- 表示访问 V 的左子树 left tree</li>\n<li>R----- 表示访问 V 的右子树 right tree</li>\n<li>所有的遍历顺序：VLR\\LVR、LRV、VRL、RVL、RLV</li>\n</ul>\n</li>\n<li>常用的遍历顺序\n<ul>\n<li>先序遍历：VLR</li>\n<li>中序遍历：LVR</li>\n<li>后序遍历：LRV</li>\n<li>广度优先遍历：先处理树根节点，然后处理靠近的第一层的节点</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030181503182.png\" alt=\"image-20221030181503182\" /></p>\n<p>前序遍历、中序遍历和后序遍历都可用递归 / 非递归实现</p>\n<ol>\n<li>\n<p>前序遍历</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030181902464.png\" alt=\"image-20221030181902464\" /></p>\n</li>\n<li>\n<p>中序遍历</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030182553336.png\" alt=\"image-20221030182553336\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030182825664.png\" alt=\"image-20221030182825664\" /></p>\n</li>\n<li>\n<p>后序遍历</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030182605342.png\" alt=\"image-20221030182605342\" /></p>\n</li>\n</ol>\n<p><strong>后序遍历的非递归法</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030183108135.png\" alt=\"image-20221030183108135\" /></p>\n<p>层序遍历</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030182016626.png\" alt=\"image-20221030182016626\" /></p>\n<p>把子树放到队列里，然后访问子树的下一个节点，弹出子树。</p>\n<h3 id=\"创建二叉树\"><a class=\"anchor\" href=\"#创建二叉树\">#</a> 创建二叉树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213175648738.png\" alt=\"image-20230213175648738\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213175658686.png\" alt=\"image-20230213175658686\" /></p>\n<h4 id=\"利用前序和中序构造一棵二叉树\"><a class=\"anchor\" href=\"#利用前序和中序构造一棵二叉树\">#</a> 利用前序和中序构造一棵二叉树</h4>\n<p>返回 void</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221102103900804.png\" alt=\"image-20221102103900804\" /></p>\n<p>返回 <code>BinaryNode&lt;Type&gt;</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221102103915280.png\" alt=\"image-20221102103915280\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213195431877.png\" alt=\"image-20230213195431877\" /></p>\n<h3 id=\"已知中序与后序能否唯一构造一颗二叉树\"><a class=\"anchor\" href=\"#已知中序与后序能否唯一构造一颗二叉树\">#</a> 已知中序与后序，能否唯一构造一颗二叉树？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213194442121.png\" alt=\"image-20230213194442121\" /></p>\n<h3 id=\"已知先序与后序呢\"><a class=\"anchor\" href=\"#已知先序与后序呢\">#</a> 已知先序与后序呢？</h3>\n<h3 id=\"adt和类扩展\"><a class=\"anchor\" href=\"#adt和类扩展\">#</a> ADT 和类扩展</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213195535618.png\" alt=\"image-20230213195535618\" /></p>\n<h4 id=\"height\"><a class=\"anchor\" href=\"#height\">#</a> height</h4>\n<p>高度是 max（左子树，右子树）加上 1</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213195608562.png\" alt=\"image-20230213195608562\" /></p>\n<h2 id=\"树的应用\"><a class=\"anchor\" href=\"#树的应用\">#</a> 树的应用</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213195801267.png\" alt=\"image-20230213195801267\" /></p>\n<p>Binary-Tree Representation of a Tree 树的存储方式：三种</p>\n<ul>\n<li>广义表表示：a (b (f,g),c,d (h,i,j),e)</li>\n<li>双亲表示法；记下自己的父结点位置，问题是：找子节点需要遍历一遍。</li>\n<li>左子女 — 右兄弟表示法</li>\n</ul>\n<h4 id=\"左子女-右兄弟树变成二叉树\"><a class=\"anchor\" href=\"#左子女-右兄弟树变成二叉树\">#</a> 左子女 - 右兄弟（树变成二叉树）</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 左子女 —— 右兄弟表示法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token base-clause\"><span class=\"token class-name\">T</span> <span class=\"token class-name\">data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>firstchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nextsibling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token base-clause\"><span class=\"token class-name\">TreeNode</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">root</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">*</span><span class=\"token class-name\">current</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 在树中创建一个新的节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Tree</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Insertchild</span><span class=\"token punctuation\">(</span>T value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    TreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span>newnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">TreeNode</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>firstchild <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        current<span class=\"token operator\">-></span>firstchild <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        TreeNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>firstchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">-></span>nextsibling<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            p <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>nextsibling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        p<span class=\"token operator\">-></span>nextsibling <span class=\"token operator\">=</span> newnode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"森林变成二叉树\"><a class=\"anchor\" href=\"#森林变成二叉树\">#</a> 森林变成二叉树</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200232371.png\" alt=\"image-20230213200232371\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200239902.png\" alt=\"image-20230213200239902\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200245171.png\" alt=\"image-20230213200245171\" /></p>\n<h4 id=\"树的遍历深度优先-广度优先\"><a class=\"anchor\" href=\"#树的遍历深度优先-广度优先\">#</a> 树的遍历（深度优先、广度优先）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200414007.png\" alt=\"image-20230213200414007\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200440400.png\" alt=\"image-20230213200440400\" /></p>\n<h4 id=\"森林的遍历\"><a class=\"anchor\" href=\"#森林的遍历\">#</a> 森林的遍历</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200623993.png\" alt=\"image-20230213200623993\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200633635.png\" alt=\"image-20230213200633635\" /></p>\n<p>先转化成二叉树，遍历</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213200911785.png\" alt=\"image-20230213200911785\" /></p>\n<p>广度优先遍历（层次遍历）按照原来的 forest 进行遍历</p>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> string</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213193119386.png\" alt=\"image-20230213193119386\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213193340981.png\" alt=\"image-20230213193340981\" /></p>\n<h3 id=\"字符串的类说明\"><a class=\"anchor\" href=\"#字符串的类说明\">#</a> 字符串的类说明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213193608249.png\" alt=\"image-20230213193608249\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213193634283.png\" alt=\"image-20230213193634283\" /></p>\n<h3 id=\"部分成员函数的实现\"><a class=\"anchor\" href=\"#部分成员函数的实现\">#</a> 部分成员函数的实现</h3>\n<p>子字符串</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213193818271.png\" alt=\"image-20230213193818271\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213194008887.png\" alt=\"image-20230213194008887\" /></p>\n<h2 id=\"thread-binary-tree-线索二叉树\"><a class=\"anchor\" href=\"#thread-binary-tree-线索二叉树\">#</a> Thread Binary Tree 线索二叉树</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvdGhyZWFkZWQtYmluYXJ5LXRyZWUv\">https://www.geeksforgeeks.org/threaded-binary-tree/</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201341500.png\" alt=\"image-20230213201341500\" /></p>\n<ol>\n<li>目的：让二叉树遍历的速度更快</li>\n<li>特点：在树的节点中加入一个指针 (比如指向下一个节点)</li>\n<li>n 个结点的二叉树有 2n 个链域，其中真正有用的是 n–1 个，其它 n+1 个都是空域 (null)。为了充分利用结点中的空域，使得对某些运算更快，如前驱或后继等运算。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201358276.png\" alt=\"image-20230213201358276\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201406268.png\" alt=\"image-20230213201406268\" /></p>\n<p>定义：在二叉树的结点上加上线索的二叉树称为线索二叉树，对二叉树以某种遍历方式（如先序、中序、后序或层次等）进行遍历，使其变为线索二叉树的过程称为对二叉树进行线索化。</p>\n<h3 id=\"存储\"><a class=\"anchor\" href=\"#存储\">#</a> 存储</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221102110624736.png\" alt=\"image-20221102110624736\" /></p>\n<p><strong>注意 0 和 1 所表示的意思</strong></p>\n<h3 id=\"类实现\"><a class=\"anchor\" href=\"#类实现\">#</a> 类实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201816082.png\" alt=\"image-20230213201816082\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201835525.png\" alt=\"image-20230213201835525\" /></p>\n<h3 id=\"按中序遍历中序线索树\"><a class=\"anchor\" href=\"#按中序遍历中序线索树\">#</a> 按中序遍历中序线索树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213201957284.png\" alt=\"image-20230213201957284\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213202239320.png\" alt=\"image-20230213202239320\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用是 current 来记录下来当前节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> ThreadNode<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">ThreadInorderIterator</span><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>leftThread<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>leftchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span><span class=\"token comment\">// 找中序遍历的第一个节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> ThreadNode<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">*</span> <span class=\"token class-name\">ThreadInorderIterator</span><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ThreadNode<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>rightchild<span class=\"token punctuation\">;</span><span class=\"token comment\">// 可能是右子树的根节点，也可能是右链 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>rightThread<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>leftThread<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 如果有右子树就要搜索到最左下部分</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            p<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>leftchlid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    current<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ThreadInorderIterator</span><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span> <span class=\"token function\">Inorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ThreadNode<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">=</span><span class=\"token function\">Frist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">=</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"构造中序线索树\"><a class=\"anchor\" href=\"#构造中序线索树\">#</a> 构造中序线索树</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213202751535.png\" alt=\"image-20230213202751535\" /></p>\n<p>pre 指针，构建前驱、后继指针</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213202758726.png\" alt=\"image-20230213202758726\" /></p>\n<h4 id=\"构建代码\"><a class=\"anchor\" href=\"#构建代码\">#</a> 构建代码</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Void <span class=\"token function\">Inthread</span><span class=\"token punctuation\">(</span>threadNode<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">*</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    stack <span class=\"token operator\">&lt;</span>threadNode <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ThreadNode <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> T <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ThreadNode <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">*</span>pre <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 查找到最左下部分的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span>leftchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 开始弹出栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 添加的代码，在这时候处理 pre</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">-></span>rightchild <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    pre <span class=\"token operator\">-></span>rightchild <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    pre <span class=\"token operator\">-></span>rightthread <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 处理 p</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> p <span class=\"token operator\">-></span> leftchild <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    p <span class=\"token operator\">-></span> leftchild <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    p <span class=\"token operator\">-></span>leftthread <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 添加的代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            pre <span class=\"token operator\">=</span> p <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            p <span class=\"token operator\">=</span> p <span class=\"token operator\">-></span> rightchild <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//for </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 建议把 pre 和 p 存储成全局变量</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030182825664.png\" alt=\"image-20221030182825664\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213203456013.png\" alt=\"image-20230213203456013\" /></p>\n<p>这里可以和之前的中序遍历相比较，可以看出，就是多处理了 pre 的内容</p>\n<p><img data-src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/07/threadedTraversal.png\" alt=\"Lightbox\" /></p>\n<h2 id=\"增长树与霍夫曼树-huffman-tree\"><a class=\"anchor\" href=\"#增长树与霍夫曼树-huffman-tree\">#</a> 增长树与霍夫曼树 Huffman Tree</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213203552572.png\" alt=\"image-20230213203552572\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213203606432.png\" alt=\"image-20230213203606432\" /></p>\n<p>外通路长度</p>\n<p>内通路长度</p>\n<p>结点的带权路径长度</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213203836649.png\" alt=\"image-20230213203836649\" /></p>\n<p>11 + 8 + 6 + 9 = 34<br />\n6 + 12 +33 +2 = 53<br />\n4 + 22 +  6 + 8 = 40</p>\n<h3 id=\"霍夫曼算法\"><a class=\"anchor\" href=\"#霍夫曼算法\">#</a> 霍夫曼算法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213203954726.png\" alt=\"image-20230213203954726\" /></p>\n<p>外接点权值相等，考虑内节点的权值</p>\n<h3 id=\"霍夫曼编码\"><a class=\"anchor\" href=\"#霍夫曼编码\">#</a> 霍夫曼编码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213204022812.png\" alt=\"image-20230213204022812\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213204454531.png\" alt=\"image-20230213204454531\" /></p>\n<p>哈夫曼树的参考资料 https://zhuanlan.zhihu.com/p/154356949<br />\n 对应的霍夫曼树<br />\n 1）将看成是有 n 棵树的森林，每一棵树都只有一个根节点<br />\n 2）在这个森林中选择权值最小的两棵树进行合并，得到一颗新的树，这两颗树作为新树的左右子树，新树的根节点权重为左右子树的根节点权重之和。<br />\n3）将之前的根节点权重最小的两棵树从森林删除，并把步骤 2 产生的新树加入森林<br />\n 4）重复步骤 2 和步骤 3，直到森林只有一棵树为止。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230213204504869.png\" alt=\"image-20230213204504869\" /></p>\n<h2 id=\"广义表\"><a class=\"anchor\" href=\"#广义表\">#</a> 广义表</h2>\n<p>一般不考</p>\n<h2 id=\"查找树adt二叉查找树\"><a class=\"anchor\" href=\"#查找树adt二叉查找树\">#</a> 查找树 ADT—— 二叉查找树</h2>\n<ul>\n<li>值不重复</li>\n<li>若它的左子树不为空，则左子树上所有结点的值都小于根结点的值。</li>\n<li>若它的右子树不为空，则右子树上所有结点的值都大于根结点的值。</li>\n<li>它的左右子树也分别是二叉搜索树。</li>\n</ul>\n<p>删除有三种情况</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221030191040137.png\" alt=\"image-20221030191040137\" /></p>\n<p><code>java.lang.Comparable</code> ：在类定义的时候，可以实现好的接口，里面有 <code>compareTo</code>  这个方法需要实现。</p>\n<h3 id=\"带索引的二叉搜索树-indexed-binary-tree\"><a class=\"anchor\" href=\"#带索引的二叉搜索树-indexed-binary-tree\">#</a> 带索引的二叉搜索树 Indexed Binary Tree</h3>\n<h2 id=\"力扣题\"><a class=\"anchor\" href=\"#力扣题\">#</a> 力扣题</h2>\n<h3 id=\"94-二叉树的中序遍历\"><a class=\"anchor\" href=\"#94-二叉树的中序遍历\">#</a> 94 二叉树的中序遍历</h3>\n<h4 id=\"递归实现\"><a class=\"anchor\" href=\"#递归实现\">#</a> 递归实现</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">,</span> TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> left <span class=\"token operator\">=</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    left<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> right <span class=\"token operator\">=</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>An <strong>Arrow operator in C/C++</strong> allows to access elements in <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc3RydWN0dXJlcy1pbi1jcHAv\">Structures</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvdW5pb24tYy8=\">Unions</span>. It is used with a <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvc2VsZi1yZWZlcmVudGlhbC1zdHJ1Y3R1cmVzLw==\">pointer variable pointing to a structure or union</span>. The arrow operator is formed by using a minus sign, followed by the greater than symbol as shown below.<br />\n<strong>Syntax:</strong></p>\n<pre><code>(pointer_name)-&gt;(variable_name)\n</code></pre>\n<p><strong>Operation:</strong> The -&gt; operator in C or C++ gives the value held by variable_name to structure or union variable pointer_name.<br />\n<strong>Difference between Dot(.) and Arrow(-&gt;) operator:</strong></p>\n<p><strong>. 和 -&gt; 的区别</strong></p>\n<ul>\n<li>The Dot(.) operator is used to normally access members of a structure or union.</li>\n<li>The Arrow(-&gt;) operator exists to access the members of the structure or the unions using pointers.</li>\n</ul>\n<h4 id=\"迭代实现有点问题\"><a class=\"anchor\" href=\"#迭代实现有点问题\">#</a> 迭代实现【有点问题】</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        stk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        root <span class=\"token operator\">=</span> root <span class=\"token operator\">-></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        root <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        stk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        root <span class=\"token operator\">=</span> root <span class=\"token operator\">-></span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>stack 的 pop 没有返回值</p>\n<p>需要先 top 在 pop</p>\n<h4 id=\"morris遍历算法实现\"><a class=\"anchor\" href=\"#morris遍历算法实现\">#</a> Morris 遍历算法实现</h4>\n<p>Morris 遍历的详细解释 + 注释版</p>\n<p>一些前置知识：</p>\n<ul>\n<li>前驱节点，如果按照中序遍历访问树，访问的结果为 ABC，则称 A 为 B 的前驱节点，B 为 C 的前驱节点。</li>\n<li>前驱节点 pre 是 curr 左子树的最右子树（按照中序遍历走一遍就知道了）。</li>\n<li>由此可知，前驱节点的右子节点一定为空。</li>\n</ul>\n<p>主要思想：</p>\n<p>树的链接是单向的，从根节点出发，只有通往子节点的单向路程。</p>\n<p>中序遍历迭代法的难点就在于，需要先访问当前节点的左子树，才能访问当前节点。</p>\n<p>但是只有通往左子树的单向路程，而没有回程路，因此无法进行下去，除非用额外的数据结构记录下回程的路。</p>\n<p>在这里可以利用当前节点的前驱节点，建立回程的路，也不需要消耗额外的空间。</p>\n<p>根据前置知识的分析，当前节点的前驱节点的右子节点是为空的，因此可以用其保存回程的路。</p>\n<p>但是要注意，这是建立在破坏了树的结构的基础上的，因此我们最后还有一步 “消除链接”’的步骤，将树的结构还原。</p>\n<p>重点过程： 当遍历到当前节点 curr 时，使用 cuur 的前驱节点 pre</p>\n<ul>\n<li>标记当前节点是否访问过</li>\n<li>记录回溯到 curr 的路径（访问完 pre 以后，就应该访问 curr 了）</li>\n</ul>\n<p>以下为我们访问 curr 节点需要做的事儿：</p>\n<ol>\n<li>访问 curr 的节点时候，先找其前驱节点 pre</li>\n<li>找到前驱节点 pre 以后，我们根据其右指针的值，来判断 curr 的访问状态：</li>\n</ol>\n<ul>\n<li>pre 的右子节点为空，说明 curr 第一次访问，其左子树还没有访问，此时我们应该将其指向 curr，并访问 curr 的左子树</li>\n<li>pre 的右子节点指向 curr，那么说明这是第二次访问 curr 了，也就是说其左子树已经访问完了，此时将 curr.val 加入结果集中</li>\n</ul>\n<p>更加细节的逻辑请参考代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> <span class=\"token function\">Morris</span><span class=\"token punctuation\">(</span>TreeNode root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        List<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> ans<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token generic-function\"><span class=\"token function\">LinkedList</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 没有左子树，直接访问该节点，再访问右子树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token operator\">==</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                root<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 有左子树，找前驱节点，判断是第一次访问还是第二次访问</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                TreeNode pre<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span>null<span class=\"token operator\">&amp;&amp;</span>pre<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    pre<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 是第一次访问，访问左子树</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span>right<span class=\"token operator\">==</span>null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    pre<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    root<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 第二次访问了，那么应当消除链接</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 该节点访问完了，接下来应该访问其右子树</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    pre<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    root<span class=\"token operator\">=</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"144-二叉树的前序遍历\"><a class=\"anchor\" href=\"#144-二叉树的前序遍历\">#</a> 144 二叉树的前序遍历</h3>\n<p>递归方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 树的定义同前</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> left <span class=\"token operator\">=</span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> root<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> right <span class=\"token operator\">=</span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代方法</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            node <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            stk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>emplace_back () 和 push_back () 的区别，就在于底层实现的机制不同。push_back ()  向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，事后会自行销毁先前创建的这个元素）；而  emplace_back () 在实现时，则是直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程。</p>\n<h3 id=\"145-二叉树的后序遍历\"><a class=\"anchor\" href=\"#145-二叉树的后序遍历\">#</a> 145 二叉树的后序遍历</h3>\n<p>递归</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> left <span class=\"token operator\">=</span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">-></span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> right <span class=\"token operator\">=</span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">-></span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        left<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">-></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> root <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                root <span class=\"token operator\">=</span> root <span class=\"token operator\">-></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            root <span class=\"token operator\">=</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            stk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">-></span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span>  root <span class=\"token operator\">-></span> right <span class=\"token operator\">==</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">-></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                prev <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                root <span class=\"token operator\">=</span> root <span class=\"token operator\">-></span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture03-%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture03-%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "Lecture03-线性表",
            "date_published": "2023-02-14T14:00:44.000Z",
            "content_html": "<h1 id=\"lecture3-线性表\"><a class=\"anchor\" href=\"#lecture3-线性表\">#</a> Lecture3 - 线性表</h1>\n<p>本章考点：</p>\n<ul>\n<li>散列表、并查集、优先级队列</li>\n<li>栈和队列考的概率比较大、数组和单链表也可能考</li>\n<li>循环链表、双链表考的比较少</li>\n<li>带表头结点的单链表 \\ 不带表头结点的单链表</li>\n<li>主要靠代码、性质</li>\n</ul>\n<h2 id=\"线性表\"><a class=\"anchor\" href=\"#线性表\">#</a> 线性表</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<ol>\n<li>线性表是对象或者值的集合</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113703729.png\" alt=\"image-20230209113703729\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113541642.png\" alt=\"image-20230209113541642\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113557197.png\" alt=\"image-20230209113557197\" /></p>\n<h3 id=\"线性表需要实现的方法\"><a class=\"anchor\" href=\"#线性表需要实现的方法\">#</a> 线性表需要实现的方法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-4.png\" alt=\"img\" /></a></p>\n<h3 id=\"线性表的不同实现\"><a class=\"anchor\" href=\"#线性表的不同实现\">#</a> 线性表的不同实现</h3>\n<h4 id=\"简单数组实现线性表\"><a class=\"anchor\" href=\"#简单数组实现线性表\">#</a> 简单数组实现线性表</h4>\n<ol>\n<li>(e1,e2,………en)，也就是数组向系统请求了一块连续的内存，数据量大小由程序员来确定。</li>\n<li>each position of the array is called a cell or a node mapping formula:  location(i)=i-1</li>\n<li>从数组类型存储的线性表中取出一个元素的复杂度是<strong> O (1)</strong>。</li>\n<li>一般我们在线性表中放置的是相同类型的值。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113855923.png\" alt=\"image-20230209113855923\" /></p>\n<h5 id=\"方法实现\"><a class=\"anchor\" href=\"#方法实现\">#</a> 方法实现</h5>\n<ol>\n<li>\n<p>顺序查找</p>\n<pre><code>Search(x)\n</code></pre>\n<p>的时间复杂度 O (n), 平均算法复杂度 O ((n+1)/2)</p>\n<ul>\n<li>平均数据访问次数:n/2</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113917447.png\" alt=\"image-20230209113917447\" /></p>\n</li>\n<li>\n<p>删除</p>\n<pre><code>remove(k,x)\n</code></pre>\n<p>：delete the k’th element and return it in x</p>\n<ul>\n<li>最坏和平均情况下的算法复杂度都是 O (n)</li>\n<li>平均数据移动次数：(n-1)/2</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113939649.png\" alt=\"image-20230209113939649\" /></p>\n</li>\n<li>\n<p>插入操作</p>\n<pre><code>insert(x,i)\n</code></pre>\n<ul>\n<li>平均数据移动次数:n/2</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209113957170.png\" alt=\"image-20230209113957170\" /></p>\n</li>\n</ol>\n<h5 id=\"优缺点\"><a class=\"anchor\" href=\"#优缺点\">#</a> 优缺点</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209114131034.png\" alt=\"image-20230209114131034\" /></p>\n<p>printList 花费线性时间</p>\n<p>findKth 花费常数时间</p>\n<p>insert 和 delete 最多花费 O (n) 的时间</p>\n<h4 id=\"单链表linked-list实现线性表\"><a class=\"anchor\" href=\"#单链表linked-list实现线性表\">#</a> 单链表 (Linked List) 实现线性表</h4>\n<ol>\n<li>特点：在内存中不是连续内存。</li>\n<li>一个链表节点中存储一个指针，一个数据。\n<ul>\n<li>java 中的指针是不可以进行加减操作，防止出现一些系统问题。而 C++ 中是可以进行加减运算。</li>\n</ul>\n</li>\n<li>最后的一个指针指向 null</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209114227674.png\" alt=\"image-20230209114227674\" /></p>\n<h5 id=\"部分操作\"><a class=\"anchor\" href=\"#部分操作\">#</a> 部分操作</h5>\n<ol>\n<li>\n<p>删除操作:</p>\n<pre><code>Delete(index,x)\n</code></pre>\n<ol>\n<li>删除第一个节点：重新指向第一个指针，并且在 C++ 中需要 delete 掉被解引用的对象。手动释放需要先记下来位置。</li>\n<li>删除中间节点：首先查询，之后删除\n<ul>\n<li><code>before.link = before.link.link</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>插入操作:</p>\n<pre><code>insert(index,x)\n</code></pre>\n<ol>\n<li>在线性表开头插入一个元素：首先插入一个元素，然后把头指针指向头。</li>\n<li>在线性表中间插入一个元素：首先查询找到相应元素</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"带有表头元素的单链表\"><a class=\"anchor\" href=\"#带有表头元素的单链表\">#</a> 带有表头元素的单链表</h5>\n<p>有一个头节点，Header: 这个节点的数据是没有的，然后指针是指向第一个元素的</p>\n<h2 id=\"线性表的java实现\"><a class=\"anchor\" href=\"#线性表的java实现\">#</a> 线性表的 java 实现</h2>\n<ol>\n<li><code>ListNode</code> ：代表结点的类</li>\n<li><code>LinkedList</code> ：代表表本身的类</li>\n<li><code>LinkedListItr</code> ：代表游标位置的类</li>\n<li>都是包 DataStructure 的一部分</li>\n</ol>\n<h3 id=\"listnode\"><a class=\"anchor\" href=\"#listnode\">#</a> ListNode</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token class-name\">DataStructures</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    object element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span> object theElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span> theElement<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span> object theElement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        element <span class=\"token operator\">=</span> theElement<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        next <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"linkedlistitr\"><a class=\"anchor\" href=\"#linkedlistitr\">#</a> LinkedListItr</h3>\n<ol>\n<li>封装相应的指针操作</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token class-name\">DataStructures</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">LinkedListItr</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">ListNode</span>  theNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        current <span class=\"token operator\">=</span> theNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> current <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> object <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获得当前节点的数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> current<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">advance</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> <span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> current<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"linkedlist\"><a class=\"anchor\" href=\"#linkedlist\">#</a> LinkedList</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> header<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这里是含有表头节点的单链表，如果不带表头的话，应该是 heder = null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        header <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> header<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        header<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 指向头指针的 Itr</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token function\">zeroth</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListItr</span><span class=\"token punctuation\">(</span> header <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 指向第一个项的 Itr</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListItr</span><span class=\"token punctuation\">(</span> header<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> object x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> object x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token function\">findPrevious</span><span class=\"token punctuation\">(</span> object x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> object x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LinkedListItr</span> p <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"一些方法的实现\"><a class=\"anchor\" href=\"#一些方法的实现\">#</a> 一些方法的实现</h3>\n<h4 id=\"打印线性表\"><a class=\"anchor\" href=\"#打印线性表\">#</a> 打印线性表</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Method to print a list</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">LinkedList</span> theList <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> theList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print <span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">LinkedListItr</span> itr <span class=\"token operator\">=</span> theList<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token operator\">!</span> <span class=\"token class-name\">Itr</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itr<span class=\"token punctuation\">.</span><span class=\"token function\">advance</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"查找特定项\"><a class=\"anchor\" href=\"#查找特定项\">#</a> 查找特定项</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> find <span class=\"token punctuation\">(</span>object x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> itr <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> itr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>itr<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        itr <span class=\"token operator\">=</span> itr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListItr</span><span class=\"token punctuation\">(</span> itr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度 O (n)</p>\n<h4 id=\"移除节点\"><a class=\"anchor\" href=\"#移除节点\">#</a> 移除节点</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> object x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">LinkedListItr</span> p <span class=\"token operator\">=</span> <span class=\"token function\">findprevious</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> p<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        p<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度 O (1)</p>\n<ul>\n<li>你可以把 findPrevious 操作当做是一个单独的先进行的操作，而不是这个操作的一部分。</li>\n</ul>\n<h4 id=\"查找上一个节点\"><a class=\"anchor\" href=\"#查找上一个节点\">#</a> 查找上一个节点</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">LinkedListItr</span> <span class=\"token function\">findPrevious</span><span class=\"token punctuation\">(</span> object x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> itr <span class=\"token operator\">=</span> header<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> itr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>itr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> itr <span class=\"token operator\">=</span> itr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedListItr</span><span class=\"token punctuation\">(</span> itr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度 O (n)</p>\n<h2 id=\"双链表\"><a class=\"anchor\" href=\"#双链表\">#</a> 双链表</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-5.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-5.png\" alt=\"img\" /></a></p>\n<p>删除开始，删除中间是不同的</p>\n<h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<ol>\n<li>删除第一个节点<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-6.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-6.png\" alt=\"img\" /></a></li>\n<li>删除中间<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-7.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-7.png\" alt=\"img\" /></a></li>\n</ol>\n<h3 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h3>\n<ol>\n<li>从头插入<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-8.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-8.png\" alt=\"img\" /></a></li>\n<li>从中插入<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-9.png\" alt=\"img\" /></a></li>\n</ol>\n<h3 id=\"双向循环链表\"><a class=\"anchor\" href=\"#双向循环链表\">#</a> 双向循环链表</h3>\n<p>不带表头的双向链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209115917465.png\" alt=\"image-20230209115917465\" /></p>\n<p>带表头的双向链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209115934941.png\" alt=\"image-20230209115934941\" /></p>\n<p>带表头的空双向链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209120024725.png\" alt=\"image-20230209120024725\" /></p>\n<h2 id=\"循环链表\"><a class=\"anchor\" href=\"#循环链表\">#</a> 循环链表</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209120128895.png\" alt=\"image-20230209120128895\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230209120143942.png\" alt=\"image-20230209120143942\" /></p>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<h3 id=\"求解约瑟夫问题\"><a class=\"anchor\" href=\"#求解约瑟夫问题\">#</a> 求解约瑟夫问题</h3>\n<p>约瑟夫问题<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-10.png\" alt=\"img\" /></a></p>\n<p>问题解决:</p>\n<ul>\n<li>使用新的单链表来记录。</li>\n<li>p 是最后一个点，降低插入的复杂度</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/im3-11.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/im3-11.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>w <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>w<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> rear <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        head <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>link <span class=\"token punctuation\">;</span> p <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        p<span class=\"token punctuation\">.</span>link <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        p <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    rear<span class=\"token punctuation\">.</span>link <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">P</span><span class=\"token punctuation\">.</span>link <span class=\"token operator\">=</span> rear<span class=\"token punctuation\">;</span> rear<span class=\"token punctuation\">.</span>link <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>head 为出列的第一个，p 为出列的最后一个。<br />\n删除后，将节点加入 出队列。</p>\n<h4 id=\"循环队列的相关计算公式\"><a class=\"anchor\" href=\"#循环队列的相关计算公式\">#</a> 循环队列的相关计算公式</h4>\n<ol>\n<li>我们不妨设 front 为队头指针，rear 为队尾指针，m 为队列最大容量。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt3/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a></p>\n<ol>\n<li>入队: rear = (rear + 1) % m</li>\n<li>出队: front = (front + 1) % m</li>\n<li>队空: front = rear</li>\n<li>队满: front = (rear + 1) % m</li>\n<li>当前队列中的元素个数: n = (rear - front + m) % m</li>\n<li>求队头指针位置: (rear - length + 1 + m) % m</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwODA0NzIvYXJ0aWNsZS9kZXRhaWxzLzUxMTczNTg0\">循环队列的相关计算公式</span></li>\n</ol>\n<h3 id=\"求解多项式问题\"><a class=\"anchor\" href=\"#求解多项式问题\">#</a> 求解多项式问题</h3>\n<p>见 ppt</p>\n<h1 id=\"一些其他整理\"><a class=\"anchor\" href=\"#一些其他整理\">#</a> 一些其他整理</h1>\n<h2 id=\"list线性表\"><a class=\"anchor\" href=\"#list线性表\">#</a> List 线性表</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019160317148.png\" alt=\"image-20221019160317148\" /></p>\n<h3 id=\"linearlist常见的操作\"><a class=\"anchor\" href=\"#linearlist常见的操作\">#</a> LinearList 常见的操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019162747134.png\" alt=\"image-20221019162747134\" /></p>\n<p>printList</p>\n<p>makeEmpty</p>\n<p>findKth</p>\n<h3 id=\"数组实现\"><a class=\"anchor\" href=\"#数组实现\">#</a> 数组实现</h3>\n<p>printList 花费线性时间</p>\n<p>findKth 花费常数时间</p>\n<p>insert 和 delete 最多花费 O (n) 的时间</p>\n<p><strong>用于在高端插入，其后只发生对数组的访问（findKth）的操作</strong></p>\n<h3 id=\"链表实现\"><a class=\"anchor\" href=\"#链表实现\">#</a> 链表实现</h3>\n<p>linkedlist（单链表、双链表、循环链表）</p>\n<p>printList 花费线性时间</p>\n<p>findKth 效率比数组低，线性时间</p>\n<p>insert 和 delete 花费常数时间</p>\n<p><strong>经常 insert 和 delete，查询较少</strong></p>\n<h2 id=\"collection-api中的表\"><a class=\"anchor\" href=\"#collection-api中的表\">#</a> Collection API 中的表</h2>\n<h3 id=\"collection\"><a class=\"anchor\" href=\"#collection\">#</a> Collection</h3>\n<p>这个接口并不规定集合如何决定 x 是否属于该集合</p>\n<p>实现了 iterable 接口</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019164503386.png\" alt=\"image-20221019164503386\" /></p>\n<h3 id=\"iterable接口\"><a class=\"anchor\" href=\"#iterable接口\">#</a> Iterable 接口</h3>\n<p>需要实现 iterator 方法，返回一个 Iterator 的对象。</p>\n<p>不能对正在进行迭代的集合进行结构上的改变（add、remove 或 clear 方法）。</p>\n<p>remove 表示删除由 next 最新返回的项，remove 不能够重复调用，除非在再次调用 next 之后。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019164805466.png\" alt=\"image-20221019164805466\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019164819297.png\" alt=\"image-20221019164819297\" /></p>\n<h3 id=\"list接口-arraylist类和linkedlist类\"><a class=\"anchor\" href=\"#list接口-arraylist类和linkedlist类\">#</a> List 接口、ArrayList 类和 LinkedList 类</h3>\n<p>继承 Collection 接口，以下为新增的一些操作。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019165100618.png\" alt=\"image-20221019165100618\" /></p>\n<p>List 可由 ArrayList 和 LinkedList 类实现，Arraylist 提供一种可增长数组的实现，LinkedListi 提供了双链表的实现。</p>\n<p>与前文的 Iterable 接口相呼应，不能随意在迭代时更改，但是可以 remove 刚刚 next 得到的值</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019165823828.png\" alt=\"image-20221019165823828\" /></p>\n<h3 id=\"image-20221019165859005\"><a class=\"anchor\" href=\"#image-20221019165859005\">#</a> <img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019165859005.png\" alt=\"image-20221019165859005\" /></h3>\n<h3 id=\"listiterator接口\"><a class=\"anchor\" href=\"#listiterator接口\">#</a> ListIterator 接口</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019170104724.png\" alt=\"image-20221019170104724\" /></p>\n<p>新增了以上接口，可以实现从后向前的遍历。</p>\n<h2 id=\"arraylist类的实现\"><a class=\"anchor\" href=\"#arraylist类的实现\">#</a> ArrayList 类的实现</h2>\n<p>关注后 ++ 和前 -- 的用法</p>\n<p>postfix ++ operator</p>\n<p>prefix -- operator</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019171039212.png\" alt=\"image-20221019171039212\" /></p>\n<pre><code> ### 迭代器、java外部类、嵌套类和内部类\n</code></pre>\n<p>（？</p>\n<h2 id=\"linkedlist类的实现\"><a class=\"anchor\" href=\"#linkedlist类的实现\">#</a> LinkedList 类的实现</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019172048281.png\" alt=\"image-20221019172048281\" /></p>\n<h2 id=\"栈adt\"><a class=\"anchor\" href=\"#栈adt\">#</a> 栈 ADT</h2>\n<p>少量的操作却可以十分强大和重要</p>\n<h3 id=\"后缀表达式\"><a class=\"anchor\" href=\"#后缀表达式\">#</a> 后缀表达式</h3>\n<p>用逆波兰记法或后缀记法</p>\n<p>不必了解运算优先级，而可以利用栈的结构正确计算</p>\n<h3 id=\"中缀到后缀的转换\"><a class=\"anchor\" href=\"#中缀到后缀的转换\">#</a> 中缀到后缀的转换</h3>\n<h2 id=\"队列adt\"><a class=\"anchor\" href=\"#队列adt\">#</a> 队列 ADT</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221019172855308.png\" alt=\"image-20221019172855308\" /></p>\n<p>循环数组实现</p>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture2-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "url": "https://quas-modo.github.io/2023/02/14/dataStructure/Lecture2-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "title": "Lecture2-时间复杂度",
            "date_published": "2023-02-14T14:00:32.000Z",
            "content_html": "<h1 id=\"lecture2-算法分析\"><a class=\"anchor\" href=\"#lecture2-算法分析\">#</a> Lecture2 - 算法分析</h1>\n<p>本章考点：</p>\n<ul>\n<li>时间复杂度和空间复杂度（问答题、填空题\n<ul>\n<li>固定部分、可变部分 不考</li>\n<li>具体细节不考</li>\n</ul>\n</li>\n<li>时间复杂度中编译时间不算（知道就行</li>\n<li>排序算法要求掌握（注意有一个排序算法不在后面排序章节里\n<ul>\n<li>代码是怎么样的、复杂度是怎么样的</li>\n</ul>\n</li>\n<li>复杂度表示，掌握大 O 表示法，尽量写出 θ 表达式\n<ul>\n<li>绝大多数考看代码写复杂度</li>\n<li>也有要求写 O (n) 复杂度代码</li>\n<li>！折半查找代码！</li>\n</ul>\n</li>\n<li>最大子序列算法翻一翻</li>\n<li>分治法思想</li>\n<li>四个算法思想前三个重要一点，动态规划不重要</li>\n<li>辗转相除法算法过程（复杂度不要求</li>\n<li>知道 Ω 复杂度、o 复杂度</li>\n</ul>\n<h2 id=\"时间复杂度-空间复杂度\"><a class=\"anchor\" href=\"#时间复杂度-空间复杂度\">#</a> 时间复杂度、空间复杂度</h2>\n<p>编译时间不算</p>\n<p>固定部分、可变部分 不考</p>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207133517920.png\" alt=\"image-20230207133517920\" /></p>\n<p>空间复杂度：一个算法在运行过程中临时占用存储空间大小的量度，算法所使用的空间随输入规模变化的趋势。</p>\n<p>时间复杂度：一个算法在运行过程中临时占用存储时间大小的量度，算法所使用的的时间随输入规模变化的趋势</p>\n<h2 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<p>代码 + 复杂度</p>\n<p>结合后面一章的排序</p>\n<h3 id=\"selection-sort选择排序\"><a class=\"anchor\" href=\"#selection-sort选择排序\">#</a> selection sort 选择排序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207134411051.png\" alt=\"image-20230207134411051\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        index <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>选择排序的最优时间复杂度、平均时间复杂度和最坏时间复杂度均为 O (n<sup>2</sup>)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207135244377.png\" alt=\"image-20230207135244377\" /></p>\n<p>3(n-1)</p>\n<p>n-1 次 swap，每次三次移动数据</p>\n<h3 id=\"bubble-sort-冒泡排序\"><a class=\"anchor\" href=\"#bubble-sort-冒泡排序\">#</a> bubble sort 冒泡排序</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207135436871.png\" alt=\"image-20230207135436871\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207140013939.png\" alt=\"image-20230207140013939\" /></p>\n<h3 id=\"rank-sort\"><a class=\"anchor\" href=\"#rank-sort\">#</a> rank sort</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207140508536.png\" alt=\"image-20230207140508536\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207140514479.png\" alt=\"image-20230207140514479\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207140524557.png\" alt=\"image-20230207140524557\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rankSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">else</span> r<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207141448026.png\" alt=\"image-20230207141448026\" /></p>\n<h3 id=\"顺序查找\"><a class=\"anchor\" href=\"#顺序查找\">#</a> 顺序查找</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207141637273.png\" alt=\"image-20230207141637273\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207141642495.png\" alt=\"image-20230207141642495\" /></p>\n<h3 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">12</span> <span class=\"token number\">10</span> <span class=\"token number\">8</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span> <span class=\"token number\">8</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">8</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span> <span class=\"token number\">10</span> <span class=\"token number\">12</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207143758592.png\" alt=\"image-20230207143758592\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207150758497.png\" alt=\"image-20230207150758497\" /></p>\n<h2 id=\"符号\"><a class=\"anchor\" href=\"#符号\">#</a> 符号</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vaS13aWtpLm9yZy9iYXNpYy9jb21wbGV4aXR5LyMlRTYlQjglOTAlRTglQkYlOUIlRTclQUMlQTYlRTUlOEYlQjclRTclOUElODQlRTUlQUUlOUElRTQlQjklODk=\">https://oi-wiki.org/basic/complexity/# 渐进符号的定义</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230207144147396.png\" alt=\"image-20230207144147396\" /></p>\n<p>看 ppt</p>\n<ul>\n<li>复杂度表示，掌握大 O 表示法，尽量写出 θ 表达式\n<ul>\n<li>绝大多数考看代码写复杂度</li>\n<li>也有要求写 O (n) 复杂度代码</li>\n<li>！折半查找代码！</li>\n</ul>\n</li>\n<li>最大子序列算法翻一翻</li>\n<li>分治法思想</li>\n<li>四个算法思想前三个重要一点，动态规划不重要</li>\n<li>辗转相除法算法过程（复杂度不要求</li>\n<li>知道 Ω 复杂度、o 复杂度</li>\n</ul>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "title": "Lecture06-PriorityQueue",
            "date_published": "2022-12-05T08:26:39.000Z",
            "content_html": "<p>最大堆、最小堆、堆排序、代码实现。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture06-proiority-queues优先级队列\"><a class=\"anchor\" href=\"#lecture06-proiority-queues优先级队列\">#</a> Lecture06-Proiority Queues 优先级队列</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>A priority queue is a collection of zero or more elements. Each  element has a priority or value.</p>\n<p>一个优先级队列是 0 个或者更多元素的集合。每一个元素都有一个优先级或者值</p>\n<p>进入队列的时候有优先级，出队列优先出高优先级的.</p>\n<h3 id=\"如何确定优先级\"><a class=\"anchor\" href=\"#如何确定优先级\">#</a> 如何确定优先级</h3>\n<p>以下我们确定元素的优先级是通过数字的大小来确定。</p>\n<ol>\n<li>\n<p>In a min priority queue the find operation finds the element with  minimum priority, while the delete operation delete this  element.</p>\n<p>在最小优先级队列中，当需要删除一个元素的时候，我们找到优先级最小的元素来删除</p>\n</li>\n<li>\n<p>In a max priority queue, the find operation finds the element with  maximum priority, while the delete operation delete this  element.</p>\n<p>在最大优先级队列中，当需要删除一个元素的时候，我们找到优先级最大的元素来删除</p>\n</li>\n</ol>\n<h3 id=\"adt逻辑上最大优先级队列\"><a class=\"anchor\" href=\"#adt逻辑上最大优先级队列\">#</a> ADT (逻辑上最大优先级队列)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205130741555.png\" alt=\"image-20221205130741555\" /></p>\n<h2 id=\"heap\"><a class=\"anchor\" href=\"#heap\">#</a> Heap</h2>\n<p>A max heap (min Heap):(最大堆)</p>\n<ol>\n<li>\n<p>is A complete binary tree</p>\n<p>最大堆是一个完全二叉树</p>\n</li>\n<li>\n<p>The value in each node is greater(less) than or equal to those in its children(if any).</p>\n<p>每一个节点上的值都大于 (小于) 或者等于他的子节点 (如果有的话)</p>\n</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\" alt=\"img\" /></a></p>\n<p>最大堆：节点比自己的每个子节点都大</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\" alt=\"img\" /></a></p>\n<p>最小堆：节点比自己的每个子节点都笑</p>\n<p>注意：完全二叉树可以用矩阵来进行存储。</p>\n<ul>\n<li>从上向下一层一层进行记录。</li>\n</ul>\n<h3 id=\"最大优先级队列的代码实现\"><a class=\"anchor\" href=\"#最大优先级队列的代码实现\">#</a> 最大优先级队列的代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131454054.png\" alt=\"image-20221205131454054\" /></p>\n<h4 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131644445.png\" alt=\"image-20221205131644445\" /></p>\n<h4 id=\"插入算法\"><a class=\"anchor\" href=\"#插入算法\">#</a> 插入算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131713780.png\" alt=\"image-20221205131713780\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131734821.png\" alt=\"image-20221205131734821\" /></p>\n<p>首先，将插入元素插入到堆的最后；然后，经过反复操作【和父节点比优先级】，一直比较直到比父节点小为止。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132008168.png\" alt=\"image-20221205132008168\" /></p>\n<p>用数组模拟完全二叉树，可以用<strong>常数时间复杂度</strong>求出它的父节点下标；</p>\n<p>为什么堆排序中，i/2 是父节点？</p>\n<p>直观感受：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132744256.png\" alt=\"image-20221205132744256\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132754856.png\" alt=\"image-20221205132754856\" /></p>\n<p>推导：</p>\n<p>利用等比数列求和</p>\n<p>第 n 行的第 a 个元素在数组中下标为：2<sup>n</sup> + a - 1</p>\n<p>第 n 行的第 2a - 1 和 2a 个元素在数组中的下标为：2<sup>n+1</sup> + 2a 和 2<sup>n+1</sup> + 2a - 1</p>\n<h4 id=\"删除算法\"><a class=\"anchor\" href=\"#删除算法\">#</a> 删除算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132925899.png\" alt=\"image-20221205132925899\" /></p>\n<p>最大堆删除<br />\n树根删除，最后一个节点放到树根</p>\n<p>下滤：左节点和右节点比较，较大的和父节点相比，如果父节点较大，循环结束，否则，换完继续和子节点比较。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205133015811.png\" alt=\"image-20221205133015811\" /></p>\n<p><code>ci &lt; CurrentSize &amp;&amp; heap[ci] &lt; heap[ci + 1] </code></p>\n<p>对比一下，左子节点和右子节点哪个更大。跟大的那个进行比较，不断进行下滤的操作。</p>\n<h4 id=\"minheap的实现cpp代码实现\"><a class=\"anchor\" href=\"#minheap的实现cpp代码实现\">#</a> minHeap 的实现（cpp 代码实现）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142159835.png\" alt=\"image-20221205142159835\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142257272.png\" alt=\"image-20221205142257272\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142318851.png\" alt=\"image-20221205142318851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142445030.png\" alt=\"image-20221205142445030\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142524014.png\" alt=\"image-20221205142524014\" /></p>\n<h4 id=\"初始化一个非空的最大优先级数列自底向上\"><a class=\"anchor\" href=\"#初始化一个非空的最大优先级数列自底向上\">#</a> 初始化一个非空的最大优先级数列（自底向上）</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\" alt=\"img\" /></a></p>\n<p>把初始指针指向最后一个节点的父结点 (N/2), 然后进行循环，然后每一个都换一遍就完成。</p>\n<p>总体来讲是从最后一个节点的父结点开始，对所有的非叶节点进行下滤操作。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142925609.png\" alt=\"image-20221205142925609\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205143139842.png\" alt=\"image-20221205143139842\" /></p>\n<h4 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h4>\n<p>对于不同层的节点，其下滤的计算量时不同的</p>\n<p>如何从感觉上立即这个问题 —— 在数据的开始是不会到 <code>lgn</code>  的，而只有到后面的时候才能达到 <code>lgn(lgn = log2n)</code></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\" alt=\"img\" /></a></p>\n<p>第 <code>i</code>  层需要交换 <code>k-i</code>  次，该层中有 2<sup>i</sup> 个结点</p>\n<p><code>i </code> 到 根的距离， <code>j </code> 到 叶的距离</p>\n<p><strong>O(n)</strong> 的算术复杂度</p>\n<h4 id=\"自上向下的初始化操作\"><a class=\"anchor\" href=\"#自上向下的初始化操作\">#</a> 自上向下的初始化操作</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\" alt=\"img\" /></a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwNjg3MDIvYXJ0aWNsZS9kZXRhaWxzLzUyNzEyNjM0\">最详细的最小堆构建、插入、删除的过程图解</span></p>\n<h2 id=\"优先级队列的应用\"><a class=\"anchor\" href=\"#优先级队列的应用\">#</a> 优先级队列的应用</h2>\n<h3 id=\"堆排序容易考\"><a class=\"anchor\" href=\"#堆排序容易考\">#</a> 堆排序 (容易考)</h3>\n<h4 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h4>\n<ol>\n<li>\n<p>initialize a max heap with the n elements to be sorted O(n)</p>\n<p>初始化一个 n 个元素的最大堆，O (n)</p>\n</li>\n<li>\n<p>each time we delete one element, then adjust the heap O(log2n)</p>\n<p>每次我们删除最大的元素，调整堆的时间复杂度为 O (log2n)</p>\n</li>\n<li>\n<p>Time complexity is O(n)+O(n<em>log2n)= O(n</em>log2n)</p>\n<p>对于所有情况，堆排序的复杂度都是  <code>nlgn</code></p>\n</li>\n</ol>\n<h4 21,25,49,25*,16,08=\"\" id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子:</h4>\n<p>25 为什么有个星号？因为数组里面有两个 25</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\" alt=\"img\" /></a></p>\n<p>删除 49，8 放到根的位置，49 放到 8 的位置。</p>\n<p>堆排序每次删除最大的，然后把最大的放到最下方节点，把节点交换到顶部后进行下滤算法。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\" alt=\"img\" /></a></p>\n<p>堆排序是<strong>不稳定</strong>的：因为相同数据的相对位置改变</p>\n<p>稳定：25 25<em> 的相对位置不变<br />\n不稳定：25 25</em> 的相对位置改变</p>\n<h4 id=\"堆排序代码实现\"><a class=\"anchor\" href=\"#堆排序代码实现\">#</a> 堆排序代码实现（？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144226520.png\" alt=\"image-20221205144226520\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144440890.png\" alt=\"image-20221205144440890\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144457500.png\" alt=\"image-20221205144457500\" /></p>\n<p>堆排序可视化网站：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9IZWFwU29ydC5odG1s\">https://www.cs.usfca.edu/~galles/visualization/HeapSort.html</span></p>\n<h2 id=\"the-selection-problem-查找问题\"><a class=\"anchor\" href=\"#the-selection-problem-查找问题\">#</a> The Selection Problem 查找问题</h2>\n<p>问题描述：在 N 个元素中找出第 K 个最大元素。</p>\n<ol>\n<li>1A 算法：读入 N 个元素放入数组， 并将其选择排序，返回适当的元素。算法时间复杂度：O (N2)</li>\n<li>1B 算法:\n<ol>\n<li>将 K 个元素读入数组，并对其排序 (按递减次序)。最小者在第 K 个位置上。</li>\n<li>一个一个地处理其余元素：每读入一个元素与数组中第 K 个元素 (在 K 个元素中为最小) 比较，如果大于，则删除第 K 个元素，再将该元素放在合适的位置上 (调整过程)。如果小于，则舍弃。最后在数组 K 位置上的就是第 K 个最大元素。</li>\n<li>运行时间 (1B 算法)： O (K2 + (N - K)<em>K ) = O( N</em>K ) 当 K = N / 2 (向上取整),   O ( N<sup>2</sup>)</li>\n</ol>\n</li>\n<li>例如：3, 5, 8, 9, 1, 10，找第 3 个最大元素。</li>\n</ol>\n<h3 id=\"421-用堆来解决当前问题\"><a class=\"anchor\" href=\"#421-用堆来解决当前问题\">#</a> 4.2.1. 用堆来解决当前问题</h3>\n<ol>\n<li>6A 算法：假设求第 K 个最小元素\n<ol>\n<li>将 N 个元素建堆 (最小) O ( N )</li>\n<li>执行 K 次 delete，O (K*logN) O ( N + K * log N )\n<ol>\n<li>如果 K = (N/2)(向上取整)，O ( N * log N )</li>\n<li>如果 K = N ，O (N * log N) 堆排序</li>\n</ol>\n</li>\n<li>如果是 N 取代最后一个是 nlgn，可以考虑使用不同的情况来确定建立最大堆还是最小堆。</li>\n</ol>\n</li>\n<li>6B 算法：假设求第 K 个最大元素\n<ol>\n<li>读入前 K 个元素， 建立最小堆 O (K)</li>\n<li>其余元素一一读入：每读入一个元素与堆中第 K 个最大元素比 (实际上是堆中最小元素) O (1)\n<ul>\n<li>大于，则将小元素去掉 (堆顶)，该元素进入，进行一次调整。O (log K )</li>\n<li>小于，则舍弃。</li>\n</ul>\n</li>\n<li>O( K + ( N-K) * log K ) = O( N*log K)</li>\n<li>当 K = (N/2)(向上取整) ,  θ(N * log N )</li>\n</ol>\n</li>\n<li>对 6A, 6B, 用同样的数据进行测试， 只需几秒钟左右给出问题解。</li>\n</ol>\n<h2 id=\"例题2009统考题\"><a class=\"anchor\" href=\"#例题2009统考题\">#</a> 例题：2009 统考题</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\" alt=\"img\" /></a></p>\n<ol>\n<li>答案：A</li>\n<li>直接按照顺序一行一行生成。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\" alt=\"img\" /></a></p>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "title": "Lecture05-Hash",
            "date_published": "2022-12-05T08:26:21.000Z",
            "content_html": "<p>不同的散列方式。<br />\n取余法、平方取中法、乘法杂凑法、线性探测法 linear probing、二次探测法 quadratic probing、双散列函数 double hashing、分离链接法 separate chainging。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture05-散列函数\"><a class=\"anchor\" href=\"#lecture05-散列函数\">#</a> Lecture05 - 散列函数</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>散列表 (Hash function/name-address function)</p>\n<p>Address = hash (key)，将搜索的复杂度降到<strong>常数复杂度 O (C)</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221204234733417.png\" alt=\"image-20221204234733417\" /></p>\n<p>如何解决冲突？</p>\n<p>α=n / b</p>\n<p>n 是元素个数，b 是桶的数目</p>\n<h2 id=\"散列函数\"><a class=\"anchor\" href=\"#散列函数\">#</a> 散列函数</h2>\n<h3 id=\"取余法\"><a class=\"anchor\" href=\"#取余法\">#</a> 取余法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\" alt=\"img\" /></a></p>\n<p>大小通常取最大质数，避免造成散列中存在始终未用到的部分。</p>\n<h3 id=\"平方取中法\"><a class=\"anchor\" href=\"#平方取中法\">#</a> 平方取中法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\" alt=\"img\" /></a></p>\n<p>先进行原来的数据进行平方，然后取<strong>八进制</strong>，再选取中间的合适部分。</p>\n<h3 id=\"乘法杂凑函数\"><a class=\"anchor\" href=\"#乘法杂凑函数\">#</a> 乘法杂凑函数</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\" alt=\"img\" /></a></p>\n<p>M 是表长？<br />\n用一个无理数乘 key 值然后丢掉整数得到小数部分。</p>\n<h3 id=\"针对字符串-1\"><a class=\"anchor\" href=\"#针对字符串-1\">#</a> 针对字符串 - 1</h3>\n<p>to add up the ASCII (or Unicode) value of the characters in  the string. 把字符串中的每一个字符的 ASCII 值或者 Unicode 值相加</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> hashVal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashVal <span class=\"token operator\">+=</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> hashVal <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果字符串长度很短，那么会集中在前面的散列表</p>\n<h3 id=\"针对字符串-2\"><a class=\"anchor\" href=\"#针对字符串-2\">#</a> 针对字符串 - 2</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\" alt=\"img\" /></a></p>\n<p>前面乘一个乘数，把数据打散</p>\n<h2 id=\"如何解决散列表冲突问题\"><a class=\"anchor\" href=\"#如何解决散列表冲突问题\">#</a> 如何解决散列表冲突问题</h2>\n<p>碰撞的两个 (或多个) 关键码称为同义词，即 H (k1)=H (k2),k1 不等于 k2</p>\n<h3 id=\"linear-probing线性探测法\"><a class=\"anchor\" href=\"#linear-probing线性探测法\">#</a> linear Probing (线性探测法)</h3>\n<p>If hash(key)= d and the bucket is already occupied then we will  examine successive buckets d+1, d+2,……m-1, 0, 1, 2, ……d-1, in the  array</p>\n<p>如果 key 的哈希值是 d，并且 d 对应的位置已经被占据，然后我们会按照线性顺序向后成环形查找</p>\n<p>散列表已经满了之后，算法复杂度比较高，需要遍历整个散列表</p>\n<h4 id=\"例一\"><a class=\"anchor\" href=\"#例一\">#</a> 例一</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\" alt=\"img\" /></a></p>\n<p>放入 58 的时候和 80 冲突，因此放到下一个 4</p>\n<p>同理，放入 35 的时候冲突</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\" alt=\"img\" /></a></p>\n<p>计算例一中的平均成功访问次数</p>\n<p>58 查 2 次，35 查 4 次</p>\n<h4 id=\"例二\"><a class=\"anchor\" href=\"#例二\">#</a> 例二</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\" alt=\"img\" /></a></p>\n<p>线性表示法的弊端 —— 堆积问题</p>\n<p>如果一个地方发生了冲突，那么周围的复杂度会迅速升高</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\" alt=\"img\" /></a></p>\n<p>查询 35 从位置 2 开始查询，不是的话查询下一个。如果 58 被删除，35 在寻访位置 4 的时候是<strong>空的</strong>，停止查询。</p>\n<p>不能直接删除线性表中的数据，应该是<strong>进行标记</strong>，标志该元素已经删除。</p>\n<h4 id=\"线性探测法的c实现\"><a class=\"anchor\" href=\"#线性探测法的c实现\">#</a> 线性探测法的 c++ 实现</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//hashtable 的构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span><span class=\"token comment\">//E 和 K 需要被实例化后，这个类才能被调用。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    D <span class=\"token operator\">=</span> divisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ht <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> E<span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    empty<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>D<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span><span class=\"token comment\">//home bucket</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span> <span class=\"token comment\">//start at home bucket</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> ht<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span><span class=\"token comment\">//fit</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span> <span class=\"token comment\">//next bucket</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//returned to home? 是否循环完成一遍</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">//table full;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 参数进行引用 K&amp;k</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span>E<span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//put element that matches k in e.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//return false if no match.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span> <span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    e<span class=\"token operator\">=</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>HashTable<span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     K k<span class=\"token operator\">=</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//extract key</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token function\">NoMem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//table full</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二次探测法quadratic-probing\"><a class=\"anchor\" href=\"#二次探测法quadratic-probing\">#</a> 二次探测法 (Quadratic probing)</h3>\n<p>quadratic 平方</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205000529035.png\" alt=\"image-20221205000529035\" /></p>\n<p>注意，平方如果冲突之后，是在原来的位置 - 1， -4， -9 进行循环的</p>\n<h4 id=\"实现方法\"><a class=\"anchor\" href=\"#实现方法\">#</a> 实现方法</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> interface Hashable <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Hashable element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boolean isActive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">,</span> boolean i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuadraticProbingHashTable</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> Hashable <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_TABLE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">protected</span> HashEntry <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arraySize <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> boolean <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> currentPos <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findPos</span><span class=\"token punctuation\">(</span> Hashable x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 需要扩大 hash 表大小的时候，再哈希</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> boolean <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双散列哈希double-hashing\"><a class=\"anchor\" href=\"#双散列哈希double-hashing\">#</a> 双散列哈希 (Double Hashing)</h3>\n<p>If hash1(k)= d and the bucket is already occupied then we will  counting hash2(k) = c, examine successive buckets d+c, d+2c, d+3c……，in  the array</p>\n<p>如果 k 的第一哈希值为 d，而这个对应的格子已经被占用则我们继续计算 k 的第二哈希值，然后检查 d+c…</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\" alt=\"img\" /></a></p>\n<p>第一个散列函数发生冲突，那么使用第二个散列函数来放置，如果再次冲突则进行相应探测。</p>\n<p>再散列 (<strong>进行扩容</strong>)</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\" alt=\"img\" /></a></p>\n<p>尽量<strong>保证表项数 &gt; 表的 70%</strong>，也就是意味着如果不满足，就需要进行再散列。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\" alt=\"img\" /></a></p>\n<h4 id=\"再散列的实现\"><a class=\"anchor\" href=\"#再散列的实现\">#</a> 再散列的实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldArray <span class=\"token operator\">=</span> array <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    currentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分离链接法separate-chaining\"><a class=\"anchor\" href=\"#分离链接法separate-chaining\">#</a> 分离链接法 (Separate Chaining)</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\" alt=\"img\" /></a></p>\n<p>使用每个位置对应线性表解决这个问题，避免了出现向下进行顺延的情况。</p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeparateChainingHashTable</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> theLists<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Hashable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> object rhs <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> rhs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> seniority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    theLists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> size <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Retrieve</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">LinkedList</span> whichList <span class=\"token operator\">=</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">LinkedListItr</span> itr <span class=\"token operator\">=</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> itr<span class=\"token punctuation\">.</span><span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        whichList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">zeroth</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        }
    ]
}