{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "title": "Lecture06-PriorityQueue",
            "date_published": "2022-12-05T08:26:39.000Z",
            "content_html": "<p>最大堆、最小堆、堆排序、代码实现。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture06-proiority-queues优先级队列\"><a class=\"anchor\" href=\"#lecture06-proiority-queues优先级队列\">#</a> Lecture06-Proiority Queues 优先级队列</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>A priority queue is a collection of zero or more elements. Each  element has a priority or value.</p>\n<p>一个优先级队列是 0 个或者更多元素的集合。每一个元素都有一个优先级或者值</p>\n<p>进入队列的时候有优先级，出队列优先出高优先级的.</p>\n<h3 id=\"如何确定优先级\"><a class=\"anchor\" href=\"#如何确定优先级\">#</a> 如何确定优先级</h3>\n<p>以下我们确定元素的优先级是通过数字的大小来确定。</p>\n<ol>\n<li>\n<p>In a min priority queue the find operation finds the element with  minimum priority, while the delete operation delete this  element.</p>\n<p>在最小优先级队列中，当需要删除一个元素的时候，我们找到优先级最小的元素来删除</p>\n</li>\n<li>\n<p>In a max priority queue, the find operation finds the element with  maximum priority, while the delete operation delete this  element.</p>\n<p>在最大优先级队列中，当需要删除一个元素的时候，我们找到优先级最大的元素来删除</p>\n</li>\n</ol>\n<h3 id=\"adt逻辑上最大优先级队列\"><a class=\"anchor\" href=\"#adt逻辑上最大优先级队列\">#</a> ADT (逻辑上最大优先级队列)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205130741555.png\" alt=\"image-20221205130741555\" /></p>\n<h2 id=\"heap\"><a class=\"anchor\" href=\"#heap\">#</a> Heap</h2>\n<p>A max heap (min Heap):(最大堆)</p>\n<ol>\n<li>\n<p>is A complete binary tree</p>\n<p>最大堆是一个完全二叉树</p>\n</li>\n<li>\n<p>The value in each node is greater(less) than or equal to those in its children(if any).</p>\n<p>每一个节点上的值都大于 (小于) 或者等于他的子节点 (如果有的话)</p>\n</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\" alt=\"img\" /></a></p>\n<p>最大堆：节点比自己的每个子节点都大</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\" alt=\"img\" /></a></p>\n<p>最小堆：节点比自己的每个子节点都笑</p>\n<p>注意：完全二叉树可以用矩阵来进行存储。</p>\n<ul>\n<li>从上向下一层一层进行记录。</li>\n</ul>\n<h3 id=\"最大优先级队列的代码实现\"><a class=\"anchor\" href=\"#最大优先级队列的代码实现\">#</a> 最大优先级队列的代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131454054.png\" alt=\"image-20221205131454054\" /></p>\n<h4 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131644445.png\" alt=\"image-20221205131644445\" /></p>\n<h4 id=\"插入算法\"><a class=\"anchor\" href=\"#插入算法\">#</a> 插入算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131713780.png\" alt=\"image-20221205131713780\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131734821.png\" alt=\"image-20221205131734821\" /></p>\n<p>首先，将插入元素插入到堆的最后；然后，经过反复操作【和父节点比优先级】，一直比较直到比父节点小为止。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132008168.png\" alt=\"image-20221205132008168\" /></p>\n<p>用数组模拟完全二叉树，可以用<strong>常数时间复杂度</strong>求出它的父节点下标；</p>\n<p>为什么堆排序中，i/2 是父节点？</p>\n<p>直观感受：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132744256.png\" alt=\"image-20221205132744256\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132754856.png\" alt=\"image-20221205132754856\" /></p>\n<p>推导：</p>\n<p>利用等比数列求和</p>\n<p>第 n 行的第 a 个元素在数组中下标为：2<sup>n</sup> + a - 1</p>\n<p>第 n 行的第 2a - 1 和 2a 个元素在数组中的下标为：2<sup>n+1</sup> + 2a 和 2<sup>n+1</sup> + 2a - 1</p>\n<h4 id=\"删除算法\"><a class=\"anchor\" href=\"#删除算法\">#</a> 删除算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132925899.png\" alt=\"image-20221205132925899\" /></p>\n<p>最大堆删除<br />\n树根删除，最后一个节点放到树根</p>\n<p>下滤：左节点和右节点比较，较大的和父节点相比，如果父节点较大，循环结束，否则，换完继续和子节点比较。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205133015811.png\" alt=\"image-20221205133015811\" /></p>\n<p><code>ci &lt; CurrentSize &amp;&amp; heap[ci] &lt; heap[ci + 1] </code></p>\n<p>对比一下，左子节点和右子节点哪个更大。跟大的那个进行比较，不断进行下滤的操作。</p>\n<h4 id=\"minheap的实现cpp代码实现\"><a class=\"anchor\" href=\"#minheap的实现cpp代码实现\">#</a> minHeap 的实现（cpp 代码实现）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142159835.png\" alt=\"image-20221205142159835\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142257272.png\" alt=\"image-20221205142257272\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142318851.png\" alt=\"image-20221205142318851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142445030.png\" alt=\"image-20221205142445030\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142524014.png\" alt=\"image-20221205142524014\" /></p>\n<h4 id=\"初始化一个非空的最大优先级数列自底向上\"><a class=\"anchor\" href=\"#初始化一个非空的最大优先级数列自底向上\">#</a> 初始化一个非空的最大优先级数列（自底向上）</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\" alt=\"img\" /></a></p>\n<p>把初始指针指向最后一个节点的父结点 (N/2), 然后进行循环，然后每一个都换一遍就完成。</p>\n<p>总体来讲是从最后一个节点的父结点开始，对所有的非叶节点进行下滤操作。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142925609.png\" alt=\"image-20221205142925609\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205143139842.png\" alt=\"image-20221205143139842\" /></p>\n<h4 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h4>\n<p>对于不同层的节点，其下滤的计算量时不同的</p>\n<p>如何从感觉上立即这个问题 —— 在数据的开始是不会到 <code>lgn</code>  的，而只有到后面的时候才能达到 <code>lgn(lgn = log2n)</code></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\" alt=\"img\" /></a></p>\n<p>第 <code>i</code>  层需要交换 <code>k-i</code>  次，该层中有 2<sup>i</sup> 个结点</p>\n<p><code>i </code> 到 根的距离， <code>j </code> 到 叶的距离</p>\n<p><strong>O(n)</strong> 的算术复杂度</p>\n<h4 id=\"自上向下的初始化操作\"><a class=\"anchor\" href=\"#自上向下的初始化操作\">#</a> 自上向下的初始化操作</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\" alt=\"img\" /></a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwNjg3MDIvYXJ0aWNsZS9kZXRhaWxzLzUyNzEyNjM0\">最详细的最小堆构建、插入、删除的过程图解</span></p>\n<h2 id=\"优先级队列的应用\"><a class=\"anchor\" href=\"#优先级队列的应用\">#</a> 优先级队列的应用</h2>\n<h3 id=\"堆排序容易考\"><a class=\"anchor\" href=\"#堆排序容易考\">#</a> 堆排序 (容易考)</h3>\n<h4 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h4>\n<ol>\n<li>\n<p>initialize a max heap with the n elements to be sorted O(n)</p>\n<p>初始化一个 n 个元素的最大堆，O (n)</p>\n</li>\n<li>\n<p>each time we delete one element, then adjust the heap O(log2n)</p>\n<p>每次我们删除最大的元素，调整堆的时间复杂度为 O (log2n)</p>\n</li>\n<li>\n<p>Time complexity is O(n)+O(n<em>log2n)= O(n</em>log2n)</p>\n<p>对于所有情况，堆排序的复杂度都是  <code>nlgn</code></p>\n</li>\n</ol>\n<h4 21,25,49,25*,16,08=\"\" id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子:</h4>\n<p>25 为什么有个星号？因为数组里面有两个 25</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\" alt=\"img\" /></a></p>\n<p>删除 49，8 放到根的位置，49 放到 8 的位置。</p>\n<p>堆排序每次删除最大的，然后把最大的放到最下方节点，把节点交换到顶部后进行下滤算法。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\" alt=\"img\" /></a></p>\n<p>堆排序是<strong>不稳定</strong>的：因为相同数据的相对位置改变</p>\n<p>稳定：25 25<em> 的相对位置不变<br />\n不稳定：25 25</em> 的相对位置改变</p>\n<h4 id=\"堆排序代码实现\"><a class=\"anchor\" href=\"#堆排序代码实现\">#</a> 堆排序代码实现（？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144226520.png\" alt=\"image-20221205144226520\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144440890.png\" alt=\"image-20221205144440890\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144457500.png\" alt=\"image-20221205144457500\" /></p>\n<p>堆排序可视化网站：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9IZWFwU29ydC5odG1s\">https://www.cs.usfca.edu/~galles/visualization/HeapSort.html</span></p>\n<h2 id=\"the-selection-problem-查找问题\"><a class=\"anchor\" href=\"#the-selection-problem-查找问题\">#</a> The Selection Problem 查找问题</h2>\n<p>问题描述：在 N 个元素中找出第 K 个最大元素。</p>\n<ol>\n<li>1A 算法：读入 N 个元素放入数组， 并将其选择排序，返回适当的元素。算法时间复杂度：O (N2)</li>\n<li>1B 算法:\n<ol>\n<li>将 K 个元素读入数组，并对其排序 (按递减次序)。最小者在第 K 个位置上。</li>\n<li>一个一个地处理其余元素：每读入一个元素与数组中第 K 个元素 (在 K 个元素中为最小) 比较，如果大于，则删除第 K 个元素，再将该元素放在合适的位置上 (调整过程)。如果小于，则舍弃。最后在数组 K 位置上的就是第 K 个最大元素。</li>\n<li>运行时间 (1B 算法)： O (K2 + (N - K)<em>K ) = O( N</em>K ) 当 K = N / 2 (向上取整),   O ( N<sup>2</sup>)</li>\n</ol>\n</li>\n<li>例如：3, 5, 8, 9, 1, 10，找第 3 个最大元素。</li>\n</ol>\n<h3 id=\"421-用堆来解决当前问题\"><a class=\"anchor\" href=\"#421-用堆来解决当前问题\">#</a> 4.2.1. 用堆来解决当前问题</h3>\n<ol>\n<li>6A 算法：假设求第 K 个最小元素\n<ol>\n<li>将 N 个元素建堆 (最小) O ( N )</li>\n<li>执行 K 次 delete，O (K*logN) O ( N + K * log N )\n<ol>\n<li>如果 K = (N/2)(向上取整)，O ( N * log N )</li>\n<li>如果 K = N ，O (N * log N) 堆排序</li>\n</ol>\n</li>\n<li>如果是 N 取代最后一个是 nlgn，可以考虑使用不同的情况来确定建立最大堆还是最小堆。</li>\n</ol>\n</li>\n<li>6B 算法：假设求第 K 个最大元素\n<ol>\n<li>读入前 K 个元素， 建立最小堆 O (K)</li>\n<li>其余元素一一读入：每读入一个元素与堆中第 K 个最大元素比 (实际上是堆中最小元素) O (1)\n<ul>\n<li>大于，则将小元素去掉 (堆顶)，该元素进入，进行一次调整。O (log K )</li>\n<li>小于，则舍弃。</li>\n</ul>\n</li>\n<li>O( K + ( N-K) * log K ) = O( N*log K)</li>\n<li>当 K = (N/2)(向上取整) ,  θ(N * log N )</li>\n</ol>\n</li>\n<li>对 6A, 6B, 用同样的数据进行测试， 只需几秒钟左右给出问题解。</li>\n</ol>\n<h2 id=\"例题2009统考题\"><a class=\"anchor\" href=\"#例题2009统考题\">#</a> 例题：2009 统考题</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\" alt=\"img\" /></a></p>\n<ol>\n<li>答案：A</li>\n<li>直接按照顺序一行一行生成。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\" alt=\"img\" /></a></p>\n",
            "tags": [
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "title": "Lecture05-Hash",
            "date_published": "2022-12-05T08:26:21.000Z",
            "content_html": "<p>不同的散列方式。<br />\n取余法、平方取中法、乘法杂凑法、线性探测法 linear probing、二次探测法 quadratic probing、双散列函数 double hashing、分离链接法 separate chainging。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture05-散列函数\"><a class=\"anchor\" href=\"#lecture05-散列函数\">#</a> Lecture05 - 散列函数</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>散列表 (Hash function/name-address function)</p>\n<p>Address = hash (key)，将搜索的复杂度降到<strong>常数复杂度 O (C)</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221204234733417.png\" alt=\"image-20221204234733417\" /></p>\n<p>如何解决冲突？</p>\n<p>α=n / b</p>\n<p>n 是元素个数，b 是桶的数目</p>\n<h2 id=\"散列函数\"><a class=\"anchor\" href=\"#散列函数\">#</a> 散列函数</h2>\n<h3 id=\"取余法\"><a class=\"anchor\" href=\"#取余法\">#</a> 取余法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\" alt=\"img\" /></a></p>\n<p>大小通常取最大质数，避免造成散列中存在始终未用到的部分。</p>\n<h3 id=\"平方取中法\"><a class=\"anchor\" href=\"#平方取中法\">#</a> 平方取中法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\" alt=\"img\" /></a></p>\n<p>先进行原来的数据进行平方，然后取<strong>八进制</strong>，再选取中间的合适部分。</p>\n<h3 id=\"乘法杂凑函数\"><a class=\"anchor\" href=\"#乘法杂凑函数\">#</a> 乘法杂凑函数</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\" alt=\"img\" /></a></p>\n<p>M 是表长？<br />\n用一个无理数乘 key 值然后丢掉整数得到小数部分。</p>\n<h3 id=\"针对字符串-1\"><a class=\"anchor\" href=\"#针对字符串-1\">#</a> 针对字符串 - 1</h3>\n<p>to add up the ASCII (or Unicode) value of the characters in  the string. 把字符串中的每一个字符的 ASCII 值或者 Unicode 值相加</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> hashVal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashVal <span class=\"token operator\">+=</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> hashVal <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果字符串长度很短，那么会集中在前面的散列表</p>\n<h3 id=\"针对字符串-2\"><a class=\"anchor\" href=\"#针对字符串-2\">#</a> 针对字符串 - 2</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\" alt=\"img\" /></a></p>\n<p>前面乘一个乘数，把数据打散</p>\n<h2 id=\"如何解决散列表冲突问题\"><a class=\"anchor\" href=\"#如何解决散列表冲突问题\">#</a> 如何解决散列表冲突问题</h2>\n<p>碰撞的两个 (或多个) 关键码称为同义词，即 H (k1)=H (k2),k1 不等于 k2</p>\n<h3 id=\"linear-probing线性探测法\"><a class=\"anchor\" href=\"#linear-probing线性探测法\">#</a> linear Probing (线性探测法)</h3>\n<p>If hash(key)= d and the bucket is already occupied then we will  examine successive buckets d+1, d+2,……m-1, 0, 1, 2, ……d-1, in the  array</p>\n<p>如果 key 的哈希值是 d，并且 d 对应的位置已经被占据，然后我们会按照线性顺序向后成环形查找</p>\n<p>散列表已经满了之后，算法复杂度比较高，需要遍历整个散列表</p>\n<h4 id=\"例一\"><a class=\"anchor\" href=\"#例一\">#</a> 例一</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\" alt=\"img\" /></a></p>\n<p>放入 58 的时候和 80 冲突，因此放到下一个 4</p>\n<p>同理，放入 35 的时候冲突</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\" alt=\"img\" /></a></p>\n<p>计算例一中的平均成功访问次数</p>\n<p>58 查 2 次，35 查 4 次</p>\n<h4 id=\"例二\"><a class=\"anchor\" href=\"#例二\">#</a> 例二</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\" alt=\"img\" /></a></p>\n<p>线性表示法的弊端 —— 堆积问题</p>\n<p>如果一个地方发生了冲突，那么周围的复杂度会迅速升高</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\" alt=\"img\" /></a></p>\n<p>查询 35 从位置 2 开始查询，不是的话查询下一个。如果 58 被删除，35 在寻访位置 4 的时候是<strong>空的</strong>，停止查询。</p>\n<p>不能直接删除线性表中的数据，应该是<strong>进行标记</strong>，标志该元素已经删除。</p>\n<h4 id=\"线性探测法的c实现\"><a class=\"anchor\" href=\"#线性探测法的c实现\">#</a> 线性探测法的 c++ 实现</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//hashtable 的构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span><span class=\"token comment\">//E 和 K 需要被实例化后，这个类才能被调用。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    D <span class=\"token operator\">=</span> divisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ht <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> E<span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    empty<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>D<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span><span class=\"token comment\">//home bucket</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span> <span class=\"token comment\">//start at home bucket</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> ht<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span><span class=\"token comment\">//fit</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span> <span class=\"token comment\">//next bucket</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//returned to home? 是否循环完成一遍</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">//table full;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 参数进行引用 K&amp;k</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span>E<span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//put element that matches k in e.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//return false if no match.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span> <span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    e<span class=\"token operator\">=</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>HashTable<span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     K k<span class=\"token operator\">=</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//extract key</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token function\">NoMem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//table full</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二次探测法quadratic-probing\"><a class=\"anchor\" href=\"#二次探测法quadratic-probing\">#</a> 二次探测法 (Quadratic probing)</h3>\n<p>quadratic 平方</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205000529035.png\" alt=\"image-20221205000529035\" /></p>\n<p>注意，平方如果冲突之后，是在原来的位置 - 1， -4， -9 进行循环的</p>\n<h4 id=\"实现方法\"><a class=\"anchor\" href=\"#实现方法\">#</a> 实现方法</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> interface Hashable <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Hashable element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boolean isActive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">,</span> boolean i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuadraticProbingHashTable</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> Hashable <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_TABLE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">protected</span> HashEntry <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arraySize <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> boolean <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> currentPos <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findPos</span><span class=\"token punctuation\">(</span> Hashable x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 需要扩大 hash 表大小的时候，再哈希</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> boolean <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双散列哈希double-hashing\"><a class=\"anchor\" href=\"#双散列哈希double-hashing\">#</a> 双散列哈希 (Double Hashing)</h3>\n<p>If hash1(k)= d and the bucket is already occupied then we will  counting hash2(k) = c, examine successive buckets d+c, d+2c, d+3c……，in  the array</p>\n<p>如果 k 的第一哈希值为 d，而这个对应的格子已经被占用则我们继续计算 k 的第二哈希值，然后检查 d+c…</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\" alt=\"img\" /></a></p>\n<p>第一个散列函数发生冲突，那么使用第二个散列函数来放置，如果再次冲突则进行相应探测。</p>\n<p>再散列 (<strong>进行扩容</strong>)</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\" alt=\"img\" /></a></p>\n<p>尽量<strong>保证表项数 &gt; 表的 70%</strong>，也就是意味着如果不满足，就需要进行再散列。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\" alt=\"img\" /></a></p>\n<h4 id=\"再散列的实现\"><a class=\"anchor\" href=\"#再散列的实现\">#</a> 再散列的实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldArray <span class=\"token operator\">=</span> array <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    currentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分离链接法separate-chaining\"><a class=\"anchor\" href=\"#分离链接法separate-chaining\">#</a> 分离链接法 (Separate Chaining)</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\" alt=\"img\" /></a></p>\n<p>使用每个位置对应线性表解决这个问题，避免了出现向下进行顺延的情况。</p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeparateChainingHashTable</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> theLists<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Hashable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> object rhs <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> rhs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> seniority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    theLists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> size <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Retrieve</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">LinkedList</span> whichList <span class=\"token operator\">=</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">LinkedListItr</span> itr <span class=\"token operator\">=</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> itr<span class=\"token punctuation\">.</span><span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        whichList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">zeroth</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据结构",
                "数据结构"
            ]
        }
    ]
}