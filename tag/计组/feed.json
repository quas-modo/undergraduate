{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "Lecture02-计算机体系结构的问题及解决方案",
            "date_published": "2022-09-15T10:01:24.000Z",
            "content_html": "<p>讲述了六个计算机体系结构的问题以及解决方案<br />\n<span id=\"more\"></span></p>\n<h2 id=\"冯诺依曼最重要的思想存储程序\"><a class=\"anchor\" href=\"#冯诺依曼最重要的思想存储程序\">#</a> 冯诺依曼最重要的思想 —— 存储程序</h2>\n<p>任何要计算机完成的工作都要先被编写成程序，然后将<strong>程序和原始数据送入主存</strong>并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。</p>\n<p>区分中央处理单元（CPU）和处理器。</p>\n<p>CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。</p>\n<p>目前，苹果 M2 以及可以集成 200 亿的晶体管。</p>\n<h2 id=\"问题与解决思路\"><a class=\"anchor\" href=\"#问题与解决思路\">#</a> 问题与解决思路</h2>\n<h3 id=\"可以通过无限增加cpu的大小来增加性能嘛\"><a class=\"anchor\" href=\"#可以通过无限增加cpu的大小来增加性能嘛\">#</a> 可以通过无限增加 CPU 的大小来增加性能嘛？</h3>\n<p>不可以，面积越大，意味着<strong>互联延迟</strong>越大。一个时钟周期需要大于最长互联延迟。存在物理极限。</p>\n<h3 id=\"问题1cpu的频率不能无限提高\"><a class=\"anchor\" href=\"#问题1cpu的频率不能无限提高\">#</a> 问题 1：CPU 的频率不能无限提高</h3>\n<p>MOS 管开关、脉冲通过门电路需要时间</p>\n<p>为了信号同步，每个脉冲信号需要持续一定的时间</p>\n<p>面积大，连线延迟大；</p>\n<p>频率越高，开关损耗高，CPU 耗电和散热提高；</p>\n<h3 id=\"解决1改变cpu芯片结构\"><a class=\"anchor\" href=\"#解决1改变cpu芯片结构\">#</a> 解决 1：改变 CPU 芯片结构</h3>\n<ol>\n<li>\n<p>采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术</p>\n</li>\n<li>\n<p>领域定制，如面向人工智能的芯片</p>\n</li>\n</ol>\n<h3 id=\"问题2内存墙的存在-memory-wall\"><a class=\"anchor\" href=\"#问题2内存墙的存在-memory-wall\">#</a> 问题 2：内存墙的存在 memory wall</h3>\n<p>主存和 CPU 之间传输数据的速度跟不上 CPU 的速度</p>\n<h3 id=\"解决2采用高速缓存cache\"><a class=\"anchor\" href=\"#解决2采用高速缓存cache\">#</a> 解决 2：采用高速缓存（cache）</h3>\n<ol>\n<li>添加一级或多级缓存以减少存储器访问频率并提高数据传输速率</li>\n<li>增大总线的数据宽度，来增加每次所能取出的位数</li>\n</ol>\n<h3 id=\"问题3cpu等待io传输数据\"><a class=\"anchor\" href=\"#问题3cpu等待io传输数据\">#</a> 问题 3：CPU 等待 I/O 传输数据</h3>\n<p>CPU 在等待 I/O 设备时保持空闲</p>\n<h3 id=\"解决3中断\"><a class=\"anchor\" href=\"#解决3中断\">#</a> 解决 3：中断</h3>\n<p>其他模块（例如 IO）可以中断正常处理顺序的机制</p>\n<p>中断周期加入指令周期中</p>\n<p>多重中断：顺序中断处理、嵌套中断处理</p>\n<h3 id=\"问题4兼顾存储容量-速度和成本\"><a class=\"anchor\" href=\"#问题4兼顾存储容量-速度和成本\">#</a> 问题 4：兼顾存储容量、速度和成本</h3>\n<p>约束</p>\n<ul>\n<li>容量：越大越好</li>\n<li>速度：跟上处理器</li>\n<li>成本：相较于其他组件合理</li>\n</ul>\n<p>约束之间的关系</p>\n<p>​\t更短的访问时间，更高的每比特成本</p>\n<h3 id=\"解决4层次式存储结构\"><a class=\"anchor\" href=\"#解决4层次式存储结构\">#</a> 解决 4：层次式存储结构</h3>\n<p>需求</p>\n<ul>\n<li>大容量数据存储</li>\n<li>高速性能</li>\n</ul>\n<p>解决方案</p>\n<ul>\n<li>使用存储器层次结构而不是依赖单个存储器组件</li>\n</ul>\n<p><strong>寄存器 ——cache—— 主存 —— 磁盘 —— 磁带</strong></p>\n<p>存储量越来越大，速度越来越慢，离 CPU 越来越远</p>\n<h3 id=\"问题5io设备传输速率差异大\"><a class=\"anchor\" href=\"#问题5io设备传输速率差异大\">#</a> 问题 5：I/O 设备传输速率差异大</h3>\n<p>I/O 性能跟不上 CPU 速度的提升</p>\n<h3 id=\"解决5采用缓冲区和改进io操作技术\"><a class=\"anchor\" href=\"#解决5采用缓冲区和改进io操作技术\">#</a> 解决 5：采用缓冲区和改进 I/O 操作技术</h3>\n<p>设立缓存区</p>\n<h3 id=\"问题6计算机部件互连复杂\"><a class=\"anchor\" href=\"#问题6计算机部件互连复杂\">#</a> 问题 6：计算机部件互连复杂</h3>\n<h3 id=\"解决6采用总线\"><a class=\"anchor\" href=\"#解决6采用总线\">#</a> 解决 6：采用总线</h3>\n<h4 id=\"总线\"><a class=\"anchor\" href=\"#总线\">#</a> 总线</h4>\n<p>目前，对通用计算机而言，各种点对点互连结构逐渐取代总线互连的方式。但是总线结构依然普遍用于嵌入式系统。</p>\n<h5 id=\"共享\"><a class=\"anchor\" href=\"#共享\">#</a> 共享</h5>\n<p>所有部件都通过总线传递数据</p>\n<h5 id=\"分时\"><a class=\"anchor\" href=\"#分时\">#</a> 分时</h5>\n<p>只有一个部件能够传输数据</p>\n<h5 id=\"功能组\"><a class=\"anchor\" href=\"#功能组\">#</a> 功能组</h5>\n<p><strong>控制线</strong> —— 控制对数据线路与地址线路的访问和使用，控制信号传递<strong>命令和定时信息</strong>。</p>\n<p><strong>地址线</strong> —— 指定数据总线上数据的源或目的，地址总线的宽度决定了系统可能的<strong>最大内存容量</strong></p>\n<p><strong>数据线</strong> —— 为系统模块之间的数据传输提供路径，一般而言，线路的条数决定了<strong>一次能传输的位数</strong>，数据总线的宽度是决定系统整体性能的一个关键因素</p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "Lecture01-计算机系统概述",
            "date_published": "2022-09-08T12:30:32.000Z",
            "content_html": "<p>第一讲，以及对于书籍的第一章重点知识点整理</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"课程随笔\"><a class=\"anchor\" href=\"#课程随笔\">#</a> 课程随笔</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p><strong>通用 电子 数字 计算机</strong></p>\n<p>通用</p>\n<p>电子</p>\n<p>数字</p>\n<h3 id=\"组织与结构\"><a class=\"anchor\" href=\"#组织与结构\">#</a> 组织与结构</h3>\n<ol>\n<li>结构 (对于程序员是可见的)\n<ul>\n<li>一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别</li>\n<li>包括：指令集、各类数据类型的大小</li>\n</ul>\n</li>\n<li>组织 (对于程序员是不可见的)\n<ul>\n<li>一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。</li>\n<li>包括：控制信号、存储技术</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"计算机发展历史\"><a class=\"anchor\" href=\"#计算机发展历史\">#</a> 计算机发展历史</h2>\n<p>真空管</p>\n<p>晶体管</p>\n<p>集成电路（scale 越来越大，SSI-&gt;MSI-&gt;LSI-&gt;VLSI-&gt;ULSI）</p>\n<p>摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）</p>\n<h2 id=\"冯诺依曼结构的实现与演变\"><a class=\"anchor\" href=\"#冯诺依曼结构的实现与演变\">#</a> 冯诺依曼结构的实现与演变</h2>\n<h3 id=\"cpu-北桥-南桥\"><a class=\"anchor\" href=\"#cpu-北桥-南桥\">#</a> CPU + 北桥 + 南桥</h3>\n<p>芯片近北桥，远离南桥。</p>\n<h4 id=\"南桥\"><a class=\"anchor\" href=\"#南桥\">#</a> 南桥</h4>\n<p>南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理<strong>低速信号</strong>，通过北桥与中央处理器联系。<br />\n南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。<br />\nPCI、SATA、IDE、USB。</p>\n<h4 id=\"北桥\"><a class=\"anchor\" href=\"#北桥\">#</a> 北桥</h4>\n<p>北桥设计用来处理<strong>高速信号</strong>，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。<br />\n芯片组（chipset）的名称就是以北桥芯片的名称来命名的。<br />\n北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。<br />\nPCIE/AGP、Memory、CPU。</p>\n<h3 id=\"cpu-pch集成显卡-显示部件\"><a class=\"anchor\" href=\"#cpu-pch集成显卡-显示部件\">#</a> CPU + PCH（集成显卡 - 显示部件）</h3>\n<p>PCH 全称为 Platform Controller Hub，是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==\"> intel 公司</span>的集成南桥。</p>\n<p>北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.</p>\n<h2 id=\"计算机性能\"><a class=\"anchor\" href=\"#计算机性能\">#</a> 计算机性能</h2>\n<h3 id=\"cpu性能\"><a class=\"anchor\" href=\"#cpu性能\">#</a> CPU 性能</h3>\n<p>时钟频率 / 时钟周期</p>\n<p>CPI</p>\n<p>MIPS（每秒百万条指令）</p>\n<p>MRLOPS（每秒百万条浮点操作）</p>\n<p>基准程序</p>\n<h3 id=\"性能设计的基本原则\"><a class=\"anchor\" href=\"#性能设计的基本原则\">#</a> 性能设计的基本原则</h3>\n<ul>\n<li>\n<p>大概率事件优先原则</p>\n</li>\n<li>\n<p>阿姆代尔定律 Amdahl 定律</p>\n<p>技术或设计的某一部分的加速不会导致性能产生相应的改进。性能的提高是有限度的。</p>\n</li>\n<li>\n<p>Little 定律</p>\n</li>\n</ul>\n<h1 id=\"对应书籍整理-计算机系统概述\"><a class=\"anchor\" href=\"#对应书籍整理-计算机系统概述\">#</a> 对应书籍整理 - 计算机系统概述</h1>\n<h2 id=\"计算机结构\"><a class=\"anchor\" href=\"#计算机结构\">#</a> 计算机结构</h2>\n<h3 id=\"硬件\"><a class=\"anchor\" href=\"#硬件\">#</a> 硬件</h3>\n<ol>\n<li>\n<p>CPU</p>\n<ul>\n<li>运算器 —— 各种算数逻辑运算</li>\n<li>控制器 —— 对指令译码并送出操作控制信号</li>\n</ul>\n</li>\n<li>\n<p>存储器 —— 存放指令和数据</p>\n<p>包括 ROM 芯片和 RAM 芯片。</p>\n<ul>\n<li>\n<p>内存储器</p>\n<ul>\n<li>主存</li>\n<li>高速缓存（cache）</li>\n</ul>\n</li>\n<li>\n<p>外存储器</p>\n<p>磁盘、磁带存储器、光盘存储器等</p>\n</li>\n</ul>\n</li>\n<li>\n<p>I/O 设备 —— 计算机和用户之间的信息交换</p>\n</li>\n</ol>\n<h3 id=\"软件\"><a class=\"anchor\" href=\"#软件\">#</a> 软件</h3>\n<ol>\n<li>系统软件 —— 介于计算机硬件和应用软件之间的各种软件\n<ul>\n<li>操作系统软件</li>\n<li>语言处理系统</li>\n<li>数据库管理系统</li>\n<li>各类实用程序</li>\n</ul>\n</li>\n<li>应用软件\n<ul>\n<li>办公自动化软件</li>\n<li>互联网应用软件</li>\n<li>多媒体处理软件</li>\n<li>股票分析软件</li>\n<li>游戏软件</li>\n<li>管理信息系统</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"程序开发和执行过程\"><a class=\"anchor\" href=\"#程序开发和执行过程\">#</a> 程序开发和执行过程</h3>\n<ol>\n<li>高级语言、低级语言（汇编语言）-&gt; 机器语言</li>\n</ol>\n<p>​\t\t其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。</p>\n<ol start=\"2\">\n<li>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>对应计算机用户</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用程序</td>\n<td>最终用户</td>\n</tr>\n<tr>\n<td>高级语言虚拟机</td>\n<td>高级语言程序员或者应用程序员</td>\n</tr>\n<tr>\n<td>汇编语言虚拟机</td>\n<td>汇编语言程序员</td>\n</tr>\n<tr>\n<td>操作系统虚拟机</td>\n<td>系统管理员</td>\n</tr>\n<tr>\n<td>机器语言虚拟机</td>\n<td>机器语言程序员</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>源程序</strong>通过<strong>编译程序和汇编程序</strong>得到<strong>目标程序</strong></p>\n</li>\n<li>\n<p>编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）</p>\n</li>\n</ol>\n<h3 id=\"cpu性能-2\"><a class=\"anchor\" href=\"#cpu性能-2\">#</a> CPU 性能</h3>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        }
    ]
}