<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Carpe diem</title>
        <subtitle>pluck the day</subtitle>
        <icon>https://quas-modo.github.io/images/favicon.ico</icon>
        <link>https://quas-modo.github.io</link>
        <author>
          <name>quas-modo</name>
        </author>
        <description>notes/thoughts/nonsense</description>
        <language>zh-CN</language>
        <pubDate>Fri, 23 Sep 2022 07:41:11 +0800</pubDate>
        <lastBuildDate>Fri, 23 Sep 2022 07:41:11 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/23/COA/Lecture03-04-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/</guid>
            <title>Lecture03 04-数据的机器级表表示</title>
            <link>https://quas-modo.github.io/2022/09/23/COA/Lecture03-04-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Fri, 23 Sep 2022 07:41:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;仅记录有用部分，课件详细内容在 ppt 上已经很清楚了。&lt;/p&gt;
&lt;p&gt;需要加强的地方：二进制转十进制，十进制转二进制，补码的模不懂，静默式和通知式，非规格化数不懂、精度保护中的舍入看不懂，大端小端&lt;/p&gt;
&lt;p&gt;好难…… 呜呜看不懂&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一次作业讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次作业讲解&#34;&gt;#&lt;/a&gt; 第一次作业讲解&lt;/h2&gt;
&lt;p&gt;作业 1：. 为什么速率的总和没有意义？&lt;/p&gt;
&lt;p&gt;作业 2：指令集结构不同的计算机，只比较 MIPS 是没有意义的，例如此题当中，A 的 MIPS 大，但是运行时间较长。&lt;/p&gt;
&lt;p&gt;作业 3：采用不同指令集、&lt;strong&gt;流水线&lt;/strong&gt;和并行&lt;/p&gt;
&lt;p&gt;作业 4：MIPS 求和有意义吗？&lt;/p&gt;
&lt;p&gt;组织不可见，结构可见&lt;/p&gt;
&lt;h1 id=&#34;lecture0304-数据的机器级表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture0304-数据的机器级表示&#34;&gt;#&lt;/a&gt; lecture03/04 - 数据的机器级表示&lt;/h1&gt;
&lt;p&gt;参考紫书第 2 章 / 黑书第 9 章 计算机算数&lt;/p&gt;
&lt;h2 id=&#34;课堂ppt结合黑书版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课堂ppt结合黑书版本&#34;&gt;#&lt;/a&gt; 课堂 /ppt—— 结合黑书版本&lt;/h2&gt;
&lt;h3 id=&#34;信息的二进制编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息的二进制编码&#34;&gt;#&lt;/a&gt; 信息的二进制编码&lt;/h3&gt;
&lt;h3 id=&#34;整数的二进制表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的二进制表示&#34;&gt;#&lt;/a&gt; 整数的二进制表示&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数&#34;&gt;#&lt;/a&gt; 无符号整数&lt;/h4&gt;
&lt;h4 id=&#34;有符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数&#34;&gt;#&lt;/a&gt; 有符号整数&lt;/h4&gt;
&lt;h5 id=&#34;原码-符号幅值表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码-符号幅值表示法&#34;&gt;#&lt;/a&gt; 原码 符号幅值表示法&lt;/h5&gt;
&lt;p&gt;符号位不同，数值位相同&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位左移，空余的填补 0&lt;/p&gt;
&lt;p&gt;浮点数的尾数用原码定点小数表示&lt;/p&gt;
&lt;p&gt;零的表示不唯一，不利于程序员编程&lt;/p&gt;
&lt;h5 id=&#34;反码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反码&#34;&gt;#&lt;/a&gt; 反码&lt;/h5&gt;
&lt;p&gt;符号位和数值位均取反&lt;/p&gt;
&lt;h5 id=&#34;移码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移码&#34;&gt;#&lt;/a&gt; 移码&lt;/h5&gt;
&lt;p&gt;是一种有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2lnbmVkX251bWJlcl9yZXByZXNlbnRhdGlvbg==&#34;&gt;符号数表示&lt;/span&gt;的方法，其中有符号数 n 是由对应于&lt;strong&gt;无符号数 n + K&lt;/strong&gt; 的位模式表示，K 是&lt;em&gt;偏置值&lt;/em&gt;或&lt;em&gt;偏移量&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;bias 通常取 2 的 n-1 次方或者 2 的 n-1 次方减 1&lt;br /&gt;
 当 bias 为 2 的 n-1 次方时，移码和补码仅第一位不同，0 的表示唯一&lt;br /&gt;
&lt;strong&gt;浮点数的阶用移码表示&lt;/strong&gt;：当两个数都是负数的时候，移码更容易比较&lt;/p&gt;
&lt;h5 id=&#34;补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码&#34;&gt;#&lt;/a&gt; 补码&lt;/h5&gt;
&lt;p&gt;计算机处理中，&lt;strong&gt;通常使用补码&lt;/strong&gt;&lt;br /&gt;
负数的数值部分 &lt;strong&gt;各位取反，末尾加 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位移到最左位，其余空出位用符号位的值替代&lt;/p&gt;
&lt;p&gt;加和减的统一：&lt;br /&gt;
一个负数的补码等于模减该负数的绝对值&lt;br /&gt;
对于一个确定的模，某数减去小于模的另一数，总可以加上另一数负数的补码来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求真值的补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全 0：0&lt;/p&gt;
&lt;p&gt;全 1：-1&lt;/p&gt;
&lt;p&gt;10000...：- 2 &lt;sup&gt;n-1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求补码的真值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**X = - x&lt;sub&gt;n-1&lt;/sub&gt; * 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + x &lt;sub&gt;2&lt;/sub&gt; * 2 &lt;sup&gt;1&lt;/sup&gt;+ x &lt;sub&gt;1&lt;/sub&gt;*2&lt;sup&gt;0&lt;/sup&gt; **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若对负数的补码再取负，得到原来那个数&lt;/strong&gt;【其中的特例是，-2&lt;sup&gt;n-1&lt;/sup&gt; 在取负之后仍然为本身，因为范围内并没有 2&lt;sup&gt;n-1&lt;/sup&gt; 与之相对应】&lt;/p&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数&#34;&gt;#&lt;/a&gt; 浮点数&lt;/h3&gt;
&lt;p&gt;单精度 32 位（1+8+23）&lt;strong&gt;仍然表示 2&lt;sup&gt;32&lt;/sup&gt; 个数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;双精度 64 位（1+11+52）&lt;/p&gt;
&lt;p&gt;基底为 2（也存在基底为 16 的情况）—— 基数越大，范围越大，精度越低&lt;/p&gt;
&lt;h4 id=&#34;表示方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示方法&#34;&gt;#&lt;/a&gt; 表示方法&lt;/h4&gt;
&lt;p&gt;S E M&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;符号位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 位移码表示阶码（指数） —— 范围为 - 126~127，全 0 和全 1 为特殊值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23 位原码表示 24 位尾数，最高位总为 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;表示的数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示的数&#34;&gt;#&lt;/a&gt; 表示的数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;规格化数&lt;/strong&gt;，关注上溢出和下溢出，&lt;/p&gt;
&lt;p&gt;下溢出部分用&lt;strong&gt;非格式化数&lt;/strong&gt;表示，它的间距是等距的&lt;/p&gt;
&lt;p&gt;越靠近原点，数越密集；越远离原点，数越稀疏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静默式和通知式非数&lt;/strong&gt; —— 静默式表示未定义的算数结果，通知式非数表示未初始化的值。&lt;/p&gt;
&lt;h2 id=&#34;计算机组成与体系结构性能设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与体系结构性能设计&#34;&gt;#&lt;/a&gt; 计算机组成与体系结构：性能设计&lt;/h2&gt;
&lt;h3 id=&#34;整数的加法与减法补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的加法与减法补码&#34;&gt;#&lt;/a&gt; 整数的加法与减法（补码）&lt;/h3&gt;
&lt;p&gt;上溢规则&lt;/p&gt;
&lt;p&gt;减法规则 —— 减法，即加上减数的 2 的补&lt;/p&gt;
&lt;p&gt;在实际的操作中，有 OF 溢出位记录是否溢出&lt;/p&gt;
&lt;h3 id=&#34;整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的乘法&#34;&gt;#&lt;/a&gt; 整数的乘法&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数的乘法&#34;&gt;#&lt;/a&gt; 无符号整数的乘法&lt;/h4&gt;
&lt;p&gt;两个 n 为二进制整数的乘法可产生最大长度为 2n 位的积&lt;/p&gt;
&lt;p&gt;乘&lt;/p&gt;
&lt;p&gt;移位&lt;/p&gt;
&lt;p&gt;计数 - 1&lt;/p&gt;
&lt;h4 id=&#34;有符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数的乘法&#34;&gt;#&lt;/a&gt; 有符号整数的乘法&lt;/h4&gt;
&lt;p&gt;只要有一个是负数，原来的方法就不奏效&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把被乘数和乘数都转变成正数再相乘，当两者初始的符号不相同时，结果取 2 的补&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布斯（Booth）算法&lt;/p&gt;
&lt;p&gt;分为 10 01 【00 11】三种情况讨论&lt;/p&gt;
&lt;p&gt;运用公式，   &lt;strong&gt;2 &lt;sup&gt;n&lt;/sup&gt; + 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + 2 &lt;sup&gt;n-k&lt;/sup&gt; = 2 &lt;sup&gt;n+1&lt;/sup&gt; - 2 &lt;sup&gt;n-k&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很巧妙，优雅，实在是太优雅了！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;整数的除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的除法&#34;&gt;#&lt;/a&gt; 整数的除法&lt;/h3&gt;
&lt;p&gt;搞来搞去，也很优雅&lt;/p&gt;
&lt;h3 id=&#34;浮点数加法和减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数加法和减法&#34;&gt;#&lt;/a&gt; 浮点数加法和减法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查 0&lt;/li&gt;
&lt;li&gt;对齐有效值&lt;/li&gt;
&lt;li&gt;加法&lt;/li&gt;
&lt;li&gt;规格化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意时时检查是否有效值为 0，以及是否溢出&lt;/p&gt;
&lt;p&gt;若两个数的阶值差别非常大，则较小的数丢失&lt;/p&gt;
&lt;h3 id=&#34;浮点数乘法和除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数乘法和除法&#34;&gt;#&lt;/a&gt; 浮点数乘法和除法&lt;/h3&gt;
&lt;p&gt;由于阶值是移码的形式，相乘的时候，两个阶值的和要减去一个偏移量，相除的时候，两个阶值的差要加上一个偏移量&lt;/p&gt;
&lt;h4 id=&#34;精度考虑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度考虑&#34;&gt;#&lt;/a&gt; 精度考虑&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保护位&lt;/p&gt;
&lt;p&gt;对齐的时候会导致丢失，在末尾增加保护位，可以扩展有效值的右端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舍入（不懂）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机组成与系统结构习题解答和教学指导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与系统结构习题解答和教学指导&#34;&gt;#&lt;/a&gt; 计算机组成与系统结构习题解答和教学指导&lt;/h2&gt;
&lt;h3 id=&#34;数据的表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的表示&#34;&gt;#&lt;/a&gt; 数据的表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数值数据 —— 二进制、十进制（BCD binary coded decimal）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非数值数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的宽度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的宽度&#34;&gt;#&lt;/a&gt; 数据的宽度&lt;/h3&gt;
&lt;p&gt;数据容量和宽度&lt;/p&gt;
&lt;p&gt;比特&lt;/p&gt;
&lt;p&gt;字节&lt;/p&gt;
&lt;p&gt;字（2 个 / 4 个 / 8 个 / 16 个字节）&lt;/p&gt;
&lt;h3 id=&#34;数据的排列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的排列&#34;&gt;#&lt;/a&gt; 数据的排列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大端排列 —— 最低有效字节 LSB 存放在大地址单元中，MSB 所在地址为数据的地址&lt;/li&gt;
&lt;li&gt;小端排列 —— 最低有效字节 LSB 存放在小地址单元中，LSB 所在地址为数据的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据校验方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据校验方式&#34;&gt;#&lt;/a&gt; 数据校验方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;奇偶校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;海明校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环冗余码校验&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <title>Lecture02-计算机体系结构的问题及解决方案</title>
            <link>https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 15 Sep 2022 18:01:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;讲述了六个计算机体系结构的问题以及解决方案&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼最重要的思想存储程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼最重要的思想存储程序&#34;&gt;#&lt;/a&gt; 冯诺依曼最重要的思想 —— 存储程序&lt;/h2&gt;
&lt;p&gt;任何要计算机完成的工作都要先被编写成程序，然后将&lt;strong&gt;程序和原始数据送入主存&lt;/strong&gt;并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。&lt;/p&gt;
&lt;p&gt;区分中央处理单元（CPU）和处理器。&lt;/p&gt;
&lt;p&gt;CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。&lt;/p&gt;
&lt;p&gt;目前，苹果 M2 以及可以集成 200 亿的晶体管。&lt;/p&gt;
&lt;h2 id=&#34;问题与解决思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题与解决思路&#34;&gt;#&lt;/a&gt; 问题与解决思路&lt;/h2&gt;
&lt;h3 id=&#34;可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;#&lt;/a&gt; 可以通过无限增加 CPU 的大小来增加性能嘛？&lt;/h3&gt;
&lt;p&gt;不可以，面积越大，意味着&lt;strong&gt;互联延迟&lt;/strong&gt;越大。一个时钟周期需要大于最长互联延迟。存在物理极限。&lt;/p&gt;
&lt;h3 id=&#34;问题1cpu的频率不能无限提高&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题1cpu的频率不能无限提高&#34;&gt;#&lt;/a&gt; 问题 1：CPU 的频率不能无限提高&lt;/h3&gt;
&lt;p&gt;MOS 管开关、脉冲通过门电路需要时间&lt;/p&gt;
&lt;p&gt;为了信号同步，每个脉冲信号需要持续一定的时间&lt;/p&gt;
&lt;p&gt;面积大，连线延迟大；&lt;/p&gt;
&lt;p&gt;频率越高，开关损耗高，CPU 耗电和散热提高；&lt;/p&gt;
&lt;h3 id=&#34;解决1改变cpu芯片结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决1改变cpu芯片结构&#34;&gt;#&lt;/a&gt; 解决 1：改变 CPU 芯片结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域定制，如面向人工智能的芯片&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题2内存墙的存在-memory-wall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题2内存墙的存在-memory-wall&#34;&gt;#&lt;/a&gt; 问题 2：内存墙的存在 memory wall&lt;/h3&gt;
&lt;p&gt;主存和 CPU 之间传输数据的速度跟不上 CPU 的速度&lt;/p&gt;
&lt;h3 id=&#34;解决2采用高速缓存cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决2采用高速缓存cache&#34;&gt;#&lt;/a&gt; 解决 2：采用高速缓存（cache）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;添加一级或多级缓存以减少存储器访问频率并提高数据传输速率&lt;/li&gt;
&lt;li&gt;增大总线的数据宽度，来增加每次所能取出的位数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题3cpu等待io传输数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题3cpu等待io传输数据&#34;&gt;#&lt;/a&gt; 问题 3：CPU 等待 I/O 传输数据&lt;/h3&gt;
&lt;p&gt;CPU 在等待 I/O 设备时保持空闲&lt;/p&gt;
&lt;h3 id=&#34;解决3中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决3中断&#34;&gt;#&lt;/a&gt; 解决 3：中断&lt;/h3&gt;
&lt;p&gt;其他模块（例如 IO）可以中断正常处理顺序的机制&lt;/p&gt;
&lt;p&gt;中断周期加入指令周期中&lt;/p&gt;
&lt;p&gt;多重中断：顺序中断处理、嵌套中断处理&lt;/p&gt;
&lt;h3 id=&#34;问题4兼顾存储容量-速度和成本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题4兼顾存储容量-速度和成本&#34;&gt;#&lt;/a&gt; 问题 4：兼顾存储容量、速度和成本&lt;/h3&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量：越大越好&lt;/li&gt;
&lt;li&gt;速度：跟上处理器&lt;/li&gt;
&lt;li&gt;成本：相较于其他组件合理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束之间的关系&lt;/p&gt;
&lt;p&gt;​	更短的访问时间，更高的每比特成本&lt;/p&gt;
&lt;h3 id=&#34;解决4层次式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决4层次式存储结构&#34;&gt;#&lt;/a&gt; 解决 4：层次式存储结构&lt;/h3&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大容量数据存储&lt;/li&gt;
&lt;li&gt;高速性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用存储器层次结构而不是依赖单个存储器组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;寄存器 ——cache—— 主存 —— 磁盘 —— 磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储量越来越大，速度越来越慢，离 CPU 越来越远&lt;/p&gt;
&lt;h3 id=&#34;问题5io设备传输速率差异大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题5io设备传输速率差异大&#34;&gt;#&lt;/a&gt; 问题 5：I/O 设备传输速率差异大&lt;/h3&gt;
&lt;p&gt;I/O 性能跟不上 CPU 速度的提升&lt;/p&gt;
&lt;h3 id=&#34;解决5采用缓冲区和改进io操作技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决5采用缓冲区和改进io操作技术&#34;&gt;#&lt;/a&gt; 解决 5：采用缓冲区和改进 I/O 操作技术&lt;/h3&gt;
&lt;p&gt;设立缓存区&lt;/p&gt;
&lt;h3 id=&#34;问题6计算机部件互连复杂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题6计算机部件互连复杂&#34;&gt;#&lt;/a&gt; 问题 6：计算机部件互连复杂&lt;/h3&gt;
&lt;h3 id=&#34;解决6采用总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决6采用总线&#34;&gt;#&lt;/a&gt; 解决 6：采用总线&lt;/h3&gt;
&lt;h4 id=&#34;总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线&#34;&gt;#&lt;/a&gt; 总线&lt;/h4&gt;
&lt;p&gt;目前，对通用计算机而言，各种点对点互连结构逐渐取代总线互连的方式。但是总线结构依然普遍用于嵌入式系统。&lt;/p&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;所有部件都通过总线传递数据&lt;/p&gt;
&lt;h5 id=&#34;分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时&#34;&gt;#&lt;/a&gt; 分时&lt;/h5&gt;
&lt;p&gt;只有一个部件能够传输数据&lt;/p&gt;
&lt;h5 id=&#34;功能组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能组&#34;&gt;#&lt;/a&gt; 功能组&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;控制线&lt;/strong&gt; —— 控制对数据线路与地址线路的访问和使用，控制信号传递&lt;strong&gt;命令和定时信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址线&lt;/strong&gt; —— 指定数据总线上数据的源或目的，地址总线的宽度决定了系统可能的&lt;strong&gt;最大内存容量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据线&lt;/strong&gt; —— 为系统模块之间的数据传输提供路径，一般而言，线路的条数决定了&lt;strong&gt;一次能传输的位数&lt;/strong&gt;，数据总线的宽度是决定系统整体性能的一个关键因素&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
            <title>Lecture01-计算机系统概述</title>
            <link>https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 08 Sep 2022 20:30:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;第一讲，以及对于书籍的第一章重点知识点整理&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;课程随笔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程随笔&#34;&gt;#&lt;/a&gt; 课程随笔&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用 电子 数字 计算机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用&lt;/p&gt;
&lt;p&gt;电子&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;h3 id=&#34;组织与结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组织与结构&#34;&gt;#&lt;/a&gt; 组织与结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;结构 (对于程序员是可见的)
&lt;ul&gt;
&lt;li&gt;一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别&lt;/li&gt;
&lt;li&gt;包括：指令集、各类数据类型的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织 (对于程序员是不可见的)
&lt;ul&gt;
&lt;li&gt;一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。&lt;/li&gt;
&lt;li&gt;包括：控制信号、存储技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机发展历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历史&#34;&gt;#&lt;/a&gt; 计算机发展历史&lt;/h2&gt;
&lt;p&gt;真空管&lt;/p&gt;
&lt;p&gt;晶体管&lt;/p&gt;
&lt;p&gt;集成电路（scale 越来越大，SSI-&amp;gt;MSI-&amp;gt;LSI-&amp;gt;VLSI-&amp;gt;ULSI）&lt;/p&gt;
&lt;p&gt;摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼结构的实现与演变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼结构的实现与演变&#34;&gt;#&lt;/a&gt; 冯诺依曼结构的实现与演变&lt;/h2&gt;
&lt;h3 id=&#34;cpu-北桥-南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-北桥-南桥&#34;&gt;#&lt;/a&gt; CPU + 北桥 + 南桥&lt;/h3&gt;
&lt;p&gt;芯片近北桥，远离南桥。&lt;/p&gt;
&lt;h4 id=&#34;南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#南桥&#34;&gt;#&lt;/a&gt; 南桥&lt;/h4&gt;
&lt;p&gt;南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理&lt;strong&gt;低速信号&lt;/strong&gt;，通过北桥与中央处理器联系。&lt;br /&gt;
南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。&lt;br /&gt;
PCI、SATA、IDE、USB。&lt;/p&gt;
&lt;h4 id=&#34;北桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#北桥&#34;&gt;#&lt;/a&gt; 北桥&lt;/h4&gt;
&lt;p&gt;北桥设计用来处理&lt;strong&gt;高速信号&lt;/strong&gt;，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。&lt;br /&gt;
芯片组（chipset）的名称就是以北桥芯片的名称来命名的。&lt;br /&gt;
北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。&lt;br /&gt;
PCIE/AGP、Memory、CPU。&lt;/p&gt;
&lt;h3 id=&#34;cpu-pch集成显卡-显示部件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-pch集成显卡-显示部件&#34;&gt;#&lt;/a&gt; CPU + PCH（集成显卡 - 显示部件）&lt;/h3&gt;
&lt;p&gt;PCH 全称为 Platform Controller Hub，是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==&#34;&gt; intel 公司&lt;/span&gt;的集成南桥。&lt;/p&gt;
&lt;p&gt;北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.&lt;/p&gt;
&lt;h2 id=&#34;计算机性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机性能&#34;&gt;#&lt;/a&gt; 计算机性能&lt;/h2&gt;
&lt;h3 id=&#34;cpu性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
&lt;p&gt;时钟频率 / 时钟周期&lt;/p&gt;
&lt;p&gt;CPI&lt;/p&gt;
&lt;p&gt;MIPS（每秒百万条指令）&lt;/p&gt;
&lt;p&gt;MRLOPS（每秒百万条浮点操作）&lt;/p&gt;
&lt;p&gt;基准程序&lt;/p&gt;
&lt;h3 id=&#34;性能设计的基本原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能设计的基本原则&#34;&gt;#&lt;/a&gt; 性能设计的基本原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大概率事件优先原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿姆代尔定律 Amdahl 定律&lt;/p&gt;
&lt;p&gt;技术或设计的某一部分的加速不会导致性能产生相应的改进。性能的提高是有限度的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Little 定律&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对应书籍整理-计算机系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应书籍整理-计算机系统概述&#34;&gt;#&lt;/a&gt; 对应书籍整理 - 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机结构&#34;&gt;#&lt;/a&gt; 计算机结构&lt;/h2&gt;
&lt;h3 id=&#34;硬件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件&#34;&gt;#&lt;/a&gt; 硬件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器 —— 各种算数逻辑运算&lt;/li&gt;
&lt;li&gt;控制器 —— 对指令译码并送出操作控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器 —— 存放指令和数据&lt;/p&gt;
&lt;p&gt;包括 ROM 芯片和 RAM 芯片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;li&gt;高速缓存（cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外存储器&lt;/p&gt;
&lt;p&gt;磁盘、磁带存储器、光盘存储器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 设备 —— 计算机和用户之间的信息交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件&#34;&gt;#&lt;/a&gt; 软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统软件 —— 介于计算机硬件和应用软件之间的各种软件
&lt;ul&gt;
&lt;li&gt;操作系统软件&lt;/li&gt;
&lt;li&gt;语言处理系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;各类实用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件
&lt;ul&gt;
&lt;li&gt;办公自动化软件&lt;/li&gt;
&lt;li&gt;互联网应用软件&lt;/li&gt;
&lt;li&gt;多媒体处理软件&lt;/li&gt;
&lt;li&gt;股票分析软件&lt;/li&gt;
&lt;li&gt;游戏软件&lt;/li&gt;
&lt;li&gt;管理信息系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;程序开发和执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序开发和执行过程&#34;&gt;#&lt;/a&gt; 程序开发和执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;高级语言、低级语言（汇编语言）-&amp;gt; 机器语言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;对应计算机用户&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;最终用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级语言虚拟机&lt;/td&gt;
&lt;td&gt;高级语言程序员或者应用程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汇编语言虚拟机&lt;/td&gt;
&lt;td&gt;汇编语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统虚拟机&lt;/td&gt;
&lt;td&gt;系统管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器语言虚拟机&lt;/td&gt;
&lt;td&gt;机器语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源程序&lt;/strong&gt;通过&lt;strong&gt;编译程序和汇编程序&lt;/strong&gt;得到&lt;strong&gt;目标程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu性能-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能-2&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
 ]]></description>
        </item>
    </channel>
</rss>
