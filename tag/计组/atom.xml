<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://quas-modo.github.io</id>
    <title>Carpe diem</title>
    <subtitle>pluck the day</subtitle>
    <icon>https://quas-modo.github.io/images/favicon.ico</icon>
    <link href="https://quas-modo.github.io" />
    <author>
      <name>quas-modo</name>
    </author>
    <updated>2022-11-21T06:06:58.000Z</updated>
    <entry>
        <id>https://quas-modo.github.io/2022/11/21/COA/Lecture11-RAID/</id>
        <title>Lecture11-RAID</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/11/21/COA/Lecture11-RAID/"/>
        <content type="html">&lt;p&gt;RAID0-6&lt;br /&gt;
 条带、镜像、并行存取（海明码、位交错奇偶校验）、独立存取（块交错奇偶检验、块级分布式奇偶检验、双冗余度）&lt;/p&gt;
&lt;p&gt;并行存取的大数据传输率高，独立存取的 IO 请求快。&lt;/p&gt;
&lt;h1 id=&#34;lecture11-raid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture11-raid&#34;&gt;#&lt;/a&gt; Lecture11-RAID&lt;/h1&gt;
&lt;p&gt;区分高数据传输率和高速 IO 请求&lt;/p&gt;
&lt;h2 id=&#34;raid冗余磁盘阵列简介redundant-arrays-of-independent-disks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid冗余磁盘阵列简介redundant-arrays-of-independent-disks&#34;&gt;#&lt;/a&gt; RAID 冗余磁盘阵列简介 ——Redundant Arrays of Independent Disks&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161456782.png&#34; alt=&#34;image-20221117161456782&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Redundant 冗余 —— 进行错误恢复以提高系统可靠性&lt;/p&gt;
&lt;h2 id=&#34;raid分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid分类&#34;&gt;#&lt;/a&gt; RAID 分类&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161543752.png&#34; alt=&#34;image-20221117161543752&#34; /&gt;&lt;/p&gt;
&lt;p&gt;0-6 都是条带式的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163203515.png&#34; alt=&#34;image-20221117163203515&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163224833.png&#34; alt=&#34;image-20221117163224833&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163240540.png&#34; alt=&#34;image-20221117163240540&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;raid0-不是raid成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid0-不是raid成员&#34;&gt;#&lt;/a&gt; RAID0 - 不是 RAID 成员&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161726563.png&#34; alt=&#34;image-20221117161726563&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221121125725716.png&#34; alt=&#34;image-20221121125725716&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果单个 IO 请求有多个逻辑相邻的条带组成，则多达对 n 个条带的请求可以并行处理，这样大大地减少了 IO 传输时间。&lt;/p&gt;
&lt;h3 id=&#34;raid1-镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid1-镜像&#34;&gt;#&lt;/a&gt; RAID1 - 镜像&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161806501.png&#34; alt=&#34;image-20221117161806501&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161823895.png&#34; alt=&#34;image-20221117161823895&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161835837.png&#34; alt=&#34;image-20221117161835837&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大批读请求，速度较快；写请求，与 RAID0 类似。&lt;/p&gt;
&lt;h3 id=&#34;raid01-vs-raid10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid01-vs-raid10&#34;&gt;#&lt;/a&gt; RAID01 VS RAID10&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161936601.png&#34; alt=&#34;image-20221117161936601&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;如果disk-0和disk-3坏了会怎么样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果disk-0和disk-3坏了会怎么样&#34;&gt;#&lt;/a&gt; 如果 Disk 0 和 Disk 3 坏了会怎么样？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于 RAID01 来说&lt;/p&gt;
&lt;p&gt;Disk1 损坏，左边的 RAID 0 报废；Disk3 损坏，右边的 RAID 0 报废，整体的 RAID 1 报废&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 RAID10 来说&lt;/p&gt;
&lt;p&gt;Disk1 损坏，左边的 RAID 1 仍能够使用；Disk3 损坏，右边的 RAID 1 仍能够使用，整体的 RAID1 仍能够使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	对于同样的出错，RAID10 仍能够正常运行，但是 RAID1 无法使用，所以 RAID10&lt;strong&gt; 容错率更高&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;raid2-并行存取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid2-并行存取&#34;&gt;#&lt;/a&gt; RAID2 - 并行存取&lt;/h3&gt;
&lt;p&gt;并行存取 —— 所有磁盘成员都参与每个 IO 请求的执行，各个驱动器的轴是&lt;strong&gt;同步旋转&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;RAID2 和 RAID3 的&lt;strong&gt;条带非常小&lt;/strong&gt;，经常小到一个字节或一个字。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162002788.png&#34; alt=&#34;image-20221117162002788&#34; /&gt;&lt;/p&gt;
&lt;p&gt;读写时，都需要进行校验，读操作要访问所有磁盘，写操作要访问所有数据盘和校验盘。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162035002.png&#34; alt=&#34;image-20221117162035002&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要时间开销处理海明码&lt;/p&gt;
&lt;h3 id=&#34;raid3-并行存取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid3-并行存取&#34;&gt;#&lt;/a&gt; RAID3 - 并行存取&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162051620.png&#34; alt=&#34;image-20221117162051620&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163754445.png&#34; alt=&#34;image-20221117163754445&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163718019.png&#34; alt=&#34;image-20221117163718019&#34; /&gt;&lt;/p&gt;
&lt;p&gt;并行存取&lt;/p&gt;
&lt;p&gt;四个盘同时读写&lt;/p&gt;
&lt;p&gt;数据传输率 —— 任何 IO 请求将包含所有数据盘的并行数据传送，对于大量传送，性能改善特别明显。&lt;/p&gt;
&lt;p&gt;面对多个事务 —— 但是一次只能执行一个 IO 请求，在面向事务的环境中，性能将受损。&lt;/p&gt;
&lt;h3 id=&#34;raid4-独立存取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid4-独立存取&#34;&gt;#&lt;/a&gt; RAID4 - 独立存取&lt;/h3&gt;
&lt;p&gt;独立存取阵列更适合与需要高速 IO 请求的应用，而相对较少用于需要高数据传输率的场合。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163553896.png&#34; alt=&#34;image-20221117163553896&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163604760.png&#34; alt=&#34;image-20221117163604760&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117164749605.png&#34; alt=&#34;image-20221117164749605&#34; /&gt;&lt;/p&gt;
&lt;p&gt;独立存取，每个磁盘的操作都是独立的。&lt;/p&gt;
&lt;p&gt;写损失 —— 既要修改数据盘，也要修改校验盘。&lt;/p&gt;
&lt;p&gt;一次写入 包括&lt;strong&gt;两读两写&lt;/strong&gt; —— 两次读操作（数据盘、校验盘）、两次写操作（数据盘、校验盘）&lt;/p&gt;
&lt;h3 id=&#34;raid5-独立存取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid5-独立存取&#34;&gt;#&lt;/a&gt; RAID5 - 独立存取&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163643553.png&#34; alt=&#34;image-20221117163643553&#34; /&gt;&lt;/p&gt;
&lt;p&gt;避免潜在的 IO 瓶颈问题 —— 校验条带分开了可以同时读取 (&lt;/p&gt;
&lt;p&gt;读没有影响，写受到限制（还是两读两写&lt;/p&gt;
&lt;h3 id=&#34;raid50&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid50&#34;&gt;#&lt;/a&gt; RAID50&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165428182.png&#34; alt=&#34;image-20221117165428182&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;raid6-独立存取-两种不同的奇偶校验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid6-独立存取-两种不同的奇偶校验码&#34;&gt;#&lt;/a&gt; RAID6 - 独立存取 - 两种不同的奇偶校验码&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165615475.png&#34; alt=&#34;image-20221117165615475&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;raid比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raid比较&#34;&gt;#&lt;/a&gt; RAID 比较&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165842161.png&#34; alt=&#34;image-20221117165842161&#34; /&gt;&lt;/p&gt;
&lt;p&gt;基本需求 —— 快、可用性&lt;/p&gt;
&lt;p&gt;0 和 1 没有达到兼顾&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165949394.png&#34; alt=&#34;image-20221117165949394&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117170009169.png&#34; alt=&#34;image-20221117170009169&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117170031768.png&#34; alt=&#34;image-20221117170031768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一些 callback&lt;/p&gt;
&lt;p&gt;3 和 4 的区别在于，是不是一起转的&lt;/p&gt;
&lt;p&gt;5 和 6 各有优劣&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-11-21T06:06:58.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/11/15/COA/Lecture10-%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/</id>
        <title>Lecture10-检错与纠错</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/11/15/COA/Lecture10-%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/"/>
        <content type="html">&lt;p&gt;奇偶检验、海明码检验、循环冗余检验 CRC&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture10-校验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture10-校验码&#34;&gt;#&lt;/a&gt; Lecture10 - 校验码&lt;/h1&gt;
&lt;h2 id=&#34;差错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错&#34;&gt;#&lt;/a&gt; 差错&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110172321805.png&#34; alt=&#34;image-20221110172321805&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;纠错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纠错&#34;&gt;#&lt;/a&gt; 纠错&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110173954538.png&#34; alt=&#34;image-20221110173954538&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110174007085.png&#34; alt=&#34;image-20221110174007085&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;奇偶校验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#奇偶校验码&#34;&gt;#&lt;/a&gt; 奇偶校验码&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110174244153.png&#34; alt=&#34;image-20221110174244153&#34; /&gt;&lt;/p&gt;
&lt;p&gt;奇校验和偶校验的代价和应用场景不同&lt;/p&gt;
&lt;p&gt;偶校验位的产生直接对待发送的数据依次做异或运算就可以得到，而产生奇校验位还要在偶校验电路的输出取非，相对而言，产生&lt;strong&gt;奇校验位的代价高&lt;/strong&gt;，速度也相对慢（慢一个逻辑门的时延）&lt;/p&gt;
&lt;p&gt;如果被传输的数据为全 0，此时采用奇校验时，接收端至少会收到 1 个 1，很容易&lt;strong&gt;判断确实有传送发生&lt;/strong&gt;；如果采用偶校验，此时收发双方都是 0，不容易判断是否有信号传来。而对于异步传输，因为有停止位的缘故，采用偶校验，接收方也至少能收到 1 个 1，当然，此时采用奇校验也是可以的；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110175031448.png&#34; alt=&#34;image-20221110175031448&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;汉明码海明码hamming-code&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汉明码海明码hamming-code&#34;&gt;#&lt;/a&gt; 汉明码 / 海明码 Hamming code&lt;/h3&gt;
&lt;h4 id=&#34;基本思想和处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想和处理过程&#34;&gt;#&lt;/a&gt; 基本思想和处理过程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110175242990.png&#34; alt=&#34;image-20221110175242990&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C D 通过传输得到 C‘ D’&lt;/p&gt;
&lt;p&gt;在接收端，用 D‘得到 C&#39;&#39;，和 C’异或，生成故障字。&lt;/p&gt;
&lt;h4 id=&#34;校验码长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#校验码长度&#34;&gt;#&lt;/a&gt; 校验码长度&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110175746481.png&#34; alt=&#34;image-20221110175746481&#34; /&gt;&lt;/p&gt;
&lt;p&gt;校验码要能够 cover 数据位一位出错、校验位一位出错和没有差错的情况&lt;/p&gt;
&lt;h4 id=&#34;故障字的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障字的作用&#34;&gt;#&lt;/a&gt; 故障字的作用&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115163421156.png&#34; alt=&#34;image-20221115163421156&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据位的划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据位的划分&#34;&gt;#&lt;/a&gt; 数据位的划分&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115163637665.png&#34; alt=&#34;image-20221115163637665&#34; /&gt;&lt;/p&gt;
&lt;p&gt;规定 C1-C4 所对应的情况。再排好 D1-D8 的位置。&lt;/p&gt;
&lt;p&gt;例如，1100 对应 C4 和 C3，则就在 C3 和 C4 中取异或。&lt;/p&gt;
&lt;h4 id=&#34;位安排&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位安排&#34;&gt;#&lt;/a&gt; 位安排&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115163906975.png&#34; alt=&#34;image-20221115163906975&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115164310763.png&#34; alt=&#34;image-20221115164310763&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115164322978.png&#34; alt=&#34;image-20221115164322978&#34; /&gt;&lt;/p&gt;
&lt;p&gt;0110  &lt;strong&gt;0&lt;/strong&gt;101  &lt;strong&gt;0&lt;/strong&gt;0&lt;strong&gt;11&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;0111  &lt;strong&gt;0&lt;/strong&gt;101  &lt;strong&gt;0&lt;/strong&gt;0&lt;strong&gt;11&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;0110  &lt;strong&gt;1&lt;/strong&gt;101  &lt;strong&gt;0&lt;/strong&gt;0&lt;strong&gt;11&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;码距和纠错理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#码距和纠错理论&#34;&gt;#&lt;/a&gt; 码距和纠错理论&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115163224140.png&#34; alt=&#34;image-20221115163224140&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合法编码&lt;/strong&gt;是正确的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;纠错理论&lt;/strong&gt;： &lt;code&gt;L - 1 = D + C, D &amp;gt;= C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;奇偶校验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 D 一位发生变化，C 就发生了变化。如果两位发生了变化，则码距已经超过了 2。奇偶校验不具备检测两位错误的能力。&lt;/li&gt;
&lt;li&gt;D 是 1 位，C 是 0 位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;汉明码校验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D 是 1 位，C 也是 1 位&lt;/li&gt;
&lt;li&gt;可以 2 位检测、0 位纠错吗？不可以，用海明码检测基于 “只有一位出现错误” 的假设。比如，如果 1、2 位出现了差错，那么可以对应与 D3 的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115220739021.png&#34; alt=&#34;image-20221115220739021&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;补充阅读sec-d-ec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补充阅读sec-d-ec&#34;&gt;#&lt;/a&gt; 补充阅读：SEC-D-EC&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115164644225.png&#34; alt=&#34;image-20221115164644225&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在海明码中，除了 D4 和 D7 之外，都会影响两位的校验码。&lt;/p&gt;
&lt;p&gt;L - 1 = D + C&lt;/p&gt;
&lt;p&gt;L - 1=  2 + 1&lt;/p&gt;
&lt;p&gt;为了实现两位的检错，需要将码距增加到 4【即添加一个额外的校验位，让数据对应的校验码位数增加到 3 位】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115165141136.png&#34; alt=&#34;image-20221115165141136&#34; /&gt;&lt;/p&gt;
&lt;p&gt;D1 和 D2 有问题，C3 和 D5 有问题是同一种显示。&lt;/p&gt;
&lt;p&gt;如何计算单纠错 / 单检错需要的校验位？ 2&lt;sup&gt;k&lt;/sup&gt; &amp;gt;= M + K + 1&lt;/p&gt;
&lt;p&gt;如何计算单纠错 / 双检错需要的校验位？2&lt;sup&gt;k-1&lt;/sup&gt; &amp;gt;= M + K + 1&lt;/p&gt;
&lt;p&gt;如何计算双纠错 / 双检错需要的校验位？2 &lt;sup&gt;k&lt;/sup&gt; &amp;gt;= C&lt;sub&gt;(M+K)&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt; + M + K + 1&lt;/p&gt;
&lt;h3 id=&#34;循环冗余校验crc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环冗余校验crc&#34;&gt;#&lt;/a&gt; 循环冗余校验 CRC&lt;/h3&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115171249746.png&#34; alt=&#34;image-20221115171249746&#34; /&gt;&lt;/p&gt;
&lt;p&gt;无论是奇偶校验还是海明码，需要的代价都很高。海明码也是以奇偶检测为手段的。&lt;/p&gt;
&lt;h4 id=&#34;基本思想和实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想和实现&#34;&gt;#&lt;/a&gt; 基本思想和实现&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115171316315.png&#34; alt=&#34;image-20221115171316315&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115221430300.png&#34; alt=&#34;image-20221115221430300&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;实例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例-2&#34;&gt;#&lt;/a&gt; 实例&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115171421174.png&#34; alt=&#34;image-20221115171421174&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接收方也对 1001 做模 2 运算，余数为 0 则无误。【余数为 111，相等于原来的数加上 111 就能够整除 1001】&lt;/p&gt;
&lt;p&gt;1001（x&lt;sup&gt;3&lt;/sup&gt; + 1)&lt;/p&gt;
&lt;p&gt;无借位减，等价于&lt;strong&gt;异或运算&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115172153954.png&#34; alt=&#34;image-20221115172153954&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115214420096.png&#34; alt=&#34;image-20221115214420096&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-11-15T14:18:59.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/11/15/COA/Lecture09-%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/</id>
        <title>Lecture09-外部存储器</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/11/15/COA/Lecture09-%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/"/>
        <content type="html">&lt;p&gt;外部存储器，主要介绍磁盘存储器（结构、读写、数据组织），略带介绍光盘、磁带、快闪存储器。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture09-外部存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture09-外部存储器&#34;&gt;#&lt;/a&gt; Lecture09 - 外部存储器&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109140148221.png&#34; alt=&#34;image-20221109140148221&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;外部存储器简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部存储器简介&#34;&gt;#&lt;/a&gt; 外部存储器简介&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109140744633.png&#34; alt=&#34;image-20221109140744633&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;磁盘存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘存储器&#34;&gt;#&lt;/a&gt; 磁盘存储器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109140910784.png&#34; alt=&#34;image-20221109140910784&#34; /&gt;&lt;/p&gt;
&lt;p&gt;磁盘是一种由&lt;strong&gt;非磁性材料&lt;/strong&gt;制成称为衬底（基材）的圆盘，其上涂有一层&lt;strong&gt;磁性材料&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;磁可以保持稳定。&lt;/p&gt;
&lt;p&gt;玻璃基材有很多优点。&lt;/p&gt;
&lt;p&gt;飞行高度 —— 磁头并不直接接触磁道。飞行高度更低，面对的数据（面积）更小，电磁感应更强，更利于读写数据。磁盘读取很快，如果直接接触，会导致较大的摩擦力，会毁坏磁盘。&lt;/p&gt;
&lt;p&gt;坏道，在无尘环境中修复。（唱片）的针扫到 “灰尘”，会有吱呀吱呀的声音。&lt;/p&gt;
&lt;h3 id=&#34;磁盘存储器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘存储器类型&#34;&gt;#&lt;/a&gt; 磁盘存储器类型&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109142404842.png&#34; alt=&#34;image-20221109142404842&#34; /&gt;&lt;/p&gt;
&lt;p&gt;软盘（读写头在读或写操作时实际地物理接触磁表面，其容量小、使用灵活和价格便宜）&lt;/p&gt;
&lt;h3 id=&#34;硬磁盘存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬磁盘存储器&#34;&gt;#&lt;/a&gt; 硬磁盘存储器&lt;/h3&gt;
&lt;h4 id=&#34;结构轴盘头臂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构轴盘头臂&#34;&gt;#&lt;/a&gt; 结构 —— 轴盘头臂&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109142416824.png&#34; alt=&#34;image-20221109142416824&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多个盘片，盘间相隔约 1 英寸。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109142429153.png&#34; alt=&#34;image-20221109142429153&#34; /&gt;&lt;/p&gt;
&lt;p&gt;大多数磁盘是两面都有可磁化的涂层，称为双面磁盘。&lt;/p&gt;
&lt;p&gt;在上图中，共有 10 个面，有 6 个磁头，中间 4 个是双面的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109143416494.png&#34; alt=&#34;image-20221109143416494&#34; /&gt;&lt;/p&gt;
&lt;p&gt;温彻斯特磁盘（温氏磁盘）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109143604481.png&#34; alt=&#34;image-20221109143604481&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;读写机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读写机制&#34;&gt;#&lt;/a&gt; 读写机制&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109143651520.png&#34; alt=&#34;image-20221109143651520&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109143935791.png&#34; alt=&#34;image-20221109143935791&#34; /&gt;&lt;/p&gt;
&lt;p&gt;读写速度由电磁感应的物理速度限制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109143951017.png&#34; alt=&#34;image-20221109143951017&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MR magnetoresistive 磁阻&lt;/p&gt;
&lt;p&gt;红框应该框中 MR 敏感器，MR 敏感器是为了满足更高的读速度的要求而出现。MR 敏感器对磁场较为敏感，需要做&lt;strong&gt;屏蔽机制&lt;/strong&gt;，防止周围的磁场造成影响。&lt;/p&gt;
&lt;h4 id=&#34;数据组织磁道-扇区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据组织磁道-扇区&#34;&gt;#&lt;/a&gt; 数据组织 —— 磁道、扇区&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109144841491.png&#34; alt=&#34;image-20221109144841491&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每个盘面上有上千个磁道。&lt;/p&gt;
&lt;p&gt;相邻磁道间隙 —— 防止或至少可以减少由于磁头为对准或磁域干扰所引起的错误。&lt;/p&gt;
&lt;p&gt;相邻扇区间隙 —— 避免对系统提出不合理的定位精度要求。&lt;/p&gt;
&lt;p&gt;扇区默认大小为&lt;strong&gt; 512B&lt;/strong&gt;。（如果题目中没有说明，则采用默认值 512B）&lt;/p&gt;
&lt;p&gt;编号&lt;strong&gt;从外向里&lt;/strong&gt;递增。&lt;/p&gt;
&lt;h5 id=&#34;cav-constant-angular-velocity-恒定角速度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cav-constant-angular-velocity-恒定角速度&#34;&gt;#&lt;/a&gt; CAV constant angular velocity 恒定角速度&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109145031875.png&#34; alt=&#34;image-20221109145031875&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优点：直接寻址&lt;/p&gt;
&lt;p&gt;缺点：容量限制&lt;/p&gt;
&lt;h5 id=&#34;multiple-zone-recording-多重区域记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#multiple-zone-recording-多重区域记录&#34;&gt;#&lt;/a&gt; Multiple zone recording 多重区域记录&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109145505507.png&#34; alt=&#34;image-20221109145505507&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同一个区域以相同的角速度转，不同的区域以不同的角速度转。区域可以包含多个磁道（相邻磁道之间的周长相差不大，所以需要隔一些磁道进行分组）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109150942979.png&#34; alt=&#34;image-20221109150942979&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化&#34;&gt;#&lt;/a&gt; 格式化&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109151053633.png&#34; alt=&#34;image-20221109151053633&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图中，每个扇区有 600 字节，包含 512 字节的数据和磁盘控制器使用的控制信息。&lt;/p&gt;
&lt;p&gt;同步字节 ——ID 域开始特定的 01 序列&lt;/p&gt;
&lt;p&gt;扇区间隙 —— 没有被磁化，既不表示 0，也不表示 1。有延时。&lt;/p&gt;
&lt;p&gt;数据域 ——4096 是主流标准，512 是之前的标准，因为之前需要存储的程序和数据较小，存储大小大会造成碎片化问题。混用的时候，把 4096 分为 8 个区域，共享同一个 ID。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109151105554.png&#34; alt=&#34;image-20221109151105554&#34; /&gt;&lt;/p&gt;
&lt;p&gt;快速格式化并没有清除数据，而是标注可写。&lt;/p&gt;
&lt;h4 id=&#34;io访问时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io访问时间&#34;&gt;#&lt;/a&gt; IO 访问时间&lt;/h4&gt;
&lt;h5 id=&#34;寻道时间-旋转延迟-传送时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寻道时间-旋转延迟-传送时间&#34;&gt;#&lt;/a&gt; 寻道时间、旋转延迟、传送时间&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109152850127.png&#34; alt=&#34;image-20221109152850127&#34; /&gt;&lt;/p&gt;
&lt;p&gt;旋转延迟 —— 可能刚好到，也可能刚好错过，取平均为&lt;strong&gt;半周&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问时间 = 寻道时间（如果有） + 旋转延迟 【是到达读写位置所需的时间】&lt;/p&gt;
&lt;p&gt;rpm 转速常用单位 resolution per minute&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109153121081.png&#34; alt=&#34;image-20221109153121081&#34; /&gt;&lt;/p&gt;
&lt;p&gt;寻道时间只考虑第一个磁道 —— 访问相邻的磁道，磁道很窄、移动时间可以忽略不计&lt;/p&gt;
&lt;h5 id=&#34;案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109153318387.png&#34; alt=&#34;image-20221109153318387&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109153631766.png&#34; alt=&#34;image-20221109153631766&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1 / (2 * 15000 / 60) = 0.002 s = 2ms【注意单位的统一】&lt;/p&gt;
&lt;p&gt;500 / (500 * 15000 / 60) = 4ms&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109153643053.png&#34; alt=&#34;image-20221109153643053&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;磁头寻道-磁盘调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁头寻道-磁盘调度&#34;&gt;#&lt;/a&gt; 磁头寻道、磁盘调度&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109153937260.png&#34; alt=&#34;image-20221109153937260&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;先来先服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先来先服务&#34;&gt;#&lt;/a&gt; 先来先服务&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154019777.png&#34; alt=&#34;image-20221109154019777&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;最短寻道时间优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最短寻道时间优先&#34;&gt;#&lt;/a&gt; 最短寻道时间优先&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154112018.png&#34; alt=&#34;image-20221109154112018&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最短寻道时间优先 (SSTF) 算法会导致 “饥饿” 现象发生，因为&lt;strong&gt;只要不断有新进程的请求到达，且其所要访问的磁道与磁头当前所在磁道的距离较近&lt;/strong&gt;，这种新进程的 I/O 请求必然优先满足（也就是距离磁头当前所在磁道的距离较远的磁道总是得不到访问）。&lt;/p&gt;
&lt;h5 id=&#34;扫描电梯scan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扫描电梯scan&#34;&gt;#&lt;/a&gt; 扫描 / 电梯 SCAN&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154319022.png&#34; alt=&#34;image-20221109154319022&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;循环扫描c-scan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环扫描c-scan&#34;&gt;#&lt;/a&gt; 循环扫描 C-SCAN&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154329283.png&#34; alt=&#34;image-20221109154329283&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;lookscan算法的升级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lookscan算法的升级&#34;&gt;#&lt;/a&gt; LOOK (SCAN 算法的升级)&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154745626.png&#34; alt=&#34;image-20221109154745626&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;c-lookc-scan算法的改进&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-lookc-scan算法的改进&#34;&gt;#&lt;/a&gt; C-LOOK（C-SCAN 算法的改进）&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221109154917267.png&#34; alt=&#34;image-20221109154917267&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;光存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#光存储器&#34;&gt;#&lt;/a&gt; 光存储器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110163221804.png&#34; alt=&#34;image-20221110163221804&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110162427440.png&#34; alt=&#34;image-20221110162427440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cd和cd-rom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd和cd-rom&#34;&gt;#&lt;/a&gt; CD 和 CD-ROM&lt;/h3&gt;
&lt;h4 id=&#34;制造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#制造方法&#34;&gt;#&lt;/a&gt; 制造方法&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110162711863.png&#34; alt=&#34;image-20221110162711863&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;凹坑&lt;/strong&gt;表面镀上一层高反射材料（一般采用铝，HQCD 采用银合金）&lt;/p&gt;
&lt;h4 id=&#34;读取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取&#34;&gt;#&lt;/a&gt; 读取&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110163548903.png&#34; alt=&#34;image-20221110163548903&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;光传感器检测凹坑与台之间的反射光强弱变化，并将其转换成数字信号。传感器以规整的间隔检测表面。 一个凹坑的开始或结束表示一个 1；间隔之间无标高变动出现时，记录为一个 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单螺旋式轨道 —— 凹坑被激光以恒定线速度（&lt;strong&gt;CLV&lt;/strong&gt;，constant linear velocity）读出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CD-ROM 块格式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110164457816.png&#34; alt=&#34;image-20221110164457816&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110164510136.png&#34; alt=&#34;image-20221110164510136&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110164245961.png&#34; alt=&#34;image-20221110164245961&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cd-r和cd-rw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd-r和cd-rw&#34;&gt;#&lt;/a&gt; CD-R 和 CD-RW&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110164727597.png&#34; alt=&#34;image-20221110164727597&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;cd-r&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd-r&#34;&gt;#&lt;/a&gt; CD-R&lt;/h4&gt;
&lt;p&gt;可刻录 CD—— 一写多读&lt;/p&gt;
&lt;h4 id=&#34;cd-rw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd-rw&#34;&gt;#&lt;/a&gt; CD-RW&lt;/h4&gt;
&lt;p&gt;可重写盘 —— 多写&lt;/p&gt;
&lt;p&gt;使用了&lt;strong&gt;光致相变材料&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;dvd数字多功能光盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dvd数字多功能光盘&#34;&gt;#&lt;/a&gt; DVD 数字多功能光盘&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110165211317.png&#34; alt=&#34;image-20221110165211317&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;高清晰光盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高清晰光盘&#34;&gt;#&lt;/a&gt; 高清晰光盘&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110165245610.png&#34; alt=&#34;image-20221110165245610&#34; /&gt;&lt;/p&gt;
&lt;p&gt;衍射极限公式：&lt;/p&gt;
&lt;p&gt;波长 lambda 和分辨两点的最小距离 D 正相关&lt;/p&gt;
&lt;h2 id=&#34;磁带&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁带&#34;&gt;#&lt;/a&gt; 磁带&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110165638182.png&#34; alt=&#34;image-20221110165638182&#34; /&gt;&lt;/p&gt;
&lt;p&gt;磁性材料，有许多磁针，根据磁场方向发生变化。&lt;/p&gt;
&lt;p&gt;磁带顺序读取 —— 依次读取，想要读取前面的必须倒带&lt;/p&gt;
&lt;p&gt;直接存取 —— 不需要顺序读取磁盘上的所有扇区&lt;/p&gt;
&lt;p&gt;并行记录（parallel recording）读写蛇形&lt;/p&gt;
&lt;p&gt;串行记录（serial recording）（蛇形记录 serpentine recording 时串行记录的典型记录技术）&lt;/p&gt;
&lt;p&gt;6-14(a)&lt;/p&gt;
&lt;p&gt;6-14 (b) 为了提高速度，读 - 写头能同时对几个相邻磁道进行读写操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110171608725.png&#34; alt=&#34;image-20221110171608725&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;快闪存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快闪存储器&#34;&gt;#&lt;/a&gt; 快闪存储器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110171635494.png&#34; alt=&#34;image-20221110171635494&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;u盘和固态硬盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#u盘和固态硬盘&#34;&gt;#&lt;/a&gt; U 盘和固态硬盘&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110171653977.png&#34; alt=&#34;image-20221110171653977&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221110171711344.png&#34; alt=&#34;image-20221110171711344&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-11-15T12:56:09.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/11/03/COA/Lecture08-cache/</id>
        <title>Lecture08-cache</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/11/03/COA/Lecture08-cache/"/>
        <content type="html">&lt;p&gt;cache 缓存器，解决内存墙问题，是主存部分的副本，设计要素有地址、容量、映射功能、替换算法、写策略、行大小、cache 数目。&lt;/p&gt;
&lt;h1 id=&#34;lecture08-cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture08-cache&#34;&gt;#&lt;/a&gt; Lecture08-cache&lt;/h1&gt;
&lt;h2 id=&#34;cache简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache简介&#34;&gt;#&lt;/a&gt; cache 简介&lt;/h2&gt;
&lt;h3 id=&#34;存储器层次结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器层次结构&#34;&gt;#&lt;/a&gt; 存储器层次结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164918401.png&#34; alt=&#34;image-20221101164918401&#34; /&gt;&lt;/p&gt;
&lt;p&gt;随着层次的下降，每位价格下降，容量增大，存取时间变长，处理器访问存储器的频率降低。&lt;/p&gt;
&lt;p&gt;cache（高速缓存）存储器的目的是使存储器的速度逼近可用的最快存储器的速度。&lt;/p&gt;
&lt;p&gt;多级 cache 一般标注为 L1、L2，通常由动态随机存取存储器（DRAM）构成。&lt;/p&gt;
&lt;h3 id=&#34;cache存在的意义解决内存墙的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache存在的意义解决内存墙的问题&#34;&gt;#&lt;/a&gt; cache 存在的意义：解决内存墙的问题&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165310897.png&#34; alt=&#34;image-20221101165310897&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165325716.png&#34; alt=&#34;image-20221101165325716&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cache的基本思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的基本思路&#34;&gt;#&lt;/a&gt; cache 的基本思路&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164904882.png&#34; alt=&#34;image-20221101164904882&#34; /&gt;&lt;/p&gt;
&lt;p&gt;只是主存&lt;strong&gt;部分&lt;/strong&gt;信息的&lt;strong&gt;副本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101170441990.png&#34; alt=&#34;image-20221101170441990&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cache主存系统的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache主存系统的结构&#34;&gt;#&lt;/a&gt; cache / 主存系统的结构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101205028927.png&#34; alt=&#34;image-20221101205028927&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主存系统中 ——M 个块，每块有 K 个字&lt;/p&gt;
&lt;p&gt;cache 中 ——m 个块，称作行【控制为 + 标记 + K 个字】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行的数量远远小于主存储器块的数目 m &amp;lt;&amp;lt; M&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101170954954.png&#34; alt=&#34;image-20221101170954954&#34; /&gt;&lt;/p&gt;
&lt;p&gt;传入地址 RA， 最后红线框处的两步为并行操作。&lt;/p&gt;
&lt;h2 id=&#34;cache的工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的工作流程&#34;&gt;#&lt;/a&gt; cache 的工作流程&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165017905.png&#34; alt=&#34;image-20221101165017905&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hit—— 传送的是&lt;strong&gt;字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Miss—— 读入 cache 的是&lt;strong&gt;块&lt;/strong&gt;，传入 CPU 的是&lt;strong&gt;字&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题&#34;&gt;#&lt;/a&gt; 问题&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165200894.png&#34; alt=&#34;image-20221101165200894&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;命中还是未命中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命中还是未命中&#34;&gt;#&lt;/a&gt; 命中还是未命中？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165513269.png&#34; alt=&#34;image-20221101165513269&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CPU、cache、主存如何建立地址的一一对应关系？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标记&lt;/strong&gt;是什么？&lt;/p&gt;
&lt;h3 id=&#34;为什么从内存中读入一个块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么从内存中读入一个块&#34;&gt;#&lt;/a&gt; 为什么从内存中读入一个块？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165809967.png&#34; alt=&#34;image-20221101165809967&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171223532.png&#34; alt=&#34;image-20221101171223532&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171836956.png&#34; alt=&#34;image-20221101171836956&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101172138850.png&#34; alt=&#34;image-20221101172138850&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用空间局限性，所以把块传入 cache 当中。&lt;/p&gt;
&lt;p&gt;块在 cache 中，则字在 cache 中。&lt;/p&gt;
&lt;p&gt;标记和内存地址之间的关系？&lt;/p&gt;
&lt;h3 id=&#34;使用cache需要更多的操作为什么还可以节省时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用cache需要更多的操作为什么还可以节省时间&#34;&gt;#&lt;/a&gt; 使用 cache 需要更多的操作，为什么还可以节省时间？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173524901.png&#34; alt=&#34;image-20221101173524901&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tm 是未命中惩罚&lt;/p&gt;
&lt;p&gt;两个式子都需要理解，下面的式子更方便做题。&lt;/p&gt;
&lt;p&gt;降低 cache 的访问时间与提高命中率矛盾 —— 存的东西多，提高命中率，但是降低了 cache 的访问时间。&lt;/p&gt;
&lt;h4 id=&#34;避免cache未命中提高命中率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#避免cache未命中提高命中率&#34;&gt;#&lt;/a&gt; 避免 cache 未命中，提高命中率&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173558232.png&#34; alt=&#34;image-20221101173558232&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容量失效 —— 涉及映射规则和替代原则的问题&lt;/p&gt;
&lt;p&gt;冲突失效 —— 例如直接映射中的冲突&lt;/p&gt;
&lt;h2 id=&#34;cache的设计要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache的设计要素&#34;&gt;#&lt;/a&gt; cache 的设计要素&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173743177.png&#34; alt=&#34;image-20221101173743177&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cache地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache地址&#34;&gt;#&lt;/a&gt; cache 地址&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174037678.png&#34; alt=&#34;image-20221101174037678&#34; /&gt;&lt;/p&gt;
&lt;p&gt;物理 cache 和逻辑 cache 的比较&lt;/p&gt;
&lt;p&gt;逻辑 cache 访问速度快，但是需要 cache 的每一行增加额外的几位来标记与该地址相关的虚拟地址。&lt;/p&gt;
&lt;h3 id=&#34;cache容量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache容量&#34;&gt;#&lt;/a&gt; cache 容量&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174233373.png&#34; alt=&#34;image-20221101174233373&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1k 涨到 16k，命中率有明显的上升，可以解决一些容量失效的额问题，但是再往后，命中率的上升近乎达到峰值。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174537594.png&#34; alt=&#34;image-20221101174537594&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174552006.png&#34; alt=&#34;image-20221101174552006&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;映射功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#映射功能&#34;&gt;#&lt;/a&gt; 映射功能&lt;/h3&gt;
&lt;h4 id=&#34;直接映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接映射&#34;&gt;#&lt;/a&gt; 直接映射&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174930231.png&#34; alt=&#34;image-20221101174930231&#34; /&gt;&lt;/p&gt;
&lt;p&gt;左边的映射方式可能会造成容量失效的问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175153621.png&#34; alt=&#34;image-20221101175153621&#34; /&gt;&lt;/p&gt;
&lt;p&gt;000H 和 080H 对应一个 cache 的行，每隔 8 个就会共用一个 cache 的行。&lt;/p&gt;
&lt;p&gt;稍微真实一点的示例，一个块里面有 16 个字，每个地址差 10H（即为 16）。&lt;/p&gt;
&lt;p&gt;H 是 16 进制的意思。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175330724.png&#34; alt=&#34;image-20221101175330724&#34; /&gt;&lt;/p&gt;
&lt;p&gt;M = 主存的块数&lt;/p&gt;
&lt;p&gt;i = cache 行号（在 cache 中对应的行数）&lt;/p&gt;
&lt;p&gt;j = 主存储器的块号&lt;/p&gt;
&lt;p&gt;C = cache 的行数（cache 总共的行数）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101210831620.png&#34; alt=&#34;image-20221101210831620&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175648891.png&#34; alt=&#34;image-20221101175648891&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213351613.png&#34; alt=&#34;image-20221101213351613&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213323009.png&#34; alt=&#34;image-20221101213323009&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;全相联映射关联映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全相联映射关联映射&#34;&gt;#&lt;/a&gt; 全相联映射（关联映射）&lt;/h4&gt;
&lt;p&gt;标记域 + 字域（s+w）位，cache 中的行号不由地址格式决定&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103162237911.png&#34; alt=&#34;image-20221103162237911&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213419743.png&#34; alt=&#34;image-20221101213419743&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163021051.png&#34; alt=&#34;image-20221103163021051&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163033660.png&#34; alt=&#34;image-20221103163033660&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;组关联映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组关联映射&#34;&gt;#&lt;/a&gt; 组关联映射&lt;/h4&gt;
&lt;p&gt;折中方法，体现了直接映射和全相联映射的优点，又避免了两者的缺点。&lt;/p&gt;
&lt;p&gt;标记 + 组（v = 2 &lt;sup&gt;d&lt;/sup&gt;）+ 字（块大小 ）。&lt;/p&gt;
&lt;p&gt;一组中有 K 行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163817034.png&#34; alt=&#34;image-20221103163817034&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163951991.png&#34; alt=&#34;image-20221103163951991&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164015137.png&#34; alt=&#34;image-20221103164015137&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164147269.png&#34; alt=&#34;image-20221103164147269&#34; /&gt;&lt;/p&gt;
&lt;p&gt;小容量适合全关联映射&lt;/p&gt;
&lt;p&gt;大容量适合直接映射&lt;/p&gt;
&lt;p&gt;K 路组关联映射处于两者之间&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172751908.png&#34; alt=&#34;image-20221103172751908&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172808723.png&#34; alt=&#34;image-20221103172808723&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172844027.png&#34; alt=&#34;image-20221103172844027&#34; /&gt;&lt;/p&gt;
&lt;p&gt;两个映射到同一 cache 组的块不可能具有相同的标记数。&lt;/p&gt;
&lt;p&gt;每组两行 (v = m/2, k = 2) 是最常用的组相联结构，与直接映射相比，它明显地提高了命中率。&lt;/p&gt;
&lt;h4 id=&#34;三种映射方式比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种映射方式比较&#34;&gt;#&lt;/a&gt; 三种映射方式比较&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164308172.png&#34; alt=&#34;image-20221103164308172&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164318953.png&#34; alt=&#34;image-20221103164318953&#34; /&gt;&lt;/p&gt;
&lt;p&gt;关联度越低，命中率越低，判断是否命中的时间越短，标记所占额外空间开销越小。【关联度小，其他三个都小】&lt;/p&gt;
&lt;h3 id=&#34;替换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#替换算法&#34;&gt;#&lt;/a&gt; 替换算法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164810384.png&#34; alt=&#34;image-20221103164810384&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;常用的替换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的替换算法&#34;&gt;#&lt;/a&gt; 常用的替换算法&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165206857.png&#34; alt=&#34;image-20221103165206857&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;最近最少使用算法lru&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近最少使用算法lru&#34;&gt;#&lt;/a&gt; 最近最少使用算法 LRU&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165310688.png&#34; alt=&#34;image-20221103165310688&#34; /&gt;&lt;/p&gt;
&lt;p&gt;USE 位为 0，不代表没有数据&lt;/p&gt;
&lt;p&gt;由前文，可以看到，两路组关联映射是最常用的方法，这个实现是很有现实意义的举例。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165326712.png&#34; alt=&#34;image-20221103165326712&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后一个 1110 的替换，LRU 最大为 3 的位置被替换，其他得未被访问的行的 LRU 自增 1。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpYW9waWFvbGFuZ2h1YS9hcnRpY2xlL2RldGFpbHMvOTM4NDA0Mw==&#34;&gt;https://blog.csdn.net/piaopiaolanghua/article/details/9384043&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为什么是 log (K!)—— 排列组合的问题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165404094.png&#34; alt=&#34;image-20221103165404094&#34; /&gt;&lt;/p&gt;
&lt;p&gt;LRU 的命中率可能没有想象中那么高&lt;/p&gt;
&lt;h4 id=&#34;先进先出算法fifo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先进先出算法fifo&#34;&gt;#&lt;/a&gt; 先进先出算法 FIFO&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165417670.png&#34; alt=&#34;image-20221103165417670&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165432556.png&#34; alt=&#34;image-20221103165432556&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;最不经常使用算法lfu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最不经常使用算法lfu&#34;&gt;#&lt;/a&gt; 最不经常使用算法 LFU&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165447852.png&#34; alt=&#34;image-20221103165447852&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所需要的额外的硬件实现太多，不能够支持。&lt;/p&gt;
&lt;h4 id=&#34;随机替换算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机替换算法&#34;&gt;#&lt;/a&gt; 随机替换算法&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165504705.png&#34; alt=&#34;image-20221103165504705&#34; /&gt;&lt;/p&gt;
&lt;p&gt;随机替换算法是一种基线【或者说底线】，随机替换算法在性能上只稍逊于使用其他替换算法，也就说明其他随机替换算法没有那么好。&lt;/p&gt;
&lt;h3 id=&#34;写策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写策略&#34;&gt;#&lt;/a&gt; 写策略&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172948799.png&#34; alt=&#34;image-20221103172948799&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存命中时的写策略写直达write-through&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存命中时的写策略写直达write-through&#34;&gt;#&lt;/a&gt; 缓存命中时的写策略：写直达 Write Through&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173037433.png&#34; alt=&#34;image-20221103173037433&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存命中时的写策略写回法write-back&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存命中时的写策略写回法write-back&#34;&gt;#&lt;/a&gt; 缓存命中时的写策略：写回法 Write Back&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173052648.png&#34; alt=&#34;image-20221103173052648&#34; /&gt;&lt;/p&gt;
&lt;p&gt;缺点的解决方法：每次 I/O 模块存取的时候先和 cache 做一个同步&lt;/p&gt;
&lt;h4 id=&#34;缓存未命中的写策略写不分配写分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存未命中的写策略写不分配写分配&#34;&gt;#&lt;/a&gt; 缓存未命中的写策略：写不分配 / 写分配&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173811474.png&#34; alt=&#34;image-20221103173811474&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;行大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行大小&#34;&gt;#&lt;/a&gt; 行大小&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174054409.png&#34; alt=&#34;image-20221103174054409&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不是违反时间和空间关系，而是影响局部性（？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103180046644.png&#34; alt=&#34;image-20221103180046644&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;cache数目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache数目&#34;&gt;#&lt;/a&gt; cache 数目&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174453746.png&#34; alt=&#34;image-20221103174453746&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通常，会有片内和片外的 cache。片内 cache 为第一级（L1），外部 cache 为第二级（L2）。L2cache 大小至少为 L1cache 大小的两倍时，才对提高总命中率有明显的作用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174504972.png&#34; alt=&#34;image-20221103174504972&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-11-03T13:03:21.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/10/24/COA/Lecture07-%E5%AD%98%E5%82%A8%E5%99%A8/</id>
        <title>Lecture07-存储器</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/10/24/COA/Lecture07-%E5%AD%98%E5%82%A8%E5%99%A8/"/>
        <content type="html">&lt;p&gt;存储器相关，聚焦于半导体存储器，主要分为读写存储器、只读存储器以及读为主的存储器。接着叙述芯片逻辑，以及芯片优化。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;回顾存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾存储器&#34;&gt;#&lt;/a&gt; 回顾：存储器&lt;/h2&gt;
&lt;h2 id=&#34;回顾存储器-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾存储器-2&#34;&gt;#&lt;/a&gt; 回顾：存储器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221020163158122.png&#34; alt=&#34;image-20221020163158122&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1Byte（字节） = 8 bit（比特）&lt;/p&gt;
&lt;p&gt;1 字 可能是 4 字节，也可能是 8 字节。根据计算机是 32 位还是 64 位有所不同，不同计算机有不同的字长。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171557660.png&#34; alt=&#34;image-20221101171557660&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;存储器层次结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储器层次结构&#34;&gt;#&lt;/a&gt; 存储器层次结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221021202852887.png&#34; alt=&#34;image-20221021202852887&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;半导体存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半导体存储器&#34;&gt;#&lt;/a&gt; 半导体存储器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124316886.png&#34; alt=&#34;image-20221024124316886&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半导体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;位元 存储 1 位数据&lt;/p&gt;
&lt;h3 id=&#34;半导体存储器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#半导体存储器类型&#34;&gt;#&lt;/a&gt; 半导体存储器类型&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124432370.png&#34; alt=&#34;image-20221024124432370&#34; /&gt;&lt;/p&gt;
&lt;p&gt;表中列出的而&lt;strong&gt;所有类型的存储器都是随机存取&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;快闪 flash——U 盘是其中的一种。&lt;/p&gt;
&lt;h3 id=&#34;读-写存储器随机存取存储器ram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读-写存储器随机存取存储器ram&#34;&gt;#&lt;/a&gt; 读 - 写存储器 —— 随机存取存储器 RAM&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124536588.png&#34; alt=&#34;image-20221024124536588&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RAM 的明显特征是，可以&lt;strong&gt;方便快捷&lt;/strong&gt;地从存储器读取数据和向存储器写入新数据，且读写操作都是通过使用&lt;strong&gt;电信号&lt;/strong&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;易失&lt;/strong&gt; —— 必须持续供电，一旦断电，数据就会丢失。&lt;/p&gt;
&lt;h4 id=&#34;sram-静态ram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sram-静态ram&#34;&gt;#&lt;/a&gt; SRAM 静态 RAM&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124554411.png&#34; alt=&#34;image-20221024124554411&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CS 片送&lt;/p&gt;
&lt;p&gt;RW 控制读写&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124714978.png&#34; alt=&#34;image-20221024124714978&#34; /&gt;&lt;/p&gt;
&lt;p&gt;推导过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130157726.png&#34; alt=&#34;image-20221024130157726&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;dram-动态ram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dram-动态ram&#34;&gt;#&lt;/a&gt; DRAM 动态 RAM&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124958784.png&#34; alt=&#34;image-20221024124958784&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过电容充电来存储数据。&lt;/p&gt;
&lt;p&gt;电容器有漏电趋势，动态 RAM 需要周期地充电刷新来维持数据的存储。&lt;/p&gt;
&lt;p&gt;动态一词就是在描述存储电荷丢失的趋势，即使电源一直在供电。&lt;/p&gt;
&lt;h4 id=&#34;sram与dram的对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sram与dram的对比&#34;&gt;#&lt;/a&gt; SRAM 与 DRAM 的对比&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024125105338.png&#34; alt=&#34;image-20221024125105338&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DRAM 密度高，价格便宜，趋向于满足大容量存储器的要求。但是 SRAM 更快。&lt;/p&gt;
&lt;p&gt;SRAM 一般用于 cache 存储器（片上或者片外的）【CPU 中】，而 DRAM 则用于主存储器中。&lt;/p&gt;
&lt;h3 id=&#34;只读存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#只读存储器&#34;&gt;#&lt;/a&gt; 只读存储器&lt;/h3&gt;
&lt;h4 id=&#34;rom-只读存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rom-只读存储器&#34;&gt;#&lt;/a&gt; ROM 只读存储器&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130516422.png&#34; alt=&#34;image-20221024130516422&#34; /&gt;&lt;/p&gt;
&lt;p&gt;问题补充：固化数据需要较大的固定成本，无论是制造一片或者复制上千片特殊的 ROM。但是可以通过批量生产降低单片芯片的成本。&lt;/p&gt;
&lt;h4 id=&#34;可编程romprom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可编程romprom&#34;&gt;#&lt;/a&gt; 可编程 ROM（PROM）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130821252.png&#34; alt=&#34;image-20221024130821252&#34; /&gt;&lt;/p&gt;
&lt;p&gt;需要少量的存储特定内容的 ROM 芯片，可以选择较为廉价的可编程 PROM&lt;/p&gt;
&lt;p&gt;可由供应商或者用户在芯片出厂后写入一次、&lt;/p&gt;
&lt;h3 id=&#34;主要进行读操作的存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要进行读操作的存储器&#34;&gt;#&lt;/a&gt; 主要进行读操作的存储器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131021140.png&#34; alt=&#34;image-20221024131021140&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;eprom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eprom&#34;&gt;#&lt;/a&gt; EPROM&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131047438.png&#34; alt=&#34;image-20221024131047438&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使芯片暴露在紫外线辐射下使所有的存储位元都被擦除，没有办法做到很精确，因此是芯片级的可擦除性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131226634.png&#34; alt=&#34;image-20221024131226634&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;eeprom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eeprom&#34;&gt;#&lt;/a&gt; EEPROM&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131245626.png&#34; alt=&#34;image-20221024131245626&#34; /&gt;&lt;/p&gt;
&lt;p&gt;任何时候都可以写入，无需擦除原先内容，只更新寻址到的一个或多个字节。&lt;/p&gt;
&lt;p&gt;将非易失性和数据修改灵活的优点结合起来。修改数据只需要使用常规的控制、地址和地址总线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;电写入，从 1 变成 0； 电擦除，从 0 变成 1。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;快闪存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快闪存储器&#34;&gt;#&lt;/a&gt; 快闪存储器&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131457113.png&#34; alt=&#34;image-20221024131457113&#34; /&gt;&lt;/p&gt;
&lt;p&gt;NAND Flash 共用一条线 —— 外部存储器&lt;/p&gt;
&lt;h3 id=&#34;各类rom对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各类rom对比&#34;&gt;#&lt;/a&gt; 各类 ROM 对比&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131557564.png&#34; alt=&#34;image-20221024131557564&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;芯片逻辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#芯片逻辑&#34;&gt;#&lt;/a&gt; 芯片逻辑&lt;/h2&gt;
&lt;h3 id=&#34;从位元到主存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从位元到主存&#34;&gt;#&lt;/a&gt; 从位元到主存&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131723140.png&#34; alt=&#34;image-20221024131723140&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131744592.png&#34; alt=&#34;image-20221024131744592&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131758270.png&#34; alt=&#34;image-20221024131758270&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131957375.png&#34; alt=&#34;image-20221024131957375&#34; /&gt;&lt;/p&gt;
&lt;p&gt;位扩展，从 1bit 增加到 8bit，需要增加 7 根线。&lt;/p&gt;
&lt;p&gt;字扩展，从 16K 变成 64K，16K 需要 7 根线，64K 需要 8 根线【因为行列复用】，只需要增加一根线，就可以实现 16K 到 64K。&lt;/p&gt;
&lt;p&gt;1K = 2 &lt;sup&gt;10&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;有多少位数据，就需要有多少根数据线。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101172926489.png&#34; alt=&#34;image-20221101172926489&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132007925.png&#34; alt=&#34;image-20221024132007925&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何寻址地址译码器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何寻址地址译码器&#34;&gt;#&lt;/a&gt; 如何寻址：地址译码器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131851948.png&#34; alt=&#34;image-20221024131851948&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131815432.png&#34; alt=&#34;image-20221024131815432&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DRAM 不用刷新，采用行列复用 —— 用 11 位分别计算出行地址和列地址进行访问， 因为 DRAM 的存储空间较大，且行列复用耗时较高，所以只在 DRAM 中使用。&lt;/p&gt;
&lt;p&gt;SRAM 且没有 RAS（行地址选通）和 CAS（列地址选通），也没有数据输入输出缓冲器，SRAM 常作为缓存，需要更快的速度。&lt;/p&gt;
&lt;p&gt;WE 写允许&lt;/p&gt;
&lt;p&gt;OE 输出允许&lt;/p&gt;
&lt;h3 id=&#34;如何刷新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何刷新&#34;&gt;#&lt;/a&gt; 如何刷新&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131911336.png&#34; alt=&#34;image-20221024131911336&#34; /&gt;&lt;/p&gt;
&lt;p&gt;集中式刷新会造成死区，影响使用，因此开发分散式刷新和异步刷新进行优化。&lt;/p&gt;
&lt;p&gt;译码阶段不需要进行缓存，每行的刷新相对独立，不需要按照顺序。&lt;/p&gt;
&lt;h2 id=&#34;高级的dram架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级的dram架构&#34;&gt;#&lt;/a&gt; 高级的 DRAM 架构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132123622.png&#34; alt=&#34;image-20221024132123622&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;同步dramsynchorounous-dram-sdram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步dramsynchorounous-dram-sdram&#34;&gt;#&lt;/a&gt; 同步 DRAM (Synchorounous DRAM, SDRAM)&lt;/h3&gt;
&lt;h3 id=&#34;双频率sdramdouble-data-rate-sdram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双频率sdramdouble-data-rate-sdram&#34;&gt;#&lt;/a&gt; 双频率 SDRAM (Double-Data-Rate SDRAM)&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132312999.png&#34; alt=&#34;image-20221024132312999&#34; /&gt;&lt;/p&gt;
&lt;p&gt;SDRAM&lt;/p&gt;
&lt;p&gt;在每一次行选之前，都需要做预充电&lt;/p&gt;
&lt;p&gt;如果下一次仍然是同一行的数据，不需要行选。&lt;/p&gt;
&lt;p&gt;在时钟上升沿才能发数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132326001.png&#34; alt=&#34;image-20221024132326001&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DDR SDRAM&lt;/p&gt;
&lt;p&gt;在时钟下升沿也可以发数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132335364.png&#34; alt=&#34;image-20221024132335364&#34; /&gt;&lt;/p&gt;
&lt;p&gt;核心频率无法改变 —— 电容很难提升&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101162647755.png&#34; alt=&#34;image-20221101162647755&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101162656519.png&#34; alt=&#34;image-20221101162656519&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;寄存器基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器基本原理&#34;&gt;#&lt;/a&gt; 寄存器基本原理&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164208668.png&#34; alt=&#34;image-20221101164208668&#34; /&gt;&lt;/p&gt;
&lt;p&gt;边沿 D 触发器，RS 锁存器以及增加了 input 和 clock（？&lt;/p&gt;
&lt;p&gt;寄存器和 CPU 的时钟同步&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132047639.png&#34; alt=&#34;image-20221024132047639&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-10-24T05:30:15.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/10/18/COA/Lecture06-%E5%8A%A0%E5%87%8F%E6%B3%95%E5%8D%81%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/</id>
        <title>Lecture06-加减法十进制表示</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/10/18/COA/Lecture06-%E5%8A%A0%E5%87%8F%E6%B3%95%E5%8D%81%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/"/>
        <content type="html">&lt;p&gt;十进制表示的加减法&lt;br /&gt;
 &amp;lt;!--more&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture06-加减法十进制数表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture06-加减法十进制数表示&#34;&gt;#&lt;/a&gt; Lecture06 加减法十进制数表示&lt;/h1&gt;
&lt;h2 id=&#34;回顾二进制编码的十进制表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾二进制编码的十进制表示&#34;&gt;#&lt;/a&gt; 回顾：二进制编码的十进制表示&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018161625312.png&#34; alt=&#34;image-20221018161625312&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;回顾补码表示整数的加减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾补码表示整数的加减法&#34;&gt;#&lt;/a&gt; 回顾：补码表示整数的加减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018161749133.png&#34; alt=&#34;image-20221018161749133&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;加法溢出判定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法溢出判定&#34;&gt;#&lt;/a&gt; 加法溢出判定&lt;/h3&gt;
&lt;p&gt;正负 进位&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018162304448.png&#34; alt=&#34;image-20221018162304448&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法&#34;&gt;#&lt;/a&gt; 加法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018162440184.png&#34; alt=&#34;image-20221018162440184&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;25-31-56&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-31-56&#34;&gt;#&lt;/a&gt; 25 + 31 = 56&lt;/h3&gt;
&lt;p&gt;用 0010 表示 2，用 0101 表示 5&lt;/p&gt;
&lt;p&gt;用 0011 表示 3，用 0001 表示 1&lt;/p&gt;
&lt;p&gt;个位数和十位数的和均小于 9&lt;/p&gt;
&lt;h3 id=&#34;28-39-67&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-39-67&#34;&gt;#&lt;/a&gt; 28 + 39 = 67&lt;/h3&gt;
&lt;p&gt;0001 要再加上一个 0110 等于 0111&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么加上 6？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;二进制 10000 的第 5 位表示 16，但在十进制中实际上表示的是 10，少进了 6，所以在个位还需要再加上 6。&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018163500884.png&#34; alt=&#34;image-20221018163500884&#34; /&gt;&lt;/p&gt;
&lt;p&gt;左边表格分别表示 10-19 的数，右边为实际的硬件实现。&lt;/p&gt;
&lt;p&gt;C4 表达式的意思是，如果（S1 和 S3 为 1）或者（S2 和 S3 为 1）则肯定大于 10，若 C4 * 为 1，则肯定大于 16。【公式中的 S1、2、3 应该有星号）&lt;/p&gt;
&lt;p&gt;C4 作为输出的同时，也对 S2 和 S1 的真正输出产生了影响。&lt;/p&gt;
&lt;h2 id=&#34;减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#减法&#34;&gt;#&lt;/a&gt; 减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164311877.png&#34; alt=&#34;image-20221018164311877&#34; /&gt;&lt;/p&gt;
&lt;p&gt;9-x 不会出现借位的情况。&lt;/p&gt;
&lt;h3 id=&#34;反转数字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反转数字&#34;&gt;#&lt;/a&gt; “反转” 数字：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;按位反转，并添加 &lt;code&gt;1010&lt;/code&gt; （10）&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;0110&lt;/code&gt; （6），并按位反转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190527126.png&#34; alt=&#34;image-20221018190527126&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;结果调整&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结果调整&#34;&gt;#&lt;/a&gt; 结果调整&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164745084.png&#34; alt=&#34;image-20221018164745084&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;309-125184有进位舍弃进位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#309-125184有进位舍弃进位&#34;&gt;#&lt;/a&gt; 309-125=184 (有进位，舍弃进位)&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018194656730.png&#34; alt=&#34;image-20221018194656730&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当得到的结果在 &lt;code&gt;10~19&lt;/code&gt;  时，都需要进行修正。 &lt;code&gt;10~15&lt;/code&gt;  时，加上 6 进行修正。&lt;/p&gt;
&lt;p&gt;例如，1110 + 0110 进 1 得到 0100. 即 13+6-16 (-10) 得到 3。&lt;/p&gt;
&lt;p&gt;有进位相当于，a-b 的时候 a&amp;gt;b，所以 a-b = a + (999 - b) + 1 - 1000。&lt;/p&gt;
&lt;h4 id=&#34;125-309-184无进位取反加1符号位设为负&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#125-309-184无进位取反加1符号位设为负&#34;&gt;#&lt;/a&gt; 125-309 = -184（无进位，取反加 1，符号位设为负）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018194641391.png&#34; alt=&#34;image-20221018194641391&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相当于此时 a &amp;lt; b&lt;/p&gt;
&lt;p&gt;a - b =  -[1000 - [a + (999 - b) + 1]]&lt;/p&gt;
&lt;p&gt;【以上部分可参考 Lecture05 中，尾数的原码加法示例，是一样的道理】&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164912432.png&#34; alt=&#34;image-20221018164912432&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-10-18T11:50:47.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/</id>
        <title>Lecture05-浮点数计算</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
        <content type="html">&lt;p&gt;浮点数的加减乘除。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture05-浮点数运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture05-浮点数运算&#34;&gt;#&lt;/a&gt; Lecture05 - 浮点数运算&lt;/h1&gt;
&lt;h2 id=&#34;回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾&#34;&gt;#&lt;/a&gt; 回顾&lt;/h2&gt;
&lt;p&gt;记忆 1+8+23 的（符号位移码原码）&lt;/p&gt;
&lt;p&gt;记忆各种情况对应的表示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162002689.png&#34; alt=&#34;image-20221013162002689&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;加法和减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法和减法&#34;&gt;#&lt;/a&gt; 加法和减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162704448.png&#34; alt=&#34;image-20221013162704448&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查 0：如果有 0 存在可以不用计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对齐有效位：阶码向&lt;strong&gt;大值&lt;/strong&gt;对齐，因为右移较小的数而丢失的数字所造成的的影响较小。右移较小的数有效值的幅值部分 1 位，并将阶值加 1。&lt;strong&gt;如果两个数的阶值差别非常大，则较小的数丢失&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加或减有效值：&lt;strong&gt;原码加减法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规格化结果：把结果调整为左移有效值直到&lt;strong&gt;最高有效数字为非 0&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（右规最多是两位，最多是 1.1111...+1.xxxx，对应有效值的上溢）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#溢出&#34;&gt;#&lt;/a&gt; 溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013164459041.png&#34; alt=&#34;image-20221013164459041&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阶值上溢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		最大允许阶值 127（11111110）&lt;/p&gt;
&lt;p&gt;​		右移可能会导致阶值的上溢&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;阶值下溢&lt;/p&gt;
&lt;p&gt;最小阶值为 - 126（00000001）&lt;/p&gt;
&lt;p&gt;左移可能会引起阶值的下溢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效值的上下溢只存在于右规&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013171505053.png&#34; alt=&#34;image-20221013171503186&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常&#34;&gt;#&lt;/a&gt; 异常&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014093204887.png&#34; alt=&#34;image-20221014093204887&#34; /&gt;&lt;/p&gt;
&lt;p&gt;关于&lt;strong&gt;数太小&lt;/strong&gt;阶下溢的问题，在 cpp 中，如果是单精度浮点数，会用非规格化数表示，如果是双精度浮点数，会直接用 0 表示。&lt;/p&gt;
&lt;h3 id=&#34;原码的加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码的加法&#34;&gt;#&lt;/a&gt; 原码的加法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165531300.png&#34; alt=&#34;image-20221013165531300&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165721396.png&#34; alt=&#34;image-20221013165721396&#34; /&gt;&lt;/p&gt;
&lt;p&gt;求补的时候加了 2 的 n 次方&lt;/p&gt;
&lt;p&gt;有进位说明 a&amp;gt;b&lt;/p&gt;
&lt;p&gt;无进位说明 a&amp;lt;b&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014103516514.png&#34; alt=&#34;image-20221014103516514&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013172902710.png&#34; alt=&#34;image-20221013172902710&#34; /&gt;&lt;/p&gt;
&lt;p&gt;01111110 ——127    23 表示有 23 个零&lt;/p&gt;
&lt;p&gt;01111101 ——126    21 表示有 21 个零&lt;/p&gt;
&lt;p&gt;差了一位，左移一位&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173317582.png&#34; alt=&#34;image-20221013173317582&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1111110 127&lt;/p&gt;
&lt;p&gt;1111101 126&lt;/p&gt;
&lt;p&gt;然后给 0.4375 取个反&lt;/p&gt;
&lt;h2 id=&#34;乘法和除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法和除法&#34;&gt;#&lt;/a&gt; 乘法和除法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013163420919.png&#34; alt=&#34;image-20221013163420919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意乘法和除法的阶值计算 ——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乘法加 bias&lt;/li&gt;
&lt;li&gt;除法减 bias&lt;/li&gt;
&lt;li&gt;bias 的值为 127【通常，移码的偏移量为 2&lt;sup&gt;k-1&lt;/sup&gt; -1，移码的偏移量主要是看想表示多少个负数和多少个正数，阶码的范围是 - 126~127，-127 和 128 分别表示特殊的数】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法&#34;&gt;#&lt;/a&gt; 乘法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173727304.png&#34; alt=&#34;image-20221013173727304&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于乘法来说，只有右规。【1.x * 1.x 只可能超出】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173847536.png&#34; alt=&#34;image-20221013173847536&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174221322.png&#34; alt=&#34;image-20221013174221322&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最高两位为 01，不用处理。&lt;/p&gt;
&lt;h3 id=&#34;除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法&#34;&gt;#&lt;/a&gt; 除法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174335704.png&#34; alt=&#34;image-20221013174335704&#34; /&gt;&lt;/p&gt;
&lt;p&gt;x 和 y 可能都是 0，可能会报错或者是正负无穷&lt;/p&gt;
&lt;p&gt;对于除法来说，只有左规。【1.x/ 1.x 】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174656673.png&#34; alt=&#34;image-20221013174656673&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;精度保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度保护&#34;&gt;#&lt;/a&gt; 精度保护&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174820265.png&#34; alt=&#34;image-20221013174820265&#34; /&gt;&lt;/p&gt;
&lt;p&gt;y 需要左移一位对齐，所以最后一位 1 在不使用附加位的情况下会丢失。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175053246.png&#34; alt=&#34;image-20221013175053246&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一般而言，多余位的值超过了最低可表示位值的一半，则进位。&lt;/p&gt;
&lt;p&gt;重点关注 “10” 强制结果为偶数的分类讨论。如果结果的最低可表示位是 1，结果向上入；当最低可表示位是 0，结果向下入。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175347832.png&#34; alt=&#34;image-20221013175347832&#34; /&gt;&lt;/p&gt;
&lt;p&gt;朝 0 摄入，被截断值的幅值总是小于或等于更精确原值的幅值，在计算中产生一致的向下偏差。&lt;/p&gt;
&lt;h3 id=&#34;精度考虑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度考虑&#34;&gt;#&lt;/a&gt; 精度考虑&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014105545840.png&#34; alt=&#34;image-20221014105545840&#34; /&gt;&lt;/p&gt;
&lt;p&gt;x == (int)(float) x&lt;/p&gt;
&lt;p&gt;int 型有 32 位，但是 float 精度只能保存 24 位，会有精度的损失。&lt;/p&gt;
&lt;p&gt;x * x &amp;gt;=  0 否&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D + F)  - D == F 什么时候不成立？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;右边计算出来为 double 型，左边是 float&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于此例情况，当&lt;strong&gt; i 大于 53 或等于 - 53&lt;/strong&gt; 时，会输出。&lt;/p&gt;
&lt;p&gt;因为此时 f 相对于 d 较小，相当于 0。&lt;/p&gt;
&lt;p&gt;补充：双精度 64（1+11+52）小数部分有 &lt;code&gt;52&lt;/code&gt;  位。别的情况，i 会有不同的值对应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;i 大于 53 的情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190250710.png&#34; alt=&#34;image-20221018190250710&#34; /&gt;&lt;/p&gt;
&lt;p&gt;舍入位虽然是 10，但前置位已经是 0（偶数），因此不进位，所以有精度的丢失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i 等于 - 53 的情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190243583.png&#34; alt=&#34;image-20221018190243583&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​		舍入位是 10，前置位是 1，因此要进位，从而造成了误差。&lt;/p&gt;
&lt;p&gt;只要有精度的丢失，就是 “否”&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-10-14T02:57:07.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</id>
        <title>Lecture04-整数运算</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/"/>
        <content type="html">&lt;p&gt;整数的加减乘除计算的实现。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;整数运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数运算&#34;&gt;#&lt;/a&gt; 整数运算&lt;/h1&gt;
&lt;h2 id=&#34;算术逻辑单元alu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术逻辑单元alu&#34;&gt;#&lt;/a&gt; 算术逻辑单元 ALU&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110026189.png&#34; alt=&#34;image-20221012110026189&#34; /&gt;&lt;/p&gt;
&lt;p&gt;寄存器存储数据、结果、flags&lt;/p&gt;
&lt;p&gt;控制器控制 ALU 操作和数据传入的信号&lt;/p&gt;
&lt;h2 id=&#34;全加器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全加器&#34;&gt;#&lt;/a&gt; 全加器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110035166.png&#34; alt=&#34;image-20221012110035166&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注与或异或的符号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110051989.png&#34; alt=&#34;image-20221012110051989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算结果和进位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110059850.png&#34; alt=&#34;image-20221012110059850&#34; /&gt;&lt;/p&gt;
&lt;p&gt;F 可以理解为，是奇数个 1 的时候，结果为 1；是偶数个 1 的时候，结果为 0。&lt;/p&gt;
&lt;p&gt;进位则是，有两个 1 的时候即可进位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110111693.png&#34; alt=&#34;image-20221012110111693&#34; /&gt;&lt;/p&gt;
&lt;p&gt;异或门只能有&lt;strong&gt;两个&lt;/strong&gt;输入端，异或门的时延&lt;strong&gt;不一定为 3ty&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在网上找了一些实现异或的方法，可以看出，时延可以是 2ty 也可以是 3ty，应该是由异或门实现的方式决定的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log29.gif&#34; alt=&#34;logic equivalent&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log30.gif&#34; alt=&#34;implimentation using NAND&#34; /&gt;&lt;/p&gt;
&lt;p&gt;非门算不算时延？ &lt;strong&gt;非门算时延&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110147229.png&#34; alt=&#34;image-20221012110147229&#34; /&gt;&lt;/p&gt;
&lt;p&gt;减少了一个与门，但是时延仍然是 6ty&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110159471.png&#34; alt=&#34;image-20221012110159471&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里可以解释为，因为 X 和 Y 的或和异或仅在 X、Y 均为 1 时不同，但 X、Y 均为 1 时，前面的与为 1，并不影响结果，所以两个式子相等。&lt;/p&gt;
&lt;h2 id=&#34;串行进位行波进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串行进位行波进位加法器&#34;&gt;#&lt;/a&gt; 串行进位（行波进位）加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110210316.png&#34; alt=&#34;image-20221012110210316&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公式来源于前面的全加法器，理解一样。&lt;/p&gt;
&lt;p&gt;需要等待 “进位输出信号”，所以缺点是延迟慢。&lt;/p&gt;
&lt;h2 id=&#34;全先行进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全先行进位加法器&#34;&gt;#&lt;/a&gt; 全先行进位加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110215735.png&#34; alt=&#34;image-20221012110215735&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110224827.png&#34; alt=&#34;image-20221012110224827&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不需要等待 n-1 位算完，就可以开始计算第 n 位，把能计算的先提前计算好。&lt;/p&gt;
&lt;p&gt;1ty：Gi 和 Pi 的计算，Gi 和 Pi 的计算可以同时进行，只需要 1ty&lt;/p&gt;
&lt;p&gt;2ty：计算 C 的值，因为需要先进行与操作，再进行或操作，所以需要 2ty，因为 Ci 只和 P\G\C0 的值有关，所以不需要等前一位的进位算好。&lt;/p&gt;
&lt;p&gt;3ty：Xi 和 Yi 的异或可在前三个时延做好，只需要再和 Ci-1 做异或即可算出 F。&lt;/p&gt;
&lt;h2 id=&#34;部分先行进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分先行进位加法器&#34;&gt;#&lt;/a&gt; 部分先行进位加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110230663.png&#34; alt=&#34;image-20221012110230663&#34; /&gt;&lt;/p&gt;
&lt;p&gt;加法器延迟过于严重，但是全先行进位又难以实现，所以采用了两者的混合杂交。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110240165.png&#34; alt=&#34;image-20221012110240165&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3ty：第一个全先行加法器需要算出 G、P，耗时 1ty；然后需要算出所有的进位，耗时 2ty；与此同时，其他三个 CLA 也算好了自己的 G 和 P。&lt;/p&gt;
&lt;p&gt;2ty：第二个 CLA 收到 Cin 之后，需要 2ty 计算 Cout。&lt;/p&gt;
&lt;p&gt;2ty：同上，为第三个 CLA 的计算。&lt;/p&gt;
&lt;p&gt;5ty：2ty+3ty，第四个 CLA 计算 C 需要 2ty，然后再和 X、Y 进行异或操作，需要 3ty。在此之前，其余的 CLA 已经完成了异或计算。&lt;/p&gt;
&lt;h2 id=&#34;加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法&#34;&gt;#&lt;/a&gt; 加法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110246821.png&#34; alt=&#34;image-20221012110246821&#34; /&gt;&lt;/p&gt;
&lt;p&gt;溢出的情况只能是两个正的变成负的，或者两个负的变成正的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Xn&lt;/th&gt;
&lt;th&gt;Yn&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;Fn&lt;/th&gt;
&lt;th&gt;overflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;判断是否溢出的 flag 就是在 Cn-1 和 Cn 上加一个异或器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Xn&lt;/th&gt;
&lt;th&gt;Yn&lt;/th&gt;
&lt;th&gt;Cn-1&lt;/th&gt;
&lt;th&gt;Cn&lt;/th&gt;
&lt;th&gt;overflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#减法&#34;&gt;#&lt;/a&gt; 减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110254314.png&#34; alt=&#34;image-20221012110254314&#34; /&gt;&lt;/p&gt;
&lt;p&gt;减法就是在加法器上加一个选择器，sub 给一个信号&lt;/p&gt;
&lt;h2 id=&#34;乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法&#34;&gt;#&lt;/a&gt; 乘法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110300471.png&#34; alt=&#34;image-20221012110300471&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上，加法和移位可以合并，因为始终上升沿到来之前，各寄存器中的数据会被取出，因此不需要 2-3 个时钟周期，1 个时钟周期即可完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110306067.png&#34; alt=&#34;image-20221012110306067&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110312495.png&#34; alt=&#34;image-20221012110312495&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于乘法会出现溢出的问题，所以出现了原码一位乘法和布斯算法。&lt;/p&gt;
&lt;h3 id=&#34;原位一位乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原位一位乘法&#34;&gt;#&lt;/a&gt; 原位一位乘法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110326698.png&#34; alt=&#34;image-20221012110326698&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;补码一位乘法布斯算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码一位乘法布斯算法&#34;&gt;#&lt;/a&gt; 补码一位乘法：布斯算法&lt;/h3&gt;
&lt;h4 id=&#34;基本思路和证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思路和证明&#34;&gt;#&lt;/a&gt; 基本思路和证明&lt;/h4&gt;
&lt;p&gt;每次根据两位决定直接移位 / 加 / 减（共四种情况）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;00、11—— 直接移位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10&lt;/strong&gt; —— 减&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;01&lt;/strong&gt; —— 加&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;黑书证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑书证明&#34;&gt;#&lt;/a&gt; 黑书证明&lt;/h4&gt;
&lt;p&gt;用 **2 &lt;sup&gt;n&lt;/sup&gt; + 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + 2 &lt;sup&gt;n-k&lt;/sup&gt; = 2 &lt;sup&gt;n+1&lt;/sup&gt; - 2 &lt;sup&gt;n-k&lt;/sup&gt;** 可以表示正乘数和负乘数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009234843548.png&#34; alt=&#34;image-20221009234843548&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009235208579.png&#34; alt=&#34;image-20221009235208579&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ppt证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppt证明&#34;&gt;#&lt;/a&gt; PPT 证明&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110337646.png&#34; alt=&#34;image-20221012110337646&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为什么可以这样用布斯算法计算？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6D18DEB3A3D802AB3B7AE9DB900A475C.png&#34; alt=&#34;img&#34; /&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110345029.png&#34; alt=&#34;image-20221012110345029&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;易错点算数移位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#易错点算数移位&#34;&gt;#&lt;/a&gt; 易错点：算数移位&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110426386.png&#34; alt=&#34;image-20221012110426386&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110429745.png&#34; alt=&#34;image-20221012110429745&#34; /&gt;&lt;/p&gt;
&lt;p&gt;错误原因：补位负数补 1，不论是何种情况，右移都使得 A 的最左位，即 A&lt;sub&gt;n-1&lt;/sub&gt; 不仅移入 A&lt;sub&gt;n-2&lt;/sub&gt; 中，而且还保留在 A&lt;sub&gt;n-1&lt;/sub&gt; 中。这是为了保持 A 和 Q 中数的符号，因为它&lt;strong&gt;保留了符号位&lt;/strong&gt;，所以被称为&lt;strong&gt;算数移位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上，根据黑书，应该还有一位 Q&lt;sub&gt;-1&lt;/sub&gt; 寄存器，放在 Q 最低有效位的右边，负责保存丢失的那位。&lt;/p&gt;
&lt;h3 id=&#34;乘法溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法溢出&#34;&gt;#&lt;/a&gt; 乘法溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110434583.png&#34; alt=&#34;image-20221012110434583&#34; /&gt;&lt;/p&gt;
&lt;p&gt;带符号整数：因为乘法的补位是根据当前最高位计算的，如果有变化，则说明有溢出&lt;/p&gt;
&lt;p&gt;无符号整数：无符号整数应该没有 1 的出现&lt;/p&gt;
&lt;h2 id=&#34;除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法&#34;&gt;#&lt;/a&gt; 除法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100038320.png&#34; alt=&#34;image-20221013100038320&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不同的高级算法对于 1/0 0/0 的计算结果处理是不同的&lt;/p&gt;
&lt;p&gt;如在 js 中，1/0 为正无穷；c 中会报错&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110438424.png&#34; alt=&#34;image-20221012110438424&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在十进制除法中，需要用到乘法；在二进制中则不需要。&lt;/p&gt;
&lt;p&gt;除数和被除数符号不一样时，不同的编程语言也会得到不一样的答案。&lt;/p&gt;
&lt;p&gt;注意补齐被除数的符号位，从&lt;strong&gt;次高位&lt;/strong&gt;开始计算。&lt;/p&gt;
&lt;h3 id=&#34;除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法器&#34;&gt;#&lt;/a&gt; 除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110445518.png&#34; alt=&#34;image-20221012110445518&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对应于手工进行除法运算，&lt;/p&gt;
&lt;p&gt;因为需要补全被除数的位数，所以需要 2n 寄存器；&lt;/p&gt;
&lt;p&gt;因为除数相对于被除数的次高位开始移动，所以需要 2n 位支持右移的寄存器；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110451162.png&#34; alt=&#34;image-20221012110451162&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110454561.png&#34; alt=&#34;image-20221012110454561&#34; /&gt;&lt;/p&gt;
&lt;p&gt;除法流程图 —— “是否为第&lt;strong&gt; N+1&lt;/strong&gt; 次循环”&lt;/p&gt;
&lt;p&gt;和乘法不同 ——&lt;strong&gt;N&lt;/strong&gt; 次循环&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何做优化？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见的思路 —— 并行操作 / 硬件节省&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不能够做并行操作&lt;/p&gt;
&lt;p&gt;可以做一些硬件的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;优化的除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优化的除法器&#34;&gt;#&lt;/a&gt; 优化的除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110458490.png&#34; alt=&#34;image-20221012110458490&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;异号的除法如何处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异号的除法如何处理&#34;&gt;#&lt;/a&gt; 异号的除法如何处理？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110504455.png&#34; alt=&#34;image-20221012110504455&#34; /&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110514117.png&#34; alt=&#34;image-20221012110514117&#34; /&gt;&lt;/p&gt;
&lt;p&gt;结果都是&lt;strong&gt;和余数进行比较&lt;/strong&gt;，操作之后，如果相对于余数的符号改变，则不够；如果相对于余数的符号不变，则够。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;可以对照上下（36、37）两张图理解异号的除法，&lt;/p&gt;
&lt;p&gt;被除数为 11111001，它的值为 - 7&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1111 + 0011 为 10010 符号改变&lt;/li&gt;
&lt;li&gt;1110 + 0011 为 10001 符号改变&lt;/li&gt;
&lt;li&gt;1100 + 0011 为 1111 符号不变，且绝对值减小，因此可以加，且商上 1&lt;/li&gt;
&lt;li&gt;1111 + 0011 符号改变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010003001858.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考黑书的话，&lt;/p&gt;
&lt;p&gt;余数的符号 = 被除数&lt;/p&gt;
&lt;p&gt;商的符号 = 被除数 * 除数&lt;/p&gt;
&lt;p&gt;因此，此题中，商和余数都需要取负数，所以商要取补码&lt;/p&gt;
&lt;h3 id=&#34;补码除法运算过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码除法运算过程&#34;&gt;#&lt;/a&gt; 补码除法运算过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110521683.png&#34; alt=&#34;image-20221012110521683&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110524618.png&#34; alt=&#34;image-20221012110524618&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;不恢复余数除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不恢复余数除法&#34;&gt;#&lt;/a&gt; 不恢复余数除法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110534163.png&#34; alt=&#34;image-20221012110534163&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以参考之前的恢复余数的操作理解&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110539289.png&#34; alt=&#34;image-20221012110539289&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如何理解大致思路：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4C93EBA825F2B3B083A9B5CC5D1E567D.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由下面的通式表示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ri+1=2ri+(1-2Qi)Y&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;式中 Qi 为第 i 次所得的商，若部分余数为正，则 Qi=1，部分余数左移一位，下一次继续减除数；若部分余数为负，则 Qi=0，部分余数左移一位，下一次加除数。由于加减运算交替地进行，故称为原码加减交替法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;补码不恢复余数除法流程图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码不恢复余数除法流程图&#34;&gt;#&lt;/a&gt; 补码不恢复余数除法流程图&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221006172646381.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110545429.png&#34; alt=&#34;image-20221012110545429&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同号说明 “够大”，异号说明 “不够大”&lt;/p&gt;
&lt;p&gt;注意不恢复余数补码除法分为两个流程，首先需要判断符号然后初始化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110550193.png&#34; alt=&#34;image-20221012110550193&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算流程&lt;/strong&gt;理解：&lt;/p&gt;
&lt;p&gt;流程一：因为余数和除数异号，所以采用加的方式。加完后发现同号（实际上是由异号变为同号），补 1，实际上是取反的操作。&lt;/p&gt;
&lt;p&gt;流程二：根据 X 和 Y 是否同号，继续操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于商的修正&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Z 左移一位，根据是否够加，上 1 或 0。&lt;/p&gt;
&lt;p&gt;如果被除数和除数异号，说明商是负数。在求每一位的时候，已经取了反，因此再加 1 即可。这样的操作，比最后再计算商的总体的补码简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于余数的修正&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;余数和被除数的符号相同。&lt;/p&gt;
&lt;p&gt;如果符号不同，则说明余数多加 / 多减了一个除数。如果被除数和除数的符号相同，说明余数和除数符号不相同，加上除数进行修正；如果被除数和除数符号不同，说明余数和除数符号相同，减去除数进行修正。&lt;/p&gt;
&lt;p&gt;在最后多加了一个 Y&lt;/p&gt;
&lt;p&gt;符号位，不恢复余数补码除法运算和除数比，恢复的和被除数相比&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110557310.png&#34; alt=&#34;image-20221012110557310&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为除法器效率不高，所以用右移运算实现简化&lt;/p&gt;
&lt;p&gt;能整除的时候，被移除的全为 0；&lt;/p&gt;
&lt;p&gt;不能整除的时候，移除的数存在非 0，&lt;/p&gt;
&lt;p&gt;-14/4 负数补位 1&lt;/p&gt;
&lt;h3 id=&#34;阵列除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阵列除法器&#34;&gt;#&lt;/a&gt; 阵列除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110601896.png&#34; alt=&#34;image-20221012110601896&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际生活中并不是斜着排列的&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110605353.png&#34; alt=&#34;image-20221012110605353&#34; /&gt;&lt;/p&gt;
&lt;p&gt;全加器是两个半加器组合起来的，半加器不考虑进位。&lt;/p&gt;
&lt;p&gt;全加器算了两次 X+Y：第一次 X+Y 得到 Z，第二次 Z+Cin 得到结果。&lt;/p&gt;
&lt;p&gt;注意各整数运算的优化过程&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-10-04T13:32:43.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/</id>
        <title>Lecture03-数据的机器级表表示</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/"/>
        <content type="html">&lt;p&gt;仅记录有用部分，课件详细内容在 ppt 上已经很清楚了。&lt;/p&gt;
&lt;p&gt;需要加强的地方：二进制转十进制，十进制转二进制，补码的模不懂，静默式和通知式，非规格化数不懂、精度保护中的舍入看不懂，大端小端&lt;/p&gt;
&lt;p&gt;好难…… 呜呜看不懂&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一次作业讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次作业讲解&#34;&gt;#&lt;/a&gt; 第一次作业讲解&lt;/h2&gt;
&lt;p&gt;作业 1：. 为什么速率的总和没有意义？&lt;/p&gt;
&lt;p&gt;作业 2：指令集结构不同的计算机，只比较 MIPS 是没有意义的，例如此题当中，A 的 MIPS 大，但是运行时间较长。&lt;/p&gt;
&lt;p&gt;作业 3：采用不同指令集、&lt;strong&gt;流水线&lt;/strong&gt;和并行&lt;/p&gt;
&lt;p&gt;作业 4：MIPS 求和有意义吗？&lt;/p&gt;
&lt;p&gt;组织不可见，结构可见&lt;/p&gt;
&lt;h1 id=&#34;lecture0304-数据的机器级表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture0304-数据的机器级表示&#34;&gt;#&lt;/a&gt; lecture03/04 - 数据的机器级表示&lt;/h1&gt;
&lt;p&gt;参考紫书第 2 章 / 黑书第 9 章 计算机算数&lt;/p&gt;
&lt;h2 id=&#34;课堂ppt结合黑书版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课堂ppt结合黑书版本&#34;&gt;#&lt;/a&gt; 课堂 /ppt—— 结合黑书版本&lt;/h2&gt;
&lt;h3 id=&#34;信息的二进制编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息的二进制编码&#34;&gt;#&lt;/a&gt; 信息的二进制编码&lt;/h3&gt;
&lt;h3 id=&#34;整数的二进制表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的二进制表示&#34;&gt;#&lt;/a&gt; 整数的二进制表示&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数&#34;&gt;#&lt;/a&gt; 无符号整数&lt;/h4&gt;
&lt;h4 id=&#34;有符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数&#34;&gt;#&lt;/a&gt; 有符号整数&lt;/h4&gt;
&lt;h5 id=&#34;原码-符号幅值表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码-符号幅值表示法&#34;&gt;#&lt;/a&gt; 原码 符号幅值表示法&lt;/h5&gt;
&lt;p&gt;符号位不同，数值位相同&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位左移，空余的填补 0&lt;/p&gt;
&lt;p&gt;浮点数的尾数用原码定点小数表示&lt;/p&gt;
&lt;p&gt;零的表示不唯一，不利于程序员编程&lt;/p&gt;
&lt;h5 id=&#34;反码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反码&#34;&gt;#&lt;/a&gt; 反码&lt;/h5&gt;
&lt;p&gt;符号位和数值位均取反&lt;/p&gt;
&lt;h5 id=&#34;移码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移码&#34;&gt;#&lt;/a&gt; 移码&lt;/h5&gt;
&lt;p&gt;是一种有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2lnbmVkX251bWJlcl9yZXByZXNlbnRhdGlvbg==&#34;&gt;符号数表示&lt;/span&gt;的方法，其中有符号数 n 是由对应于&lt;strong&gt;无符号数 n + K&lt;/strong&gt; 的位模式表示，K 是&lt;em&gt;偏置值&lt;/em&gt;或&lt;em&gt;偏移量&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;bias 通常取 2 的 n-1 次方或者 2 的 n-1 次方减 1&lt;br /&gt;
 当 bias 为 2 的 n-1 次方时，移码和补码仅第一位不同，0 的表示唯一&lt;br /&gt;
&lt;strong&gt;浮点数的阶用移码表示&lt;/strong&gt;：当两个数都是负数的时候，移码更容易比较&lt;/p&gt;
&lt;h5 id=&#34;补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码&#34;&gt;#&lt;/a&gt; 补码&lt;/h5&gt;
&lt;p&gt;计算机处理中，&lt;strong&gt;通常使用补码&lt;/strong&gt;&lt;br /&gt;
负数的数值部分 &lt;strong&gt;各位取反，末尾加 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位移到最左位，其余空出位用符号位的值替代&lt;/p&gt;
&lt;p&gt;加和减的统一：&lt;br /&gt;
一个负数的补码等于模减该负数的绝对值&lt;br /&gt;
对于一个确定的模，某数减去小于模的另一数，总可以加上另一数负数的补码来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求真值的补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全 0：0&lt;/p&gt;
&lt;p&gt;全 1：-1&lt;/p&gt;
&lt;p&gt;10000...：- 2 &lt;sup&gt;n-1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求补码的真值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**X = - x&lt;sub&gt;n-1&lt;/sub&gt; * 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + x &lt;sub&gt;2&lt;/sub&gt; * 2 &lt;sup&gt;1&lt;/sup&gt;+ x &lt;sub&gt;1&lt;/sub&gt;*2&lt;sup&gt;0&lt;/sup&gt; **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若对负数的补码再取负，得到原来那个数&lt;/strong&gt;【其中的特例是，-2&lt;sup&gt;n-1&lt;/sup&gt; 在取负之后仍然为本身，因为范围内并没有 2&lt;sup&gt;n-1&lt;/sup&gt; 与之相对应】&lt;/p&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数&#34;&gt;#&lt;/a&gt; 浮点数&lt;/h3&gt;
&lt;p&gt;单精度 32 位（1+8+23）&lt;strong&gt;仍然表示 2&lt;sup&gt;32&lt;/sup&gt; 个数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;双精度 64 位（1+11+52）&lt;/p&gt;
&lt;p&gt;基底为 2（也存在基底为 16 的情况）—— 基数越大，范围越大，精度越低&lt;/p&gt;
&lt;h4 id=&#34;表示方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示方法&#34;&gt;#&lt;/a&gt; 表示方法&lt;/h4&gt;
&lt;p&gt;S E M&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;符号位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 位移码表示阶码（指数） —— 范围为 - 126~127，全 0 和全 1 为特殊值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23 位原码表示 24 位尾数，最高位总为 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;表示的数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示的数&#34;&gt;#&lt;/a&gt; 表示的数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;规格化数&lt;/strong&gt;，关注上溢出和下溢出，&lt;/p&gt;
&lt;p&gt;下溢出部分用&lt;strong&gt;非格式化数&lt;/strong&gt;表示，它的间距是等距的&lt;/p&gt;
&lt;p&gt;越靠近原点，数越密集；越远离原点，数越稀疏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静默式和通知式非数&lt;/strong&gt; —— 静默式表示未定义的算数结果，通知式非数表示未初始化的值。&lt;/p&gt;
&lt;h2 id=&#34;计算机组成与体系结构性能设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与体系结构性能设计&#34;&gt;#&lt;/a&gt; 计算机组成与体系结构：性能设计&lt;/h2&gt;
&lt;h3 id=&#34;整数的加法与减法补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的加法与减法补码&#34;&gt;#&lt;/a&gt; 整数的加法与减法（补码）&lt;/h3&gt;
&lt;p&gt;上溢规则&lt;/p&gt;
&lt;p&gt;减法规则 —— 减法，即加上减数的 2 的补&lt;/p&gt;
&lt;p&gt;在实际的操作中，有 OF 溢出位记录是否溢出&lt;/p&gt;
&lt;h3 id=&#34;整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的乘法&#34;&gt;#&lt;/a&gt; 整数的乘法&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数的乘法&#34;&gt;#&lt;/a&gt; 无符号整数的乘法&lt;/h4&gt;
&lt;p&gt;两个 n 为二进制整数的乘法可产生最大长度为 2n 位的积&lt;/p&gt;
&lt;p&gt;乘&lt;/p&gt;
&lt;p&gt;移位&lt;/p&gt;
&lt;p&gt;计数 - 1&lt;/p&gt;
&lt;h4 id=&#34;有符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数的乘法&#34;&gt;#&lt;/a&gt; 有符号整数的乘法&lt;/h4&gt;
&lt;p&gt;只要有一个是负数，原来的方法就不奏效&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把被乘数和乘数都转变成正数再相乘，当两者初始的符号不相同时，结果取 2 的补&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布斯（Booth）算法&lt;/p&gt;
&lt;p&gt;分为 10 01 【00 11】三种情况讨论&lt;/p&gt;
&lt;p&gt;运用公式，   &lt;strong&gt;2 &lt;sup&gt;n&lt;/sup&gt; + 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + 2 &lt;sup&gt;n-k&lt;/sup&gt; = 2 &lt;sup&gt;n+1&lt;/sup&gt; - 2 &lt;sup&gt;n-k&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很巧妙，优雅，实在是太优雅了！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;整数的除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的除法&#34;&gt;#&lt;/a&gt; 整数的除法&lt;/h3&gt;
&lt;p&gt;搞来搞去，也很优雅&lt;/p&gt;
&lt;h3 id=&#34;浮点数加法和减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数加法和减法&#34;&gt;#&lt;/a&gt; 浮点数加法和减法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查 0&lt;/li&gt;
&lt;li&gt;对齐有效值&lt;/li&gt;
&lt;li&gt;加法&lt;/li&gt;
&lt;li&gt;规格化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意时时检查是否有效值为 0，以及是否溢出&lt;/p&gt;
&lt;p&gt;若两个数的阶值差别非常大，则较小的数丢失&lt;/p&gt;
&lt;h3 id=&#34;浮点数乘法和除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数乘法和除法&#34;&gt;#&lt;/a&gt; 浮点数乘法和除法&lt;/h3&gt;
&lt;p&gt;由于阶值是移码的形式，相乘的时候，两个阶值的和要减去一个偏移量，相除的时候，两个阶值的差要加上一个偏移量&lt;/p&gt;
&lt;h4 id=&#34;精度考虑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度考虑&#34;&gt;#&lt;/a&gt; 精度考虑&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保护位&lt;/p&gt;
&lt;p&gt;对齐的时候会导致丢失，在末尾增加保护位，可以扩展有效值的右端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舍入（不懂）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机组成与系统结构习题解答和教学指导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与系统结构习题解答和教学指导&#34;&gt;#&lt;/a&gt; 计算机组成与系统结构习题解答和教学指导&lt;/h2&gt;
&lt;h3 id=&#34;数据的表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的表示&#34;&gt;#&lt;/a&gt; 数据的表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数值数据 —— 二进制、十进制（BCD binary coded decimal）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非数值数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的宽度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的宽度&#34;&gt;#&lt;/a&gt; 数据的宽度&lt;/h3&gt;
&lt;p&gt;数据容量和宽度&lt;/p&gt;
&lt;p&gt;比特&lt;/p&gt;
&lt;p&gt;字节&lt;/p&gt;
&lt;p&gt;字（2 个 / 4 个 / 8 个 / 16 个字节）&lt;/p&gt;
&lt;h3 id=&#34;数据的排列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的排列&#34;&gt;#&lt;/a&gt; 数据的排列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大端排列 —— 最低有效字节 LSB 存放在大地址单元中，MSB 所在地址为数据的地址&lt;/li&gt;
&lt;li&gt;小端排列 —— 最低有效字节 LSB 存放在小地址单元中，LSB 所在地址为数据的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据校验方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据校验方式&#34;&gt;#&lt;/a&gt; 数据校验方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;奇偶校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;海明校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环冗余码校验&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-09-22T23:41:11.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
        <title>Lecture02-计算机体系结构的问题及解决方案</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
        <content type="html">&lt;p&gt;讲述了六个计算机体系结构的问题以及解决方案&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼最重要的思想存储程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼最重要的思想存储程序&#34;&gt;#&lt;/a&gt; 冯诺依曼最重要的思想 —— 存储程序&lt;/h2&gt;
&lt;p&gt;任何要计算机完成的工作都要先被编写成程序，然后将&lt;strong&gt;程序和原始数据送入主存&lt;/strong&gt;并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。&lt;/p&gt;
&lt;p&gt;区分中央处理单元（CPU）和处理器。&lt;/p&gt;
&lt;p&gt;CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。&lt;/p&gt;
&lt;p&gt;目前，苹果 M2 以及可以集成 200 亿的晶体管。&lt;/p&gt;
&lt;h2 id=&#34;问题与解决思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题与解决思路&#34;&gt;#&lt;/a&gt; 问题与解决思路&lt;/h2&gt;
&lt;h3 id=&#34;可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;#&lt;/a&gt; 可以通过无限增加 CPU 的大小来增加性能嘛？&lt;/h3&gt;
&lt;p&gt;不可以，面积越大，意味着&lt;strong&gt;互联延迟&lt;/strong&gt;越大。一个时钟周期需要大于最长互联延迟。存在物理极限。&lt;/p&gt;
&lt;h3 id=&#34;问题1cpu的频率不能无限提高&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题1cpu的频率不能无限提高&#34;&gt;#&lt;/a&gt; 问题 1：CPU 的频率不能无限提高&lt;/h3&gt;
&lt;p&gt;MOS 管开关、脉冲通过门电路需要时间&lt;/p&gt;
&lt;p&gt;为了信号同步，每个脉冲信号需要持续一定的时间&lt;/p&gt;
&lt;p&gt;面积大，连线延迟大；&lt;/p&gt;
&lt;p&gt;频率越高，开关损耗高，CPU 耗电和散热提高；&lt;/p&gt;
&lt;h3 id=&#34;解决1改变cpu芯片结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决1改变cpu芯片结构&#34;&gt;#&lt;/a&gt; 解决 1：改变 CPU 芯片结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域定制，如面向人工智能的芯片&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题2内存墙的存在-memory-wall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题2内存墙的存在-memory-wall&#34;&gt;#&lt;/a&gt; 问题 2：内存墙的存在 memory wall&lt;/h3&gt;
&lt;p&gt;主存和 CPU 之间传输数据的速度跟不上 CPU 的速度&lt;/p&gt;
&lt;h3 id=&#34;解决2采用高速缓存cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决2采用高速缓存cache&#34;&gt;#&lt;/a&gt; 解决 2：采用高速缓存（cache）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;添加一级或多级缓存以减少存储器访问频率并提高数据传输速率&lt;/li&gt;
&lt;li&gt;增大总线的数据宽度，来增加每次所能取出的位数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题3cpu等待io传输数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题3cpu等待io传输数据&#34;&gt;#&lt;/a&gt; 问题 3：CPU 等待 I/O 传输数据&lt;/h3&gt;
&lt;p&gt;CPU 在等待 I/O 设备时保持空闲&lt;/p&gt;
&lt;h3 id=&#34;解决3中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决3中断&#34;&gt;#&lt;/a&gt; 解决 3：中断&lt;/h3&gt;
&lt;p&gt;其他模块（例如 IO）可以中断正常处理顺序的机制&lt;/p&gt;
&lt;p&gt;中断周期加入指令周期中&lt;/p&gt;
&lt;p&gt;多重中断：顺序中断处理、嵌套中断处理&lt;/p&gt;
&lt;h3 id=&#34;问题4兼顾存储容量-速度和成本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题4兼顾存储容量-速度和成本&#34;&gt;#&lt;/a&gt; 问题 4：兼顾存储容量、速度和成本&lt;/h3&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量：越大越好&lt;/li&gt;
&lt;li&gt;速度：跟上处理器&lt;/li&gt;
&lt;li&gt;成本：相较于其他组件合理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束之间的关系&lt;/p&gt;
&lt;p&gt;​	更短的访问时间，更高的每比特成本&lt;/p&gt;
&lt;h3 id=&#34;解决4层次式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决4层次式存储结构&#34;&gt;#&lt;/a&gt; 解决 4：层次式存储结构&lt;/h3&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大容量数据存储&lt;/li&gt;
&lt;li&gt;高速性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用存储器层次结构而不是依赖单个存储器组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;寄存器 ——cache—— 主存 —— 磁盘 —— 磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储量越来越大，速度越来越慢，离 CPU 越来越远&lt;/p&gt;
&lt;h3 id=&#34;问题5io设备传输速率差异大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题5io设备传输速率差异大&#34;&gt;#&lt;/a&gt; 问题 5：I/O 设备传输速率差异大&lt;/h3&gt;
&lt;p&gt;I/O 性能跟不上 CPU 速度的提升&lt;/p&gt;
&lt;h3 id=&#34;解决5采用缓冲区和改进io操作技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决5采用缓冲区和改进io操作技术&#34;&gt;#&lt;/a&gt; 解决 5：采用缓冲区和改进 I/O 操作技术&lt;/h3&gt;
&lt;p&gt;设立缓存区&lt;/p&gt;
&lt;h3 id=&#34;问题6计算机部件互连复杂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题6计算机部件互连复杂&#34;&gt;#&lt;/a&gt; 问题 6：计算机部件互连复杂&lt;/h3&gt;
&lt;h3 id=&#34;解决6采用总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决6采用总线&#34;&gt;#&lt;/a&gt; 解决 6：采用总线&lt;/h3&gt;
&lt;h4 id=&#34;总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线&#34;&gt;#&lt;/a&gt; 总线&lt;/h4&gt;
&lt;p&gt;目前，对通用计算机而言，各种点对点互连结构逐渐取代总线互连的方式。但是总线结构依然普遍用于嵌入式系统。&lt;/p&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;所有部件都通过总线传递数据&lt;/p&gt;
&lt;h5 id=&#34;分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时&#34;&gt;#&lt;/a&gt; 分时&lt;/h5&gt;
&lt;p&gt;只有一个部件能够传输数据&lt;/p&gt;
&lt;h5 id=&#34;功能组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能组&#34;&gt;#&lt;/a&gt; 功能组&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;控制线&lt;/strong&gt; —— 控制对数据线路与地址线路的访问和使用，控制信号传递&lt;strong&gt;命令和定时信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址线&lt;/strong&gt; —— 指定数据总线上数据的源或目的，地址总线的宽度决定了系统可能的&lt;strong&gt;最大内存容量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据线&lt;/strong&gt; —— 为系统模块之间的数据传输提供路径，一般而言，线路的条数决定了&lt;strong&gt;一次能传输的位数&lt;/strong&gt;，数据总线的宽度是决定系统整体性能的一个关键因素&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-09-15T10:01:24.000Z</updated>
    </entry>
    <entry>
        <id>https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
        <title>Lecture01-计算机系统概述</title>
        <link rel="alternate" href="https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;第一讲，以及对于书籍的第一章重点知识点整理&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;课程随笔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程随笔&#34;&gt;#&lt;/a&gt; 课程随笔&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用 电子 数字 计算机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用&lt;/p&gt;
&lt;p&gt;电子&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;h3 id=&#34;组织与结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组织与结构&#34;&gt;#&lt;/a&gt; 组织与结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;结构 (对于程序员是可见的)
&lt;ul&gt;
&lt;li&gt;一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别&lt;/li&gt;
&lt;li&gt;包括：指令集、各类数据类型的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织 (对于程序员是不可见的)
&lt;ul&gt;
&lt;li&gt;一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。&lt;/li&gt;
&lt;li&gt;包括：控制信号、存储技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机发展历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历史&#34;&gt;#&lt;/a&gt; 计算机发展历史&lt;/h2&gt;
&lt;p&gt;真空管&lt;/p&gt;
&lt;p&gt;晶体管&lt;/p&gt;
&lt;p&gt;集成电路（scale 越来越大，SSI-&amp;gt;MSI-&amp;gt;LSI-&amp;gt;VLSI-&amp;gt;ULSI）&lt;/p&gt;
&lt;p&gt;摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼结构的实现与演变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼结构的实现与演变&#34;&gt;#&lt;/a&gt; 冯诺依曼结构的实现与演变&lt;/h2&gt;
&lt;h3 id=&#34;cpu-北桥-南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-北桥-南桥&#34;&gt;#&lt;/a&gt; CPU + 北桥 + 南桥&lt;/h3&gt;
&lt;p&gt;芯片近北桥，远离南桥。&lt;/p&gt;
&lt;h4 id=&#34;南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#南桥&#34;&gt;#&lt;/a&gt; 南桥&lt;/h4&gt;
&lt;p&gt;南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理&lt;strong&gt;低速信号&lt;/strong&gt;，通过北桥与中央处理器联系。&lt;br /&gt;
南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。&lt;br /&gt;
PCI、SATA、IDE、USB。&lt;/p&gt;
&lt;h4 id=&#34;北桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#北桥&#34;&gt;#&lt;/a&gt; 北桥&lt;/h4&gt;
&lt;p&gt;北桥设计用来处理&lt;strong&gt;高速信号&lt;/strong&gt;，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。&lt;br /&gt;
芯片组（chipset）的名称就是以北桥芯片的名称来命名的。&lt;br /&gt;
北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。&lt;br /&gt;
PCIE/AGP、Memory、CPU。&lt;/p&gt;
&lt;h3 id=&#34;cpu-pch集成显卡-显示部件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-pch集成显卡-显示部件&#34;&gt;#&lt;/a&gt; CPU + PCH（集成显卡 - 显示部件）&lt;/h3&gt;
&lt;p&gt;PCH 全称为 Platform Controller Hub，是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==&#34;&gt; intel 公司&lt;/span&gt;的集成南桥。&lt;/p&gt;
&lt;p&gt;北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.&lt;/p&gt;
&lt;h2 id=&#34;计算机性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机性能&#34;&gt;#&lt;/a&gt; 计算机性能&lt;/h2&gt;
&lt;h3 id=&#34;cpu性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
&lt;p&gt;时钟频率 / 时钟周期&lt;/p&gt;
&lt;p&gt;CPI&lt;/p&gt;
&lt;p&gt;MIPS（每秒百万条指令）&lt;/p&gt;
&lt;p&gt;MRLOPS（每秒百万条浮点操作）&lt;/p&gt;
&lt;p&gt;基准程序&lt;/p&gt;
&lt;h3 id=&#34;性能设计的基本原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能设计的基本原则&#34;&gt;#&lt;/a&gt; 性能设计的基本原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大概率事件优先原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿姆代尔定律 Amdahl 定律&lt;/p&gt;
&lt;p&gt;技术或设计的某一部分的加速不会导致性能产生相应的改进。性能的提高是有限度的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Little 定律&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对应书籍整理-计算机系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应书籍整理-计算机系统概述&#34;&gt;#&lt;/a&gt; 对应书籍整理 - 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机结构&#34;&gt;#&lt;/a&gt; 计算机结构&lt;/h2&gt;
&lt;h3 id=&#34;硬件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件&#34;&gt;#&lt;/a&gt; 硬件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器 —— 各种算数逻辑运算&lt;/li&gt;
&lt;li&gt;控制器 —— 对指令译码并送出操作控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器 —— 存放指令和数据&lt;/p&gt;
&lt;p&gt;包括 ROM 芯片和 RAM 芯片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;li&gt;高速缓存（cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外存储器&lt;/p&gt;
&lt;p&gt;磁盘、磁带存储器、光盘存储器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 设备 —— 计算机和用户之间的信息交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件&#34;&gt;#&lt;/a&gt; 软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统软件 —— 介于计算机硬件和应用软件之间的各种软件
&lt;ul&gt;
&lt;li&gt;操作系统软件&lt;/li&gt;
&lt;li&gt;语言处理系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;各类实用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件
&lt;ul&gt;
&lt;li&gt;办公自动化软件&lt;/li&gt;
&lt;li&gt;互联网应用软件&lt;/li&gt;
&lt;li&gt;多媒体处理软件&lt;/li&gt;
&lt;li&gt;股票分析软件&lt;/li&gt;
&lt;li&gt;游戏软件&lt;/li&gt;
&lt;li&gt;管理信息系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;程序开发和执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序开发和执行过程&#34;&gt;#&lt;/a&gt; 程序开发和执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;高级语言、低级语言（汇编语言）-&amp;gt; 机器语言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;对应计算机用户&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;最终用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级语言虚拟机&lt;/td&gt;
&lt;td&gt;高级语言程序员或者应用程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汇编语言虚拟机&lt;/td&gt;
&lt;td&gt;汇编语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统虚拟机&lt;/td&gt;
&lt;td&gt;系统管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器语言虚拟机&lt;/td&gt;
&lt;td&gt;机器语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源程序&lt;/strong&gt;通过&lt;strong&gt;编译程序和汇编程序&lt;/strong&gt;得到&lt;strong&gt;目标程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu性能-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能-2&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
        <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
        <updated>2022-09-08T12:30:32.000Z</updated>
    </entry>
</feed>
