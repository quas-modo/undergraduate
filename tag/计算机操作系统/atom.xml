<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://quas-modo.github.io</id>
    <title>Carpe diem</title>
    <subtitle>pluck the day</subtitle>
    <icon>https://quas-modo.github.io/images/favicon.ico</icon>
    <link href="https://quas-modo.github.io" />
    <author>
      <name>quas-modo</name>
    </author>
    <updated>2023-06-21T06:43:47.000Z</updated>
    <entry>
        <id>https://quas-modo.github.io/2023/06/21/NJU/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
        <title>计算机操作系统期末复习</title>
        <link rel="alternate" href="https://quas-modo.github.io/2023/06/21/NJU/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;整理了一些 os 的选择题知识点、大题的重要知识点，还有一些简答的梳理。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;单元1-操作系统概论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元1-操作系统概论&#34;&gt;#&lt;/a&gt; 单元 1 操作系统概论&lt;/h2&gt;
&lt;h3 id=&#34;操作系统分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统分类&#34;&gt;#&lt;/a&gt; 操作系统分类&lt;/h3&gt;
&lt;h4 id=&#34;批处理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批处理系统&#34;&gt;#&lt;/a&gt; 批处理系统&lt;/h4&gt;
&lt;p&gt;** 多道：** 在内存中同时存放多个作业，一个时刻只有一个作业运行，这些作业共享 CPU 和外部设备等资源。&lt;/p&gt;
&lt;p&gt;** 成批：** 用户和作业之间没有交互性。用户自己不能干预自己的作业的运行，发现作业错误不能及时改正。&lt;/p&gt;
&lt;h4 id=&#34;分时操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时操作系统&#34;&gt;#&lt;/a&gt; 分时操作系统&lt;/h4&gt;
&lt;p&gt;它能很好地将一台计算机提供给多个用户同时使用，提高计算机的利用率。分时系统是指，&lt;strong&gt;在一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户通过自己的终端，以交互方式使用计算机&lt;/strong&gt;，共享主机中的资源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同时性：计算机系统能被多个用户同时使用；&lt;/li&gt;
&lt;li&gt;独立性：用户和用户之间都是独立操作系统的，在同时操作时并不会发生冲突，破坏，混淆等现象；&lt;/li&gt;
&lt;li&gt;及时性：系统能以最快的速度将结果显示给用户；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互作用性&lt;/strong&gt;：用户能和电脑进行人机对话。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;实时操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实时操作系统&#34;&gt;#&lt;/a&gt; 实时操作系统&lt;/h4&gt;
&lt;p&gt;所谓 “实时”，是表示 “及时”，而&lt;strong&gt;实时系统是指系统能及时响应外部事件的请求&lt;/strong&gt;，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致的运行。其应用需求主要在实时控制和实时信息处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实时操作系统必须在规定时间内处理来自外部的事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;高精度计时系统：计时精度是影响实时性的一个重要因素。在实时应用系统中，经常需要精确确定实时地操作某个设备或执行某个任务，或精确的计算一个时间函数。这些不仅依赖于一些硬件提供的时钟精度，也依赖于实时操作系统实现的高精度计时功能。&lt;br /&gt;
多级中断机制：一个实时应用系统通常需要处理多种外部信息或事件，但处理的紧迫程度有轻重缓急之分。有的必须立即作出反应，有的则可以延后处理。因此，需要建立多级中断嵌套处理机制，以确保对紧迫程度较高的实时事件进行及时响应和处理。&lt;br /&gt;
实时调度机制：实时操作系统不仅要及时响应实时事件中断，同时也要及时调度运行实时任务。但是，处理机调度并不能随心所欲的进行，因为涉及到两个进程之间的切换，只能在确保 “安全切换” 的时间点上进行，实时调度机制包括两个方面，一是在调度策略和算法上保证优先调度实时任务；二是建立更多 “安全切换” 时间点，保证及时调度实时任务。&lt;/p&gt;
&lt;h4 id=&#34;多用户操作系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多用户操作系统&#34;&gt;#&lt;/a&gt; 多用户操作系统&lt;/h4&gt;
&lt;h4 id=&#34;分布式系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式系统&#34;&gt;#&lt;/a&gt; 分布式系统&lt;/h4&gt;
&lt;p&gt;分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。&lt;/p&gt;
&lt;h3 id=&#34;特权指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特权指令&#34;&gt;#&lt;/a&gt; 特权指令&lt;/h3&gt;
&lt;p&gt;能引起损害的机器指令作为特权指令&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许和禁止中断，控制中断禁止屏蔽位&lt;/li&gt;
&lt;li&gt;在进程间切换处理&lt;/li&gt;
&lt;li&gt;存取用于主存保护的寄存器&lt;/li&gt;
&lt;li&gt;执行 I/O 操作&lt;/li&gt;
&lt;li&gt;停止一个中央处理器的工作&lt;/li&gt;
&lt;li&gt;清理内存&lt;/li&gt;
&lt;li&gt;设置时钟&lt;/li&gt;
&lt;li&gt;建立存储键&lt;/li&gt;
&lt;li&gt;加载 PSW&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;操作系统管理的资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统管理的资源&#34;&gt;#&lt;/a&gt; 操作系统管理的资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有硬件资源，如 CPU、存储器、输入输出设备&lt;/li&gt;
&lt;li&gt;软件资源等，如程序和数据等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发性&#34;&gt;#&lt;/a&gt; 并发性&lt;/h3&gt;
&lt;p&gt;共享性、虚拟性、异步性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行是指两个或多个事件可以在&lt;strong&gt;同一个时刻&lt;/strong&gt;发生。&lt;/li&gt;
&lt;li&gt;并发是指两个或多个事件可以在&lt;strong&gt;同一个时间间隔&lt;/strong&gt;发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一时刻即为并行，一定的时间间隔发生即为并发。&lt;/p&gt;
&lt;h3 id=&#34;多道程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多道程序设计&#34;&gt;#&lt;/a&gt; 多道程序设计&lt;/h3&gt;
&lt;p&gt;多道程序设计：&lt;strong&gt;允许多个程序（作业）同时进入一个计算机系统的内存并启动进行交替计算的方法&lt;/strong&gt;，也就是，计算机中可以同时存放多道程序，从宏观上来看它们是并行的，多道程序都同时处于运行过程中，但都未运行结束，但是微观上是串行的，轮流占用 CPU 交替执行，引入多道程序设计技术的根本目的是提高 CPU 的利用率，充分发挥计算机系统部件的并行性。&lt;/p&gt;
&lt;p&gt;多道程序设计的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU 与外部设备充分并行&lt;/li&gt;
&lt;li&gt;外部设备之间充分并行&lt;/li&gt;
&lt;li&gt;发挥 CPU、内存和设备的使用效率&lt;/li&gt;
&lt;li&gt;提高单位时间的算题量 (吞吐率)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;多道程序设计的主要缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;延长了作业的周转时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;spooling技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spooling技术&#34;&gt;#&lt;/a&gt; SPOOLing 技术&lt;/h3&gt;
&lt;p&gt;SPOOLing 技术便可将一台物理 I/O 设备虚拟为多台逻辑 I/O 设备，同样允许多个用户共享一台物理 I/O 设备。&lt;/p&gt;
&lt;h2 id=&#34;单元2-处理器管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元2-处理器管理&#34;&gt;#&lt;/a&gt; 单元 2 处理器管理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目态&lt;/strong&gt;：用户态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管态&lt;/strong&gt;：特权态、系统态、核心态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程与线程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程是资源分配和管理的单位&lt;/li&gt;
&lt;li&gt;线程是处理器调度的基本单位。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;PCB&lt;/strong&gt;：进程控制块&lt;/p&gt;
&lt;h3 id=&#34;进程概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程概念&#34;&gt;#&lt;/a&gt; 进程概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;具有一定独立功能的程序：进程是相对独立的&lt;/li&gt;
&lt;li&gt;关于某个数据集合：对于不同数据集合的操作不是同一个进程。&lt;/li&gt;
&lt;li&gt;一次运行活动：有生命周期&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动态性、共享性、独立性、制约性、并发性&lt;/p&gt;
&lt;h3 id=&#34;进程管理原语0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程管理原语0&#34;&gt;#&lt;/a&gt; 进程管理原语，0&lt;/h3&gt;
&lt;p&gt;进程创建&lt;/p&gt;
&lt;p&gt;进程撤销&lt;/p&gt;
&lt;p&gt;进程阻塞&lt;/p&gt;
&lt;p&gt;进程唤醒&lt;/p&gt;
&lt;p&gt;进程挂起&lt;/p&gt;
&lt;p&gt;进程激活&lt;/p&gt;
&lt;h3 id=&#34;进程转换模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程转换模型&#34;&gt;#&lt;/a&gt; 进程转换模型&lt;/h3&gt;
&lt;p&gt;运行态：进程占用处理器运行&lt;/p&gt;
&lt;p&gt;就绪态：进程具备运行条件等待处理器运行&lt;/p&gt;
&lt;p&gt;等待态：又称阻塞态、睡眠态，进程由于等待资源、输入输出、信号等而不具备运行条件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609103158553.png&#34; alt=&#34;image-20230609103158553&#34; /&gt;&lt;/p&gt;
&lt;p&gt;挂起态：挂起态与等待态有着本质区别，后者占有已申请到的资源处于等待，前者没有任何资源&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609103911702.png&#34; alt=&#34;image-20230609103911702&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程&#34;&gt;#&lt;/a&gt; 线程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/v2-01b5b9ac0ea5c15e050b302e39af5e33_r.jpg&#34; alt=&#34;v2-01b5b9ac0ea5c15e050b302e39af5e33_r&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;用户级线程和内核级线程的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户级线程和内核级线程的区别&#34;&gt;#&lt;/a&gt; 用户级线程和内核级线程的区别&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;ULT 适用于解决逻辑并行性问题&lt;/li&gt;
&lt;li&gt;KLT 适用于解决物理并行性问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jacketing技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jacketing技术&#34;&gt;#&lt;/a&gt; jacketing 技术&lt;/h4&gt;
&lt;p&gt;为了解决一个 ULT 的阻塞，将引起整个进程的阻塞的问题，出现了 jacketing 技术。&lt;/p&gt;
&lt;p&gt;jacketing 技术将阻塞式的系统调用改造成非阻塞式的，当线程陷入系统调用时，检查 jacketing 程序，由 jackting 程序来检查资源使用情况，以决定是否执行进程切换或传递控制权给另一个线程。&lt;/p&gt;
&lt;p&gt;比如说，当线程需要 I/O 资源时，它不直接去调用系统 I/O 例程，而是让线程调用一用户级的 I/O 的 Jacketing 例程，这个 jacket 例程中的代码用来检查并确定 I/O 设备是否忙。如果忙，该线程进入阻塞状态并将控制传送给另一个线程。当这个线程后来又重新获得控制时，jacketing 例程会再次检查 I/O 设备。&lt;/p&gt;
&lt;h4 id=&#34;多线程实现的混合式策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程实现的混合式策略&#34;&gt;#&lt;/a&gt; 多线程实现的混合式策略&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;线程创建完全在用户空间中完成，线程的调度和同步也在应用程序中进行&lt;/li&gt;
&lt;li&gt;一个应用中的多个用户级线程被映射到一些 (小于等于用户级线程数目) 内核级线程上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjAucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20.png&lt;/span&gt;&amp;quot; alt=&amp;quot;img&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjEucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/21.png&lt;/span&gt;&amp;quot; alt=&amp;quot;img&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;单元3-存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元3-存储管理&#34;&gt;#&lt;/a&gt; 单元 3 存储管理&lt;/h2&gt;
&lt;p&gt;存储分配：位进程分配内存空间以便运行，完成内存区的分配和去配工作。&lt;/p&gt;
&lt;p&gt;地址映射：内存被抽象为一维或二维地址空间；逻辑空间到物理空间映射。&lt;/p&gt;
&lt;p&gt;存储保护：系统隔离分配给进程的内存区，防止地址越界或操作越权。&lt;/p&gt;
&lt;p&gt;存储共享：系统允许多个进程共享内存区。&lt;/p&gt;
&lt;p&gt;存储扩充：形成虚拟存储器&lt;/p&gt;
&lt;h3 id=&#34;静态重定位动态重定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态重定位动态重定位&#34;&gt;#&lt;/a&gt; 静态重定位 / 动态重定位&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;地址转换&lt;/strong&gt;：又称重定位，即把逻辑地址转换成绝对地址&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态重定位&lt;/strong&gt;：在&lt;strong&gt;程序装入内存&lt;/strong&gt;时进行地址转换：由装入程序执行，早期小型 OS 使用，基于地址固定值进行偏移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态重地位 (主流)&lt;/strong&gt;：在&lt;strong&gt; CPU 执行程序时进行地址转换&lt;/strong&gt;：从效率出发，依赖硬件地址转换机构，运行时正确的将其逻辑地址转换为物理地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存储保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储保护&#34;&gt;#&lt;/a&gt; 存储保护&lt;/h3&gt;
&lt;p&gt;为&lt;strong&gt;避免&lt;/strong&gt;主存中的多个进程&lt;strong&gt;相互干扰&lt;/strong&gt;，必须&lt;strong&gt;对主存中的程序和数据进行保护&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;私有主存区中的信息：可读可写&lt;/li&gt;
&lt;li&gt;公共区中的共享信息：根据授权&lt;/li&gt;
&lt;li&gt;非本进程信息：不可读写&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;内存碎片外存碎片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存碎片外存碎片&#34;&gt;#&lt;/a&gt; 内存碎片 / 外存碎片&lt;/h3&gt;
&lt;p&gt;（1）性质不同：&lt;/p&gt;
&lt;p&gt;①内存碎片：指的是已经被分配出去的，但是却没有被使用的内存空间。 因为基本存储单位的限制&lt;/p&gt;
&lt;p&gt;②外存碎片：指的是还没有被分配的，但是由于太小或者是不连续，而导致不满足要求，所以没办法被分配的内存空间&lt;/p&gt;
&lt;p&gt;（2）存储位置不同：&lt;/p&gt;
&lt;p&gt;①内存碎片是存储于已分配区域内部的&lt;/p&gt;
&lt;p&gt;②外存碎片是存储于未分配区域的&lt;/p&gt;
&lt;p&gt;（3）状态不同：&lt;/p&gt;
&lt;p&gt;①内存碎片：其他进程没办法使用它，因为它被某一个进程占有&lt;/p&gt;
&lt;p&gt;②外存碎片：其他进程没办法使用它，因为它可存储的位置不连续或者是太小了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页存储&lt;/strong&gt;会产生&lt;strong&gt;内存碎片&lt;/strong&gt;，不会产生外存碎片；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分段存储&lt;/strong&gt;不会产生内存碎片，会产生&lt;strong&gt;外存碎片&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;段页式&lt;/strong&gt;存储：产生&lt;strong&gt;内存碎片、外存碎片&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;存储扩充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储扩充&#34;&gt;#&lt;/a&gt; 存储扩充&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;对换技术&lt;/strong&gt;：把部分不运行的进程调出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟技术&lt;/strong&gt;：只调入进程的部分内容，对单个进程不使用对换技术完成，特点是自动化、透明&lt;/p&gt;
&lt;h3 id=&#34;内存不足的存储技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存不足的存储技术&#34;&gt;#&lt;/a&gt; 内存不足的存储技术&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;移动技术&lt;/strong&gt;：当未分配区表中找不到足够大的空闲区来装入新进程时，我们使用移动技术来完成内存紧凑，实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全部移动到一侧&lt;/li&gt;
&lt;li&gt;移动直到有足够大的空闲区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要动态重定位支撑:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对换技术&lt;/strong&gt;：如果当前一个或多个驻留进程都处于阻塞态，此时选择其中一个进程，将其暂时移出内存，腾出空间给其他进程使用，；同时把磁盘中的某个进程换入内存，让其投入运行，这种互换称为&lt;strong&gt;对换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存覆盖技术&lt;/strong&gt;：指程序执行过程中程序的不同模块在内存中相互替代，以达到小内存执行大程序的目的。&lt;/p&gt;
&lt;h3 id=&#34;存储层次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储层次&#34;&gt;#&lt;/a&gt; 存储层次&lt;/h3&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMy5wbmc=&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png&lt;/span&gt;&amp;quot; alt=&amp;quot;3&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;页式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页式存储&#34;&gt;#&lt;/a&gt; 页式存储&lt;/h3&gt;
&lt;p&gt;逻辑地址 = 页号 + 页面偏移&lt;/p&gt;
&lt;p&gt;物理地址 = 页架号（页框号） + 单元号（页内偏移)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610095628687.png&#34; alt=&#34;image-20230610095628687&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610095822503.png&#34; alt=&#34;image-20230610095822503&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页的共享&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据共享&lt;/strong&gt;：不同进程可以使用&lt;strong&gt;不同&lt;/strong&gt;页号共享数据页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序共享&lt;/strong&gt;：不同进程必须使用&lt;strong&gt;相同&lt;/strong&gt;页号共享代码页&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;页式存储管理的地址转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDA2MTQxOTIucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610100614192.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610100614192&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;页表控制寄存器存储了当前的页表的地址和长度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多级页表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDEyMTQ4NDMucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610101214843.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610101214843&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;逻辑地址结构有三部分组成：页目录、页表页和位移&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDMzMTgzMTcucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610103318317.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610103318317&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反置页表 IPT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正向页表：以&lt;strong&gt;页号&lt;/strong&gt;为索引 (隐含)，完整连续排列，页表项中不含页号，每个进程单独一个页表&lt;/p&gt;
&lt;p&gt;反置页表：以&lt;strong&gt;页框号&lt;/strong&gt;为索引 (隐含)，完整连续排列，每个页框填入的是哪个进程的哪个页号，索引进程共用一个反置页表。其页表项不包含页框号&lt;/p&gt;
&lt;p&gt;通过这个结构，哈希表和反向表中只有一项对应于一个实存页 (面向实存)，而不是虚拟页 (面向虚存)。&lt;br /&gt;
因此，不论由多少进程、支持多少虚拟页，页表都只需要&lt;strong&gt;实存中的一个固定部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;页表结构：页号、进程标识符、控制位、哈希链指针&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDQ0NTI3MjcucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610104452727.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610104452727&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDQ0MDkxNzcucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618104409177.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230618104409177&amp;quot; style=&amp;quot;zoom: 25%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;段式存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段式存储&#34;&gt;#&lt;/a&gt; 段式存储&lt;/h3&gt;
&lt;p&gt;逻辑地址 = 段号 + 段内偏移&lt;/p&gt;
&lt;p&gt;页式存储管理中页的划分对程序员不可见。&lt;/p&gt;
&lt;p&gt;段式存储管理中段的划分对程序员可见。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDUwMTY3ODEucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610105016781.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610105016781&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;段页式存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段页式存储管理&#34;&gt;#&lt;/a&gt; 段页式存储管理&lt;/h3&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDU0MTQxNDUucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610105414145.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230610105414145&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;页面调度未看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面调度未看&#34;&gt;#&lt;/a&gt; 页面调度（未看）&lt;/h3&gt;
&lt;p&gt;OPT 页面调度算法（Belady 算法）&lt;/p&gt;
&lt;p&gt;先进先出页面调度算法 FIFO-Belady 异常 - 更多的页框导致了更高的缺页率，页框为 3 和 4 的时候&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDU2NTIxMjcucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618105652127.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230618105652127&amp;quot; style=&amp;quot;zoom:25%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;页面缓冲算法&lt;/p&gt;
&lt;p&gt;最近最少用 LRU&lt;/p&gt;
&lt;p&gt;第二次机会页面替换算法 SCR&lt;/p&gt;
&lt;p&gt;最不常用 LFU&lt;/p&gt;
&lt;p&gt;时钟 CLOCK&lt;/p&gt;
&lt;h2 id=&#34;单元4-设备管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元4-设备管理&#34;&gt;#&lt;/a&gt; 单元 4 设备管理&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按信息传输方向 (I/O 操作特性) 分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;li&gt;输入输出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按交互功能划分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人机交互&lt;/li&gt;
&lt;li&gt;存储&lt;/li&gt;
&lt;li&gt;机机通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按设备管理 (I/O 信息交换单位) 划分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符&lt;/li&gt;
&lt;li&gt;块&lt;/li&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按传输速率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;低速设备，键盘、鼠标&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大多数低速设备都属于独享设备&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中速设备，激光打印机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高速设备，磁盘机、光盘机&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;io控制方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io控制方式&#34;&gt;#&lt;/a&gt; IO 控制方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;轮询（程序直接控制方式）
&lt;ul&gt;
&lt;li&gt;重复测试&lt;/li&gt;
&lt;li&gt;CPU 和设备串行工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断
&lt;ul&gt;
&lt;li&gt;CPU 和设备部分并行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DMA（Direct Memory Access 直接存储器访问）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存和设备&lt;/strong&gt;之间有一条数据通路成块地传送数据，&lt;strong&gt;无需 CPU 参与&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;流程：
&lt;ul&gt;
&lt;li&gt;处理器向 DMA 模块发出 I/O 命令&lt;/li&gt;
&lt;li&gt;处理器继续执行其它工作，DMA 模块负责传送全部数据&lt;/li&gt;
&lt;li&gt;数据传送结束后，DMA 中断处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;周期窃取：CPU 总是将总线的占有权让给 DMA 一个或几个主存周期，一般是 1 个存取周期，让设备和内存之间交换数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IO 通道
&lt;ul&gt;
&lt;li&gt;定义：
&lt;ul&gt;
&lt;li&gt;一个&lt;strong&gt;具有特殊功能的处理器&lt;/strong&gt;，它有自己的指令和程序，专门负责数据输入输出的传输控制 (CPU 把传输控制的功能下放给通道)。通道受 CPU 的 I/O 指令启动、停止或改变其工作状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能：
&lt;ul&gt;
&lt;li&gt;按 I/O 指令要求启动 I/O 设备&lt;/li&gt;
&lt;li&gt;执行通道指令&lt;/li&gt;
&lt;li&gt;组织 I/O 设备和主存进行数据传输&lt;/li&gt;
&lt;li&gt;向 CPU 报告中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 与通道高度并行&lt;/li&gt;
&lt;li&gt;IO 指令由 IO 通道所包含的处理器执行&lt;/li&gt;
&lt;li&gt;与 DMA 的区别：可以连接多个设备，读取多个数据块&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通道指令&lt;/strong&gt;：又叫通道控制字 (CCW)，它是通道用于执行 I/O 操作的指令，它可以由管理程序存放在主存的任何地方，由通道从主存取出并执行。【&lt;strong&gt;IO 指令是 CPU 指令系统的一部分，用于控制输入输出操作的指令，通道指令是通道本身的指令，用来执行 IO 操作&lt;/strong&gt;】&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通道程序&lt;/strong&gt;：由&lt;strong&gt;通道指令&lt;/strong&gt;组成，它完成某种外围设备与主存传送信息的操作，如将磁带记录区的部分内容送到指定地址的主存缓冲区内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这是一种硬件机制。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CPU 作用&lt;/th&gt;
&lt;th&gt;等待设备&lt;/th&gt;
&lt;th&gt;数据传送&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;轮询方式&lt;/td&gt;
&lt;td&gt;需要&lt;/td&gt;
&lt;td&gt;需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中断方式&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DMA 方式&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616142618761.png&#34; alt=&#34;image-20230616142618761&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个有趣的例子 belike：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616142349234.png&#34; alt=&#34;image-20230616142349234&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;总线
&lt;ol&gt;
&lt;li&gt;单总线&lt;/li&gt;
&lt;li&gt;传统的三级总线&lt;/li&gt;
&lt;li&gt;采用南北桥的多级总线&lt;/li&gt;
&lt;li&gt;采用 IO 通道的多级总线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;io软件的实现todo再看看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io软件的实现todo再看看&#34;&gt;#&lt;/a&gt; IO 软件的实现【todo 再看看】&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;同步 / 异步传输&lt;/strong&gt;：支持&lt;strong&gt;阻塞和中断驱动&lt;/strong&gt;两种工作方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;层次&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616165104832.png&#34; alt=&#34;image-20230616165104832&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;io中断处理程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io中断处理程序&#34;&gt;#&lt;/a&gt; IO 中断处理程序&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;处理 IO 中断&lt;/strong&gt;：检查设备状态寄存器内容，判断产生中断的原因，根据 I/O 操作的完成情况进行相应的处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报告错误&lt;/strong&gt;：如果数据传输有错，向上层软件报告设备的出错信息，实施重新执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唤醒驱动程序&lt;/strong&gt;：如果正常结束，唤醒等待传输的进程，使其转换为&lt;strong&gt;就绪态&lt;/strong&gt;设备驱动程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;设备驱动程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备驱动程序&#34;&gt;#&lt;/a&gt; 设备驱动程序&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;任务&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把用户提交的&lt;strong&gt;逻辑 I/O 请求&lt;/strong&gt;转化为&lt;strong&gt;物理 I/O 操作&lt;/strong&gt;的启动和执行，如设备名转换为端口等&lt;/li&gt;
&lt;li&gt;监督设备是否正确执行，管理&lt;strong&gt;数据缓冲区&lt;/strong&gt;，进行必要的纠错处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备初始化：在系统初次启动或设备传输数据时，预置设备和控制器以及通道状态&lt;/li&gt;
&lt;li&gt;执行设备驱动例程
&lt;ol&gt;
&lt;li&gt;负责启动设备，进行数据传输&lt;/li&gt;
&lt;li&gt;对于具有通道方式，还负责生成通道指令和通道程序，启动通道工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;调用和执行中断处理程序：负责处理设备和控制器及通道所发出的各种中断&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;独立于设备的io软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#独立于设备的io软件&#34;&gt;#&lt;/a&gt; 独立于设备的 IO 软件&lt;/h4&gt;
&lt;h4 id=&#34;用户空间的io软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户空间的io软件&#34;&gt;#&lt;/a&gt; 用户空间的 IO 软件&lt;/h4&gt;
&lt;p&gt;SPOOLing 软件&lt;/p&gt;
&lt;h3 id=&#34;缓冲技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓冲技术&#34;&gt;#&lt;/a&gt; 缓冲技术&lt;/h3&gt;
&lt;p&gt;缓冲区：在&lt;strong&gt;内存&lt;/strong&gt;中开辟的存储区，专门用于临时存放 I/O 操作的数据&lt;/p&gt;
&lt;p&gt;解决&lt;strong&gt; CPU 与设备之间速度不匹配&lt;/strong&gt;的矛盾&lt;/p&gt;
&lt;p&gt;基本思想：写缓冲、读缓冲&lt;/p&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单缓冲&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145632492.png&#34; alt=&#34;image-20230616145632492&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作机制：
&lt;ul&gt;
&lt;li&gt;输入：将数据读至缓冲区，系统将缓冲区数据送至用户区，应用程序对数据进行处理；如此往复，系统读入后续的数据&lt;/li&gt;
&lt;li&gt;输出：把数据从用户区复制到缓冲区，再将数据输出后，应用程序继续请求输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双缓冲&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145655627.png&#34; alt=&#34;image-20230616145655627&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145738740.png&#34; alt=&#34;image-20230616145738740&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多缓冲&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145234883.png&#34; alt=&#34;image-20230616145234883&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多缓冲组成的循环缓冲技术，多缓冲的缓冲区是系统的公共资源，可供进程共享并由系统统一分配和管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓冲池&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616161718238.png&#34; alt=&#34;image-20230616161718238&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使多个进程能够有效地同时处理输入和输出&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环缓冲&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;驱动调度技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驱动调度技术&#34;&gt;#&lt;/a&gt; 驱动调度技术&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;磁盘是一种直接存取存储设备&lt;/strong&gt;，磁带是一种顺序存取存储设备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616150524875.png&#34; alt=&#34;image-20230616150524875&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;三维地址（磁头号、柱面号、扇区号）
&lt;ol&gt;
&lt;li&gt;盘面号也被叫做&lt;strong&gt;磁头号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;磁道号也被叫做&lt;strong&gt;柱面号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;区别:&amp;quot;0 面 0 道 1 扇区&amp;quot; 中的 &amp;quot;面&amp;quot; 是指磁头，不是柱面
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;面和道都是 0 开始&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扇区是从 1 开始&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;磁盘存取时间 = 寻道时间 + 旋转延迟 + 传送时间&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;磁盘的驱动调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘的驱动调度&#34;&gt;#&lt;/a&gt; 磁盘的驱动调度&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;旋转调度
&lt;ul&gt;
&lt;li&gt;目的:&lt;strong&gt; 使得旋转延迟的总时间最少&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;旋转排序
&lt;ul&gt;
&lt;li&gt;通过优化 I/O 请求&lt;strong&gt;排序&lt;/strong&gt;，在&lt;strong&gt;最少旋转圈数&lt;/strong&gt;内完成位于同一柱面的访问请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化分布
&lt;ul&gt;
&lt;li&gt;通过信息在存储空间的排列方式来减少旋转延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移臂调度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616151146552.png&#34; alt=&#34;image-20230616151146552&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;磁盘冗余阵列&lt;/li&gt;
&lt;li&gt;cache / 替换&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;设备分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备分配&#34;&gt;#&lt;/a&gt; 设备分配&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设备的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占设备：一次只能由一个进程独占使用&lt;/li&gt;
&lt;li&gt;共享设备：多个进程同时使用的设备，其管理工作主要是驱动调度和实施驱动，一般不必分配&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟设备&lt;/strong&gt;：使用一类物理设备模拟另一类物理设备的技术，&lt;strong&gt;让独享型设备变为共享设备&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备独立性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通常不指定物理设备，而是指定&lt;strong&gt;逻辑设备&lt;/strong&gt;，使得用户作业和物理设备分离开来，再通过其它途径建立逻辑设备和物理设备之间的映射&lt;/li&gt;
&lt;li&gt;设备管理的功能就是将&lt;strong&gt;逻辑设备名转换为物理设备名&lt;/strong&gt;，为此系统需要提供逻辑设备名和物理设备名的对应表以供转换使用。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逻辑设备号&lt;/strong&gt;由用户定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理设备号&lt;/strong&gt;由系统规定，不可修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;绝对号 / 相对号&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;绝对号：就是将每一台设备确定一个编号（相当于一个绝对地址）&lt;/li&gt;
&lt;li&gt;相对号：就是为了用户程序的方便而设的，在用户请求使用时，采用 “设备类 - 相对号” 来提出使用设备要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分配方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态分配：防止死锁&lt;/li&gt;
&lt;li&gt;动态分配：设备利用率高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备分配算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先来先服务&lt;/li&gt;
&lt;li&gt;优先级高者优先&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SPOOLing 设备（假脱机技术）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;strong&gt;独占设备改成共享设备&lt;/strong&gt;的技术&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;预输入、缓输出和井管理&lt;/strong&gt;技术&lt;/li&gt;
&lt;li&gt;通过创建守护进程和特殊目录解决&lt;strong&gt;独占型设备&lt;/strong&gt;的&lt;strong&gt;空占&lt;/strong&gt;问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目的：提高 IO 设备的使用效率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;缓和 CPU 的高速性与 IO 设备低速性之间的矛盾，以空间换时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616153606908.png&#34; alt=&#34;image-20230616153606908&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154208873.png&#34; alt=&#34;image-20230616154208873&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例子：共享打印机&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154132122.png&#34; alt=&#34;image-20230616154132122&#34; /&gt;&lt;/p&gt;
&lt;p&gt;打印机守护进程和 SPOOLing 打印目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;守护进程&lt;/strong&gt;是唯一有&lt;strong&gt;特权&lt;/strong&gt;使用打印机设备的进程&lt;/li&gt;
&lt;li&gt;打印文件前，用户进程先产生完整的&lt;strong&gt;待输出文件&lt;/strong&gt;，并存放在打印目录下&lt;/li&gt;
&lt;li&gt;打印机空闲时，启动守护进程，打印&lt;strong&gt;待输出文件&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;单元5-文件管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元5-文件管理&#34;&gt;#&lt;/a&gt; 单元 5 文件管理&lt;/h2&gt;
&lt;h3 id=&#34;文件系统及其功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统及其功能&#34;&gt;#&lt;/a&gt; 文件系统及其功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;主要目的：实现对文件的按名存取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同一个文件必须从&lt;strong&gt;逻辑文件&lt;/strong&gt;和&lt;strong&gt;物理文件&lt;/strong&gt;两个侧面来观察它&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于用户，需要并遵守文件系统的规则来定义文件信息的逻辑结构，由文件系统提供&lt;strong&gt;按名存取&lt;/strong&gt;方式来实现对文件信息的存储和检索。&lt;/li&gt;
&lt;li&gt;对于系统，必须采用&lt;strong&gt;特定数据结构和有效算法&lt;/strong&gt;实现文件的&lt;strong&gt;逻辑结构到存储结构&lt;/strong&gt;的映射，实现对文件存储空间和文件信息的管理，提供多种存取方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616172631369.png&#34; alt=&#34;image-20230616172631369&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;文件的逻辑结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的逻辑结构&#34;&gt;#&lt;/a&gt; 文件的逻辑结构&lt;/h3&gt;
&lt;h4 id=&#34;逻辑文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑文件&#34;&gt;#&lt;/a&gt; 逻辑文件&lt;/h4&gt;
&lt;p&gt;独立于&lt;strong&gt;物理环境&lt;/strong&gt;的，用户概念中的&lt;strong&gt;抽象信息组织方式&lt;/strong&gt;是&lt;strong&gt;文件的逻辑结构&lt;/strong&gt;，用户能观察到的，并加以处理的数据集合构成逻辑文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;流式文件&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无结构&lt;/strong&gt;文件，指文件内的数据不再组成记录，只是由一串依次的&lt;strong&gt;字节&lt;/strong&gt;组成的&lt;strong&gt;信息流序列&lt;/strong&gt;，称为&lt;strong&gt;字节流文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这种文件常常按长度来读取所需信息，也可以用插入的特殊字符作为分界，使用读写指针访问&lt;/li&gt;
&lt;li&gt;Linux 系统只提供流式文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记录式文件&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;记录式文件是一种&lt;strong&gt;有结构&lt;/strong&gt;的文件，它是若干&lt;strong&gt;逻辑记录信息&lt;/strong&gt;所组成的记录流文件
&lt;ol&gt;
&lt;li&gt;逻辑记录是文件中按信息在逻辑上的独立含义所划分的信息单位&lt;/li&gt;
&lt;li&gt;每个职工的工资信息是一个逻辑记录；&lt;/li&gt;
&lt;li&gt;整个单位职工的工资信息便组成了该单位工资信息的记录式文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑记录&lt;/strong&gt;是文件内&lt;strong&gt;独立的最小信息单位&lt;/strong&gt;，文件记录位置代替字节位置。&lt;/li&gt;
&lt;li&gt;记录是文件常用的记录组织和使用方法
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;记录式顺序文件&lt;/strong&gt;：文件的记录顺序生成并被顺序访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记录式索引文件&lt;/strong&gt;：文件使用索引表，表项包含记录键和索引指针，记录键由应用程序确定，而索引文件便指向相应记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;物理结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理结构&#34;&gt;#&lt;/a&gt; 物理结构&lt;/h4&gt;
&lt;p&gt;文件的物理结构和组织是指&lt;strong&gt;逻辑文件在物理存储空间中的存放方法和组织关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时文件看做物理文件，即相关物理块的集合。文件的存储结构涉及块的划分、记录的排列、索引的组织、信息的搜索等许多问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;顺序文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个文件中&lt;strong&gt;逻辑上连续&lt;/strong&gt;的信息存放到&lt;strong&gt;存储介质的依次相邻的块&lt;/strong&gt;中便形成顺序结构，这类文件叫顺序文件，又称连续文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用连接字 (指针) 来表示文件中各条记录之间的关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616200258444.png&#34; alt=&#34;image-20230616200258444&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接文件、散列文件或哈希文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在直接存取存储设备上，利用哈希法将记录的关键字与其地址之间建立某种对应关系，以便实现快速存取的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引文件为每个文件建立了一张&lt;strong&gt;索引表&lt;/strong&gt;，索引表记录方式有多种：
&lt;ol&gt;
&lt;li&gt;记录组成文件的磁盘块号，适用于流式文件。&lt;/li&gt;
&lt;li&gt;所以表项包含记录键及其磁盘块号，适用于记录式文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616200222696.png&#34; alt=&#34;image-20230616200222696&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;存取方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存取方法&#34;&gt;#&lt;/a&gt; 存取方法&lt;/h3&gt;
&lt;p&gt;文件存取方法在某种程度上依赖于&lt;strong&gt;文件的物理结构&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;顺序存取&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;按&lt;strong&gt;记录顺序&lt;/strong&gt;进行读 / 写操作的存取方法称顺序存取&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁带机&lt;/strong&gt;是最常用的一种顺序存取存储设备，它具有存储容量大、稳定可靠、卷可装卸和便于保存等优点，广泛用作存档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;光盘&lt;/strong&gt;也是一种顺序存取存储设备，光盘上的磁道不是同心圆，而是螺旋形的，本质的线性的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机存取&lt;/strong&gt;（直接存取）
&lt;ul&gt;
&lt;li&gt;可以非顺序地从文件中的任何位置存取文件内容&lt;/li&gt;
&lt;li&gt;要求快速地以&lt;strong&gt;任意次序&lt;/strong&gt;直接&lt;strong&gt;读写&lt;/strong&gt;某个记录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磁盘文件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引存取&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;strong&gt;索引文件&lt;/strong&gt;的索引存取方法&lt;/li&gt;
&lt;li&gt;文件的记录不按位置而是按其记录名和记录键来编址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件操作&#34;&gt;#&lt;/a&gt; 文件操作&lt;/h3&gt;
&lt;h4 id=&#34;文件的创建create&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的创建create&#34;&gt;#&lt;/a&gt; 文件的创建 create&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// 创建成功后系统返回的文件描述符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;//mode 是文件所具有的权限&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;filenamep&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 指向要创建的文件路径名的字符串指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filenamep&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;文件的删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的删除&#34;&gt;#&lt;/a&gt; 文件的删除&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;unlink&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filenamep&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;文件的打开open&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的打开open&#34;&gt;#&lt;/a&gt; 文件的打开 open&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; filenamep&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filenamep&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;输入是含路径的文件名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;→→ 依据层次式目录结构解释与检索&lt;/p&gt;
&lt;p&gt;→→ 匹配文件名并读取目录项&lt;/p&gt;
&lt;p&gt;→→ 提取 inode 号&lt;/p&gt;
&lt;p&gt;→→ 按号定位，在 inode 区读取 inode 数据结构 (主存活动 inode)&lt;/p&gt;
&lt;p&gt;→→ &lt;strong&gt;输出是返回文件描述符（字）&lt;/strong&gt;，即 file descriptor（成功打开文件，则会返回一个大于 0 的文件描述符；如果打开文件失败，则会返回 - 1）&lt;/p&gt;
&lt;h4 id=&#34;文件的关闭close&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的关闭close&#34;&gt;#&lt;/a&gt; 文件的关闭 close&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;文件的读取read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的读取read&#34;&gt;#&lt;/a&gt; 文件的读取 read&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; nr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 系统调用后实际读入的字节数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 文件描述符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 要求传送的字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 应该输入的用户数据区的首地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;文件的写write&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的写write&#34;&gt;#&lt;/a&gt; 文件的写 write&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; nw&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 系统调用后实际写入的字节数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 文件描述符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 要求传送的字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 数据传送的源地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nw &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;文件的随机存取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的随机存取&#34;&gt;#&lt;/a&gt; 文件的随机存取&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 当前的 offset&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; whence&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// 指向一个以读或写方式打开的文档&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;lseek&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; offset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; whence&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;文件描述字 fd 必须指向一个用读或写方式打开的文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当 whence 是 0 时，则 f_offset 被置为 offset，&lt;/li&gt;
&lt;li&gt;当 whence 是 1 时，则 f_offset 被置为文件当前位置加上 offset。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件目录&#34;&gt;#&lt;/a&gt; 文件目录&lt;/h3&gt;
&lt;p&gt;文件目录是实现文件的&lt;strong&gt;按名存取&lt;/strong&gt;的关键数据结构&lt;/p&gt;
&lt;h4 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; linux&lt;/h4&gt;
&lt;p&gt;linux 基本目录项：inode = 文件名 + inode 号&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616194928961.png&#34; alt=&#34;image-20230616194928961&#34; /&gt;&lt;/p&gt;
&lt;p&gt;嵌入在 inode 中的&lt;strong&gt;索引地址表&lt;/strong&gt;不可以太大&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件较小使用直接地址 (直接索引)&lt;/li&gt;
&lt;li&gt;文件较大使用间接索引&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;f_count 和 i_count 分别反映进程动态地共享一个文件的两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;f_count&lt;/strong&gt; 反映&lt;strong&gt;不同进程&lt;/strong&gt;通过&lt;strong&gt;同一个&lt;/strong&gt;系统打开文件表项共享一个文件的情况；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;i_count&lt;/strong&gt; 反映&lt;strong&gt;不同进程&lt;/strong&gt;通过&lt;strong&gt;不同&lt;/strong&gt;系统打开文件表项共享一个文件的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;多级层次目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级层次目录结构&#34;&gt;#&lt;/a&gt; 多级层次目录结构&lt;/h4&gt;
&lt;p&gt;易于规定不同层次或子树中文件的不同存取权限，便于文件的保护、保密和共共享&lt;/p&gt;
&lt;p&gt;为了解决不同用户文件 “&lt;strong&gt;命名冲突&lt;/strong&gt;” 的问题，通常在文件系统中采用&lt;strong&gt;多级目录&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;单元6-并行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元6-并行&#34;&gt;#&lt;/a&gt; 单元 6 并行&lt;/h2&gt;
&lt;h3 id=&#34;临界区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#临界区&#34;&gt;#&lt;/a&gt; 临界区&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;临界资源&lt;/strong&gt;：&lt;strong&gt;互斥共享变量所代表的资源，即一次只能被一个进程使用的资源&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;举例：火车上的卫生间就是一种互斥使用的共享资源&lt;/li&gt;
&lt;li&gt;使用共享变量代表共享资源&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;临界区&lt;/strong&gt; (critical section)：并发进程中与互斥共享变量相关的&lt;strong&gt;程序段&lt;/strong&gt;，与同一变量有关的临界区分散在各进程的程序段中，而各进程的执行速度不可预见&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;临界区&lt;/strong&gt;：每个进程中访问临界资源的&lt;strong&gt;那段代码&lt;/strong&gt;称为临界区。&lt;/p&gt;
&lt;h3 id=&#34;信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号量&#34;&gt;#&lt;/a&gt; 信号量&lt;/h3&gt;
&lt;p&gt;P(s)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将信号量 s 减去 1，若结果小于 0，则调用 P (s) 的进程被置成等待信号量 s 的状态&lt;/li&gt;
&lt;li&gt;负数的绝对值就是等待的进程的个数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;V (s)：将信号量 s 加 1，若结果不大于 0，则释放 (唤醒) 一个等待信号量 s 的进程，使其转换为&lt;strong&gt;就绪态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617100634832.png&#34; alt=&#34;image-20230617100634832&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;进程通信信息传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程通信信息传递&#34;&gt;#&lt;/a&gt; 进程通信（信息传递）&lt;/h3&gt;
&lt;p&gt;当进程互相交互时，必须满足两个基本要求：&lt;strong&gt;同步和通信&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;进程直接通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程直接通信&#34;&gt;#&lt;/a&gt; 进程直接通信&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对称直接寻址，发送进程和接收进程必须&lt;strong&gt;命名对方&lt;/strong&gt;以便通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称直接寻址，&lt;strong&gt;只要发送者命名接收者，而接收者不需要命名发送者&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;receive(&lt;strong&gt;id&lt;/strong&gt;, message) 接收来自任何进程的消息，变量 id 置成与其通信的进程名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;进程间接通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间接通信&#34;&gt;#&lt;/a&gt; 进程间接通信&lt;/h4&gt;
&lt;p&gt;发送或者接收信件通过&lt;strong&gt;一个信箱&lt;/strong&gt;来进行，该信箱有&lt;strong&gt;唯一标识符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;消息不是直接从发送者发送到接收者，而是发送到由&lt;strong&gt;临时保存这些消息的队列组成的一个共享数据结构&lt;/strong&gt;，这些队列通常成为&lt;strong&gt;信箱&lt;/strong&gt; (mailbox)&lt;/p&gt;
&lt;h4 id=&#34;管道和套接字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道和套接字&#34;&gt;#&lt;/a&gt; 管道和套接字&lt;/h4&gt;
&lt;p&gt;管道和套接字都是基于信箱的消息传递方式的一种&lt;strong&gt;变体&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h3&gt;
&lt;p&gt;不仅与系统拥有的资源数量有关，而且与资源分配策略，进程对资源的使用要求以及并发进程的推进顺序有关&lt;/p&gt;
&lt;h4 id=&#34;死锁产生的四个必要条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁产生的四个必要条件&#34;&gt;#&lt;/a&gt; 死锁产生的四个必要条件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;互斥条件&lt;/strong&gt;：进程应互斥使用资源，任一时刻一个资源仅为一个进程独占&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;占有和等待条件&lt;/strong&gt;：一个进程请求资源得不到满足而等待时，不释放已占有的资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不剥夺条件&lt;/strong&gt;：任一进程不能从另一进程那里抢夺资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环等待条件&lt;/strong&gt;：存在一个循环等待链，每一个进程分别等待它前一个进程所持有的资源&lt;/li&gt;
&lt;li&gt;前三个是死锁存在的必要条件，但不是充分条件，第四个条件是前三个条件同时存在时所产生的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;死锁防止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁防止&#34;&gt;#&lt;/a&gt; 死锁防止&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;破坏互斥条件：把独占型资源改造成共享性资源&lt;/li&gt;
&lt;li&gt;破坏占有和等待条件：
&lt;ul&gt;
&lt;li&gt;静态分配是指进程在执行中&lt;strong&gt;不再申请资源&lt;/strong&gt;，就不会出现占有某些资源再等待另一些资源的情况。&lt;/li&gt;
&lt;li&gt;所有并发执行的进程要求的资源总和不超过系统拥有的资源数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;破坏不剥夺条件
&lt;ul&gt;
&lt;li&gt;采用剥夺式调度方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;破坏循环等待条件
&lt;ul&gt;
&lt;li&gt;层次分配策略
&lt;ul&gt;
&lt;li&gt;一个进程得到某一层的一个资源后，它只能&lt;strong&gt;再申请在较高层&lt;/strong&gt;的资源&lt;/li&gt;
&lt;li&gt;当一个进程要释放某层的一个资源时，必须先&lt;strong&gt;释放所占用的较高层&lt;/strong&gt;的资源&lt;/li&gt;
&lt;li&gt;当一个进程获得了&lt;strong&gt;某一层&lt;/strong&gt;的一个资源后，它想再申请该层中的另一个资源，那么，必须先释放该层中的已占资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按序分配策略
&lt;ul&gt;
&lt;li&gt;把系统的所有资源排一个顺序，例如，系统若共有 n 个进程，共有 m 个资源，用 ri 表示第 i 个资源，于是这 m 个资源是：r1,r2,...,rm&lt;/li&gt;
&lt;li&gt;规定如果进程不得在占用资源 ri (1≤i≤m) 后再申请 rj (j&amp;lt;i)。不难证明，按这种策略分配资源时系统不会发生死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;死锁避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁避免&#34;&gt;#&lt;/a&gt; 死锁避免&lt;/h4&gt;
&lt;p&gt;把资源分配给申请者会产生死锁的话，则拒绝分配，否则接收申请，为它分配资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;银行家算法（todo）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;死锁检测与恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁检测与恢复&#34;&gt;#&lt;/a&gt; 死锁检测与恢复&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可设置两张表格来记录进程使用资源的情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;等待资源表记录每个被&lt;strong&gt;阻塞进程等待&lt;/strong&gt;的资源&lt;/li&gt;
&lt;li&gt;占用资源表记录每个进程&lt;strong&gt;占有&lt;/strong&gt;的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果出现循环等待，则出现了死锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源分配图&lt;/p&gt;
&lt;p&gt;看看这个理解理解：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI4NDM2L2FydGljbGUvZGV0YWlscy8xMTExMjM3Nzk=&#34;&gt;https://blog.csdn.net/qq_39328436/article/details/111123779&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个资源用一个&lt;strong&gt;方框&lt;/strong&gt;表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方框中的&lt;strong&gt;黑圆点&lt;/strong&gt;表示此资源类中的各个资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个进程用一个&lt;strong&gt;圆圈&lt;/strong&gt;表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有向边&lt;/strong&gt;表示进程申请资源和资源被分配情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617104337516.png&#34; alt=&#34;image-20230617104337516&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果进程 - 资源分配图中无环路，此时系统没有发生死锁。&lt;/p&gt;
&lt;p&gt;如果进程 - 资源分配图中有环路，且每个资源都只有一个资源则发生死锁。&lt;/p&gt;
&lt;p&gt;如果进程 - 资源分配图中有环路，且所涉及资源有多个资源，则未必发生死锁。可以通过消去法来判断，消去既不阻塞其他进程又与其他进程相关的进程的所有请求边和分配边，得到一个孤立点。接着将等待资源的进程分配后再次消去，如果最后所有的进程都成为孤立点则是无死锁的，图是可完全简化的，否则图是不可以完全简化的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁定理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统为死锁状态的充分条件是：当且仅当该状态的进程 - 资源分配图是&lt;strong&gt;不可完全简化&lt;/strong&gt;的。该充分条件称为死锁定理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源剥夺法&lt;/li&gt;
&lt;li&gt;进程回退法&lt;/li&gt;
&lt;li&gt;进程撤销法&lt;/li&gt;
&lt;li&gt;系统重启法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发&#34;&gt;#&lt;/a&gt; 并发&lt;/h3&gt;
&lt;h4 id=&#34;bernstein条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bernstein条件&#34;&gt;#&lt;/a&gt; Bernstein 条件&lt;/h4&gt;
&lt;p&gt;并发进程的无关性是进程的执行与时间无关的一个充分条件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212358786.png&#34; alt=&#34;image-20230618212358786&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;peterson算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#peterson算法&#34;&gt;#&lt;/a&gt; peterson 算法&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212455744.png&#34; alt=&#34;image-20230618212455744&#34; /&gt;&lt;/p&gt;
&lt;p&gt;举旗子，贴上对方的标签，如果对方举起且门上是对方的标签，则等待，否则进入&lt;/p&gt;
&lt;h4 id=&#34;实现临界区管理的硬件设施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现临界区管理的硬件设施&#34;&gt;#&lt;/a&gt; 实现临界区管理的硬件设施&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关中断&lt;/li&gt;
&lt;li&gt;测试并建立指令&lt;/li&gt;
&lt;li&gt;对换指令&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;操作系统中并发问题解决方案的知识框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作系统中并发问题解决方案的知识框架&#34;&gt;#&lt;/a&gt; 操作系统中并发问题解决方案的知识框架&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212639129.png&#34; alt=&#34;image-20230618212639129&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;大题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大题&#34;&gt;#&lt;/a&gt; 大题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多道程序设计&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU 调度算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;周转时间：作业结束时间 - 作业开始时间&lt;/p&gt;
&lt;p&gt;提交给系统开始到执行完成获得结果为止的这段时间间隔称周转时间，应该使周转时间或平均周转时间尽可能短&lt;/p&gt;
&lt;p&gt;响应比：（等待时间 + 期待时间）/ 期待时间&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FCFS (先来先服务) 非抢占&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个短进程可能不得不等待很长时间才能获得执行&lt;/li&gt;
&lt;li&gt;偏袒计算为主的进程
&lt;ul&gt;
&lt;li&gt;I/O 多的进程不得不等待计算为主的进程做完&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RR (时间片轮转) 抢占&lt;/strong&gt; Round-Robin
&lt;ul&gt;
&lt;li&gt;基于时钟做&lt;strong&gt;抢占式调度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;以一个周期性间隔产生时钟中断，当中断发生时，当前正在运行的进程被置于就绪队列中，然后&lt;strong&gt;基于 FCFS 策略&lt;/strong&gt;选择下一个就绪进程运行&lt;/li&gt;
&lt;li&gt;延长短进程的等待时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPN (最短进程优先)&lt;/strong&gt; Shortest process
&lt;ul&gt;
&lt;li&gt;非抢占，真正操作系统没有办法使用&lt;/li&gt;
&lt;li&gt;选择所需处理时间最短的进程&lt;/li&gt;
&lt;li&gt;短进程将会越过长进程，优先获得调度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SRT (最短剩余时间优先)&lt;/strong&gt; Shortest Remaining Time
&lt;ul&gt;
&lt;li&gt;抢占，真正操作系统没有办法使用&lt;/li&gt;
&lt;li&gt;调度器总是选择预期剩余时间更短的进程，当一个新进程加入就绪队列，他可能比当前运行的进程具有更短的剩余时间，只要该新进就绪，调度器就可能抢占当前正在运行的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HRRF&lt;/strong&gt; (最高响应比优先) Highest Response Ratio Next
&lt;ul&gt;
&lt;li&gt;非抢占，真正操作系统没有办法使用&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618082746653.png&#34; alt=&#34;image-20230618082746653&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback&lt;/strong&gt; (多级反馈调度) 抢占
&lt;ul&gt;
&lt;li&gt;建立多个不同优先级的就绪进程队列&lt;/li&gt;
&lt;li&gt;多个就绪进程队列之间按照优先数调度&lt;/li&gt;
&lt;li&gt;高优先级的就绪进程，分配的时间片短&lt;/li&gt;
&lt;li&gt;单个就绪进程队列中的进程的优先数和时间片相同，按照先来先服务算法调度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;sup&gt;i&lt;/sup&gt;&lt;strong&gt; 的 i 是从&lt;/strong&gt; 0&lt;/strong&gt; 开始的，也就是&lt;strong&gt;最高优先级队列的时间片为 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5f16b9b43f43c1c52159e01c40a2d96e.JPG&#34; alt=&#34;5f16b9b43f43c1c52159e01c40a2d96e&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RR, q = 4 时答案有问题，应为 ABBBBCDDDDBBBBDDDDBD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁避免银行家算法 ，死锁检测&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/D62410102ED0B8A94EE82582185FC8A9.png&#34; alt=&#34;D62410102ED0B8A94EE82582185FC8A9&#34; /&gt;&lt;/p&gt;
&lt;p&gt;做题思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;试探性地将 &lt;code&gt;available&lt;/code&gt;  的资源分配给某个进程，满足它的 &lt;code&gt;Claim - Allocation&lt;/code&gt;  的需求，进程结束后，归还所拥有的 &lt;code&gt;Allocation&lt;/code&gt; ，系统未分配的资源增加，可分配资源为 &lt;code&gt;available + allocation&lt;/code&gt; ，循环此过程，直至所有进程都被满足&lt;/li&gt;
&lt;li&gt;否则，系统将处于不安全状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620192317074.png&#34; alt=&#34;image-20230620192317074&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连续分配，分区分配：适配算法，伙伴系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可变分区存储&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最先适应分配算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最先适应就是从上向下查找，找到第一块区域放进去，将剩下的区域分割后仍作为空闲区。&lt;/li&gt;
&lt;li&gt;有利于大作业装入，但也使得内存低地址和高地址两端的分区利用不均衡，回收分区麻烦。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;邻近适应分配算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从上次查找结束的地方开始执行最先适应分配算法&lt;/li&gt;
&lt;li&gt;缩短平均查找时间，且存储空间利用率更均衡，不会使得小空闲区集中在内存一侧&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;最优适应分配算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次都是分配最接近需要使用大小的部分，会生成很多很小的内存内零头。&lt;/li&gt;
&lt;li&gt;通常会将空闲区按照长度递增顺序排列，等同于最先适应分配算法，查找时间最长&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;最坏适应分配算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次都是挑选最大的一块区域进行分配&lt;/li&gt;
&lt;li&gt;有利于中小型作业。&lt;/li&gt;
&lt;li&gt;可把空闲区按长度递减顺序排列，等同于最先适应分配算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;快速适应分配算法&lt;/strong&gt;：课本补充&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为经常用到的长度的空闲区设立单独的空闲区链表，查找非常快速&lt;/li&gt;
&lt;li&gt;归还内存空间时和邻近空闲区的合并复杂且耗时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最常用的是最先适应分配算法，其次是邻近适应分配算法和最优适应分配算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;地址转换计算：分页管理方式；分段管理方式。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分页管理&lt;/p&gt;
&lt;p&gt;逻辑地址 = 页号 + 页面偏移&lt;/p&gt;
&lt;p&gt;物理地址 = 页架号（页框号） + 单元号（页内偏移)&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDI1NTc2NzgucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102557678.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230618102557678&amp;quot; style=&amp;quot;zoom:25%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段管理&lt;/p&gt;
&lt;p&gt;逻辑地址 = 段号 + 段内偏移&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDI1Mjc1NjQucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102527564.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230618102527564&amp;quot; style=&amp;quot;zoom: 25%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;段页式管理&lt;/p&gt;
&lt;p&gt;逻辑地址 = 段号 + 页号 + 单元号&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDMwMzM2MzMucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618103033633.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230618103033633&amp;quot; style=&amp;quot;zoom: 15%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;页面置换算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OPT 页面调度算法&lt;/strong&gt;（Belady 算法）&lt;/p&gt;
&lt;p&gt;当要调入新页面时，首先淘汰以后不再访问的页，然后选择&lt;strong&gt;距现在最长时间后再访问&lt;/strong&gt;的页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先进先出页面调度算法&lt;/strong&gt; FIFO-Belady 异常&lt;/p&gt;
&lt;p&gt;首先淘汰最先调入主存的那一页，或者说主存驻留时间最长的那一页 (常驻的除外)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最近最少用&lt;/strong&gt; LRU-Least Recently Used&lt;/p&gt;
&lt;p&gt;淘汰&lt;strong&gt;最近一段时间较久未被访问&lt;/strong&gt;的那一页，即那些刚被使用过的页面，可以马上还要被使用到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最不常用&lt;/strong&gt; LFU-Least Frequently Used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时钟 CLOCK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用循环队列机制构造页面队列，形成了一个类似钟表面的环形表，队列指针则相当于钟表面上的表针，指向可能要淘汰的页&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抖动现象，工作集（不考）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MIN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程在时刻 t 访问某页面，如果该页面不在主存中，导致一次缺页，把该页面装入一个空闲页框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向前看&lt;/p&gt;
&lt;p&gt;指 &amp;quot;在某一段时间间隔内进程运行所需访问的页面集合&amp;quot;，W (t，Δ) 表示在时刻 t-Δ 到时刻 t 之间 ( (t-Δ，t)) 所访问的页面集合，进程在时刻 t 的工作集&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;磁盘调度算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先来先服务 &lt;strong&gt;FCFS&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最短查找时间优先 (最小短距离法) &lt;strong&gt;SSTF&lt;/strong&gt;，Shortest Service Time First&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描算法&lt;strong&gt; SCAN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向一个方向，碰壁折返&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618101122512.png&#34; alt=&#34;image-20230618101122512&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电梯调度 &lt;strong&gt;LOOK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不碰壁返回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C-LOOK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;始终沿同一方向&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102148934.png&#34; alt=&#34;image-20230618102148934&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件系统的计算&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;位示图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它将文件存储器的存储空间建立一张位示图，用以反映整个盘空间的分配情况。&lt;/p&gt;
&lt;p&gt;磁盘空间通常使用&lt;strong&gt;固定大小&lt;/strong&gt;的块，&lt;strong&gt;可方便地用位示图管理，用若干字节构成一张位示图&lt;/strong&gt;，其中每一字位对应一个物理块，字位的次序与块的相对次序一致，字位为‘1’表示相应块已占用，字位为‘0’表示该块空闲。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618115411308.png&#34; alt=&#34;image-20230618115411308&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空白文件目录&lt;/p&gt;
&lt;p&gt;这种方法将盘空间的一个未分配区域称为一个空白文件，系统为所有的空白文件建立一个目录，每个空白文件在这个目录中建立一个表目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空白块链：&lt;/p&gt;
&lt;p&gt;这种方法将盘上的所有空白块用链接指针或索引结构组织成一个空白文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux 文件管理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接地址索引&lt;/li&gt;
&lt;li&gt;间接地址索引&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PV 操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管程&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194458915.png&#34; alt=&#34;image-20230620194458915&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194639190.png&#34; alt=&#34;image-20230620194639190&#34; /&gt;、&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194758530.png&#34; alt=&#34;image-20230620194758530&#34; /&gt;&lt;/p&gt;
&lt;p&gt;分区分配：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态分配：进程运行前申请&lt;/p&gt;
&lt;p&gt;实现简单，能够防止系统发生死锁，&lt;/p&gt;
&lt;p&gt;但会降低设备利用率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态分配：进程随用随申请&lt;/p&gt;
&lt;p&gt;提高设备利用率&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;简答&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简答&#34;&gt;#&lt;/a&gt; 简答&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;试述系统调用的定义、实现原理，陷阱机制和绘制系统调用的处理过程，并阐述系统调用的处理逻辑&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义：操作系统实现的完成某种特定功能的过程，为所有运行程序提供访问操作系统的接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编写系统调用服务例程；&lt;/li&gt;
&lt;li&gt;设计系统调用入口地址表，每个入口地址都指向一个系统调用的服务例程，有些包含系统调用自带参数的个数；&lt;/li&gt;
&lt;li&gt;开辟现场保护区，以保存发生系统调用时应用程序的处理器现场&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;陷阱机制：操作系统实现系统调用功能的机制称为系统陷阱，由于系统调用而引起处理器中断的机器指令称为陷入指令，在用户态下执行时会由用户态转换到内核态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用程序执行系统调用，产生中断转向内核态，进入陷阱处理程序；&lt;/li&gt;
&lt;li&gt;按功能号查询入口地址表，并转至对应服务例程执行；&lt;/li&gt;
&lt;li&gt;完成后退出中断，返回应用程序断点继续运行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620232723536.png&#34; alt=&#34;image-20230620232723536&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;试写出进程映像包括哪些组成部分&lt;/p&gt;
&lt;p&gt;程序块、数据块、核心栈、用户栈、进程控制块&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjAyMzQ1NTA0NTYucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620234550456.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230620234550456&amp;quot; style=&amp;quot;zoom: 25%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;试述操作系统中三个最基础的抽象，并回答为什么要引入它们&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程抽象：对正在运行的程序在处理器上操作的状态集的抽象&lt;/li&gt;
&lt;li&gt;虚存抽象：对内存的抽象，使用虚拟地址引用物理存储单元&lt;/li&gt;
&lt;li&gt;文件抽象：对设备的抽象，按名存取&lt;/li&gt;
&lt;li&gt;原因：防止硬件资源被应用程序滥用，屏蔽复杂的硬件资源操作细节，为应用程序提供使用硬&lt;br /&gt;
件资源的简单且一致的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简述 IO 软件的四层结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616165104832.png&#34; alt=&#34;image-20230616165104832&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简述虚存分页的原理，并画出流程图&lt;br /&gt;
原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主存被划分成大小固定相等的块，每个进程也被分成同样大小的块；&lt;/li&gt;
&lt;li&gt;进程中称为页的块可以指定到内存中称为页框或者页框的可用块；&lt;/li&gt;
&lt;li&gt;操作系统为每个进程维护一个页表，给出该进程的每一页对应的页框的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjEwMDQxMjI5NDgucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621004122948.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230621004122948&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create 系统调用的参数，返回值是什么，实现原理是什么&lt;/p&gt;
&lt;p&gt;实现原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为新文件分配索引节点和活动索引节点，并把索引节点编号与文件分量名组成新目录项，记到目录中&lt;/li&gt;
&lt;li&gt;在新文件所对应的活动索引节点中设置初值，如置存取权限 i_mode，连接计数 i_nlink 等&lt;/li&gt;
&lt;li&gt;分配打开文件表项和系统打开文件表项，并为表项分配初值&lt;/li&gt;
&lt;li&gt;通过指针建立表项与活动索引节点间的联系。&lt;/li&gt;
&lt;li&gt;把文件描述字，即用户打开文件表中对应的表项序号返回给调用者&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open 系统调用的参数，返回值是什么，实现原理是什么&lt;/p&gt;
&lt;p&gt;参数：文件权限，文件路径名的字符串&lt;/p&gt;
&lt;p&gt;返回值：文件描述符&lt;/p&gt;
&lt;p&gt;实现原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检索目录，把它的外存索引节点复制到活动索引节点中来&lt;/li&gt;
&lt;li&gt;根据参数 mode 核对权限，如果非法，则打开失败&lt;/li&gt;
&lt;li&gt;合法时，为文件分配用户打开文件表项和系统打开文件表项，并为表项分配初值&lt;/li&gt;
&lt;li&gt;通过指针建立表项与活动索引节点间的联系。&lt;/li&gt;
&lt;li&gt;把文件描述字，即用户打开文件表中对应的表项序号返回给调用者&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合进程状态转换模型，解释操作系统是如何中断驱动的&lt;/p&gt;
&lt;p&gt;运行态：进程占用处理器运行&lt;/p&gt;
&lt;p&gt;就绪态：进程具备运行条件等待处理器运行&lt;/p&gt;
&lt;p&gt;等待态：又称阻塞态、睡眠态，进程由于等待资源、输入输出、信号等而不具备运行条件&lt;/p&gt;
&lt;p&gt;当操作系统遇到中断事件时，如键盘输入、I/O 操作完成时，它会将当前正在运行的进程切换到阻塞状态，并将 CPU 分配给一个已经处于就绪状态的进程。如果没有就绪状态的进程，则操作系统会将 CPU 保留在空闲状态，等待下一个进程变为就绪状态。&lt;br /&gt;
当事件完成后，操作系统会将被阻塞的进程重新切换到就绪状态，以便再次执行。在这个过程中，进程状态转换图的状态如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从运行状态转换到阻塞状态：当操作系统接收到中断请求时，正在运行的进程会被中断和放入&lt;br /&gt;
阻塞状态。&lt;/li&gt;
&lt;li&gt;从阻塞状态转换到就绪状态：当操作系统完成中断请求时，进程将被重新放回就绪状态，等待&lt;br /&gt;
操作系统重新分配 CPU 时间。&lt;br /&gt;
通过这种方式，操作系统可以实现中断驱动的机制，以处理来自外部设备的事件或请求。该机制使&lt;br /&gt;
得操作系统可以在不阻塞当前进程的情况下同时响应多个事件，并实现了 CPU 的高效利用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画多级反馈队列的模型图、阐述多级反馈的原理，比 RR 的优点、缺陷以及改进方法&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立多个不同优先级的就绪进程队列：&lt;/li&gt;
&lt;li&gt;多个就绪进程队列之间按照优先数调度&lt;/li&gt;
&lt;li&gt;单个就绪进程队列中的进程的优先数和时间片相同，按照先来先服务算法调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比 RR 的优点：优先级课调整、时间片大小可调整、适应性强、响应时间短&lt;/p&gt;
&lt;p&gt;缺陷：长时间运行的进程，可能会一直在较低的优先级队列中等待；算法复杂度高&lt;/p&gt;
&lt;p&gt;改进方法：引入抢占式调度、加强进程优先级管理、动态调整时间片大小&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621003159068.png&#34; alt=&#34;image-20230621003159068&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请画出经典的三进程状态模型及其状态转换图并解释状态之间各类转换关系的含义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621001913099.png&#34; alt=&#34;image-20230621001913099&#34; /&gt;&lt;/p&gt;
&lt;p&gt;运行态 - 等待态：等待资源、IO、信号量&lt;/p&gt;
&lt;p&gt;等待态 - 就绪态：资源满足、IO 结束、信号量完成&lt;/p&gt;
&lt;p&gt;就绪态 - 运行态：处理器空闲时选择高优先权进程抢占&lt;/p&gt;
&lt;p&gt;运行态 - 就绪态：运行时间片到，被高优先权进程抢占&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请画出经典的五进程状态模型及其状态转换图并解释状态之间各类转换关系的含义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621002239523.png&#34; alt=&#34;image-20230621002239523&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请画出经典的七进程状态模型及其状态转换图并解释状态之间各类转换关系的含义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621001848022.png&#34; alt=&#34;image-20230621001848022&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spooling 的设计思想，并画出系统组织结构图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将独占设备改成共享设备的技术&lt;/li&gt;
&lt;li&gt;采用预输入、缓输出和井管理技术&lt;/li&gt;
&lt;li&gt;通过创建守护进程和特殊目录解决独占型设备的空占问题&lt;/li&gt;
&lt;li&gt;缓和 CPU 的高速性与 IO 设备低速性之间的矛盾，以空间换时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTYxNTQyMDg4NzMucG5n&#34;&gt;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154208873.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20230616154208873&amp;quot; style=&amp;quot;zoom: 15%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;选择题补充除慕课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择题补充除慕课&#34;&gt;#&lt;/a&gt; 选择题补充（除慕课）&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172430646.png&#34; alt=&#34;image-20230620172430646&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620171158492.png&#34; alt=&#34;image-20230620171158492&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620171708030.png&#34; alt=&#34;image-20230620171708030&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172734904.png&#34; alt=&#34;image-20230620172734904&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172944360.png&#34; alt=&#34;image-20230620172944360&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际物理地址 = (段寄存器 &amp;lt;&amp;lt; 4) + 偏移地址&lt;/p&gt;
&lt;p&gt;访问到的是实地址。.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172958818.png&#34; alt=&#34;image-20230620172958818&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:/Users/QUAS/Desktop/image-20230620173008103.png&#34; alt=&#34;image-20230620173008103&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173014448.png&#34; alt=&#34;image-20230620173014448&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GDT LDT IDT（中断描述符表）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173020164.png&#34; alt=&#34;image-20230620173020164&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173209246.png&#34; alt=&#34;image-20230620173209246&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173216653.png&#34; alt=&#34;image-20230620173216653&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173226806.png&#34; alt=&#34;image-20230620173226806&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620183150718.png&#34; alt=&#34;image-20230620183150718&#34; /&gt;&lt;/p&gt;
</content>
        <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
        <category term="计算机操作系统" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <category term="计算机操作系统" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2023-06-21T06:43:47.000Z</updated>
    </entry>
</feed>
