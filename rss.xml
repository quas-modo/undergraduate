<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Carpe diem</title>
        <subtitle>pluck the day</subtitle>
        <icon>https://quas-modo.github.io/images/favicon.ico</icon>
        <link>https://quas-modo.github.io</link>
        <author>
          <name>quas-modo</name>
        </author>
        <description>notes/thoughts/nonsense</description>
        <language>zh-CN</language>
        <pubDate>Fri, 14 Oct 2022 10:57:07 +0800</pubDate>
        <lastBuildDate>Fri, 14 Oct 2022 10:57:07 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/</guid>
            <title>Lecture05-浮点数计算</title>
            <link>https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Fri, 14 Oct 2022 10:57:07 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;浮点数的加减乘除。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture08-浮点数运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture08-浮点数运算&#34;&gt;#&lt;/a&gt; Lecture08 - 浮点数运算&lt;/h1&gt;
&lt;h2 id=&#34;回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回顾&#34;&gt;#&lt;/a&gt; 回顾&lt;/h2&gt;
&lt;p&gt;记忆 1+8+23 的（符号位移码原码）&lt;/p&gt;
&lt;p&gt;记忆各种情况对应的表示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162002689.png&#34; alt=&#34;image-20221013162002689&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;加法和减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法和减法&#34;&gt;#&lt;/a&gt; 加法和减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162704448.png&#34; alt=&#34;image-20221013162704448&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查 0：如果有 0 存在可以不用计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对齐有效位：阶码向&lt;strong&gt;大值&lt;/strong&gt;对齐，因为右移较小的数而丢失的数字所造成的的影响较小。右移较小的数有效值的幅值部分 1 位，并将阶值加 1。&lt;strong&gt;如果两个数的阶值差别非常大，则较小的数丢失&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加或减有效值：&lt;strong&gt;原码加减法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规格化结果：把结果调整为左移有效值直到&lt;strong&gt;最高有效数字为非 0&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（右规最多是两位，最多是 1.1111...+1.xxxx，对应有效值的上溢）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#溢出&#34;&gt;#&lt;/a&gt; 溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013164459041.png&#34; alt=&#34;image-20221013164459041&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阶值上溢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		最大允许阶值 127（11111110）&lt;/p&gt;
&lt;p&gt;​		右移可能会导致阶值的上溢&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;阶值下溢&lt;/p&gt;
&lt;p&gt;最小阶值为 - 126（00000001）&lt;/p&gt;
&lt;p&gt;左移可能会引起阶值的下溢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效值的上下溢只存在于右规&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013171505053.png&#34; alt=&#34;image-20221013171503186&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常&#34;&gt;#&lt;/a&gt; 异常&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014093204887.png&#34; alt=&#34;image-20221014093204887&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;原码的加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码的加法&#34;&gt;#&lt;/a&gt; 原码的加法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165531300.png&#34; alt=&#34;image-20221013165531300&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165721396.png&#34; alt=&#34;image-20221013165721396&#34; /&gt;&lt;/p&gt;
&lt;p&gt;求补的时候加了 2 的 n 次方&lt;/p&gt;
&lt;p&gt;有进位说明 a&amp;gt;b&lt;/p&gt;
&lt;p&gt;无进位说明 a&amp;lt;b&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014103516514.png&#34; alt=&#34;image-20221014103516514&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013172902710.png&#34; alt=&#34;image-20221013172902710&#34; /&gt;&lt;/p&gt;
&lt;p&gt;01111110 ——127    23 表示有 23 个零&lt;/p&gt;
&lt;p&gt;01111101 ——126    21 表示有 21 个零&lt;/p&gt;
&lt;p&gt;差了一位，左移一位&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173317582.png&#34; alt=&#34;image-20221013173317582&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1111110 127&lt;/p&gt;
&lt;p&gt;1111101 126&lt;/p&gt;
&lt;p&gt;然后给 0.4375 取个反&lt;/p&gt;
&lt;h2 id=&#34;乘法和除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法和除法&#34;&gt;#&lt;/a&gt; 乘法和除法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013163420919.png&#34; alt=&#34;image-20221013163420919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意乘法和除法的阶值计算 ——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乘法加 bias&lt;/li&gt;
&lt;li&gt;除法减 bias&lt;/li&gt;
&lt;li&gt;bias 的值为 127【通常，移码的偏移量为 2&lt;sup&gt;k-1&lt;/sup&gt; -1，移码的偏移量主要是看想表示多少个负数和多少个正数，阶码的范围是 - 126~127，-127 和 128 分别表示特殊的数】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法&#34;&gt;#&lt;/a&gt; 乘法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173727304.png&#34; alt=&#34;image-20221013173727304&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于乘法来说，只有右规。【1.x * 1.x 只可能超出】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173847536.png&#34; alt=&#34;image-20221013173847536&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174221322.png&#34; alt=&#34;image-20221013174221322&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最高两位为 01，不用处理。&lt;/p&gt;
&lt;h3 id=&#34;除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法&#34;&gt;#&lt;/a&gt; 除法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174335704.png&#34; alt=&#34;image-20221013174335704&#34; /&gt;&lt;/p&gt;
&lt;p&gt;x 和 y 可能都是 0，可能会报错或者是正负无穷&lt;/p&gt;
&lt;p&gt;对于除法来说，只有左规。【1.x/ 1.x 】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174656673.png&#34; alt=&#34;image-20221013174656673&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;精度保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度保护&#34;&gt;#&lt;/a&gt; 精度保护&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174820265.png&#34; alt=&#34;image-20221013174820265&#34; /&gt;&lt;/p&gt;
&lt;p&gt;y 需要左移一位对齐，所以最后一位 1 在不使用附加位的情况下会丢失。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175053246.png&#34; alt=&#34;image-20221013175053246&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一般而言，多余位的值超过了最低可表示位值的一半，则进位。&lt;/p&gt;
&lt;p&gt;重点关注 “10” 强制结果为偶数的分类讨论。如果结果的最低可表示位是 1，结果向上入；当最低可表示位是 0，结果向下入。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175347832.png&#34; alt=&#34;image-20221013175347832&#34; /&gt;&lt;/p&gt;
&lt;p&gt;朝 0 摄入，被截断值的幅值总是小于或等于更精确原值的幅值，在计算中产生一致的向下偏差。&lt;/p&gt;
&lt;h3 id=&#34;精度考虑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度考虑&#34;&gt;#&lt;/a&gt; 精度考虑&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014105545840.png&#34; alt=&#34;image-20221014105545840&#34; /&gt;&lt;/p&gt;
&lt;p&gt;x == (int)(float) x&lt;/p&gt;
&lt;p&gt;int 型有 32 位，但是 float 精度只能保存 24 位，会有精度的损失。&lt;/p&gt;
&lt;p&gt;x * x &amp;gt;=  0 否&lt;/p&gt;
&lt;p&gt;(D + F)  - D == F&lt;/p&gt;
&lt;p&gt;右边计算出来为 double 型，左边是 float&lt;/p&gt;
&lt;p&gt;只要有精度的丢失，就是 “否”&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/14/%E9%83%91%E9%92%A2%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6%E8%AE%AD%E7%BB%83%E8%90%A5/20221013-%E8%AE%A1%E7%AE%97%E6%9C%BA/</guid>
            <title>20221013-计算机</title>
            <link>https://quas-modo.github.io/2022/10/14/%E9%83%91%E9%92%A2%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6%E8%AE%AD%E7%BB%83%E8%90%A5/20221013-%E8%AE%A1%E7%AE%97%E6%9C%BA/</link>
            <category term="其他" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/" />
            <category term="行业研究" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6/" />
            <category term="行业研究" scheme="https://quas-modo.github.io/tags/%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6/" />
            <pubDate>Fri, 14 Oct 2022 00:23:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;计算机行业研究&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;海通计算机行业研究框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#海通计算机行业研究框架&#34;&gt;#&lt;/a&gt; 海通计算机行业研究框架&lt;/h1&gt;
&lt;h2 id=&#34;实事&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实事&#34;&gt;#&lt;/a&gt; 实事&lt;/h2&gt;
&lt;p&gt;上周五，拜登政府批准新规定，在未获美国商务部特别许可证情况下，禁止软硬件供应商生产 18 纳米以下的 DRAM 芯片、128 层或以上 NAND 存储芯片以及逻辑芯片。此外，还明确禁止向被美国商务部列入黑名单的中国 28 家公司出售更广泛的半导体技术（或传统逻辑芯片）；禁止制造商出口使用美国硬件或软件制造的人工智能芯片。这些规定，适用于所有在美国注册的公司，即使在美国境外。再有，禁止向中国供应这些芯片的设备。&lt;/p&gt;
&lt;p&gt;美国限制中国，让中国和美国的芯片有代差级优势，但高性能芯片将用于无人机、人工智能、超算、军工等。只给中国做低端的芯片。&lt;/p&gt;
&lt;h2 id=&#34;计算机行业梳理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机行业梳理&#34;&gt;#&lt;/a&gt; 计算机行业梳理&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235102149.png&#34; alt=&#34;image-20221013235102149&#34; /&gt;&lt;/p&gt;
&lt;p&gt;计算机行业&lt;br /&gt;
 A 股人均创收 70-80 万，人均创利 7-8 万，美股人均创收 200-300 万。&lt;/p&gt;
&lt;p&gt;商业模式分为平台型、产品型、项目型，毛利率高达 70% 可以称为产品型。&lt;/p&gt;
&lt;h4 id=&#34;水平分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#水平分类&#34;&gt;#&lt;/a&gt; 水平分类&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235355825.png&#34; alt=&#34;image-20221013235355825&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;垂直分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#垂直分类&#34;&gt;#&lt;/a&gt; 垂直分类&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235418071.png&#34; alt=&#34;image-20221013235418071&#34; /&gt;&lt;/p&gt;
&lt;p&gt;软件产业个性大于共性，要看软件服务于哪个行业。&lt;br /&gt;
垂直行业以客户所处行业为区分，较大的有金融、电信、政府、制造等。软件行业依附于服务的行业，比如服务银行，银行较为稳定，服务银行的软件行业也比较稳定，增速比较快。&lt;/p&gt;
&lt;h3 id=&#34;子行业&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子行业&#34;&gt;#&lt;/a&gt; 子行业&lt;/h3&gt;
&lt;p&gt;重点领域：云计算基础 IT、软件、IT 服务、信息安全、大数据、人工智能、金融信息化、政务信息化、电力信息化、医疗信息化、交通信息化&lt;/p&gt;
&lt;p&gt;金融科技 —— 产品分割（每个公司专注于一个系统）&lt;br /&gt;
医疗信息化 —— 地域分割（每个公司在各个软件上的水平差不多，但主要业务集中在一个地域）&lt;br /&gt;
工业软件&lt;/p&gt;
&lt;h2 id=&#34;细分领域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#细分领域&#34;&gt;#&lt;/a&gt; 细分领域&lt;/h2&gt;
&lt;h3 id=&#34;人工智能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#人工智能&#34;&gt;#&lt;/a&gt; 人工智能&lt;/h3&gt;
&lt;p&gt;人工智能前期由政府投入，现在逐渐从 G 端转向 B 端再转向 C 端。&lt;br /&gt;
成本大幅度下降。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001113989.png&#34; alt=&#34;image-20221014001113989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001138528.png&#34; alt=&#34;image-20221014001138528&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h4&gt;
&lt;p&gt;应用于智慧城市、工业、智能网联汽车。&lt;/p&gt;
&lt;p&gt;AI 智慧教学系统多维度识别与分析&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001247795.png&#34; alt=&#34;image-20221014001247795&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001340849.png&#34; alt=&#34;image-20221014001340849&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001359801.png&#34; alt=&#34;image-20221014001359801&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001538543.png&#34; alt=&#34;image-20221014001538543&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001615073.png&#34; alt=&#34;image-20221014001615073&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;英伟达&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#英伟达&#34;&gt;#&lt;/a&gt; 英伟达&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001858282.png&#34; alt=&#34;image-20221014001858282&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;终端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端&#34;&gt;#&lt;/a&gt; 终端&lt;/h4&gt;
&lt;p&gt;逐渐有学习能力&lt;/p&gt;
&lt;p&gt;摄像头端&lt;/p&gt;
&lt;p&gt;智能视频分析&lt;/p&gt;
&lt;p&gt;视频监控&lt;/p&gt;
&lt;p&gt;安防&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002001941.png&#34; alt=&#34;image-20221014002001941&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002016834.png&#34; alt=&#34;image-20221014002016834&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002034532.png&#34; alt=&#34;image-20221014002034532&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;云计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算&#34;&gt;#&lt;/a&gt; 云计算&lt;/h3&gt;
&lt;p&gt;版权保护，用户付费习惯养成&lt;br /&gt;
单机游戏到网络游戏，大型游戏公司形成&lt;br /&gt;
通用型云化软件&lt;br /&gt;
专用型云化软件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002149228.png&#34; alt=&#34;image-20221014002149228&#34; /&gt;&lt;br /&gt;
Adobe 转型为定期收费时，财务报表数据变得更好看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002210396.png&#34; alt=&#34;image-20221014002210396&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见术语&#34;&gt;#&lt;/a&gt; 常见术语&lt;/h2&gt;
&lt;h3 id=&#34;市场渗透率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#市场渗透率&#34;&gt;#&lt;/a&gt; 市场渗透率&lt;/h3&gt;
&lt;p&gt;市场渗透率 = （实际销售量 * 100%） / （市场潜量 * 100%）&lt;/p&gt;
&lt;p&gt;市场渗透率低，说明企业这种产品大有市场空间。&lt;/p&gt;
&lt;h3 id=&#34;市场占有率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#市场占有率&#34;&gt;#&lt;/a&gt; 市场占有率&lt;/h3&gt;
&lt;p&gt;实际占有额度，即一个品牌产品的销售额在所有这个品类产品中的份额。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/10/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture02-03-%E5%8F%A4%E5%85%B8%E6%97%B6%E6%9C%9F-%E5%8F%A4%E7%BD%97%E9%A9%AC%E6%97%B6%E6%9C%9F/</guid>
            <title>Lecture02/03 古典时期 古罗马时期</title>
            <link>https://quas-modo.github.io/2022/10/10/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture02-03-%E5%8F%A4%E5%85%B8%E6%97%B6%E6%9C%9F-%E5%8F%A4%E7%BD%97%E9%A9%AC%E6%97%B6%E6%9C%9F/</link>
            <category term="其他" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/" />
            <category term="西方美术史" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/" />
            <category term="美术" scheme="https://quas-modo.github.io/tags/%E7%BE%8E%E6%9C%AF/" />
            <pubDate>Mon, 10 Oct 2022 17:39:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;古典时期和古罗马时期艺术&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;lecture02&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture02&#34;&gt;#&lt;/a&gt; Lecture02&lt;/h2&gt;
&lt;h3 id=&#34;古典时期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古典时期&#34;&gt;#&lt;/a&gt; 古典时期&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162712888.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;普拉克希特列斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#普拉克希特列斯&#34;&gt;#&lt;/a&gt; 普拉克希特列斯&lt;/h4&gt;
&lt;p&gt;最早的全裸女人雕塑，展现 S 曲线。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162746271.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;史柯帕斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#史柯帕斯&#34;&gt;#&lt;/a&gt; 史柯帕斯&lt;/h4&gt;
&lt;p&gt;还有其他神话也证明了阿波罗作为弓箭手的能力。其中一个神话是关于 Niobids 的破坏，即孩子尼俄伯。在希腊神话中，尼奥贝（Niobe) 是锡比卢斯（Sypylus）国王（利迪亚）坦塔卢斯 (Tantalus) 的女儿，底比斯的统治者安菲翁 (Amphion) 的妻子。尼奥比有六个儿子和六个女儿 (一些消息来源说她有七个儿子和七个女儿)，这是她的自尊心，如此之多，以至于她吹嘘自己的孩子比只有两个的勒托更有福气。泰坦尼克号对此感到恼火，并命令她的孩子们惩罚女王。因此，阿波罗用箭杀死了尼奥贝的儿子，而阿耳 emi 弥斯对她的女儿们也这样做。在神话的某些版本中，所有尼奥比德人都被杀死。&lt;/p&gt;
&lt;p&gt;然而，在另一本中，由于对 Leto 的热切祈祷，Chloris 得以幸存。据说 Chloris 后来与 Neleus 结婚，并且是 Trojan 战争期间希腊领导人之一的 Nestor 的母亲。在任何情况下，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162920746.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;断臂，但是很和谐。当时的审美标准是强调整体的和谐，而没有任何突出的地方。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010164534340.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;lecture03-古罗马美术和中世纪美术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture03-古罗马美术和中世纪美术&#34;&gt;#&lt;/a&gt; Lecture03  古罗马美术和中世纪美术&lt;/h2&gt;
&lt;h3 id=&#34;古罗马艺术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古罗马艺术&#34;&gt;#&lt;/a&gt; 古罗马艺术&lt;/h3&gt;
&lt;h4 id=&#34;好大喜功的建筑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#好大喜功的建筑&#34;&gt;#&lt;/a&gt; 好大喜功的建筑&lt;/h4&gt;
&lt;p&gt;万神殿，又译潘提翁神殿，是一座完整保存的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTclRTklQTklQUMlRTUlQjglOUQlRTUlOUIlQkQvMzA1OT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;罗马帝国&lt;/span&gt;时期建筑，始建于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQUMlRTUlODUlODMlRTUlODklOEQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;公元前&lt;/span&gt; 27-25 年，由&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTclRTklQTklQUMlRTUlQjglOUQlRTUlOUIlQkQvMzA1OT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;罗马帝国&lt;/span&gt;首任皇帝&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjElOEIlRTUlQTQlQTclRTclQkIlQjQvMTYxMjg1Mj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;屋大维&lt;/span&gt;的女婿&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOTglQkYlRTYlQTAlQkMlRTklODclOEMlRTUlQjglOTUvNzQ3NDUxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r&#34;&gt;阿格里帕&lt;/span&gt;建造，用以供奉&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlQTUlRTYlOUUlOTclRTUlOEMlQjklRTQlQkElOUElRTUlQjElQjE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;奥林匹亚山&lt;/span&gt;上诸神，可谓奥古斯都时期的经典建筑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170353129.png&#34; alt=&#34;image-20221010170353129&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170415910.png&#34; alt=&#34;image-20221010170415910&#34; /&gt;&lt;/p&gt;
&lt;p&gt;科洛西姆竞技场&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170723180.png&#34; alt=&#34;image-20221010170723180&#34; /&gt;&lt;/p&gt;
&lt;p&gt;凯旋门&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171042092.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图拉真纪念柱&lt;/p&gt;
&lt;p&gt;图拉真（Trajan, Marcus Ulpius Nerva Traianus，53 年 9 月 18 日 - 117 年 8 月 9 日），古代罗马&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlODklRTYlOTUlQTYlRTUlQjAlQkMlRTclOEUlOEIlRTYlOUMlOUQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;安敦尼王朝&lt;/span&gt;第二任皇帝，罗马&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOTQlRTglQjQlQTQlRTUlQjglOUQvNTM5NDQ1MD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;五贤帝&lt;/span&gt;之一，98－117 年在位。&lt;/p&gt;
&lt;p&gt;五贤帝 (5 Good Emperors)，又称五贤君，是在公元 96 年至 180 年期间统治罗马帝国的五位皇帝。他们分别为： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjYlODUlRTUlQjAlOTQlRTclOTMlQTYvMzYwNzI4Mz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;涅尔瓦&lt;/span&gt;（Nerva，96 年 —98 年）、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUIlQkUlRTYlOEIlODklRTclOUMlOUYvNDkwNTQ5P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r&#34;&gt;图拉真&lt;/span&gt;（Trajan，98 年 —117 年）、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTMlODglRTUlQkUlQjclRTglODklQUY/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;哈德良&lt;/span&gt;（Hadrian，117 年 —138 年，“勇帝”）、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlODklRTQlQjglOUMlRTUlQjAlQkMlQzIlQjclRTUlQkElODclRTYlOEElQTQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;安东尼・庇护&lt;/span&gt;（Antoninus Pius，138 年 —161 年，又译安东尼努斯・庇乌斯） 以及&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQTklQUMlRTUlOEYlQUYlQzIlQjclRTUlQTUlQTUlRTUlOEIlOTIlRTclOTUlOTk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;马可・奥勒留&lt;/span&gt;（Marcus Aurelius，161 年 —180 年，又译马克・安东尼努斯，或马尔库斯・奥列里乌斯，“哲学家皇帝”）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171201721.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;庞贝古城&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171614647.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;雕塑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雕塑&#34;&gt;#&lt;/a&gt; 雕塑&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171418967.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;《在死去的先辈头上翻制蜡像》&lt;/p&gt;
&lt;p&gt;追求写实&lt;/p&gt;
&lt;p&gt;屋大维 / 奥古斯都&lt;/p&gt;
&lt;p&gt;脸部刻画生动，但是手部和脚部粗糙&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171738845.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;弗拉维安王朝的少女肖像&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171928977.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;卡拉卡拉像&lt;/p&gt;
&lt;p&gt;用非写实方法写实（眼睛凹陷）&lt;/p&gt;
&lt;p&gt;暴君&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171958564.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;庞贝古城&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#庞贝古城&#34;&gt;#&lt;/a&gt; 庞贝古城&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012105812541.png&#34; alt=&#34;image-20221012105812541&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一风格&lt;/p&gt;
&lt;p&gt;庞贝红&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012105826460.png&#34; alt=&#34;image-20221012105826460&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/07/internet-computer/Lecture02-%E7%89%A9%E7%90%86%E5%B1%82/</guid>
            <title>Lecture02-物理层</title>
            <link>https://quas-modo.github.io/2022/10/07/internet-computer/Lecture02-%E7%89%A9%E7%90%86%E5%B1%82/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="互联网计算" scheme="https://quas-modo.github.io/categories/NJUSE/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Fri, 07 Oct 2022 09:38:59 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一些物理层的补充&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理层&#34;&gt;#&lt;/a&gt; 物理层&lt;/h1&gt;
&lt;h2 id=&#34;局域网介质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网介质&#34;&gt;#&lt;/a&gt; 局域网介质&lt;/h2&gt;
&lt;h3 id=&#34;utp-无屏蔽双绞线-unshielded-twisted-pair&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#utp-无屏蔽双绞线-unshielded-twisted-pair&#34;&gt;#&lt;/a&gt; UTP (无屏蔽双绞线 Unshielded Twisted Pair)&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100316364.png&#34; alt=&#34;image-20221013100316364&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一般认为有效范围为 100m&lt;/p&gt;
&lt;p&gt;UTP 是非屏蔽双绞线；&lt;strong&gt;STP&lt;/strong&gt; 是内每对线都包裹一层铝箔（共有 4 个单独的铝箔包裹），外编织网的双层屏蔽网线。&lt;/p&gt;
&lt;h4 id=&#34;类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型&#34;&gt;#&lt;/a&gt; 类型&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;直通线&lt;/li&gt;
&lt;li&gt;反转线&lt;/li&gt;
&lt;li&gt;交叉电缆&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;同轴电缆-coaxial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同轴电缆-coaxial&#34;&gt;#&lt;/a&gt; 同轴电缆 Coaxial&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100338119.png&#34; alt=&#34;image-20221013100338119&#34; /&gt;&lt;/p&gt;
&lt;p&gt;有效范围 500m 左右&lt;/p&gt;
&lt;h3 id=&#34;光缆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#光缆&#34;&gt;#&lt;/a&gt; 光缆&lt;/h3&gt;
&lt;h3 id=&#34;无线通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无线通信&#34;&gt;#&lt;/a&gt; 无线通信&lt;/h3&gt;
&lt;h3 id=&#34;无线传输手段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无线传输手段&#34;&gt;#&lt;/a&gt; 无线传输手段&lt;/h3&gt;
&lt;p&gt;激光&lt;/p&gt;
&lt;p&gt;红外线&lt;/p&gt;
&lt;p&gt;收音机&lt;/p&gt;
&lt;h2 id=&#34;介质和信号问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介质和信号问题&#34;&gt;#&lt;/a&gt; 介质和信号问题&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221007093055656.png&#34; alt=&#34;image-20221007093055656&#34; /&gt;&lt;/p&gt;
&lt;p&gt;网桥、交换机、路由器可以分割冲突域。&lt;/p&gt;
&lt;p&gt;到第二第三层 (分段后) 才能有效划分冲突域，第一层不能解决冲突问题&lt;/p&gt;
&lt;p&gt;。&lt;/p&gt;
&lt;h2 id=&#34;数据通信的基础信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据通信的基础信息&#34;&gt;#&lt;/a&gt; 数据通信的基础信息&lt;/h2&gt;
&lt;h3 id=&#34;编码方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码方式&#34;&gt;#&lt;/a&gt; 编码方式&lt;/h3&gt;
&lt;h4 id=&#34;5111-单极性编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5111-单极性编码&#34;&gt;#&lt;/a&gt; 5.11.1. 单极性编码&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/29.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/29.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：用 0 电平表示 &amp;quot;0&amp;quot;，正电平表示 &amp;quot;1&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;5112-极化编码不归零制码nrz-non-return-to-zero&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5112-极化编码不归零制码nrz-non-return-to-zero&#34;&gt;#&lt;/a&gt; 5.11.2. 极化编码：不归零制码 (NRZ: Non-Return to Zero)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/18.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/18.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不归零电平编码，原理：用负电平表示 &amp;quot;0&amp;quot;，正电平表示 &amp;quot;1&amp;quot; (或相反)，一定的中和。&lt;/p&gt;
&lt;h4 id=&#34;5113-极化编码归零制码rz-return-to-zero&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5113-极化编码归零制码rz-return-to-zero&#34;&gt;#&lt;/a&gt; 5.11.3. 极化编码：归零制码 (RZ: Return to Zero)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/19.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/19.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：用负电平表示 &amp;quot;0&amp;quot;，正电平表示 &amp;quot;1&amp;quot;(或 相反)，比特中位跳变到零电平，从而提供同步&lt;/p&gt;
&lt;h4 id=&#34;5114-极化编码曼彻斯特码manchester&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5114-极化编码曼彻斯特码manchester&#34;&gt;#&lt;/a&gt; 5.11.4. 极化编码：曼彻斯特码 (Manchester)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/20.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/20.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：每一位中间都有一个跳变，从低跳到高表示 &amp;quot;0&amp;quot;，从高跳到低表示 &amp;quot;1&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;5115-极化编码差分曼彻斯特码differential-manchester&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5115-极化编码差分曼彻斯特码differential-manchester&#34;&gt;#&lt;/a&gt; 5.11.5. 极化编码：差分曼彻斯特码 (Differential Manchester)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/21.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/21.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一位中间跳变：表示时钟&lt;/li&gt;
&lt;li&gt;每一位位前跳变：表示数据：有跳变表示 &amp;quot;0&amp;quot;，无跳变表示 &amp;quot;1&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5116-双极性编码双极性传号交替反转码ami&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5116-双极性编码双极性传号交替反转码ami&#34;&gt;#&lt;/a&gt; 5.11.6. 双极性编码：双极性传号交替反转码 (AMI)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/22.png&#34;&gt;&lt;img data-src=&#34;https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/22.png&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与 RZ 相同的是：采用三个电平：正、负与零&lt;/li&gt;
&lt;li&gt;与 RZ 不同的是：零电平表示 &amp;quot;0&amp;quot;，正负电平的跃迁表示 “1”，实现对 &amp;quot;1&amp;quot; 电平的交替反转。&lt;/li&gt;
&lt;li&gt;优点：
&lt;ol&gt;
&lt;li&gt;对每次出现的 &amp;quot;1&amp;quot; 交替反转，使直流分量为 0&lt;/li&gt;
&lt;li&gt;尽管连续 &amp;quot;0&amp;quot; 不能同步，但连续 &amp;quot;1&amp;quot; 可以同步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;这次是 1 是高点位，下一次就是低电位。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</guid>
            <title>Lecture04-整数运算</title>
            <link>https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Tue, 04 Oct 2022 21:32:43 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;整数的加减乘除计算的实现。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;整数运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数运算&#34;&gt;#&lt;/a&gt; 整数运算&lt;/h1&gt;
&lt;h2 id=&#34;算术逻辑单元alu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算术逻辑单元alu&#34;&gt;#&lt;/a&gt; 算术逻辑单元 ALU&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110026189.png&#34; alt=&#34;image-20221012110026189&#34; /&gt;&lt;/p&gt;
&lt;p&gt;寄存器存储数据、结果、flags&lt;/p&gt;
&lt;p&gt;控制器控制 ALU 操作和数据传入的信号&lt;/p&gt;
&lt;h2 id=&#34;全加器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全加器&#34;&gt;#&lt;/a&gt; 全加器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110035166.png&#34; alt=&#34;image-20221012110035166&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注与或异或的符号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110051989.png&#34; alt=&#34;image-20221012110051989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算结果和进位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110059850.png&#34; alt=&#34;image-20221012110059850&#34; /&gt;&lt;/p&gt;
&lt;p&gt;F 可以理解为，是奇数个 1 的时候，结果为 1；是偶数个 1 的时候，结果为 0。&lt;/p&gt;
&lt;p&gt;进位则是，有两个 1 的时候即可进位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110111693.png&#34; alt=&#34;image-20221012110111693&#34; /&gt;&lt;/p&gt;
&lt;p&gt;异或门只能有&lt;strong&gt;两个&lt;/strong&gt;输入端，异或门的时延&lt;strong&gt;不一定为 3ty&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在网上找了一些实现异或的方法，可以看出，时延可以是 2ty 也可以是 3ty，应该是由异或门实现的方式决定的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log29.gif&#34; alt=&#34;logic equivalent&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log30.gif&#34; alt=&#34;implimentation using NAND&#34; /&gt;&lt;/p&gt;
&lt;p&gt;非门算不算时延？ &lt;strong&gt;非门算时延&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110147229.png&#34; alt=&#34;image-20221012110147229&#34; /&gt;&lt;/p&gt;
&lt;p&gt;减少了一个与门，但是时延仍然是 6ty&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110159471.png&#34; alt=&#34;image-20221012110159471&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里可以解释为，因为 X 和 Y 的或和异或仅在 X、Y 均为 1 时不同，但 X、Y 均为 1 时，前面的与为 1，并不影响结果，所以两个式子相等。&lt;/p&gt;
&lt;h2 id=&#34;串行进位行波进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串行进位行波进位加法器&#34;&gt;#&lt;/a&gt; 串行进位（行波进位）加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110210316.png&#34; alt=&#34;image-20221012110210316&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公式来源于前面的全加法器，理解一样。&lt;/p&gt;
&lt;p&gt;需要等待 “进位输出信号”，所以缺点是延迟慢。&lt;/p&gt;
&lt;h2 id=&#34;全先行进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全先行进位加法器&#34;&gt;#&lt;/a&gt; 全先行进位加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110215735.png&#34; alt=&#34;image-20221012110215735&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110224827.png&#34; alt=&#34;image-20221012110224827&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不需要等待 n-1 位算完，就可以开始计算第 n 位，把能计算的先提前计算好。&lt;/p&gt;
&lt;p&gt;1ty：Gi 和 Pi 的计算，Gi 和 Pi 的计算可以同时进行，只需要 1ty&lt;/p&gt;
&lt;p&gt;2ty：计算 C 的值，因为需要先进行与操作，再进行或操作，所以需要 2ty，因为 Ci 只和 P\G\C0 的值有关，所以不需要等前一位的进位算好。&lt;/p&gt;
&lt;p&gt;3ty：Xi 和 Yi 的异或可在前三个时延做好，只需要再和 Ci-1 做异或即可算出 F。&lt;/p&gt;
&lt;h2 id=&#34;部分先行进位加法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分先行进位加法器&#34;&gt;#&lt;/a&gt; 部分先行进位加法器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110230663.png&#34; alt=&#34;image-20221012110230663&#34; /&gt;&lt;/p&gt;
&lt;p&gt;加法器延迟过于严重，但是全先行进位又难以实现，所以采用了两者的混合杂交。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110240165.png&#34; alt=&#34;image-20221012110240165&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3ty：第一个全先行加法器需要算出 G、P，耗时 1ty；然后需要算出所有的进位，耗时 2ty；与此同时，其他三个 CLA 也算好了自己的 G 和 P。&lt;/p&gt;
&lt;p&gt;2ty：第二个 CLA 收到 Cin 之后，需要 2ty 计算 Cout。&lt;/p&gt;
&lt;p&gt;2ty：同上，为第三个 CLA 的计算。&lt;/p&gt;
&lt;p&gt;5ty：2ty+3ty，第四个 CLA 计算 C 需要 2ty，然后再和 X、Y 进行异或操作，需要 3ty。在此之前，其余的 CLA 已经完成了异或计算。&lt;/p&gt;
&lt;h2 id=&#34;加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加法&#34;&gt;#&lt;/a&gt; 加法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110246821.png&#34; alt=&#34;image-20221012110246821&#34; /&gt;&lt;/p&gt;
&lt;p&gt;溢出的情况只能是两个正的变成负的，或者两个负的变成正的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Xn&lt;/th&gt;
&lt;th&gt;Yn&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;Fn&lt;/th&gt;
&lt;th&gt;overflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;判断是否溢出的 flag 就是在 Cn-1 和 Cn 上加一个异或器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Xn&lt;/th&gt;
&lt;th&gt;Yn&lt;/th&gt;
&lt;th&gt;Cn-1&lt;/th&gt;
&lt;th&gt;Cn&lt;/th&gt;
&lt;th&gt;overflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;溢出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;不溢出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#减法&#34;&gt;#&lt;/a&gt; 减法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110254314.png&#34; alt=&#34;image-20221012110254314&#34; /&gt;&lt;/p&gt;
&lt;p&gt;减法就是在加法器上加一个选择器，sub 给一个信号&lt;/p&gt;
&lt;h2 id=&#34;乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法&#34;&gt;#&lt;/a&gt; 乘法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110300471.png&#34; alt=&#34;image-20221012110300471&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上，加法和移位可以合并，因为始终上升沿到来之前，各寄存器中的数据会被取出，因此不需要 2-3 个时钟周期，1 个时钟周期即可完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110306067.png&#34; alt=&#34;image-20221012110306067&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110312495.png&#34; alt=&#34;image-20221012110312495&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于乘法会出现溢出的问题，所以出现了原码一位乘法和布斯算法。&lt;/p&gt;
&lt;h3 id=&#34;原位一位乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原位一位乘法&#34;&gt;#&lt;/a&gt; 原位一位乘法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110326698.png&#34; alt=&#34;image-20221012110326698&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;补码一位乘法布斯算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码一位乘法布斯算法&#34;&gt;#&lt;/a&gt; 补码一位乘法：布斯算法&lt;/h3&gt;
&lt;h4 id=&#34;基本思路和证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思路和证明&#34;&gt;#&lt;/a&gt; 基本思路和证明&lt;/h4&gt;
&lt;p&gt;每次根据两位决定直接移位 / 加 / 减（共四种情况）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;00、11—— 直接移位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10&lt;/strong&gt; —— 减&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;01&lt;/strong&gt; —— 加&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;黑书证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑书证明&#34;&gt;#&lt;/a&gt; 黑书证明&lt;/h4&gt;
&lt;p&gt;用 **2 &lt;sup&gt;n&lt;/sup&gt; + 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + 2 &lt;sup&gt;n-k&lt;/sup&gt; = 2 &lt;sup&gt;n+1&lt;/sup&gt; - 2 &lt;sup&gt;n-k&lt;/sup&gt;** 可以表示正乘数和负乘数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009234843548.png&#34; alt=&#34;image-20221009234843548&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009235208579.png&#34; alt=&#34;image-20221009235208579&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ppt证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppt证明&#34;&gt;#&lt;/a&gt; PPT 证明&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110337646.png&#34; alt=&#34;image-20221012110337646&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为什么可以这样用布斯算法计算？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6D18DEB3A3D802AB3B7AE9DB900A475C.png&#34; alt=&#34;img&#34; /&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110345029.png&#34; alt=&#34;image-20221012110345029&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;易错点算数移位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#易错点算数移位&#34;&gt;#&lt;/a&gt; 易错点：算数移位&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110426386.png&#34; alt=&#34;image-20221012110426386&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110429745.png&#34; alt=&#34;image-20221012110429745&#34; /&gt;&lt;/p&gt;
&lt;p&gt;错误原因：补位负数补 1，不论是何种情况，右移都使得 A 的最左位，即 A&lt;sub&gt;n-1&lt;/sub&gt; 不仅移入 A&lt;sub&gt;n-2&lt;/sub&gt; 中，而且还保留在 A&lt;sub&gt;n-1&lt;/sub&gt; 中。这是为了保持 A 和 Q 中数的符号，因为它&lt;strong&gt;保留了符号位&lt;/strong&gt;，所以被称为&lt;strong&gt;算数移位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上，根据黑书，应该还有一位 Q&lt;sub&gt;-1&lt;/sub&gt; 寄存器，放在 Q 最低有效位的右边，负责保存丢失的那位。&lt;/p&gt;
&lt;h3 id=&#34;乘法溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乘法溢出&#34;&gt;#&lt;/a&gt; 乘法溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110434583.png&#34; alt=&#34;image-20221012110434583&#34; /&gt;&lt;/p&gt;
&lt;p&gt;带符号整数：因为乘法的补位是根据当前最高位计算的，如果有变化，则说明有溢出&lt;/p&gt;
&lt;p&gt;无符号整数：无符号整数应该没有 1 的出现&lt;/p&gt;
&lt;h2 id=&#34;除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法&#34;&gt;#&lt;/a&gt; 除法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100038320.png&#34; alt=&#34;image-20221013100038320&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不同的高级算法对于 1/0 0/0 的计算结果处理是不同的&lt;/p&gt;
&lt;p&gt;如在 js 中，1/0 为正无穷；c 中会报错&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110438424.png&#34; alt=&#34;image-20221012110438424&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在十进制除法中，需要用到乘法；在二进制中则不需要。&lt;/p&gt;
&lt;p&gt;除数和被除数符号不一样时，不同的编程语言也会得到不一样的答案。&lt;/p&gt;
&lt;p&gt;注意补齐被除数的符号位，从&lt;strong&gt;次高位&lt;/strong&gt;开始计算。&lt;/p&gt;
&lt;h3 id=&#34;除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#除法器&#34;&gt;#&lt;/a&gt; 除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110445518.png&#34; alt=&#34;image-20221012110445518&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对应于手工进行除法运算，&lt;/p&gt;
&lt;p&gt;因为需要补全被除数的位数，所以需要 2n 寄存器；&lt;/p&gt;
&lt;p&gt;因为除数相对于被除数的次高位开始移动，所以需要 2n 位支持右移的寄存器；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110451162.png&#34; alt=&#34;image-20221012110451162&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110454561.png&#34; alt=&#34;image-20221012110454561&#34; /&gt;&lt;/p&gt;
&lt;p&gt;除法流程图 —— “是否为第&lt;strong&gt; N+1&lt;/strong&gt; 次循环”&lt;/p&gt;
&lt;p&gt;和乘法不同 ——&lt;strong&gt;N&lt;/strong&gt; 次循环&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何做优化？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见的思路 —— 并行操作 / 硬件节省&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不能够做并行操作&lt;/p&gt;
&lt;p&gt;可以做一些硬件的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;优化的除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优化的除法器&#34;&gt;#&lt;/a&gt; 优化的除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110458490.png&#34; alt=&#34;image-20221012110458490&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;异号的除法如何处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异号的除法如何处理&#34;&gt;#&lt;/a&gt; 异号的除法如何处理？&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110504455.png&#34; alt=&#34;image-20221012110504455&#34; /&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110514117.png&#34; alt=&#34;image-20221012110514117&#34; /&gt;&lt;/p&gt;
&lt;p&gt;结果都是&lt;strong&gt;和余数进行比较&lt;/strong&gt;，操作之后，如果相对于余数的符号改变，则不够；如果相对于余数的符号不变，则够。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;可以对照上下（36、37）两张图理解异号的除法，&lt;/p&gt;
&lt;p&gt;被除数为 11111001，它的值为 - 7&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1111 + 0011 为 10010 符号改变&lt;/li&gt;
&lt;li&gt;1110 + 0011 为 10001 符号改变&lt;/li&gt;
&lt;li&gt;1100 + 0011 为 1111 符号不变，且绝对值减小，因此可以加，且商上 1&lt;/li&gt;
&lt;li&gt;1111 + 0011 符号改变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010003001858.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考黑书的话，&lt;/p&gt;
&lt;p&gt;余数的符号 = 被除数&lt;/p&gt;
&lt;p&gt;商的符号 = 被除数 * 除数&lt;/p&gt;
&lt;p&gt;因此，此题中，商和余数都需要取负数，所以商要取补码&lt;/p&gt;
&lt;h3 id=&#34;补码除法运算过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码除法运算过程&#34;&gt;#&lt;/a&gt; 补码除法运算过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110521683.png&#34; alt=&#34;image-20221012110521683&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110524618.png&#34; alt=&#34;image-20221012110524618&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;不恢复余数除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不恢复余数除法&#34;&gt;#&lt;/a&gt; 不恢复余数除法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110534163.png&#34; alt=&#34;image-20221012110534163&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以参考之前的恢复余数的操作理解&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110539289.png&#34; alt=&#34;image-20221012110539289&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如何理解大致思路：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4C93EBA825F2B3B083A9B5CC5D1E567D.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由下面的通式表示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ri+1=2ri+(1-2Qi)Y&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;式中 Qi 为第 i 次所得的商，若部分余数为正，则 Qi=1，部分余数左移一位，下一次继续减除数；若部分余数为负，则 Qi=0，部分余数左移一位，下一次加除数。由于加减运算交替地进行，故称为原码加减交替法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;补码不恢复余数除法流程图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码不恢复余数除法流程图&#34;&gt;#&lt;/a&gt; 补码不恢复余数除法流程图&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221006172646381.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110545429.png&#34; alt=&#34;image-20221012110545429&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同号说明 “够大”，异号说明 “不够大”&lt;/p&gt;
&lt;p&gt;注意不恢复余数补码除法分为两个流程，首先需要判断符号然后初始化。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110550193.png&#34; alt=&#34;image-20221012110550193&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算流程&lt;/strong&gt;理解：&lt;/p&gt;
&lt;p&gt;流程一：因为余数和除数异号，所以采用加的方式。加完后发现同号（实际上是由异号变为同号），补 1，实际上是取反的操作。&lt;/p&gt;
&lt;p&gt;流程二：根据 X 和 Y 是否同号，继续操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于商的修正&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Z 左移一位，根据是否够加，上 1 或 0。&lt;/p&gt;
&lt;p&gt;如果被除数和除数异号，说明商是负数。在求每一位的时候，已经取了反，因此再加 1 即可。这样的操作，比最后再计算商的总体的补码简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于余数的修正&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;余数和被除数的符号相同。&lt;/p&gt;
&lt;p&gt;如果符号不同，则说明余数多加 / 多减了一个除数。如果被除数和除数的符号相同，说明余数和除数符号不相同，加上除数进行修正；如果被除数和除数符号不同，说明余数和除数符号相同，减去除数进行修正。&lt;/p&gt;
&lt;p&gt;在最后多加了一个 Y&lt;/p&gt;
&lt;p&gt;符号位，不恢复余数补码除法运算和除数比，恢复的和被除数相比&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110557310.png&#34; alt=&#34;image-20221012110557310&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为除法器效率不高，所以用右移运算实现简化&lt;/p&gt;
&lt;p&gt;能整除的时候，被移除的全为 0；&lt;/p&gt;
&lt;p&gt;不能整除的时候，移除的数存在非 0，&lt;/p&gt;
&lt;p&gt;-14/4 负数补位 1&lt;/p&gt;
&lt;h3 id=&#34;阵列除法器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阵列除法器&#34;&gt;#&lt;/a&gt; 阵列除法器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110601896.png&#34; alt=&#34;image-20221012110601896&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际生活中并不是斜着排列的&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110605353.png&#34; alt=&#34;image-20221012110605353&#34; /&gt;&lt;/p&gt;
&lt;p&gt;全加器是两个半加器组合起来的，半加器不考虑进位。&lt;/p&gt;
&lt;p&gt;全加器算了两次 X+Y：第一次 X+Y 得到 Z，第二次 Z+Cin 得到结果。&lt;/p&gt;
&lt;p&gt;注意各整数运算的优化过程&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/10/04/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/</guid>
            <title>Lecture07-程序组织</title>
            <link>https://quas-modo.github.io/2022/10/04/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Tue, 04 Oct 2022 20:07:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;内联函数、ROP、头文件、namespace、宏&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture-07&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture-07&#34;&gt;#&lt;/a&gt; Lecture 07&lt;/h1&gt;
&lt;h1 id=&#34;程序组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序组织&#34;&gt;#&lt;/a&gt; 程序组织&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194251637.png&#34; alt=&#34;image-20221004194251637&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头文件&#34;&gt;#&lt;/a&gt; 头文件&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194306679.png&#34; alt=&#34;image-20221004194306679&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h3&gt;
&lt;p&gt;程序级&lt;/p&gt;
&lt;p&gt;文件级&lt;/p&gt;
&lt;p&gt;函数级&lt;/p&gt;
&lt;p&gt;块级&lt;/p&gt;
&lt;h3 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h3&gt;
&lt;p&gt;main 函数中的变量的生命周期一般是整个程序。&lt;/p&gt;
&lt;p&gt;idle pointer&lt;/p&gt;
&lt;h3 id=&#34;头文件中包含的内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头文件中包含的内容&#34;&gt;#&lt;/a&gt; 头文件中包含的内容&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;常量定义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195026698.png&#34; alt=&#34;image-20221004195026698&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量 / 函数定义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194957282.png&#34; alt=&#34;image-20221004194957282&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译预处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型定义（class\ 接口）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内联函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# include&amp;quot;a.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;井号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译预处理，把头文件的&lt;strong&gt;复制&lt;/strong&gt;过来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要不在头文件中，就不能更改 —— 加上&lt;strong&gt; static &lt;strong&gt;，把变量或者函数的程序级限制到&lt;/strong&gt;文件级&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认属性是 static&lt;/p&gt;
&lt;p&gt;写在另外 &amp;quot;const.h&amp;quot; 文件中&lt;/p&gt;
&lt;h2 id=&#34;namespace&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#namespace&#34;&gt;#&lt;/a&gt; namespace&lt;/h2&gt;
&lt;h3 id=&#34;两种形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两种形式&#34;&gt;#&lt;/a&gt; 两种形式&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195211541.png&#34; alt=&#34;image-20221004195211541&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;declaration (绝对路径)&lt;/li&gt;
&lt;li&gt;directive（批量处理）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;details&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#details&#34;&gt;#&lt;/a&gt; details&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004200112776.png&#34; alt=&#34;image-20221004200112776&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;别名&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; American_Telephone_and_Telegraph &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;…… &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; ATT &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; American_Telephone_and_Telegraph&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;  a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; X&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         a&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         X&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开放&lt;/p&gt;
&lt;p&gt;可以在代码别的位置重新增加函数、变量&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可嵌套&lt;/p&gt;
&lt;p&gt;软工：：三班::quasdo&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; L1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; L2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;L1&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; L1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;L2&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; B&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     ……&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;‘&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;’&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重载 —— 有可能造成冲突和语义的错误&lt;/p&gt;
&lt;p&gt;可能在 namespace A 和 namespace B 中均定义了同一个函数名，因此&lt;strong&gt;不建议在同一作用域两次使用 using-directive&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;编译预处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译预处理&#34;&gt;#&lt;/a&gt; 编译预处理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195709681.png&#34; alt=&#34;image-20221004195709681&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;gcc&lt;/em&gt; &lt;em&gt;-7 -&lt;strong&gt;Dsqrt&lt;/strong&gt;=rand -&lt;strong&gt;Dreturn&lt;/strong&gt;=exit&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;define sqrt rand&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然编译预处理可能会造成问题，但因为难以找到更好的结构且高效的替代品，没有取缔。&lt;/p&gt;
&lt;h2 id=&#34;宏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏&#34;&gt;#&lt;/a&gt; 宏&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195913290.png&#34; alt=&#34;image-20221004195913290&#34; /&gt;&lt;/p&gt;
&lt;p&gt;while 后缺少；&lt;/p&gt;
&lt;p&gt;形成完美的语句（不产生多余的空语句）&lt;/p&gt;
&lt;p&gt;eight queen 八皇后问题，可用递归的方式求解&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/29/cpp/Lecture06-%E5%87%BD%E6%95%B0/</guid>
            <title>Lecture06-函数</title>
            <link>https://quas-modo.github.io/2022/09/29/cpp/Lecture06-%E5%87%BD%E6%95%B0/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Thu, 29 Sep 2022 16:22:20 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;cpp 中的函数&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture06-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture06-函数&#34;&gt;#&lt;/a&gt; Lecture06 - 函数&lt;/h1&gt;
&lt;h2 id=&#34;运行时环境-runtime-environment&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行时环境-runtime-environment&#34;&gt;#&lt;/a&gt; 运行时环境 runtime environment&lt;/h2&gt;
&lt;p&gt;永远分配 full stay（？）-- 早期变量存储不分全局变量和局部变量，比较浪费空间，无法使用 recursive 递归&lt;/p&gt;
&lt;p&gt;dynamic-- 函数调用完即刻回收，支持递归，节约空间&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//x 地址什么时候填入（符号表、link 时）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;增加函数 function 需要在 stack 中付出代价 cost&lt;/p&gt;
&lt;p&gt;stack 编译器帮助程序员做好&lt;/p&gt;
&lt;p&gt;heap 中存储动态变量，编译器未知&lt;/p&gt;
&lt;p&gt;Dynamic-link library DLL 动态链接库&lt;/p&gt;
&lt;p&gt;在代码段中，以一个函数为基本单位&lt;/p&gt;
&lt;p&gt;为什么 code、data、stack、heap 中不能 x（执行）？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击（断章取义）—— 利用看似正常的代码段。攻击操作系统。从头操作则没有问题。避免攻击，取消了执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;name-mangling&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name-mangling&#34;&gt;#&lt;/a&gt; name mangling&lt;/h3&gt;
&lt;p&gt;c 中 func 不可以重载，但是 cpp 中函数可以重载（参数可以不同），func 不能够唯一指代。&lt;/p&gt;
&lt;p&gt;cpp 中加了一些表示 --name mangling。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//cpp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//_Z4funci  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//_Z4funcid&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;要告诉编译器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;extern = &amp;quot;C&amp;quot; // 编译的是 c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原则和执行机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原则和执行机制&#34;&gt;#&lt;/a&gt; 原则和执行机制&lt;/h2&gt;
&lt;h3 id=&#34;原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原则&#34;&gt;#&lt;/a&gt; 原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;定义不允许嵌套（函数中不能有另外一个 definition）&lt;/li&gt;
&lt;li&gt;先定义后使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;函数的执行机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数的执行机制&#34;&gt;#&lt;/a&gt; 函数的执行机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立被调用函数的栈空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值传递 call by value（c 中只有值传递，想要改变原值需要指针）&lt;/li&gt;
&lt;li&gt;引用传递 call by reference（cpp 中的隐式指针）int &amp;amp;a&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存调用函数的运行状态（回来之后还要接着执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将控制转交被调函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;EBP&lt;/strong&gt; extended base pointer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ESP&lt;/strong&gt; extended stack pointer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EIP&lt;/strong&gt; is a register in x86 architectures (32bit). It holds the &amp;quot;Extended Instruction Pointer&amp;quot; for the stack. In other words, it tells the computer where to go next to execute the next command and controls the flow of a program.&lt;/p&gt;
&lt;p&gt;stack &lt;strong&gt;从 high 到 low 增长&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何调用函数-以及函数付出的代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何调用函数-以及函数付出的代价&#34;&gt;#&lt;/a&gt; 如何调用函数 以及函数付出的代价&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;__cdecl&lt;/p&gt;
&lt;p&gt;__stdcall&lt;/p&gt;
&lt;p&gt;__fastcall&lt;/p&gt;
&lt;p&gt;__thiscall&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 从右往左传递参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在函数中需要初始化变量，编译器在返回时，不会主动清理 stack 中的数据&lt;/p&gt;
&lt;h3 id=&#34;cost&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cost&#34;&gt;#&lt;/a&gt; cost&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;付出指令的开销&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;付出栈的开销&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;summary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#summary&#34;&gt;#&lt;/a&gt; Summary&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;加载参数 (进栈)&lt;/li&gt;
&lt;li&gt;保存上下文环境
&lt;ul&gt;
&lt;li&gt;保存返回地址&lt;/li&gt;
&lt;li&gt;保存调用者基指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行函数
&lt;ul&gt;
&lt;li&gt;设置新的基指针&lt;/li&gt;
&lt;li&gt;分配空间 (可选)&lt;/li&gt;
&lt;li&gt;执行一些任务&lt;/li&gt;
&lt;li&gt;释放空间 (如果分配了的话)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恢复上下文环境
&lt;ul&gt;
&lt;li&gt;加载调用者基指针&lt;/li&gt;
&lt;li&gt;加载返回指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继续执行调用者的功能 a&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;静态成员函数和非静态成员函数的差别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态成员函数和非静态成员函数的差别&#34;&gt;#&lt;/a&gt; 静态成员函数和非静态成员函数的差别&lt;/h3&gt;
&lt;p&gt;静态成员函数中没有 this，非静态成员函数有 this&lt;/p&gt;
&lt;p&gt;静态成员函数形同于全局函数&lt;/p&gt;
&lt;h3 id=&#34;printf和cout&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printf和cout&#34;&gt;#&lt;/a&gt; printf 和 cout&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; format&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可变参数可被利用，进行攻击。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;p&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;cout 是个&lt;strong&gt;对象&lt;/strong&gt;，cout &amp;lt;&amp;lt;&amp;quot;c&amp;quot; 是一个新的对象&lt;/p&gt;
&lt;h3 id=&#34;stdcall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stdcall&#34;&gt;#&lt;/a&gt; stdcall&lt;/h3&gt;
&lt;p&gt;调用者借还参数&lt;/p&gt;
&lt;p&gt;参数未知长度&lt;/p&gt;
&lt;p&gt;复用次数多，消耗空间和时间&lt;/p&gt;
&lt;h3 id=&#34;fastcall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fastcall&#34;&gt;#&lt;/a&gt; fastcall&lt;/h3&gt;
&lt;p&gt;寄存器有限，如果要用更多的寄存器，就要保存更多的数据（现场）&lt;/p&gt;
&lt;p&gt;其实最多有两个参数 move 到寄存器，再有多的参数，就需要 push 了&lt;/p&gt;
&lt;h2 id=&#34;函数原型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数原型&#34;&gt;#&lt;/a&gt; 函数原型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;原型，只需要类型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;遵守先定义后使用原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自由安排函数定义位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只需参数类型，无需参数名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译器检查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数原型：只需要看到函数名和参数读取到即可:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int func(int,int)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在调用点一定要能看到接口&lt;/li&gt;
&lt;li&gt;仅仅需要函数名和参数类型即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数原型应当放置在头文件中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;函数重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数重载&#34;&gt;#&lt;/a&gt; 函数重载&lt;/h2&gt;
&lt;p&gt;type conversion&lt;/p&gt;
&lt;h3 id=&#34;原则-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原则-2&#34;&gt;#&lt;/a&gt; 原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;名同，参数不同（个数、类型、顺序）&lt;/li&gt;
&lt;li&gt;返回值类型不作为区别重载函数的依据&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;匹配原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匹配原则&#34;&gt;#&lt;/a&gt; 匹配原则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Polymorphism 多态&lt;/strong&gt; -&amp;gt; 增强语言的丰富性和灵活性 -&amp;gt; 一名多用，并不只存在 OO programming 中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;严格&lt;/li&gt;
&lt;li&gt;内部转换&lt;/li&gt;
&lt;li&gt;用户定义的转换&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;void f(long); void f(double);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;f(10);&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;10 既可以是 int 也可以是 double，编译器会感到困惑，&lt;strong&gt;ambiguous&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;函数-默认参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数-默认参数&#34;&gt;#&lt;/a&gt; 函数 - 默认参数&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;默认参数的声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#默认参数的声明&#34;&gt;#&lt;/a&gt; 默认参数的声明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;函数&lt;strong&gt;原型&lt;/strong&gt;中给出  -&amp;gt;  &lt;strong&gt;是给使用点看的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;先定义的函数中给出&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;默认参数的顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#默认参数的顺序&#34;&gt;#&lt;/a&gt; 默认参数的顺序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从右到左&lt;/li&gt;
&lt;li&gt;不间断&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;默认参数与函数重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#默认参数与函数重载&#34;&gt;#&lt;/a&gt; 默认参数与函数重载&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;void f(int);  void f(int, int=2);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ambiguous&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h1&gt;
&lt;p&gt;Q1、能在不降低可读性的前提下，降低 COST 吗？&lt;/p&gt;
&lt;p&gt;HL src ---compiler----》 machine language&lt;/p&gt;
&lt;p&gt;程序员看到的是函数，compiler 把 block 移到调用处&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设 function 有 1000 行，代码拉长，存储占用率大&lt;/li&gt;
&lt;li&gt;不再有递归&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;程序员主动提出：在 function 前写&lt;strong&gt; inline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Q2、使用 lib 需要注意什么？&lt;/p&gt;
&lt;p&gt;注意区分是哪种调用方式，哪种 compiler。&lt;/p&gt;
&lt;p&gt;c 中不允许重载，cpp 可以&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004190900029.png&#34; alt=&#34;image-20221004190900029&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;内联函数inline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内联函数inline&#34;&gt;#&lt;/a&gt; 内联函数 inline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高可读性&lt;/li&gt;
&lt;li&gt;提高效率&lt;/li&gt;
&lt;li&gt;解决了两个 cost 的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象: &lt;strong&gt;使用频率高、简单、小段代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单：没有 loop 或者 switch，不要有多个接口&lt;/p&gt;
&lt;p&gt;例如：OO 的 class 的 constructor 函数（构造函数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方法：编译系统将为 inline 函数创建一段代码，在调用点，用相应的代码替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;递归 —— 必须是非递归函数，因为已经加入主体部分了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数指针 —— 由编译系统控制，和编译器是完全相关的&lt;/p&gt;
&lt;p&gt;函数指针最主要的作用为写框架（framework）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inline 关键字 &lt;strong&gt;仅仅是请求&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有可能是递归，无法加入&lt;/li&gt;
&lt;li&gt;也有可能是很复杂的函数，导致无法理解 (上下文比较复杂)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提请 inline&lt;strong&gt; 被拒绝时是有代价的&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果对象的初始化 - 构造函数为明确给出，计算机会给出 inline 的构造函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏: &lt;code&gt;max(a,b) (a) &amp;gt; (b) ? (a) : (b)&lt;/code&gt; ：不同于 inline 函数，一定要有括号，因为运算数据中的优先级不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间局部性&lt;/strong&gt;：是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 空间局部性是指一旦程序访问了某个存储单元，则不久之后。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;空间局部性&lt;/strong&gt;：执行周边的代码的可能性很大，将附近的代码放到 cache 中，如果代码块过大，会造成抖动，cache 不断切换内存中的代码段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191015068.png&#34; alt=&#34;image-20221004191015068&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#攻击&#34;&gt;#&lt;/a&gt; 攻击&lt;/h2&gt;
&lt;h3 id=&#34;stack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stack&#34;&gt;#&lt;/a&gt; stack&lt;/h3&gt;
&lt;p&gt;攻击：在 stack 中写入地址执行&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;W 正交 X&lt;/li&gt;
&lt;li&gt;禁止写入&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;code&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#code&#34;&gt;#&lt;/a&gt; code&lt;/h3&gt;
&lt;p&gt;攻击：利用已有的代码进行攻击，比如利用 return 之前的语句&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;R 正交 X&lt;/li&gt;
&lt;li&gt;打乱顺序 load&lt;/li&gt;
&lt;li&gt;检测，如果多次跳转 / 踩点，则可能是攻击的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191213187.png&#34; alt=&#34;image-20221004191213187&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;rop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rop&#34;&gt;#&lt;/a&gt; ROP&lt;/h3&gt;
&lt;h4 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h4&gt;
&lt;p&gt;Return-oriented programming 返回导向编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名【&lt;strong&gt;代码签名&lt;/strong&gt;是对可执行文件或脚本进行数字签名。用来确认软件的来源并保证在签名后未被修改或损坏的措施】等。&lt;/p&gt;
&lt;p&gt;通过上一篇文章走进栈溢出，我们可以发现栈溢出的控制点是 ret 处，那么 ROP 的核心思想就是&lt;strong&gt;利用以 ret 结尾的指令序列把栈中的应该返回 EIP 的地址更改成我们需要的值&lt;/strong&gt;，从而控制程序的执行流程。&lt;/p&gt;
&lt;p&gt;ROP 方法技巧性很强，那它能完全胜任所有攻击吗？返回语句前的指令是否会因为功能单一，而无法实施预期的攻击目标呢？业界大牛已经过充分&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsLmFjbS5vcmcvY2l0YXRpb24uY2ZtP2RvaWQ9MTEwMjEyMC4xMTAyMTY1&#34;&gt;研究并证明&lt;/span&gt; ROP 方法是图灵完备的，换句话说， ROP 可以借用 libc 的指令实现任何逻辑功能。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/</guid>
            <title>Lecture03-数据的机器级表表示</title>
            <link>https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Fri, 23 Sep 2022 07:41:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;仅记录有用部分，课件详细内容在 ppt 上已经很清楚了。&lt;/p&gt;
&lt;p&gt;需要加强的地方：二进制转十进制，十进制转二进制，补码的模不懂，静默式和通知式，非规格化数不懂、精度保护中的舍入看不懂，大端小端&lt;/p&gt;
&lt;p&gt;好难…… 呜呜看不懂&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一次作业讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一次作业讲解&#34;&gt;#&lt;/a&gt; 第一次作业讲解&lt;/h2&gt;
&lt;p&gt;作业 1：. 为什么速率的总和没有意义？&lt;/p&gt;
&lt;p&gt;作业 2：指令集结构不同的计算机，只比较 MIPS 是没有意义的，例如此题当中，A 的 MIPS 大，但是运行时间较长。&lt;/p&gt;
&lt;p&gt;作业 3：采用不同指令集、&lt;strong&gt;流水线&lt;/strong&gt;和并行&lt;/p&gt;
&lt;p&gt;作业 4：MIPS 求和有意义吗？&lt;/p&gt;
&lt;p&gt;组织不可见，结构可见&lt;/p&gt;
&lt;h1 id=&#34;lecture0304-数据的机器级表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture0304-数据的机器级表示&#34;&gt;#&lt;/a&gt; lecture03/04 - 数据的机器级表示&lt;/h1&gt;
&lt;p&gt;参考紫书第 2 章 / 黑书第 9 章 计算机算数&lt;/p&gt;
&lt;h2 id=&#34;课堂ppt结合黑书版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课堂ppt结合黑书版本&#34;&gt;#&lt;/a&gt; 课堂 /ppt—— 结合黑书版本&lt;/h2&gt;
&lt;h3 id=&#34;信息的二进制编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息的二进制编码&#34;&gt;#&lt;/a&gt; 信息的二进制编码&lt;/h3&gt;
&lt;h3 id=&#34;整数的二进制表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的二进制表示&#34;&gt;#&lt;/a&gt; 整数的二进制表示&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数&#34;&gt;#&lt;/a&gt; 无符号整数&lt;/h4&gt;
&lt;h4 id=&#34;有符号整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数&#34;&gt;#&lt;/a&gt; 有符号整数&lt;/h4&gt;
&lt;h5 id=&#34;原码-符号幅值表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码-符号幅值表示法&#34;&gt;#&lt;/a&gt; 原码 符号幅值表示法&lt;/h5&gt;
&lt;p&gt;符号位不同，数值位相同&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位左移，空余的填补 0&lt;/p&gt;
&lt;p&gt;浮点数的尾数用原码定点小数表示&lt;/p&gt;
&lt;p&gt;零的表示不唯一，不利于程序员编程&lt;/p&gt;
&lt;h5 id=&#34;反码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反码&#34;&gt;#&lt;/a&gt; 反码&lt;/h5&gt;
&lt;p&gt;符号位和数值位均取反&lt;/p&gt;
&lt;h5 id=&#34;移码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移码&#34;&gt;#&lt;/a&gt; 移码&lt;/h5&gt;
&lt;p&gt;是一种有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2lnbmVkX251bWJlcl9yZXByZXNlbnRhdGlvbg==&#34;&gt;符号数表示&lt;/span&gt;的方法，其中有符号数 n 是由对应于&lt;strong&gt;无符号数 n + K&lt;/strong&gt; 的位模式表示，K 是&lt;em&gt;偏置值&lt;/em&gt;或&lt;em&gt;偏移量&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;bias 通常取 2 的 n-1 次方或者 2 的 n-1 次方减 1&lt;br /&gt;
 当 bias 为 2 的 n-1 次方时，移码和补码仅第一位不同，0 的表示唯一&lt;br /&gt;
&lt;strong&gt;浮点数的阶用移码表示&lt;/strong&gt;：当两个数都是负数的时候，移码更容易比较&lt;/p&gt;
&lt;h5 id=&#34;补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补码&#34;&gt;#&lt;/a&gt; 补码&lt;/h5&gt;
&lt;p&gt;计算机处理中，&lt;strong&gt;通常使用补码&lt;/strong&gt;&lt;br /&gt;
负数的数值部分 &lt;strong&gt;各位取反，末尾加 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同位长间的转换：符号位移到最左位，其余空出位用符号位的值替代&lt;/p&gt;
&lt;p&gt;加和减的统一：&lt;br /&gt;
一个负数的补码等于模减该负数的绝对值&lt;br /&gt;
对于一个确定的模，某数减去小于模的另一数，总可以加上另一数负数的补码来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求真值的补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全 0：0&lt;/p&gt;
&lt;p&gt;全 1：-1&lt;/p&gt;
&lt;p&gt;10000...：- 2 &lt;sup&gt;n-1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求补码的真值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**X = - x&lt;sub&gt;n-1&lt;/sub&gt; * 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + x &lt;sub&gt;2&lt;/sub&gt; * 2 &lt;sup&gt;1&lt;/sup&gt;+ x &lt;sub&gt;1&lt;/sub&gt;*2&lt;sup&gt;0&lt;/sup&gt; **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若对负数的补码再取负，得到原来那个数&lt;/strong&gt;【其中的特例是，-2&lt;sup&gt;n-1&lt;/sup&gt; 在取负之后仍然为本身，因为范围内并没有 2&lt;sup&gt;n-1&lt;/sup&gt; 与之相对应】&lt;/p&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数&#34;&gt;#&lt;/a&gt; 浮点数&lt;/h3&gt;
&lt;p&gt;单精度 32 位（1+8+23）&lt;strong&gt;仍然表示 2&lt;sup&gt;32&lt;/sup&gt; 个数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;双精度 64 位（1+11+52）&lt;/p&gt;
&lt;p&gt;基底为 2（也存在基底为 16 的情况）—— 基数越大，范围越大，精度越低&lt;/p&gt;
&lt;h4 id=&#34;表示方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示方法&#34;&gt;#&lt;/a&gt; 表示方法&lt;/h4&gt;
&lt;p&gt;S E M&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;符号位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 位移码表示阶码（指数） —— 范围为 - 126~127，全 0 和全 1 为特殊值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23 位原码表示 24 位尾数，最高位总为 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;表示的数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示的数&#34;&gt;#&lt;/a&gt; 表示的数&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;规格化数&lt;/strong&gt;，关注上溢出和下溢出，&lt;/p&gt;
&lt;p&gt;下溢出部分用&lt;strong&gt;非格式化数&lt;/strong&gt;表示，它的间距是等距的&lt;/p&gt;
&lt;p&gt;越靠近原点，数越密集；越远离原点，数越稀疏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静默式和通知式非数&lt;/strong&gt; —— 静默式表示未定义的算数结果，通知式非数表示未初始化的值。&lt;/p&gt;
&lt;h2 id=&#34;计算机组成与体系结构性能设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与体系结构性能设计&#34;&gt;#&lt;/a&gt; 计算机组成与体系结构：性能设计&lt;/h2&gt;
&lt;h3 id=&#34;整数的加法与减法补码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的加法与减法补码&#34;&gt;#&lt;/a&gt; 整数的加法与减法（补码）&lt;/h3&gt;
&lt;p&gt;上溢规则&lt;/p&gt;
&lt;p&gt;减法规则 —— 减法，即加上减数的 2 的补&lt;/p&gt;
&lt;p&gt;在实际的操作中，有 OF 溢出位记录是否溢出&lt;/p&gt;
&lt;h3 id=&#34;整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的乘法&#34;&gt;#&lt;/a&gt; 整数的乘法&lt;/h3&gt;
&lt;h4 id=&#34;无符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无符号整数的乘法&#34;&gt;#&lt;/a&gt; 无符号整数的乘法&lt;/h4&gt;
&lt;p&gt;两个 n 为二进制整数的乘法可产生最大长度为 2n 位的积&lt;/p&gt;
&lt;p&gt;乘&lt;/p&gt;
&lt;p&gt;移位&lt;/p&gt;
&lt;p&gt;计数 - 1&lt;/p&gt;
&lt;h4 id=&#34;有符号整数的乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有符号整数的乘法&#34;&gt;#&lt;/a&gt; 有符号整数的乘法&lt;/h4&gt;
&lt;p&gt;只要有一个是负数，原来的方法就不奏效&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把被乘数和乘数都转变成正数再相乘，当两者初始的符号不相同时，结果取 2 的补&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布斯（Booth）算法&lt;/p&gt;
&lt;p&gt;分为 10 01 【00 11】三种情况讨论&lt;/p&gt;
&lt;p&gt;运用公式，   &lt;strong&gt;2 &lt;sup&gt;n&lt;/sup&gt; + 2 &lt;sup&gt;n-1&lt;/sup&gt; + ... + 2 &lt;sup&gt;n-k&lt;/sup&gt; = 2 &lt;sup&gt;n+1&lt;/sup&gt; - 2 &lt;sup&gt;n-k&lt;/sup&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很巧妙，优雅，实在是太优雅了！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;整数的除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数的除法&#34;&gt;#&lt;/a&gt; 整数的除法&lt;/h3&gt;
&lt;p&gt;搞来搞去，也很优雅&lt;/p&gt;
&lt;h3 id=&#34;浮点数加法和减法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数加法和减法&#34;&gt;#&lt;/a&gt; 浮点数加法和减法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查 0&lt;/li&gt;
&lt;li&gt;对齐有效值&lt;/li&gt;
&lt;li&gt;加法&lt;/li&gt;
&lt;li&gt;规格化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意时时检查是否有效值为 0，以及是否溢出&lt;/p&gt;
&lt;p&gt;若两个数的阶值差别非常大，则较小的数丢失&lt;/p&gt;
&lt;h3 id=&#34;浮点数乘法和除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浮点数乘法和除法&#34;&gt;#&lt;/a&gt; 浮点数乘法和除法&lt;/h3&gt;
&lt;p&gt;由于阶值是移码的形式，相乘的时候，两个阶值的和要减去一个偏移量，相除的时候，两个阶值的差要加上一个偏移量&lt;/p&gt;
&lt;h4 id=&#34;精度考虑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精度考虑&#34;&gt;#&lt;/a&gt; 精度考虑&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保护位&lt;/p&gt;
&lt;p&gt;对齐的时候会导致丢失，在末尾增加保护位，可以扩展有效值的右端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舍入（不懂）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机组成与系统结构习题解答和教学指导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机组成与系统结构习题解答和教学指导&#34;&gt;#&lt;/a&gt; 计算机组成与系统结构习题解答和教学指导&lt;/h2&gt;
&lt;h3 id=&#34;数据的表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的表示&#34;&gt;#&lt;/a&gt; 数据的表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数值数据 —— 二进制、十进制（BCD binary coded decimal）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非数值数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据的宽度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的宽度&#34;&gt;#&lt;/a&gt; 数据的宽度&lt;/h3&gt;
&lt;p&gt;数据容量和宽度&lt;/p&gt;
&lt;p&gt;比特&lt;/p&gt;
&lt;p&gt;字节&lt;/p&gt;
&lt;p&gt;字（2 个 / 4 个 / 8 个 / 16 个字节）&lt;/p&gt;
&lt;h3 id=&#34;数据的排列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的排列&#34;&gt;#&lt;/a&gt; 数据的排列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大端排列 —— 最低有效字节 LSB 存放在大地址单元中，MSB 所在地址为数据的地址&lt;/li&gt;
&lt;li&gt;小端排列 —— 最低有效字节 LSB 存放在小地址单元中，LSB 所在地址为数据的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据校验方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据校验方式&#34;&gt;#&lt;/a&gt; 数据校验方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;奇偶校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;海明校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环冗余码校验&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/22/cpp/105-STL/</guid>
            <title>105 STL</title>
            <link>https://quas-modo.github.io/2022/09/22/cpp/105-STL/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Thu, 22 Sep 2022 07:56:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;STL 算法概述&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;stl-standard-template-library&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stl-standard-template-library&#34;&gt;#&lt;/a&gt; STL Standard Template Library&lt;/h1&gt;
&lt;p&gt;roil expressive codes&lt;br /&gt;
Spectacular&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZmx1ZW50Y3BwLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy93b3JsZF9tYXBfODAwLmpwZw==&#34;&gt;img&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.fluentcpp.com/wp-content/uploads/2018/03/world_map_800.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;heap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#heap&#34;&gt;#&lt;/a&gt; Heap&lt;/h2&gt;
&lt;p&gt;the parent is bigger&lt;br /&gt;
Make_heap&lt;br /&gt;
Push_heap&lt;br /&gt;
Pop_heap&lt;/p&gt;
&lt;h2 id=&#34;sort&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sort&#34;&gt;#&lt;/a&gt; Sort&lt;/h2&gt;
&lt;p&gt;Partial_sort&lt;br /&gt;
Nth_element&lt;br /&gt;
Sort_heap&lt;br /&gt;
Inplace_merge&lt;/p&gt;
&lt;h2 id=&#34;partition&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#partition&#34;&gt;#&lt;/a&gt; Partition&lt;/h2&gt;
&lt;p&gt;boolean&lt;br /&gt;
Partition_point&lt;/p&gt;
&lt;h2 id=&#34;permutations&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#permutations&#34;&gt;#&lt;/a&gt; Permutations&lt;/h2&gt;
&lt;p&gt;Rotate&lt;/p&gt;
&lt;p&gt;​	  put the last to the first&lt;br /&gt;
Shuffle&lt;/p&gt;
&lt;p&gt;​	do randomly&lt;br /&gt;
Next_permutation&lt;br /&gt;
Prev_permutation&lt;br /&gt;
Reverse&lt;/p&gt;
&lt;h2 id=&#34;secret-runes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#secret-runes&#34;&gt;#&lt;/a&gt; Secret runes&lt;/h2&gt;
&lt;p&gt;Stable_*&lt;br /&gt;
Relative order&lt;br /&gt;
Is_*	&lt;br /&gt;
Is_*_until&lt;br /&gt;
Don’t hold anymore&lt;/p&gt;
&lt;h2 id=&#34;queries&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#queries&#34;&gt;#&lt;/a&gt; Queries&lt;/h2&gt;
&lt;h3 id=&#34;numeric-algorithms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numeric-algorithms&#34;&gt;#&lt;/a&gt; Numeric algorithms&lt;/h3&gt;
&lt;p&gt;Count&lt;br /&gt;
Accumulate&lt;br /&gt;
Partial_sum&lt;br /&gt;
Inner_product&lt;br /&gt;
Adjacent_difference&lt;br /&gt;
Sample&lt;br /&gt;
select randomly&lt;/p&gt;
&lt;h3 id=&#34;querying-a-property&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#querying-a-property&#34;&gt;#&lt;/a&gt; Querying a property&lt;/h3&gt;
&lt;p&gt;All_of&lt;br /&gt;
Any_of&lt;br /&gt;
None_of&lt;/p&gt;
&lt;h3 id=&#34;querying-a-property-on-2-ranges&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#querying-a-property-on-2-ranges&#34;&gt;#&lt;/a&gt; Querying a property on 2 ranges&lt;/h3&gt;
&lt;p&gt;Equal&lt;br /&gt;
Same size&lt;br /&gt;
Each equal&lt;br /&gt;
Lexicographical_compare&lt;br /&gt;
Mismatch&lt;br /&gt;
Return pair&amp;lt;iterator, iterator&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;searching-a-value&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searching-a-value&#34;&gt;#&lt;/a&gt; Searching a value&lt;/h3&gt;
&lt;p&gt;Not sorted&lt;br /&gt;
Find&lt;br /&gt;
Adjacent_find&lt;br /&gt;
Sorted&lt;br /&gt;
Equal_range&lt;br /&gt;
Upper_bound&lt;br /&gt;
Binary_search&lt;/p&gt;
&lt;h3 id=&#34;searching-a-range&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searching-a-range&#34;&gt;#&lt;/a&gt; Searching a range&lt;/h3&gt;
&lt;p&gt;Search&lt;br /&gt;
Find_end&lt;br /&gt;
Find_first_of&lt;/p&gt;
&lt;h3 id=&#34;searching-a-relative-value&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searching-a-relative-value&#34;&gt;#&lt;/a&gt; Searching a relative value&lt;/h3&gt;
&lt;p&gt;Max_element&lt;br /&gt;
Min_element&lt;br /&gt;
Minmax_element&lt;/p&gt;
&lt;h2 id=&#34;glorious-county-of-lagos-on-sets&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#glorious-county-of-lagos-on-sets&#34;&gt;#&lt;/a&gt; Glorious county of Lagos on sets&lt;/h2&gt;
&lt;p&gt;Set_difference&lt;br /&gt;
Set_intersection&lt;br /&gt;
Set_union&lt;br /&gt;
Set_symmetric_difference&lt;br /&gt;
Includes&lt;br /&gt;
Merge&lt;/p&gt;
&lt;h2 id=&#34;movers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#movers&#34;&gt;#&lt;/a&gt; Movers&lt;/h2&gt;
&lt;p&gt;Copy&lt;br /&gt;
Move&lt;br /&gt;
Swap_ranges&lt;br /&gt;
Copy_backward&lt;br /&gt;
Move_backward&lt;/p&gt;
&lt;p&gt;##Value Modifiers&lt;/p&gt;
&lt;p&gt;Fill&lt;br /&gt;
Fill the same number&lt;br /&gt;
Generate&lt;br /&gt;
Iota&lt;br /&gt;
Increment number&lt;br /&gt;
Replace&lt;/p&gt;
&lt;h2 id=&#34;structure-changes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#structure-changes&#34;&gt;#&lt;/a&gt; Structure changes&lt;/h2&gt;
&lt;p&gt;Remove&lt;br /&gt;
Erase&lt;br /&gt;
Unique&lt;br /&gt;
Remove the adjacent same element, and move the element forward&lt;/p&gt;
&lt;h3 id=&#34;_copy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_copy&#34;&gt;#&lt;/a&gt; *_copy&lt;/h3&gt;
&lt;p&gt;Remove_copy&lt;br /&gt;
Unique_copy&lt;br /&gt;
Reverse_copy&lt;br /&gt;
Rotate_copy&lt;br /&gt;
Replace_copy&lt;br /&gt;
Partition_copy&lt;br /&gt;
Partial_sort_copy&lt;/p&gt;
&lt;h3 id=&#34;_if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_if&#34;&gt;#&lt;/a&gt; *_if&lt;/h3&gt;
&lt;p&gt;Find_if&lt;br /&gt;
Find_if_not&lt;br /&gt;
Count_if&lt;br /&gt;
Remove_if&lt;br /&gt;
Remove_copy_if&lt;br /&gt;
Replace_if&lt;br /&gt;
Replace_copy_if&lt;br /&gt;
Copy_if&lt;/p&gt;
&lt;h2 id=&#34;lone-islnad&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lone-islnad&#34;&gt;#&lt;/a&gt; lone islnad&lt;/h2&gt;
&lt;p&gt;Transform&lt;br /&gt;
It can has more than one collection(parameters) to transform.&lt;/p&gt;
&lt;p&gt;For_each&lt;/p&gt;
&lt;h2 id=&#34;raw-memory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raw-memory&#34;&gt;#&lt;/a&gt; Raw memory&lt;/h2&gt;
&lt;p&gt;Uninitialized_fill&lt;br /&gt;
Uninitialized_copy&lt;br /&gt;
Uninitialized_move&lt;br /&gt;
Destroy&lt;/p&gt;
&lt;p&gt;_n&lt;br /&gt;
Fill_n&lt;br /&gt;
Search_n&lt;br /&gt;
…&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/21/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/</guid>
            <title>Lecture04-第一次cpp编程</title>
            <link>https://quas-modo.github.io/2022/09/21/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Wed, 21 Sep 2022 23:02:26 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;主要整理了第一次 cpp 作业的问题和想法，以及一些函数和 io。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture04&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture04&#34;&gt;#&lt;/a&gt; Lecture04&lt;/h1&gt;
&lt;h1 id=&#34;课程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程&#34;&gt;#&lt;/a&gt; 课程&lt;/h1&gt;
&lt;h2 id=&#34;imperative-programming-paradigm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#imperative-programming-paradigm&#34;&gt;#&lt;/a&gt; Imperative Programming Paradigm&lt;/h2&gt;
&lt;p&gt;structure programming&lt;/p&gt;
&lt;p&gt;单入口单出口&lt;/p&gt;
&lt;p&gt;Object-Oriented Programming&lt;/p&gt;
&lt;p&gt;并没有改变 imperative programming 状态转换的思想&lt;/p&gt;
&lt;h2 id=&#34;declarative-programming-paradigm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#declarative-programming-paradigm&#34;&gt;#&lt;/a&gt; Declarative Programming Paradigm&lt;/h2&gt;
&lt;p&gt;Functional Programming&lt;/p&gt;
&lt;p&gt;Logical Programming&lt;/p&gt;
&lt;h1 id=&#34;作业&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业&#34;&gt;#&lt;/a&gt; 作业&lt;/h1&gt;
&lt;h2 id=&#34;作业1复盘binary2decimal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业1复盘binary2decimal&#34;&gt;#&lt;/a&gt; 作业 1 复盘：binary2decimal&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一开始没有注意到边界条件，如果 b 是 0 的话，ans 为 a 不是 1，会导致返回值的错误。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  string s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cur &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;str:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 问题出在这里，弄错了 substr 的参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cur &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cur &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; cur &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输入：1001&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;**/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输出：str:1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str:00&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str:01&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str:1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;**/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;作业3完成汉诺塔的最小移动次数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业3完成汉诺塔的最小移动次数&#34;&gt;#&lt;/a&gt; 作业 3：完成汉诺塔的最小移动次数&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  n &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;错误原因：超时，建议用通项解决&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Created by QUAS on 2022/9/20.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 错误原因，没有及时返回 return 0，也就是遗漏讨论了三种情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 不用打表，通项是一样的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;作业4倒数第i个单词的长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业4倒数第i个单词的长度&#34;&gt;#&lt;/a&gt; 作业 4：倒数第 i 个单词的长度&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;vector&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 学习一下 split 自制函数的写法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; delimiter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; begin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;end&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  begin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;delimiter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; end &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; string&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;npos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;end&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    begin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; end &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;delimiter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 不要忘记处理末尾部分&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  string inp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;inp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; vec&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vec&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; vec&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vec&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;len&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;作业5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业5&#34;&gt;#&lt;/a&gt; 作业 5：&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;vector&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch_num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; words &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  ch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ch &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ch_num&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ch &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ch&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      flag &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; words&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ch_num &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; words &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ret &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;错误原因：最大的问题是出在，我没有认真看清楚题目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现如下功能：给出一段文本，输出这段文本包含的字符数、单词数（以空格和换行符为界）和行数。&lt;/p&gt;
&lt;p&gt;输入描述 —— 保证输入中只&lt;strong&gt;会出现英文字母、空格（ &lt;code&gt;&#39; &#39;&lt;/code&gt; ）和换行符（ &lt;code&gt;&#39;\n&#39;&lt;/code&gt; ）&lt;/strong&gt;。输入保证每行末尾都有一个换行符。&lt;/p&gt;
&lt;p&gt;输出描述 ——&lt;strong&gt; 字符数、单词数和行数&lt;/strong&gt;，用空格分隔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只会出现空格和换行符，我却企图讨论制表符等其他空字符。&lt;/p&gt;
&lt;p&gt;要求输出字符数、单词数和行数，我却在纠结空格如何计算。&lt;/p&gt;
&lt;p&gt;收获是&lt;strong&gt;明白了如何使用 cin.get () 和自制的 split&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;作业6复盘找出唯一只出现一次的数其他均出现两次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业6复盘找出唯一只出现一次的数其他均出现两次&#34;&gt;#&lt;/a&gt; 作业 6 复盘：找出唯一只出现一次的数（其他均出现两次）&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; inp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; inp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; inp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意如何输入不定个数&lt;strong&gt; cin&amp;gt;&amp;gt;inp&lt;/strong&gt;，另外可以用 **^** 操作解决&lt;/p&gt;
&lt;h2 id=&#34;作业7复盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业7复盘&#34;&gt;#&lt;/a&gt; 作业 7 复盘：&lt;/h2&gt;
&lt;p&gt;INT_MAX 在 &amp;lt;limits.h&amp;gt; 头文件中&lt;/p&gt;
&lt;h2 id=&#34;作业8复盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业8复盘&#34;&gt;#&lt;/a&gt; 作业 8 复盘：&lt;/h2&gt;
&lt;p&gt;翻转数字&lt;/p&gt;
&lt;p&gt;给定一个  &lt;code&gt;int&lt;/code&gt;  类型的整数  &lt;code&gt;N&lt;/code&gt; ，请你将它&lt;em&gt;数字部分&lt;/em&gt; 翻转，正负性不变，并输出。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;vector&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;limits.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  string str&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; negative &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 判断是不是 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 判断是不是负数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    negative &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;negative&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 防止开头是 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;pop_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 判断数值有没有溢出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 计算答案&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ans &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ans &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; INT_MIN &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; negative &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;negative&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; l&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;错误原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未区分 0 与 &#39;0&#39;&lt;/li&gt;
&lt;li&gt;没有考虑到原来&lt;strong&gt;数字末尾有 0&lt;/strong&gt; 的情况&lt;/li&gt;
&lt;li&gt;没有考虑到&lt;strong&gt;数字 0&lt;/strong&gt; 的特殊情况&lt;/li&gt;
&lt;li&gt;因为题目要求倒序，所以在代码逻辑中有一部分比较绕（就是到底哪边是大的），然后被绕进去了，导致判断越界错误&lt;/li&gt;
&lt;li&gt;可以略略记忆一下 INT_MAX（&lt;strong&gt;2^31-1=2147483647&lt;/strong&gt;）和 INT_MIN（ &lt;strong&gt;-2^31=-2147483648&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;作业9复盘最大单词后缀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业9复盘最大单词后缀&#34;&gt;#&lt;/a&gt; 作业 9 复盘：最大单词后缀&lt;/h2&gt;
&lt;p&gt;好像没什么好复盘的（&lt;/p&gt;
&lt;p&gt;一道很常见的简单算法题&lt;/p&gt;
&lt;h2 id=&#34;作业10复盘matrix的加法-减法-乘法-卷积操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作业10复盘matrix的加法-减法-乘法-卷积操作&#34;&gt;#&lt;/a&gt; 作业 10 复盘：matrix 的加法、减法、乘法、卷积操作&lt;/h2&gt;
&lt;p&gt;思考如何设计并简化代码&lt;/p&gt;
&lt;p&gt;呃呃一遍过，把输入写了一个函数，把 add、sub 和 mul 进行了合并，conv 没想出来怎么合并。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;vector&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;inputMatrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; height&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;item &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;elem &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; elem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;operateMatrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string operation&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;mat1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;mat2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;operation &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;add&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; operation &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;sub&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; operation &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;mul&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 命令为 add sub mul 的情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mat1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;mat2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;operation &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;add&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;operation &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;sub&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 命令为 conv 的情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mat1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;mat2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; hei &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; wid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hei&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; wid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; q &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; q &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; q&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              ans &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;q&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;q&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; height&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; width&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  string operation&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; height&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; width&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;inputMatrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  height&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; operation&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; mat1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; mat2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;operateMatrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;operation&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mat1&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mat2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;顺带贴一贴 sa 酱的 60 行代码（&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;bitsdc++.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        string cmd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; cmd &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;conv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;add&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;sub&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; k &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; hw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; k&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            res &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; matrix&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关于我不会同时输入多个，和把某些值嵌入表达式中求解这件事&lt;/p&gt;
&lt;h2 id=&#34;函数用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数用法&#34;&gt;#&lt;/a&gt; 函数用法&lt;/h2&gt;
&lt;h3 id=&#34;关于substr的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于substr的用法&#34;&gt;#&lt;/a&gt; 关于 substr 的用法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;size_t pos &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; npos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;关于find的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于find的用法&#34;&gt;#&lt;/a&gt; 关于 find 的用法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;InputIterator &lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;InputIterator first&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; InputIterator last&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; T&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中，first 和 last 为输入迭代器，[first, last) 用于指定该函数的查找范围；val 为要查找的目标元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正因为 first 和 last 的类型为输入迭代器，因此该函数适用于所有的序列式容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，该函数会返回一个输入迭代器，当 find () 函数查找成功时，其指向的是在 [first, last) 区域内查找到的第一个目标元素；如果查找失败，则该迭代器的指向和 last 相同。&lt;/p&gt;
&lt;p&gt;值得一提的是，find () 函数的底层实现，其实就是用 &lt;code&gt;==&lt;/code&gt;  运算符将 val 和 [first, last) 区域内的元素逐个进行比对。这也就意味着，[first, last) 区域内的元素必须支持 &lt;code&gt;==&lt;/code&gt;  运算符。&lt;/p&gt;
&lt;h3 id=&#34;关于自制split&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于自制split&#34;&gt;#&lt;/a&gt; 关于自制 split&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; delimiter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; begin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;delimiter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;end &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; string&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;npos&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    begin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;delimiter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;begin&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在我的实验（debug）中发现，如果两个字符串之间有 n（n&amp;gt;=1）个空格，那么 vector 会插入 n-1 个空的数据。自制 split 并不能排除掉连续的多个空格。&lt;/p&gt;
&lt;h3 id=&#34;关于自制pow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于自制pow&#34;&gt;#&lt;/a&gt; 关于自制 pow&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ans &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ans &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ans&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;今天看数据结构，递归处理貌似更快，试一下（&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 处理边界条件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;关于vector构建多维数组-初始化-访问的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于vector构建多维数组-初始化-访问的方法&#34;&gt;#&lt;/a&gt; 关于 vector 构建多维数组、初始化、访问的方法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;inputMatrix&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; height&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;item &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;elem &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; elem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; vec1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vec1_2D&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;HEIGHT&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;WIDTH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vec1_3D&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;HEIGHT&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WIDTH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;DEPTH&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucG9zaXRpb25pc2V2ZXJ5dGhpbmcubmV0L2NwcC1tdWx0aWRpbWVuc2lvbmFsLXZlY3Rvci8=&#34;&gt;讲得很清楚的链接&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;关于cpp中的一些类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于cpp中的一些类型转换&#34;&gt;#&lt;/a&gt; 关于 cpp 中的一些类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stoi/&#34;&gt;&lt;strong&gt;stoi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to integer (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stol/&#34;&gt;&lt;strong&gt;stol&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to long int (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stoul/&#34;&gt;&lt;strong&gt;stoul&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to unsigned integer (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stoll/&#34;&gt;&lt;strong&gt;stoll&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to long long (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stoull/&#34;&gt;&lt;strong&gt;stoull&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to unsigned long long (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stof/&#34;&gt;&lt;strong&gt;stof&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to float (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stod/&#34;&gt;&lt;strong&gt;stod&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to double (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cplusplus.com/reference/string/stold/&#34;&gt;&lt;strong&gt;stold&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Convert string to long double (function template)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stoi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stoi&#34;&gt;#&lt;/a&gt; stoi&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;  str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; idx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; base &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; wstring&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; idx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; base &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;str&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		String object with the representation of an integral number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;idx&lt;/p&gt;
&lt;p&gt;Pointer to an object of type &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3NpemVfdA==&#34;&gt;size_t&lt;/span&gt;, whose value is set by the function to position of the next character in &lt;em&gt;str&lt;/em&gt; after the numerical value.&lt;/p&gt;
&lt;p&gt;This parameter can also be a null pointer, in which case it is not used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;base&lt;/p&gt;
&lt;p&gt;Numerical base (radix) that determines the valid characters and their interpretation.&lt;/p&gt;
&lt;p&gt;If this is  &lt;code&gt;0&lt;/code&gt; , the base used is determined by the format in the sequence (see &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3N0cnRvbA==&#34;&gt;strtol&lt;/span&gt; for details). Notice that by default this argument is  &lt;code&gt;10&lt;/code&gt; , not  &lt;code&gt;0&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// stoi example&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// std::cout&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string&gt;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// std::string, std::stoi&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string str_dec &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2001, A Space Odyssey&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string str_hex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;40c3&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string str_bin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-10010110001&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string str_auto &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;0x7f&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;size_type sz&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// alias of size_t&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i_dec &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str_dec&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;sz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i_hex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str_hex&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i_bin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str_bin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i_auto &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stoi&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str_auto&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str_dec &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i_dec &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; and [&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str_dec&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;]\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str_hex &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i_hex &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str_bin &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i_bin &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str_auto &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i_auto &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;stof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stof&#34;&gt;#&lt;/a&gt; stof&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;  str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; idx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; wstring&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; idx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io&#34;&gt;#&lt;/a&gt; IO&lt;/h2&gt;
&lt;h3 id=&#34;关于读入int&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于读入int&#34;&gt;#&lt;/a&gt; 关于读入 int&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; ws&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;cin &amp;gt;&amp;gt; n 不会读取‘\n&#39; ， 需要另外做处理&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;关于ch-cinget的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于ch-cinget的用法&#34;&gt;#&lt;/a&gt; 关于 ch = cin.get（）的用法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ch&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这样写返回字符编码（整型），其中 32 为空格，10 为换行符，小于 32 不是一般意义上的字符。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;关于cingetch的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于cingetch的用法&#34;&gt;#&lt;/a&gt; 关于 cin.get (ch) 的用法&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; ch&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//do something&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这样写赋值给参数 ch&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 会读入空白符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;cin.get(ch)&lt;/th&gt;
&lt;th&gt;ch = cin.get()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;传递输入字符的方式&lt;/td&gt;
&lt;td&gt;赋值给参数 ch&lt;/td&gt;
&lt;td&gt;将函数返回值赋给 ch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用于字符输入时函数的返回值&lt;/td&gt;
&lt;td&gt;istream 对象（执行 bool 转换后为 true  ）&lt;/td&gt;
&lt;td&gt;int 类型的字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;到达 EOF 时函数的返回值&lt;/td&gt;
&lt;td&gt;istream 对象（执行 bool 转换后为 false  ）&lt;/td&gt;
&lt;td&gt;EOF&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;输入string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入string&#34;&gt;#&lt;/a&gt; 输入 string&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string str&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以空白符或 EOF 为终止&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cin &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以换行符为终止&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 以 delimiter 为终止&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cin&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delimiter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;关于getline的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于getline的用法&#34;&gt;#&lt;/a&gt; 关于 getline 的用法&lt;/h4&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;istream&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;istream&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; is&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; delim&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;istream&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getline&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;istream&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; is&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;成功读取时返回 true，错误读取时返回 false&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;delim 会被读取！注意区分 cin 和 getline 的用法&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;todo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#todo&#34;&gt;#&lt;/a&gt; todo&lt;/h1&gt;
&lt;p&gt;复习各种数据结构的基本函数&lt;/p&gt;
&lt;p&gt;学习 template 等 cpp 中不懂的名词（孩子一无所知&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/</guid>
            <title>Lecture04-网络层：数据平面</title>
            <link>https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Wed, 21 Sep 2022 20:00:27 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;掌握 IP 编址就是掌握因特网的网络层！（雾）&lt;br /&gt;
Bulter Lampson—— 在一个时刻做一件事，将他做好。一个接口应当俘获一个抽象的最低限度的要件。不要进行一般化，一般化通常是错误的。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第四章-网络层数据平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章-网络层数据平面&#34;&gt;#&lt;/a&gt; 第四章 网络层：数据平面&lt;/h1&gt;
&lt;h2 id=&#34;网络层概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层概述&#34;&gt;#&lt;/a&gt; 网络层概述&lt;/h2&gt;
&lt;h3 id=&#34;数据平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据平面&#34;&gt;#&lt;/a&gt; &lt;strong&gt;数据平面&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;网络层中每台路由器的功能，决定到达路由器输入链路之一的数据报如何转发到该路由器的输出链路之一，每台路由器如何选择。&lt;/p&gt;
&lt;p&gt;传统方式的转发功能基于目标地址和转发表，SDN 方式基于多个字段和流表。&lt;/p&gt;
&lt;h3 id=&#34;控制平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制平面&#34;&gt;#&lt;/a&gt; &lt;strong&gt;控制平面&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;网络范围的逻辑，控制数据报沿着源主机到目的主机的端到端路径中路由器的路由方式，协调本地路由器的转发动作。&lt;/p&gt;
&lt;p&gt;传统的路由方法在路由器中实现，SDN 方法在远程的服务器中实现。&lt;/p&gt;
&lt;p&gt;传统方式，分布式的去做，控制平面和数据平面在一起完成。&lt;/p&gt;
&lt;p&gt;SND 有一个统一的服务器，实现解耦合的功能。&lt;/p&gt;
&lt;h3 id=&#34;网络层功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层功能&#34;&gt;#&lt;/a&gt; &lt;strong&gt;网络层功能&lt;/strong&gt;：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;转发，在数据平面实现&lt;/li&gt;
&lt;li&gt;路由选择，在控制平面中实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络服务模型&#34;&gt;#&lt;/a&gt; &lt;strong&gt;网络服务模型&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;对于单个数据报服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于单个数据报服务&#34;&gt;#&lt;/a&gt; 对于单个数据报服务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;可靠传送&lt;/li&gt;
&lt;li&gt;延迟保证&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;对于数据报流的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于数据报流的服务&#34;&gt;#&lt;/a&gt; 对于数据报流的服务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;保序数据报传送&lt;/li&gt;
&lt;li&gt;保证流的最小宽带&lt;/li&gt;
&lt;li&gt;分组之间的延迟差&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;路由器工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器工作原理&#34;&gt;#&lt;/a&gt; 路由器工作原理&lt;/h2&gt;
&lt;p&gt;路由器包括&lt;strong&gt;输入端口、交换结构、输出端口和路由选择处理器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;基于目标的转发：仅仅依赖于 IP 数据报的目标 IP 地址。&lt;/p&gt;
&lt;p&gt;通用转发：基于头部字段的任意集合进行转发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“匹配” 加 “动作”&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;输入端口和基于目的地转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入端口和基于目的地转发&#34;&gt;#&lt;/a&gt; 输入端口和基于目的地转发&lt;/h3&gt;
&lt;h4 id=&#34;查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;p&gt;使用转发表来查找输出端口&lt;/p&gt;
&lt;p&gt;路由器用分组目的地址的前缀与该表中的表项进行匹配。当有多个匹配时，使用&lt;strong&gt;最长前缀匹配规则&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;其他动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他动作&#34;&gt;#&lt;/a&gt; 其他动作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;出现物理层和链路层处理&lt;/li&gt;
&lt;li&gt;检查分组的版本号、检验和以及寿命字段&lt;/li&gt;
&lt;li&gt;必须更新用于网络管理的计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输入端口缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入端口缓存&#34;&gt;#&lt;/a&gt; 输入端口缓存&lt;/h4&gt;
&lt;p&gt;排队延迟以及由于输入缓存溢出造成丢失&lt;/p&gt;
&lt;h3 id=&#34;交换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换&#34;&gt;#&lt;/a&gt; 交换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;经内存交换&lt;/p&gt;
&lt;p&gt;先将分组存入内存，再将分组复制到输出端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经总线交换&lt;/p&gt;
&lt;p&gt;一次只有一个分组能够快约总线，路由器的交换带宽受总线速率的限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经互联网络交换&lt;/p&gt;
&lt;p&gt;使用更复杂的互联网络，例如使用纵横式交换机、榕树网络，纵横式交换机就是一种由 2N 条总线组成的互联网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;输出端口处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出端口处理&#34;&gt;#&lt;/a&gt; 输出端口处理&lt;/h3&gt;
&lt;p&gt;取出排队的分组进行传输，执行所需的链路层和物理层传输功能。&lt;/p&gt;
&lt;h3 id=&#34;何处出现排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何处出现排队&#34;&gt;#&lt;/a&gt; 何处出现排队&lt;/h3&gt;
&lt;h4 id=&#34;输入排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入排队&#34;&gt;#&lt;/a&gt; 输入排队&lt;/h4&gt;
&lt;p&gt;HOL 阻塞 Head-Of-the-Line 线路前端阻塞&lt;/p&gt;
&lt;p&gt;只要输入链路上的分组到达速率达到其容量的 58%，在某些假设前提下，输入队列长度就会无限制地增大。&lt;/p&gt;
&lt;h4 id=&#34;输出排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出排队&#34;&gt;#&lt;/a&gt; 输出排队&lt;/h4&gt;
&lt;p&gt;如何丢弃？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弃尾&lt;/li&gt;
&lt;li&gt;根据优先权&lt;/li&gt;
&lt;li&gt;随机丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分组调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分组调度&#34;&gt;#&lt;/a&gt; 分组调度&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先进先出&lt;/p&gt;
&lt;p&gt;FIFO first in first out&lt;/p&gt;
&lt;p&gt;FCFS first come first service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权排队&lt;/p&gt;
&lt;p&gt;优先权高的先进行传输&lt;/p&gt;
&lt;p&gt;非抢占式优先权排队：一旦分组开始传输，就不能打断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环和加权公平排队&lt;/p&gt;
&lt;p&gt;保持工作排队，不允许链路保持空闲&lt;/p&gt;
&lt;p&gt;类 n 的分组传输完毕后，就传输类 n+1 的分组，如果该类暂时没有分组，就跳到下一个类进行传输。&lt;/p&gt;
&lt;p&gt;每类的服务时间可能是带有权重的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网络协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络协议&#34;&gt;#&lt;/a&gt; 网络协议&lt;/h2&gt;
&lt;p&gt;以网络为单位来访问和向外传输&lt;/p&gt;
&lt;p&gt;掌握 IP 编址就是掌握因特网的网络层！&lt;/p&gt;
&lt;h3 id=&#34;ipv4数据报格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4数据报格式&#34;&gt;#&lt;/a&gt; IPv4 数据报格式&lt;/h3&gt;
&lt;p&gt;版本&lt;/p&gt;
&lt;p&gt;首部长度&lt;/p&gt;
&lt;p&gt;服务类型&lt;/p&gt;
&lt;p&gt;数据报长度&lt;/p&gt;
&lt;p&gt;16 比特标识&lt;/p&gt;
&lt;p&gt;标志&lt;/p&gt;
&lt;p&gt;13 比特片偏移&lt;/p&gt;
&lt;p&gt;寿命&lt;/p&gt;
&lt;p&gt;上层协议&lt;/p&gt;
&lt;p&gt;首部检验和&lt;/p&gt;
&lt;p&gt;32 位比特源 IP 地址&lt;/p&gt;
&lt;p&gt;32 比特目标 IP 地址&lt;/p&gt;
&lt;p&gt;数据&lt;/p&gt;
&lt;h3 id=&#34;数据报分片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据报分片&#34;&gt;#&lt;/a&gt; 数据报分片&lt;/h3&gt;
&lt;p&gt;因为&lt;strong&gt;最大传送单元（MTU Maximum Transmission Unit）在链路层&lt;/strong&gt;的限制，IP 数据报的长度有限，并且，不同链路也许会有不同的链路层协议，有不同的 MTU，所以要对于数据报做一些调整。&lt;/p&gt;
&lt;p&gt;分片，重新组装，标记&lt;strong&gt;表示、标志和片偏移字段&lt;/strong&gt;【20 字节头部、数据、偏移量、最后一片的标志比特为 0】&lt;/p&gt;
&lt;h3 id=&#34;ipv4编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4编址&#34;&gt;#&lt;/a&gt; IPv4 编址&lt;/h3&gt;
&lt;p&gt;32 比特（4 字节），共有约 40 亿个。&lt;/p&gt;
&lt;p&gt;点分十进制记法&lt;/p&gt;
&lt;p&gt;无类别域间路由选择 a.b.c.d/x&lt;/p&gt;
&lt;p&gt;为了确定子网，分开主机和路由器的每个接口，产生几个隔离的网络岛，使用接口端接这些隔离的网络的端点。这些隔离的网络中的每一个都叫作一个子网。&lt;/p&gt;
&lt;h4 id=&#34;分类编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类编址&#34;&gt;#&lt;/a&gt; 分类编址：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;A 类 1/7/24&lt;/li&gt;
&lt;li&gt;B 类 2/14/16&lt;/li&gt;
&lt;li&gt;C 类 3/21/8&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;特殊的地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊的地址&#34;&gt;#&lt;/a&gt; 特殊的地址：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全 0 - 本网络、本主机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全 1 - 广播&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;127.x.x.x 回路地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;专用网络地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 10.0.0.0-10.255.255.255&lt;/li&gt;
&lt;li&gt;B 172.16.0.0-172.31.255.255&lt;/li&gt;
&lt;li&gt;C 192.168.0.0-192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;主机如何获得ip地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主机如何获得ip地址&#34;&gt;#&lt;/a&gt; 主机如何获得 IP 地址？&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取一块地址&lt;/p&gt;
&lt;p&gt;从一个 ISP 获取一组地址，例如该 ISP 被分配了地址 200.23.16.0/20，ISP 可以将地址块分成八个长度相等的连续地址块&lt;/p&gt;
&lt;p&gt;ICANN Internet Corporation for Assigned Names and Numbers 分配地址的机构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取主机地址：动态主机配置协议&lt;/p&gt;
&lt;p&gt;DHCP Dynamic Host Configuration 动态主机配置协议 即插即用协议 零配置协议&lt;/p&gt;
&lt;p&gt;DHCP 建立在 UDP 上&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DHCP 服务器发现&lt;/li&gt;
&lt;li&gt;DHCP 服务器提供&lt;/li&gt;
&lt;li&gt;DHCP 请求&lt;/li&gt;
&lt;li&gt;DHCP ACK&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络地址转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络地址转换&#34;&gt;#&lt;/a&gt; 网络地址转换&lt;/h3&gt;
&lt;p&gt;NAT Network Address Translation 网络地址转换&lt;/p&gt;
&lt;p&gt;专用网络 / 具有专用地址的网络 —— 其地址仅对该网络中的设备有意义的网络&lt;/p&gt;
&lt;p&gt;局域网的地址仅在自己内部有效。&lt;/p&gt;
&lt;p&gt;与外界通信利用&lt;strong&gt; NAT 转换表&lt;/strong&gt;，记录对应的 WAN 端和 LAN 端的 IP 地址和端口号。&lt;/p&gt;
&lt;p&gt;但是会造成 NAT 穿越问题（客户端如何和网络内部的端系统建立链接）。&lt;/p&gt;
&lt;h3 id=&#34;安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全性&#34;&gt;#&lt;/a&gt; 安全性&lt;/h3&gt;
&lt;h4 id=&#34;防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙&#34;&gt;#&lt;/a&gt; 防火墙&lt;/h4&gt;
&lt;p&gt;阻挡所有的 ICMP 回显请求分组&lt;/p&gt;
&lt;p&gt;基于源和目标 IP 端口号阻挡&lt;/p&gt;
&lt;p&gt;跟踪 TCP 连接&lt;/p&gt;
&lt;h4 id=&#34;入侵检测系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#入侵检测系统&#34;&gt;#&lt;/a&gt; 入侵检测系统&lt;/h4&gt;
&lt;p&gt;检查数据报的首部字段和有效载荷，匹配数据库中的特征，如果发现匹配，则产生告警。&lt;/p&gt;
&lt;h3 id=&#34;ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv6&#34;&gt;#&lt;/a&gt; IPv6&lt;/h3&gt;
&lt;p&gt;IP 地址更新为 128 比特&lt;/p&gt;
&lt;p&gt;删去的字段：取消分片与重新组装（丢给端系统）、取消首部检验和（丢给链路层和运输层），这些都是为了加快网络中的 IP 转发速度，除去（甩锅）冗余的步骤&lt;/p&gt;
&lt;h4 id=&#34;ipv4和ipv6之间如何通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4和ipv6之间如何通信&#34;&gt;#&lt;/a&gt; IPv4 和 IPv6 之间如何通信&lt;/h4&gt;
&lt;p&gt;采用&lt;strong&gt;隧道&lt;/strong&gt;，比如说，两个 IPv6 的地址进行通信，可以把整个 IPv6 的数据报放到 IPv4 数据报的有效载荷字段当中。&lt;/p&gt;
&lt;h2 id=&#34;通用转发和sdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用转发和sdn&#34;&gt;#&lt;/a&gt; 通用转发和 SDN&lt;/h2&gt;
&lt;p&gt;匹配 + 动作&lt;/p&gt;
&lt;p&gt;通用转发基于&lt;strong&gt; OpenFlow&lt;/strong&gt; 的讨论，匹配加动作转发表在 OpenFlow 中称为&lt;strong&gt;流表（flow table）&lt;/strong&gt;，它的每个表项包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首部字段值的集合&lt;/li&gt;
&lt;li&gt;计数器集合&lt;/li&gt;
&lt;li&gt;当分组匹配流表项时采取的动作集合&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匹配&#34;&gt;#&lt;/a&gt; 匹配&lt;/h3&gt;
&lt;p&gt;OpenFlow 匹配入端口、链路层字段、网络层字段、运输层字段&lt;/p&gt;
&lt;h3 id=&#34;动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动作&#34;&gt;#&lt;/a&gt; 动作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;转发&lt;/li&gt;
&lt;li&gt;丢弃&lt;/li&gt;
&lt;li&gt;修改字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;p&gt;网络层中的设备过多&lt;/p&gt;
&lt;p&gt;数量众多、功能各异的中间盒&lt;/p&gt;
&lt;h3 id=&#34;传统方式实现网络功能的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传统方式实现网络功能的问题&#34;&gt;#&lt;/a&gt; 传统方式实现网络功能的问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;垂直集成》昂贵，不利于创造新的生态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式、固化设备功能、网络设备朱磊繁多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理困难&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量工程较为困难&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sdn&#34;&gt;#&lt;/a&gt; SDN&lt;/h3&gt;
&lt;p&gt;SDN 远程集中，将数据平面和控制平面分离&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;水平集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业界生态开放，快速创新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产业巨大&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/</guid>
            <title>Lecture01 史前及埃及美术</title>
            <link>https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/</link>
            <category term="其他" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/" />
            <category term="西方美术史" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/" />
            <category term="美术" scheme="https://quas-modo.github.io/tags/%E7%BE%8E%E6%9C%AF/" />
            <pubDate>Tue, 20 Sep 2022 00:19:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;整个艺术发展史不是技术熟练程度的发展史，而是观念和要求的变化史。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture01&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture01&#34;&gt;#&lt;/a&gt; Lecture01&lt;/h1&gt;
&lt;p&gt;并非越像越好，每个时代都是观念先行。比如威尼斯喜欢华丽精美的画作，掌权者喜欢美人；荷兰画派的画作购买者是贩夫走卒，喜欢热闹的宴席、花卉（荷兰人民的收入来源之一）等。&lt;/p&gt;
&lt;h2 id=&#34;什么是艺术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是艺术&#34;&gt;#&lt;/a&gt; 什么是艺术&lt;/h2&gt;
&lt;h3 id=&#34;艺术作为替代物&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为替代物&#34;&gt;#&lt;/a&gt; 艺术作为替代物&lt;/h3&gt;
&lt;p&gt;法国拉斯科洞窟壁画中描绘中箭的马、受伤的动物 =》人们希望在狩猎中有所收获&lt;/p&gt;
&lt;p&gt;古埃及艺术中的雕塑 -》雕塑替代灵魂回归的载体&lt;/p&gt;
&lt;p&gt;《拉霍太普夫妇坐像》&lt;/p&gt;
&lt;p&gt;两尊人物雕像都通体着色，形象安详而庄重，同一些理想化的法老雕像相比，这对夫妇的脸部显得更&lt;strong&gt;富有个性&lt;/strong&gt;。两人手按在胸前，显示着虔诚和尊严。为了追求相貌逼真，两尊雕像的眼睛都用宝石镶嵌而成，使雕像更加栩栩如生。这尊雕像虽然从形式上恪守古埃及传统的雕塑模式，但人物生动的表情由于&lt;strong&gt;表面的色彩、镶嵌的眼睛和细节的强调&lt;/strong&gt;，显得特别逼真而且富有神采。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://bkimg.cdn.bcebos.com/pic/a71ea8d3fd1f41347249ff71251f95cad1c85e47?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;阿尔诺芬尼夫妇像 -》结婚证，防止有人不认帐，记录下此刻&lt;/p&gt;
&lt;h3 id=&#34;艺术作为工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为工具&#34;&gt;#&lt;/a&gt; 艺术作为工具&lt;/h3&gt;
&lt;p&gt;殉教的教徒、遗迹&lt;/p&gt;
&lt;p&gt;辉煌的教堂 -》象征天国的荣耀，吸引教徒遵守教义&lt;/p&gt;
&lt;h3 id=&#34;艺术作为有意味的形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为有意味的形式&#34;&gt;#&lt;/a&gt; 艺术作为有意味的形式&lt;/h3&gt;
&lt;p&gt;门克 呐喊&lt;/p&gt;
&lt;p&gt;蒙德里安 几何抽象画&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fss2.meipian.me%2Fusers%2F67937254%2F439c86c193d84d88a3a8d306681ee932.jpeg%3Fmeipian-raw%2Fbucket%2Fivwen%2Fkey%2FdXNlcnMvNjc5MzcyNTQvNDM5Yzg2YzE5M2Q4NGQ4OGEzYThkMzA2NjgxZWU5MzIuanBlZw%3D%3D%2Fsign%2F072299bb99bfa93c28775beb1be5e419.jpg&amp;amp;refer=http%3A%2F%2Fss2.meipian.me&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=auto?sec=1666193539&amp;amp;t=d4736f50491bff759c73c304298bb613&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;史前美术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#史前美术&#34;&gt;#&lt;/a&gt; 史前美术&lt;/h2&gt;
&lt;h3 id=&#34;洞窟壁画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#洞窟壁画&#34;&gt;#&lt;/a&gt; 洞窟壁画&lt;/h3&gt;
&lt;p&gt;多以动物为主，几乎都是巨大的食草动物。&lt;/p&gt;
&lt;h4 id=&#34;阿尔太米拉洞窟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿尔太米拉洞窟&#34;&gt;#&lt;/a&gt; 阿尔太米拉洞窟&lt;/h4&gt;
&lt;p&gt;绘画分布在侧洞，即有名的 “公牛大厅”，最有名的画作是《受伤的野牛》。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.baike.soso.com/p/20090107/20090107120000-105252.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;阿斯科洞窟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿斯科洞窟&#34;&gt;#&lt;/a&gt; 阿斯科洞窟&lt;/h4&gt;
&lt;p&gt;绘画多为牛、马、熊、狼、鹿等动物&lt;/p&gt;
&lt;p&gt;位于法国多尔多涅省蒙蒂尼亚克镇的韦泽尔峡谷&lt;/p&gt;
&lt;p&gt;画面已经形成了构图，与阿尔塔米拉的静态形成强烈的对比&lt;/p&gt;
&lt;h3 id=&#34;母神雕塑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#母神雕塑&#34;&gt;#&lt;/a&gt; 母神雕塑&lt;/h3&gt;
&lt;p&gt;夸张强调女性特征 —— 胸部和腹部&lt;/p&gt;
&lt;p&gt;体现母系社会中，人们对女性和生殖的崇拜&lt;/p&gt;
&lt;p&gt;《沃尔道夫的维纳斯》&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p1.ssl.qhimg.com/dr/270_500_/t011e9c54fb60fe2152.jpg?size=816x1200&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;岩画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#岩画&#34;&gt;#&lt;/a&gt; 岩画&lt;/h3&gt;
&lt;p&gt;主要分布在北欧和西班牙的拉文特地区，描绘狩猎、劳动等场面，把运动中的人物表现为剪影效果，强调动态，忽略细节。&lt;/p&gt;
&lt;h3 id=&#34;巨石建筑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#巨石建筑&#34;&gt;#&lt;/a&gt; 巨石建筑&lt;/h3&gt;
&lt;p&gt;新时期时代&lt;/p&gt;
&lt;p&gt;对巨大的石头的崇拜&lt;/p&gt;
&lt;h4 id=&#34;斯通亨治怪石圈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#斯通亨治怪石圈&#34;&gt;#&lt;/a&gt; 斯通亨治怪石圈&lt;/h4&gt;
&lt;p&gt;也许和墓葬或者是天文&lt;/p&gt;
&lt;h2 id=&#34;古埃及美术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古埃及美术&#34;&gt;#&lt;/a&gt; 古埃及美术&lt;/h2&gt;
&lt;p&gt;与埃及人的&lt;strong&gt;生死观念&lt;/strong&gt;相关，多数保留下来的艺术品出土于坟墓和纪念碑。&lt;/p&gt;
&lt;p&gt;在古埃及的壁画中，不同的人物姿势有着不同的含义。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tse1-mm.cn.bing.net/th/id/OIP-C.g0ZPDbyTIe_YGb7B-34a9gHaFj?pid=ImgDet&amp;amp;rs=1&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;古埃及美术的特征anonymity-匿名性-symbolism象征性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古埃及美术的特征anonymity-匿名性-symbolism象征性&#34;&gt;#&lt;/a&gt; 古埃及美术的特征 ——anonymity 匿名性 symbolism 象征性&lt;/h3&gt;
&lt;h4 id=&#34;anonymity&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#anonymity&#34;&gt;#&lt;/a&gt; Anonymity&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Craftsmen,_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg&#34;&gt;&lt;img data-src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg/440px-Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Depiction of craftworkers in ancient Egypt&lt;/p&gt;
&lt;p&gt;Ancient Egyptian artists rarely left their names. The Egyptian artwork is anonymous also because most of the time it was collective. Diodorus of Sicily, who traveled and lived in Egypt, has written: &amp;quot;So, after the craftsmen have decided the height of the statue, they all go home to make the parts which they have chosen&amp;quot; (I, 98).&lt;/p&gt;
&lt;h3 id=&#34;罗塞塔石碑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#罗塞塔石碑&#34;&gt;#&lt;/a&gt; 罗塞塔石碑&lt;/h3&gt;
&lt;h3 id=&#34;荷鲁斯horus鹰头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#荷鲁斯horus鹰头&#34;&gt;#&lt;/a&gt; 荷鲁斯 Horus（鹰头）&lt;/h3&gt;
&lt;p&gt;—— 荷鲁斯之眼，荷鲁斯的右眼象征太阳&lt;/p&gt;
&lt;p&gt;法老的守护神，王权的象征&lt;/p&gt;
&lt;h3 id=&#34;阿努比斯anubis犬头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿努比斯anubis犬头&#34;&gt;#&lt;/a&gt; 阿努比斯 Anubis（犬头）&lt;/h3&gt;
&lt;h3 id=&#34;伊西斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伊西斯&#34;&gt;#&lt;/a&gt; 伊西斯&lt;/h3&gt;
&lt;p&gt;儿童的守护神&lt;/p&gt;
&lt;h3 id=&#34;金字塔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#金字塔&#34;&gt;#&lt;/a&gt; 金字塔&lt;/h3&gt;
&lt;p&gt;法老陵墓&lt;/p&gt;
&lt;p&gt;巴斯塔巴&lt;/p&gt;
&lt;p&gt;左塞金字塔 —— 埃及历史上第一座金字塔&lt;/p&gt;
&lt;h3 id=&#34;门图霍特普享殿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#门图霍特普享殿&#34;&gt;#&lt;/a&gt; 门图霍特普享殿&lt;/h3&gt;
&lt;p&gt;方尖碑&lt;/p&gt;
&lt;p&gt;柱形建筑，造成威严的形象&lt;/p&gt;
&lt;h3 id=&#34;哈特谢普苏特hatshepsut&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈特谢普苏特hatshepsut&#34;&gt;#&lt;/a&gt; 哈特谢普苏特&lt;strong&gt; Hatshepsut&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;她是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTUlOUYlODMlRTUlOEYlOEElRTclQUMlQUMlRTUlOEQlODElRTUlODUlQUIlRTclOEUlOEIlRTYlOUMlOUQ=&#34;&gt;第十八王朝&lt;/span&gt;法老（约公元前 1479 年－约公元前 1458 年在位）也是古埃及首位可考的女性法老，是古埃及一位著名的女法老。&lt;/p&gt;
&lt;p&gt;哈特谢普苏特宣称，她的统治不需经由和图特摩斯二世的婚姻，因为她就是尊贵的阿蒙神之女，这也影响到她至今所保留下来的雕刻都是以男性的形象出现。&lt;/p&gt;
&lt;h3 id=&#34;雕塑versus绘画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雕塑versus绘画&#34;&gt;#&lt;/a&gt; 雕塑 versus 绘画&lt;/h3&gt;
&lt;p&gt;古希腊的时候，雕塑其实是着色的。但是在文艺复兴时期已经掉色，但当时的人误会了，以为古希腊的雕像不着色，他们大肆赞美着洁白的大理石，效仿古希腊也不为雕像着色，但不知是误会。&lt;/p&gt;
&lt;h3 id=&#34;斯芬克斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#斯芬克斯&#34;&gt;#&lt;/a&gt; 斯芬克斯&lt;/h3&gt;
&lt;p&gt;狮身人面像&lt;/p&gt;
&lt;h3 id=&#34;拉霍太普夫妇坐像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉霍太普夫妇坐像&#34;&gt;#&lt;/a&gt; 拉霍太普夫妇坐像&lt;/h3&gt;
&lt;h3 id=&#34;卡培尔王子像村长像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#卡培尔王子像村长像&#34;&gt;#&lt;/a&gt; 卡培尔王子像（村长像）&lt;/h3&gt;
&lt;p&gt;描绘了一个掌管农业的王子，有小肚腩，但是生动&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic3.zhimg.com/v2-ec67bc9920cd306c634621edcb6d55da_b.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;书吏凯伊像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#书吏凯伊像&#34;&gt;#&lt;/a&gt; 书吏凯伊像&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fbkimg.cdn.bcebos.com%2Fpic%2F562c11dfa9ec8a13154aca95fb03918fa0ecc077&amp;amp;refer=http%3A%2F%2Fbkimg.cdn.bcebos.com&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=auto?sec=1666195095&amp;amp;t=f9d2e0634523097f6a3875091f179738&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;阿蒙霍特普四世&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿蒙霍特普四世&#34;&gt;#&lt;/a&gt; 阿蒙霍特普四世&lt;/h3&gt;
&lt;p&gt;雕像增加人性的、世俗化的一面&lt;/p&gt;
&lt;h3 id=&#34;纳菲尔提提王后像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纳菲尔提提王后像&#34;&gt;#&lt;/a&gt; 纳菲尔提提王后像&lt;/h3&gt;
&lt;p&gt;注重表现人间美貌的一面，刻画着精巧的五官，少了很多程式化的东西。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tse4-mm.cn.bing.net/th/id/OIP-C.Y7N7fcEA9xVKYs9SWPRFVQHaLI?pid=ImgDet&amp;amp;rs=1&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/</guid>
            <title>三和</title>
            <link>https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/</link>
            <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <pubDate>Sat, 17 Sep 2022 22:44:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;躲进黑匣子里的两小时。&lt;/p&gt;
&lt;p&gt;深夜胡言乱语。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;虽然我还是个每个月向家里要钱的不懂事的大学生，但是” 三和大神 “的处境倒是可以略懂一二。说实在的，白领除了看上去体面一些、办公环境好一点，本质上和他们又有什么区别呢。&lt;/p&gt;
&lt;p&gt;初入社会，不懂规则，被骗、被抢，分不清假意与真心，被社会的老人们暗戳戳地玩弄和笑话。抓住一个幻想就像是救命稻草，用想象蒙蔽现实的红姐形象，沉溺于一个虚幻的、温暖的世界。曹一句句幼稚的、低微的请求，红姐一次次震惊的、老练的回答。&lt;/p&gt;
&lt;p&gt;” 工作是累赘，工作是枷锁。“” 干一天玩三天。“” 谁干长期啊，那个日薪就走了。“&lt;/p&gt;
&lt;p&gt;” 弟弟，我每天和很多人打交道，没那么多情感。“” 红姐只爱钱。“&lt;/p&gt;
&lt;p&gt;你说他们懒散、堕落、一身穷病，其实未尝不是一种对生活的对抗。都说码农薪酬高，其实是拿命换，谁喜欢 996、007 的生活呢，更期待悠闲一点放松一点的生活。细想自己，未尝不喜欢堕落，下坡总是比上坡要容易很多的。只不过在时常警醒自己，平常人家出身的孩子，没有什么背景，没有什么支撑，唯一能靠的是自己的实力，并不能常常放松，也时时害怕、时时惊惶。&lt;/p&gt;
&lt;p&gt;光影的切换，现实与曹的故事、小波的手机屏幕的转换，父母的反转饰演，穿插的歌舞，不同的方言，与观众的互动倒是给《三和》增加了不少趣味。&lt;/p&gt;
&lt;p&gt;希望下次可以和朋友一起去看剧 ww&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <title>Lecture02-计算机体系结构的问题及解决方案</title>
            <link>https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 15 Sep 2022 18:01:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;讲述了六个计算机体系结构的问题以及解决方案&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼最重要的思想存储程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼最重要的思想存储程序&#34;&gt;#&lt;/a&gt; 冯诺依曼最重要的思想 —— 存储程序&lt;/h2&gt;
&lt;p&gt;任何要计算机完成的工作都要先被编写成程序，然后将&lt;strong&gt;程序和原始数据送入主存&lt;/strong&gt;并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。&lt;/p&gt;
&lt;p&gt;区分中央处理单元（CPU）和处理器。&lt;/p&gt;
&lt;p&gt;CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。&lt;/p&gt;
&lt;p&gt;目前，苹果 M2 以及可以集成 200 亿的晶体管。&lt;/p&gt;
&lt;h2 id=&#34;问题与解决思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题与解决思路&#34;&gt;#&lt;/a&gt; 问题与解决思路&lt;/h2&gt;
&lt;h3 id=&#34;可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;#&lt;/a&gt; 可以通过无限增加 CPU 的大小来增加性能嘛？&lt;/h3&gt;
&lt;p&gt;不可以，面积越大，意味着&lt;strong&gt;互联延迟&lt;/strong&gt;越大。一个时钟周期需要大于最长互联延迟。存在物理极限。&lt;/p&gt;
&lt;h3 id=&#34;问题1cpu的频率不能无限提高&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题1cpu的频率不能无限提高&#34;&gt;#&lt;/a&gt; 问题 1：CPU 的频率不能无限提高&lt;/h3&gt;
&lt;p&gt;MOS 管开关、脉冲通过门电路需要时间&lt;/p&gt;
&lt;p&gt;为了信号同步，每个脉冲信号需要持续一定的时间&lt;/p&gt;
&lt;p&gt;面积大，连线延迟大；&lt;/p&gt;
&lt;p&gt;频率越高，开关损耗高，CPU 耗电和散热提高；&lt;/p&gt;
&lt;h3 id=&#34;解决1改变cpu芯片结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决1改变cpu芯片结构&#34;&gt;#&lt;/a&gt; 解决 1：改变 CPU 芯片结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域定制，如面向人工智能的芯片&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题2内存墙的存在-memory-wall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题2内存墙的存在-memory-wall&#34;&gt;#&lt;/a&gt; 问题 2：内存墙的存在 memory wall&lt;/h3&gt;
&lt;p&gt;主存和 CPU 之间传输数据的速度跟不上 CPU 的速度&lt;/p&gt;
&lt;h3 id=&#34;解决2采用高速缓存cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决2采用高速缓存cache&#34;&gt;#&lt;/a&gt; 解决 2：采用高速缓存（cache）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;添加一级或多级缓存以减少存储器访问频率并提高数据传输速率&lt;/li&gt;
&lt;li&gt;增大总线的数据宽度，来增加每次所能取出的位数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题3cpu等待io传输数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题3cpu等待io传输数据&#34;&gt;#&lt;/a&gt; 问题 3：CPU 等待 I/O 传输数据&lt;/h3&gt;
&lt;p&gt;CPU 在等待 I/O 设备时保持空闲&lt;/p&gt;
&lt;h3 id=&#34;解决3中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决3中断&#34;&gt;#&lt;/a&gt; 解决 3：中断&lt;/h3&gt;
&lt;p&gt;其他模块（例如 IO）可以中断正常处理顺序的机制&lt;/p&gt;
&lt;p&gt;中断周期加入指令周期中&lt;/p&gt;
&lt;p&gt;多重中断：顺序中断处理、嵌套中断处理&lt;/p&gt;
&lt;h3 id=&#34;问题4兼顾存储容量-速度和成本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题4兼顾存储容量-速度和成本&#34;&gt;#&lt;/a&gt; 问题 4：兼顾存储容量、速度和成本&lt;/h3&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量：越大越好&lt;/li&gt;
&lt;li&gt;速度：跟上处理器&lt;/li&gt;
&lt;li&gt;成本：相较于其他组件合理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束之间的关系&lt;/p&gt;
&lt;p&gt;​	更短的访问时间，更高的每比特成本&lt;/p&gt;
&lt;h3 id=&#34;解决4层次式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决4层次式存储结构&#34;&gt;#&lt;/a&gt; 解决 4：层次式存储结构&lt;/h3&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大容量数据存储&lt;/li&gt;
&lt;li&gt;高速性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用存储器层次结构而不是依赖单个存储器组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;寄存器 ——cache—— 主存 —— 磁盘 —— 磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储量越来越大，速度越来越慢，离 CPU 越来越远&lt;/p&gt;
&lt;h3 id=&#34;问题5io设备传输速率差异大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题5io设备传输速率差异大&#34;&gt;#&lt;/a&gt; 问题 5：I/O 设备传输速率差异大&lt;/h3&gt;
&lt;p&gt;I/O 性能跟不上 CPU 速度的提升&lt;/p&gt;
&lt;h3 id=&#34;解决5采用缓冲区和改进io操作技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决5采用缓冲区和改进io操作技术&#34;&gt;#&lt;/a&gt; 解决 5：采用缓冲区和改进 I/O 操作技术&lt;/h3&gt;
&lt;p&gt;设立缓存区&lt;/p&gt;
&lt;h3 id=&#34;问题6计算机部件互连复杂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题6计算机部件互连复杂&#34;&gt;#&lt;/a&gt; 问题 6：计算机部件互连复杂&lt;/h3&gt;
&lt;h3 id=&#34;解决6采用总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决6采用总线&#34;&gt;#&lt;/a&gt; 解决 6：采用总线&lt;/h3&gt;
&lt;h4 id=&#34;总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线&#34;&gt;#&lt;/a&gt; 总线&lt;/h4&gt;
&lt;p&gt;目前，对通用计算机而言，各种点对点互连结构逐渐取代总线互连的方式。但是总线结构依然普遍用于嵌入式系统。&lt;/p&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;所有部件都通过总线传递数据&lt;/p&gt;
&lt;h5 id=&#34;分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时&#34;&gt;#&lt;/a&gt; 分时&lt;/h5&gt;
&lt;p&gt;只有一个部件能够传输数据&lt;/p&gt;
&lt;h5 id=&#34;功能组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能组&#34;&gt;#&lt;/a&gt; 功能组&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;控制线&lt;/strong&gt; —— 控制对数据线路与地址线路的访问和使用，控制信号传递&lt;strong&gt;命令和定时信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址线&lt;/strong&gt; —— 指定数据总线上数据的源或目的，地址总线的宽度决定了系统可能的&lt;strong&gt;最大内存容量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据线&lt;/strong&gt; —— 为系统模块之间的数据传输提供路径，一般而言，线路的条数决定了&lt;strong&gt;一次能传输的位数&lt;/strong&gt;，数据总线的宽度是决定系统整体性能的一个关键因素&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
            <title>Lecture03-结构化程序设计</title>
            <link>https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Thu, 15 Sep 2022 16:12:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;cpp 第三讲&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture03-结构化程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture03-结构化程序设计&#34;&gt;#&lt;/a&gt; Lecture03 - 结构化程序设计&lt;/h1&gt;
&lt;p&gt;Data Structure + Algorithm&lt;/p&gt;
&lt;p&gt;课程结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算、控制流转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何组织（function 函数的形式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造数据类型（array，struct，union，pointer）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data&#34;&gt;#&lt;/a&gt; Data&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 性质 数据类型 名  值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 地址相关 - 可以操作系统，需要接近底层&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;datatype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datatype&#34;&gt;#&lt;/a&gt; datatype&lt;/h3&gt;
&lt;h4 id=&#34;定义值集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义值集&#34;&gt;#&lt;/a&gt; 定义值集&lt;/h4&gt;
&lt;p&gt;int double 有限 可数 离散&lt;/p&gt;
&lt;p&gt;数据类型决定值集，决定取值范围。需要知道取值范围，从而考虑和控制&lt;strong&gt; overflow 溢出&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;在计算机系统中，数值一律用&lt;strong&gt;补码&lt;/strong&gt;来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;typedef short INT16&lt;/p&gt;
&lt;h4 id=&#34;定义计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义计算&#34;&gt;#&lt;/a&gt; 定义计算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算数（移位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cpp 类型系统 —— 强、动静结合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也有些语言会更加灵活，比如 duck 类型，&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;
&lt;p&gt;char、int、float、double&lt;/p&gt;
&lt;p&gt;Modifiers: long、short、signed、unsigned&lt;/p&gt;
&lt;p&gt;​	char 只能用 signed、unsigned 修饰&lt;/p&gt;
&lt;p&gt;​	float 不能被修饰&lt;/p&gt;
&lt;p&gt;​	double 只能用 long 修饰&lt;/p&gt;
&lt;p&gt;​	int 可以用 4 种修饰符组合修饰&lt;/p&gt;
&lt;p&gt;省略表示&lt;/p&gt;
&lt;p&gt;操作符 sizeof&lt;/p&gt;
&lt;p&gt;ANSI C++: wchar_t、bool&lt;/p&gt;
&lt;h2 id=&#34;表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式&#34;&gt;#&lt;/a&gt; 表达式&lt;/h2&gt;
&lt;h3 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h3&gt;
&lt;p&gt;operand&lt;/p&gt;
&lt;p&gt;operator&lt;/p&gt;
&lt;p&gt;others&lt;/p&gt;
&lt;h3 id=&#34;求值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求值&#34;&gt;#&lt;/a&gt; 求值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优先级&lt;/li&gt;
&lt;li&gt;结合性&lt;/li&gt;
&lt;li&gt;类型转换约定&lt;/li&gt;
&lt;li&gt;求值次序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#种类&#34;&gt;#&lt;/a&gt; 种类&lt;/h3&gt;
&lt;p&gt;赋值表达式&lt;/p&gt;
&lt;p&gt;算数表达式&lt;/p&gt;
&lt;p&gt;条件运算符表达式（三目运算符）&lt;/p&gt;
&lt;p&gt;逗号表达式&lt;/p&gt;
&lt;p&gt;字位运算符表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异或运算 ^&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与全 0 的二进制串的运算 —— 不变&lt;/p&gt;
&lt;p&gt;与全 1 的二进制串的运算 —— 取反&lt;/p&gt;
&lt;p&gt;与本身的运算 —— 清零&lt;/p&gt;
&lt;p&gt;与同一个对象运算两次 —— 还原&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一个小应用 —— 交换 ab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;操作符可重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作符可重载&#34;&gt;#&lt;/a&gt; 操作符可重载&lt;/h3&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h2&gt;
&lt;h3 id=&#34;表达式语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式语句&#34;&gt;#&lt;/a&gt; 表达式语句&lt;/h3&gt;
&lt;h3 id=&#34;io语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io语句&#34;&gt;#&lt;/a&gt; IO 语句&lt;/h3&gt;
&lt;p&gt;stdio.h&lt;/p&gt;
&lt;p&gt;iostream.h&lt;/p&gt;
&lt;p&gt;cin&lt;/p&gt;
&lt;p&gt;cout&lt;/p&gt;
&lt;h3 id=&#34;控制流语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制流语句&#34;&gt;#&lt;/a&gt; 控制流语句&lt;/h3&gt;
&lt;p&gt;顺序、选择、重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;switch case 中只用整型表达式&lt;/strong&gt; 还可以搭配 enum 语句使用，这样可以更方便阅读，也不用在文件中硬编码，可以存到文件当中。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/</guid>
            <title>自杀专卖店</title>
            <link>https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/</link>
            <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <pubDate>Thu, 15 Sep 2022 00:21:46 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;生者才会感到悲伤。&lt;/li&gt;
&lt;li&gt;同样，生者才会感到快乐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;灰暗、沮丧、病态、压抑……&lt;br /&gt;
 自杀专卖店提供了各种自杀的方式，简单粗暴的上吊，和香水一样优雅的毒药，充满男子气概的武术刀，开枪自杀，沉入水中…… 最让我难过的，是一个穷人用一个塑料袋套在了自己的头上，随着塑料袋内的氧气越来越少，最终在痛苦中窒息身亡。&lt;br /&gt;
动画并没有让我感受到过于的压抑或者难过，突出的绘画风格和法语歌曲反而更吸引我一点（歌很好听捏）。听说原著当中 alan 真的在父亲的追杀下选择了自杀，可能更具悲剧色彩和感染力。&lt;br /&gt;
一直是个情感很寡淡的人，不会特别喜欢什么，也不会特别讨厌什么，不会很高兴，也不会很生气。死亡在我眼里是件很平淡的事情，可能是因为我没有什么牵挂的人或者东西吧。&lt;br /&gt;
祝好。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/</guid>
            <title>Lecture03-传输层</title>
            <link>https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Tue, 13 Sep 2022 17:43:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;动画有助于更好地理解&lt;/p&gt;
&lt;p&gt;interactive animation speaks a thousand words&lt;/p&gt;
&lt;p&gt;断更好几天了（趴）&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第三章-运输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章-运输层&#34;&gt;#&lt;/a&gt; 第三章 运输层&lt;/h1&gt;
&lt;p&gt;在网络层的基础上增加了&lt;strong&gt;端口号&lt;/strong&gt;来实现进程到进程的通信。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;：可靠的、保序的传输，提供多路复用、解复用，拥塞控制、流量控制、建立连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;：不可靠的、不保序的传输，提供多路复用和解复用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都不提供延时保证和带宽保证，延时和带宽依赖于网络层的服务&lt;/p&gt;
&lt;h2 id=&#34;多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用与多路分解&#34;&gt;#&lt;/a&gt; 多路复用与多路分解&lt;/h2&gt;
&lt;p&gt;multiplexing and demultiplexing&lt;/p&gt;
&lt;p&gt;在源主机从不同的套接字中收集数据块，并为每个数据块封装上首部信息，从而生成报文段，然后将报文段传递到网络层，所有这些工作称&lt;strong&gt;多路复用&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个套接字有唯一标志符&lt;/li&gt;
&lt;li&gt;传输层 / 运输层报文段中包含源端口号、目的端口号、传输数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将运输层报文段中的数据交付到正确的套接字的工作称为&lt;strong&gt;多路分解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以上可用两家小孩寄邮件类比理解。&lt;/p&gt;
&lt;h3 id=&#34;端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口号&#34;&gt;#&lt;/a&gt; 端口号&lt;/h3&gt;
&lt;p&gt;0-65535&lt;/p&gt;
&lt;p&gt;0-1023 周知端口号 / 著名端口号 well-known port number&lt;/p&gt;
&lt;p&gt;一般而言，应用程序的客户端让运输层自动地（也是透明地）分配端口号，而服务器端则分配一个特定的端口号。&lt;/p&gt;
&lt;h3 id=&#34;面向无连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向无连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向无连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 UDP 套接字是由一个&lt;strong&gt;二元组&lt;/strong&gt;全面标识的，包含一个目标 IP 地址和一个目的端口号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果两个 UDP 报文段有不同的源 IP 地址和 / 或源端口号，但具有相同的目的 IP 地址和目的端口号，那么这两个报文段将通过相同的目的套接字被定向到相同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;面向连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 TCP 套接字是由一个&lt;strong&gt;四元组&lt;/strong&gt;全面标识的，包含源地址、源端口、目的 IP 地址、目的端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同的源将定向到不同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;web服务器与tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器与tcp&#34;&gt;#&lt;/a&gt; Web 服务器与 TCP&lt;/h3&gt;
&lt;p&gt;连接套接字与进程之间并非总是有着一一对应的关系。如今一些高性能的 Web 服务器通常只有一个进程，但是为每个新的客户连接创建一个具有新连接套接字的新线程。&lt;/p&gt;
&lt;h2 id=&#34;无连接运输udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无连接运输udp&#34;&gt;#&lt;/a&gt; 无连接运输：UDP&lt;/h2&gt;
&lt;h3 id=&#34;udp的优点为什么要使用udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp的优点为什么要使用udp&#34;&gt;#&lt;/a&gt; UDP 的优点 / 为什么要使用 UDP：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关于发送什么数据以及何时发送的应用层控制得更为精细&lt;/li&gt;
&lt;li&gt;无须连接建立&lt;/li&gt;
&lt;li&gt;无连接状态&lt;/li&gt;
&lt;li&gt;分组首部开销小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp检验和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp检验和&#34;&gt;#&lt;/a&gt; UDP 检验和&lt;/h3&gt;
&lt;p&gt;端到端原则：某种功能必须是基于端到端的实现，“与在较高级别提供这些功能的代价相比，在较低级别设置的功能可能是冗余的或几乎没有价值的、”&lt;/p&gt;
&lt;p&gt;回卷、反码&lt;/p&gt;
&lt;p&gt;在目标地址，将四个比特字加在一起，每一位为 1，则无差错。&lt;/p&gt;
&lt;h2 id=&#34;可靠数据传输rdt的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输rdt的原理&#34;&gt;#&lt;/a&gt; 可靠数据传输（rdt）的原理&lt;/h2&gt;
&lt;p&gt;rdt: reliable data transfer protocol&lt;/p&gt;
&lt;p&gt;双向的数据传输协议就是两个单向的数据传输协议的综合&lt;/p&gt;
&lt;p&gt;FSM Finite-State Machine&lt;/p&gt;
&lt;h3 id=&#34;构造可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造可靠数据传输协议&#34;&gt;#&lt;/a&gt; 构造可靠数据传输协议&lt;/h3&gt;
&lt;h4 id=&#34;基于完全可靠信道-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于完全可靠信道-rdt10&#34;&gt;#&lt;/a&gt; 基于完全可靠信道 rdt1.0&lt;/h4&gt;
&lt;p&gt;直接传就好了 Orz&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;#&lt;/a&gt; 经具有比特差错信道的可靠数据传输 rdt2.0&lt;/h4&gt;
&lt;p&gt;ARQ Automatic Repeat reQuest 自动重传请求协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;差错检测&lt;/li&gt;
&lt;li&gt;接收方反馈（ACK, NAK）&lt;/li&gt;
&lt;li&gt;重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停等（stop-wait）协议：发送方将不会发送一块新数据，除非发送方确信接收方已正确接受当前分组。&lt;/p&gt;
&lt;h4 id=&#34;如果acknak出错-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果acknak出错-rdt21&#34;&gt;#&lt;/a&gt; 如果 ACK/NAK 出错 -&amp;gt; rdt2.1&lt;/h4&gt;
&lt;p&gt;增加序号 0,1&lt;/p&gt;
&lt;p&gt;根据收到的序号即可确定是否正在重传前一个发送分组&lt;/p&gt;
&lt;h4 id=&#34;nak-free-在ack后加序号-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nak-free-在ack后加序号-rdt22&#34;&gt;#&lt;/a&gt; NAK free 在 ACK 后加序号 -&amp;gt; rdt2.2&lt;/h4&gt;
&lt;p&gt;为后面发送多个数据做准备&lt;/p&gt;
&lt;p&gt;确认信息减少一般，协议简单&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;#&lt;/a&gt; 经具有比特差错的丢包信道的可靠数据传输 rdt3.0&lt;/h4&gt;
&lt;p&gt;比特交替协议 alternating-bit protocol&lt;/p&gt;
&lt;p&gt;设置倒计数计时器 (countdown timer) ，一旦超过时间，则重传&lt;/p&gt;
&lt;p&gt;虽然可能造成冗余数据分组（duplicate data packet），但 rdt2.0 已经处理了这部分内容&lt;/p&gt;
&lt;h3 id=&#34;流水线可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流水线可靠数据传输协议&#34;&gt;#&lt;/a&gt; 流水线可靠数据传输协议&lt;/h3&gt;
&lt;p&gt;rdt3.0 的&lt;strong&gt;停等协议&lt;/strong&gt;降低了传输的性能，等待到收到回复后才进行下一步操作，链路的利用率太低。&lt;/p&gt;
&lt;p&gt;因此，开发了流水线技术，即一次传输多个分组。&lt;/p&gt;
&lt;h3 id=&#34;回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; 回退 N 步 Go-Back-N —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;p&gt;N - window size 窗口长度&lt;/p&gt;
&lt;p&gt;sliding-window protocol 滑动窗口协议&lt;/p&gt;
&lt;h4 id=&#34;发送方响应的事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方响应的事件&#34;&gt;#&lt;/a&gt; 发送方响应的事件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上层调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到一个 ACK 累计确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时事件&lt;/p&gt;
&lt;p&gt;如果出现超时，发送方重传所有已发送但还未被确认过的分组。&lt;/p&gt;
&lt;p&gt;如果收到一个 ACK，但仍有已发送但未被确认的分组，则定时器被重新启动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接收方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;接收方若收到 失序、错误分组，则丢弃该分组，并为&lt;strong&gt;最近按序接收的分组&lt;/strong&gt;重新发送 ACK。&lt;/p&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;p&gt;接收缓存简单&lt;/p&gt;
&lt;h4 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;单个分组的差错就能引起 GBN 重传大量分组&lt;/p&gt;
&lt;p&gt;（配套的 GBN Java 小程序好好玩&lt;/p&gt;
&lt;h3 id=&#34;selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; Selective Repeat SR —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;h4 id=&#34;接收方-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方-2&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;失序的分组将被缓存直到所有丢失分组（即序号更小的分组）皆被接收&lt;/p&gt;
&lt;p&gt;接收到后为&lt;strong&gt;接收的分组&lt;/strong&gt;发送 ACK&lt;/p&gt;
&lt;p&gt;不在缓存范围内的分组将被丢失&lt;/p&gt;
&lt;h4 id=&#34;发送方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方&#34;&gt;#&lt;/a&gt; 发送方&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从上层收到数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时 —— 每个分组都要有自己的逻辑计时器，超时发送后只能发送一个分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到 ACK—— 窗口基序号向前移动到具有最小序号的未确认分组处，如果窗口移动了并且有序号落在窗口内的为发送分组，则发送这些分组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可实际操作一下小程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出错率低适合用 GBN，链路容量大适合用 SR&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;面向连接的运输tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的运输tcp&#34;&gt;#&lt;/a&gt; 面向连接的运输：TCP&lt;/h2&gt;
&lt;h3 id=&#34;tcp连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接&#34;&gt;#&lt;/a&gt; TCP 连接&lt;/h3&gt;
&lt;p&gt;全双工服务 full-duplex service&lt;/p&gt;
&lt;p&gt;最大报文段长度 MSS Maximum Segment Size&lt;/p&gt;
&lt;h3 id=&#34;tcp报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp报文段结构&#34;&gt;#&lt;/a&gt; TCP 报文段结构&lt;/h3&gt;
&lt;p&gt;Holy &amp;amp;^%@! That idiot made a TCP header diagram in Lego(TM)!&lt;/p&gt;
&lt;p&gt;有趣，但孩子不玩乐高（x&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yaWdodGVvdXNpdC53b3JkcHJlc3MuY29tLzIwMTAvMDYvMjcvcHJhY3RpY2FsLXZpc3VhbC10aHJlZS1kaW1lbnNpb25hbC1wZWRhZ29neS1mb3ItaW50ZXJuZXQtcHJvdG9jb2wtcGFja2V0LWhlYWRlci1jb250cm9sLWZpZWxkcy8=&#34;&gt;https://righteousit.wordpress.com/2010/06/27/practical-visual-three-dimensional-pedagogy-for-internet-protocol-packet-header-control-fields/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;源端口号、目标端口、序号、确认号、首部长度、保留未用、标志字段、接收窗口、因特网检验和、紧急数据指针、选项、数据&lt;/p&gt;
&lt;h4 id=&#34;序号和确认号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序号和确认号&#34;&gt;#&lt;/a&gt; 序号和确认号&lt;/h4&gt;
&lt;p&gt;在主机 A 的一个进程与主机 B 的一个进程的连接中，主机 A 填充进报文段的&lt;strong&gt;确认号&lt;/strong&gt;是主机 A 期望从主机 B 收到的下一字节的序号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;累积确认&lt;/strong&gt;：TCP 只确认该流中至第一个丢失字节为止的字节&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;捎带&lt;/strong&gt;：对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据的报文段中&lt;/p&gt;
&lt;h3 id=&#34;往返时间的估计与超时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#往返时间的估计与超时&#34;&gt;#&lt;/a&gt; 往返时间的估计与超时&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;指数加权移动平均&lt;/strong&gt;：根据较近的 SampleRTT 的值估计目前的平均&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时间隔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;TimeoutInterval = EstimatedRTT + 4 * DevRTT
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（用了一些公式计算出了 EstimatedRTT 和 DevRTT，进而估算 TimeoutInterval）&lt;/p&gt;
&lt;h3 id=&#34;可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输&#34;&gt;#&lt;/a&gt; 可靠数据传输&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;超时间隔加倍&lt;/strong&gt;：再次超时，超时间隔设置为原来的两倍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冗余 ACK&lt;/strong&gt;：一旦收到 3 个冗余 ACK，TCP 就执行快速重传（fast retransmit）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 是 GBN 和 SR 协议的混合体&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h3&gt;
&lt;p&gt;区分流量控制和拥塞控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量控制&lt;/strong&gt;是端到端的控制，例如 A 通过网络给 B 发数据，A 发送的太快导致 B 没法接收 (B 缓冲窗口过小或者处理过慢)，这时候的控制就是流量控制，原理是通过&lt;strong&gt;滑动窗口的大小&lt;/strong&gt;改变来实现。 其中，rwnd 指接收窗口 receive window。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;LastByteSent - LastByteAcked &amp;lt;= rwnd
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;是 A 与 B 之间的网络发生堵塞导致传输过慢或者丢包，来不及传输。防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络性能有关的所有因素。&lt;/p&gt;
&lt;h3 id=&#34;tcp连接管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接管理&#34;&gt;#&lt;/a&gt; TCP 连接管理&lt;/h3&gt;
&lt;p&gt;SYN&lt;/p&gt;
&lt;p&gt;FIN&lt;/p&gt;
&lt;p&gt;通过三次握手建立连接，两次握手会造成半连接（只有一端维护了连接）&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制原理&#34;&gt;#&lt;/a&gt; 拥塞控制原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;拥塞表现&lt;/strong&gt;：分组丢失、延时较长&lt;/p&gt;
&lt;h3 id=&#34;拥塞原因与代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因与代价&#34;&gt;#&lt;/a&gt; 拥塞原因与代价&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当分组的到达速率接近链路容量时，分组经历巨大的排队时延&lt;/li&gt;
&lt;li&gt;发送方必须执行重传以补偿因为缓存溢出而丢失（丢弃）的分组&lt;/li&gt;
&lt;li&gt;发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽转发不必要的分组副本&lt;/li&gt;
&lt;li&gt;当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费调了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;端到端拥塞控制&lt;/li&gt;
&lt;li&gt;网络辅助拥塞控制（NI 字段表示轻微拥塞，CI 字段表示拥塞指示）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;TCP 使用端到端的拥塞控制，而不是网络辅助的拥塞控制。网络辅助的拥塞控制代价过高。&lt;/p&gt;
&lt;h3 id=&#34;指导性原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指导性原则&#34;&gt;#&lt;/a&gt; 指导性原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个丢失的报文段意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率。&lt;/li&gt;
&lt;li&gt;一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率。&lt;/li&gt;
&lt;li&gt;宽带检测&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp拥塞控制算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制算法&#34;&gt;#&lt;/a&gt; TCP 拥塞控制算法&lt;/h3&gt;
&lt;h4 id=&#34;慢启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢启动&#34;&gt;#&lt;/a&gt; 慢启动&lt;/h4&gt;
&lt;p&gt;指数增长，每过一个 RTT，发送速率就翻番&lt;/p&gt;
&lt;h4 id=&#34;拥塞避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞避免&#34;&gt;#&lt;/a&gt; 拥塞避免&lt;/h4&gt;
&lt;p&gt;线性增长，无论何时到达一个新的确认，就将 cwnd 增加一个 MSS 字节&lt;/p&gt;
&lt;h4 id=&#34;快速恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速恢复&#34;&gt;#&lt;/a&gt; 快速恢复&lt;/h4&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/</guid>
            <title>Lecture02-应用层</title>
            <link>https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Sun, 11 Sep 2022 00:20:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;TCP 和 UDP 编程相关总结暂缺。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第二章-应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章-应用层&#34;&gt;#&lt;/a&gt; 第二章 应用层&lt;/h1&gt;
&lt;h2 id=&#34;应用层协议原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层协议原理&#34;&gt;#&lt;/a&gt; 应用层协议原理&lt;/h2&gt;
&lt;h3 id=&#34;网络应用程序体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用程序体系结构&#34;&gt;#&lt;/a&gt; 网络应用程序体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户 - 服务器体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2P 体系结构&lt;/p&gt;
&lt;p&gt;主机为对等方，具有自扩展性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/S 和 P2P 体系结构的混合体&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进程通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程通信&#34;&gt;#&lt;/a&gt; 进程通信&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端与服务器的进程&lt;/p&gt;
&lt;p&gt;发起通信的进程被识别为客户，在会话开始时等待联系的进程是服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程与计算机网络之间的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;套接字&lt;/strong&gt;接口，也成为应用程序编程接口，是同一台主机内应用层与运输层直接的接口。&lt;/p&gt;
&lt;p&gt;层间接口必须要携带：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传什么（要传输的报文）&lt;/li&gt;
&lt;li&gt;谁传的（IP + 端口号）&lt;/li&gt;
&lt;li&gt;传给谁（IP + 端口号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 四元组（源 IP、源端口号、目标 IP、目标端口号）&lt;/li&gt;
&lt;li&gt;UDP 二元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可供应用程序使用的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可供应用程序使用的运输服务&#34;&gt;#&lt;/a&gt; 可供应用程序使用的运输服务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可靠的数据传输&lt;/li&gt;
&lt;li&gt;吞吐量&lt;/li&gt;
&lt;li&gt;定时&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;因特网提供的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网提供的运输服务&#34;&gt;#&lt;/a&gt; 因特网提供的运输服务&lt;/h3&gt;
&lt;h4 id=&#34;tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; TCP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;面向连接的服务&lt;/li&gt;
&lt;li&gt;可靠的数据传送服务&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;SSL 加密&lt;/li&gt;
&lt;li&gt;不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp&#34;&gt;#&lt;/a&gt; UDP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以区分进程，无需建立链接&lt;/li&gt;
&lt;li&gt;不可靠&lt;/li&gt;
&lt;li&gt;没有拥塞、流量控制，不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web和http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web和http&#34;&gt;#&lt;/a&gt; Web 和 HTTP&lt;/h2&gt;
&lt;h3 id=&#34;http概况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http概况&#34;&gt;#&lt;/a&gt; HTTP 概况&lt;/h3&gt;
&lt;p&gt;HyperText Transfer Protocal, HTTP 超文本传输协议&lt;/p&gt;
&lt;p&gt;HTTP 定义了 Web 客户向 Web 服务器请求 Web 页面的方式，以及服务器向客户传送 Web 页面的方式。&lt;/p&gt;
&lt;p&gt;HTTP 使用 TCP 作为它的支撑运输协议。&lt;/p&gt;
&lt;p&gt;HTTP 是一个无状态协议，因为 HTTP 不保存关于客户的任何信息。&lt;/p&gt;
&lt;h3 id=&#34;非持续性连接和持续连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非持续性连接和持续连接&#34;&gt;#&lt;/a&gt; 非持续性连接和持续连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非持续连接：每个请求 / 相应对是经一个单独的 TCP 连接发送，HTTP/1.0 使用非持久连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持续连接：所有的请求及其相应经相同的 TCP 连接发送，HTTP/1.1 默认使用持久连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非流水方式的持久 HTTP（客户端在收到前一个请求的相应之后再发出下一个请求）&lt;/li&gt;
&lt;li&gt;流水方式的持久 HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文格式&#34;&gt;#&lt;/a&gt; HTTP 报文格式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 请求报文
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 响应报文
&lt;ul&gt;
&lt;li&gt;状态行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h3&gt;
&lt;p&gt;提高 Web 服务器的性能，希望把内容和用户身份联系起来。&lt;/p&gt;
&lt;p&gt;cookie 的技术有 4 个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 HTTP 响应报文中有一个 cookie 首部行&lt;/li&gt;
&lt;li&gt;在 HTTP 请求报文中有一个 cookie 的首部行&lt;/li&gt;
&lt;li&gt;在用户端系统中存有 cookie 组件，并由用户的浏览器进行管理&lt;/li&gt;
&lt;li&gt;位于 Web 站点的一个后端数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web缓存&#34;&gt;#&lt;/a&gt; Web 缓存&lt;/h3&gt;
&lt;p&gt;web 缓存器也叫代理服务器&lt;/p&gt;
&lt;h3 id=&#34;get方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get方法&#34;&gt;#&lt;/a&gt; Get 方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;缓存是为了性能，清除是为了更新&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;因特网中的电子邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网中的电子邮件&#34;&gt;#&lt;/a&gt; 因特网中的电子邮件&lt;/h2&gt;
&lt;p&gt;SMTP&lt;/p&gt;
&lt;p&gt;POP3 - 本地管理文件夹&lt;/p&gt;
&lt;p&gt;IMAP - 远程管理文件夹&lt;/p&gt;
&lt;h2 id=&#34;dns因特网的目录服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns因特网的目录服务&#34;&gt;#&lt;/a&gt; DNS：因特网的目录服务&lt;/h2&gt;
&lt;p&gt;DNS - Domain Name System 域名系统&lt;/p&gt;
&lt;p&gt;DNS 协议运行在 UDP 之上，使用 53 号端口。&lt;/p&gt;
&lt;h3 id=&#34;目的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的&#34;&gt;#&lt;/a&gt; 目的&lt;/h3&gt;
&lt;p&gt;实现域名和 IP 地址的转换&lt;/p&gt;
&lt;p&gt;主机别名&lt;/p&gt;
&lt;p&gt;邮件服务器别名&lt;/p&gt;
&lt;p&gt;负载分配&lt;/p&gt;
&lt;h3 id=&#34;集中式设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式设计&#34;&gt;#&lt;/a&gt; 集中式设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单点故障&lt;/li&gt;
&lt;li&gt;通信容量&lt;/li&gt;
&lt;li&gt;远距离的集中式数据库&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式-层次数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式-层次数据库&#34;&gt;#&lt;/a&gt; 分布式、层次数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根 DNS 服务器&lt;/li&gt;
&lt;li&gt;顶级域 DNS 服务器&lt;/li&gt;
&lt;li&gt;权威 DNS 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;域与物理划分无关，是逻辑的划分&lt;/p&gt;
&lt;h3 id=&#34;查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询&#34;&gt;#&lt;/a&gt; 查询&lt;/h3&gt;
&lt;p&gt;迭代查询&lt;/p&gt;
&lt;p&gt;递归查询&lt;/p&gt;
&lt;h3 id=&#34;报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文&#34;&gt;#&lt;/a&gt; 报文&lt;/h3&gt;
&lt;p&gt;DNS 查询和响应的报文格式相同&lt;/p&gt;
&lt;h2 id=&#34;p2p文件分发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p文件分发&#34;&gt;#&lt;/a&gt; P2P 文件分发&lt;/h2&gt;
&lt;p&gt;可扩展性好，随着用户数增加，最短分配时间上升得较慢&lt;/p&gt;
&lt;p&gt;BitTorrent 是一种用于文件分发的流行的 P2P 协议，参与一个特定文件夹分发的所有对等方的集合被称为一个洪流。&lt;/p&gt;
&lt;h3 id=&#34;最稀缺优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最稀缺优先&#34;&gt;#&lt;/a&gt; 最稀缺优先&lt;/h3&gt;
&lt;p&gt;首先请求最稀缺的块&lt;/p&gt;
&lt;h3 id=&#34;一报还一报&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一报还一报&#34;&gt;#&lt;/a&gt; 一报还一报&lt;/h3&gt;
&lt;p&gt;向给自己提供最大宽带的服务发送块&lt;/p&gt;
&lt;p&gt;每个 30s，随机选择其他 peer 发送块&lt;/p&gt;
&lt;h3 id=&#34;结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h3&gt;
&lt;p&gt;集中&lt;/p&gt;
&lt;p&gt;分散&lt;/p&gt;
&lt;p&gt;半分散&lt;/p&gt;
&lt;h2 id=&#34;视频流和内容分发网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视频流和内容分发网&#34;&gt;#&lt;/a&gt; 视频流和内容分发网&lt;/h2&gt;
&lt;h3 id=&#34;dash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dash&#34;&gt;#&lt;/a&gt; DASH&lt;/h3&gt;
&lt;p&gt;Dynamic Adaptive Streaming over HTTP 经 HTTP 的动态适应性流&lt;/p&gt;
&lt;p&gt;服务器：将视频文件分割成多个块，每个块独立存储，编码于不同码率，告示文件提供不同块的 URL&lt;/p&gt;
&lt;p&gt;客户端：获取告示文件，测量服务器到客户端的带宽，选择合适的码率的编码块&lt;/p&gt;
&lt;h3 id=&#34;内容分发网cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内容分发网cdn&#34;&gt;#&lt;/a&gt; 内容分发网 CDN&lt;/h3&gt;
&lt;p&gt;Content Distribution Network CDN&lt;/p&gt;
&lt;p&gt;做一些 copy&lt;/p&gt;
&lt;h2 id=&#34;套接字编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字编程&#34;&gt;#&lt;/a&gt; 套接字编程&lt;/h2&gt;
&lt;h3 id=&#34;tcp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp编程&#34;&gt;#&lt;/a&gt; TCP 编程&lt;/h3&gt;
&lt;h3 id=&#34;udp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp编程&#34;&gt;#&lt;/a&gt; UDP 编程&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/</guid>
            <title>Lecture01</title>
            <link>https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Fri, 09 Sep 2022 09:54:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本系列参考中科大郑铨老师网课和《计算机网络：自顶向下》整理。&lt;/p&gt;
&lt;p&gt;因为是听完课很久之后整理的，所以只整理了纲要（趴&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一章-概论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-概论&#34;&gt;#&lt;/a&gt; 第一章 概论&lt;/h1&gt;
&lt;h2 id=&#34;什么是internet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是internet&#34;&gt;#&lt;/a&gt; 什么是 Internet？&lt;/h2&gt;
&lt;h3 id=&#34;从构成因特网的基本硬件和软件组件理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从构成因特网的基本硬件和软件组件理解&#34;&gt;#&lt;/a&gt; 从构成因特网的基本硬件和软件组件理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;节点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机及其上运行的应用程序&lt;/li&gt;
&lt;li&gt;路由器、交换机等网络交换设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接入网链路：主机连接到互联网的链路&lt;/li&gt;
&lt;li&gt;主干链路：路由器间的链路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;#&lt;/a&gt; 从服务角度、分布式应用提供服务的联网基础设施理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用通信设施进行通信的分布式应用&lt;/li&gt;
&lt;li&gt;通信基础设施为 apps 提供编程接口（通信服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是协议&#34;&gt;#&lt;/a&gt; 什么是协议？&lt;/h2&gt;
&lt;p&gt;协议定义了在两个或多个通信实体之间交换的报文的&lt;strong&gt;格式和顺序&lt;/strong&gt;，以及报文发送和 / 或接收一条报文或其他事件所采取的&lt;strong&gt;动作&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;网络结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络结构&#34;&gt;#&lt;/a&gt; 网络结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络边缘&lt;/p&gt;
&lt;p&gt;端系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端 / 服务器模式&lt;/li&gt;
&lt;li&gt;对等（peer-peer）模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络核心&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电路交换&lt;/p&gt;
&lt;p&gt;频分复用（FDM，Frequency-Division Multiplexing）和时分复用（TDM, Time-Division Multiplexing）&lt;/p&gt;
&lt;p&gt;独享资源，不共享，用于电话，不适合计算机之间的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换&lt;/p&gt;
&lt;p&gt;储存和转发、时延（节点处理时延、排队时延、传输时延、传播时延）和分组丢失、转发表和路由选择协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据报网络&lt;/li&gt;
&lt;li&gt;虚电路网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接入网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家庭接入：DSL（数字用户线）、电缆、FTTH（光纤到户）、拨号和卫星&lt;/li&gt;
&lt;li&gt;企业（和家庭）接入：以太网和 WiFi&lt;/li&gt;
&lt;li&gt;广域无线接入：3G 和 LTE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理媒体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导引型媒体
&lt;ul&gt;
&lt;li&gt;双绞铜线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非导引型媒体
&lt;ul&gt;
&lt;li&gt;陆地无线电信道&lt;/li&gt;
&lt;li&gt;卫星无线电信道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;internet结构和isp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#internet结构和isp&#34;&gt;#&lt;/a&gt; Internet 结构和 ISP&lt;/h2&gt;
&lt;p&gt;互联网络结构：网络的网络&lt;/p&gt;
&lt;p&gt;端系统通过接入 ISPs（Internet Service Providers）连接到互联网中&lt;/p&gt;
&lt;p&gt;因特网内容服务商（ICP, Internet Content Providers）会构建自己的网络&lt;/p&gt;
&lt;h2 id=&#34;协议层次及其服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议层次及其服务模型&#34;&gt;#&lt;/a&gt; 协议层次及其服务模型&lt;/h2&gt;
&lt;p&gt;上层依赖下层提供的服务，并创造新的服务和功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;p&gt;为人类用户或者其他用户进程提供网络应用服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运输层&lt;/p&gt;
&lt;p&gt;主机和主机的数据传输&lt;/p&gt;
&lt;p&gt;细分网络层的服务，进程到进程（port）&lt;/p&gt;
&lt;p&gt;将不可靠的通信变成可靠的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层&lt;/p&gt;
&lt;p&gt;为数据报从源到目的选择路由&lt;/p&gt;
&lt;p&gt;主机主机之间的通信，端到端通信，不可靠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路层&lt;/p&gt;
&lt;p&gt;point to point 相邻网络节点间的数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理层&lt;/p&gt;
&lt;p&gt;在线路上传送 bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
            <title>Lecture01-计算机系统概述</title>
            <link>https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 08 Sep 2022 20:30:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;第一讲，以及对于书籍的第一章重点知识点整理&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;课程随笔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程随笔&#34;&gt;#&lt;/a&gt; 课程随笔&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用 电子 数字 计算机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用&lt;/p&gt;
&lt;p&gt;电子&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;h3 id=&#34;组织与结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组织与结构&#34;&gt;#&lt;/a&gt; 组织与结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;结构 (对于程序员是可见的)
&lt;ul&gt;
&lt;li&gt;一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别&lt;/li&gt;
&lt;li&gt;包括：指令集、各类数据类型的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织 (对于程序员是不可见的)
&lt;ul&gt;
&lt;li&gt;一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。&lt;/li&gt;
&lt;li&gt;包括：控制信号、存储技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机发展历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历史&#34;&gt;#&lt;/a&gt; 计算机发展历史&lt;/h2&gt;
&lt;p&gt;真空管&lt;/p&gt;
&lt;p&gt;晶体管&lt;/p&gt;
&lt;p&gt;集成电路（scale 越来越大，SSI-&amp;gt;MSI-&amp;gt;LSI-&amp;gt;VLSI-&amp;gt;ULSI）&lt;/p&gt;
&lt;p&gt;摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼结构的实现与演变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼结构的实现与演变&#34;&gt;#&lt;/a&gt; 冯诺依曼结构的实现与演变&lt;/h2&gt;
&lt;h3 id=&#34;cpu-北桥-南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-北桥-南桥&#34;&gt;#&lt;/a&gt; CPU + 北桥 + 南桥&lt;/h3&gt;
&lt;p&gt;芯片近北桥，远离南桥。&lt;/p&gt;
&lt;h4 id=&#34;南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#南桥&#34;&gt;#&lt;/a&gt; 南桥&lt;/h4&gt;
&lt;p&gt;南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理&lt;strong&gt;低速信号&lt;/strong&gt;，通过北桥与中央处理器联系。&lt;br /&gt;
南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。&lt;br /&gt;
PCI、SATA、IDE、USB。&lt;/p&gt;
&lt;h4 id=&#34;北桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#北桥&#34;&gt;#&lt;/a&gt; 北桥&lt;/h4&gt;
&lt;p&gt;北桥设计用来处理&lt;strong&gt;高速信号&lt;/strong&gt;，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。&lt;br /&gt;
芯片组（chipset）的名称就是以北桥芯片的名称来命名的。&lt;br /&gt;
北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。&lt;br /&gt;
PCIE/AGP、Memory、CPU。&lt;/p&gt;
&lt;h3 id=&#34;cpu-pch集成显卡-显示部件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-pch集成显卡-显示部件&#34;&gt;#&lt;/a&gt; CPU + PCH（集成显卡 - 显示部件）&lt;/h3&gt;
&lt;p&gt;PCH 全称为 Platform Controller Hub，是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==&#34;&gt; intel 公司&lt;/span&gt;的集成南桥。&lt;/p&gt;
&lt;p&gt;北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.&lt;/p&gt;
&lt;h2 id=&#34;计算机性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机性能&#34;&gt;#&lt;/a&gt; 计算机性能&lt;/h2&gt;
&lt;h3 id=&#34;cpu性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
&lt;p&gt;时钟频率 / 时钟周期&lt;/p&gt;
&lt;p&gt;CPI&lt;/p&gt;
&lt;p&gt;MIPS（每秒百万条指令）&lt;/p&gt;
&lt;p&gt;MRLOPS（每秒百万条浮点操作）&lt;/p&gt;
&lt;p&gt;基准程序&lt;/p&gt;
&lt;h3 id=&#34;性能设计的基本原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能设计的基本原则&#34;&gt;#&lt;/a&gt; 性能设计的基本原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大概率事件优先原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿姆代尔定律 Amdahl 定律&lt;/p&gt;
&lt;p&gt;技术或设计的某一部分的加速不会导致性能产生相应的改进。性能的提高是有限度的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Little 定律&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对应书籍整理-计算机系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应书籍整理-计算机系统概述&#34;&gt;#&lt;/a&gt; 对应书籍整理 - 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机结构&#34;&gt;#&lt;/a&gt; 计算机结构&lt;/h2&gt;
&lt;h3 id=&#34;硬件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件&#34;&gt;#&lt;/a&gt; 硬件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器 —— 各种算数逻辑运算&lt;/li&gt;
&lt;li&gt;控制器 —— 对指令译码并送出操作控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器 —— 存放指令和数据&lt;/p&gt;
&lt;p&gt;包括 ROM 芯片和 RAM 芯片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;li&gt;高速缓存（cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外存储器&lt;/p&gt;
&lt;p&gt;磁盘、磁带存储器、光盘存储器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 设备 —— 计算机和用户之间的信息交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件&#34;&gt;#&lt;/a&gt; 软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统软件 —— 介于计算机硬件和应用软件之间的各种软件
&lt;ul&gt;
&lt;li&gt;操作系统软件&lt;/li&gt;
&lt;li&gt;语言处理系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;各类实用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件
&lt;ul&gt;
&lt;li&gt;办公自动化软件&lt;/li&gt;
&lt;li&gt;互联网应用软件&lt;/li&gt;
&lt;li&gt;多媒体处理软件&lt;/li&gt;
&lt;li&gt;股票分析软件&lt;/li&gt;
&lt;li&gt;游戏软件&lt;/li&gt;
&lt;li&gt;管理信息系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;程序开发和执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序开发和执行过程&#34;&gt;#&lt;/a&gt; 程序开发和执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;高级语言、低级语言（汇编语言）-&amp;gt; 机器语言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;对应计算机用户&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;最终用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级语言虚拟机&lt;/td&gt;
&lt;td&gt;高级语言程序员或者应用程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汇编语言虚拟机&lt;/td&gt;
&lt;td&gt;汇编语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统虚拟机&lt;/td&gt;
&lt;td&gt;系统管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器语言虚拟机&lt;/td&gt;
&lt;td&gt;机器语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源程序&lt;/strong&gt;通过&lt;strong&gt;编译程序和汇编程序&lt;/strong&gt;得到&lt;strong&gt;目标程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu性能-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能-2&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
 ]]></description>
        </item>
    </channel>
</rss>
