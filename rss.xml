<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Carpe diem</title>
        <subtitle>pluck the day</subtitle>
        <icon>https://quas-modo.github.io/images/favicon.ico</icon>
        <link>https://quas-modo.github.io</link>
        <author>
          <name>quas-modo</name>
        </author>
        <description>notes/thoughts/nonsense</description>
        <language>zh-CN</language>
        <pubDate>Wed, 21 Sep 2022 20:00:27 +0800</pubDate>
        <lastBuildDate>Wed, 21 Sep 2022 20:00:27 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/</guid>
            <title>Lecture04-网络层：数据平面</title>
            <link>https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Wed, 21 Sep 2022 20:00:27 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;掌握 IP 编址就是掌握因特网的网络层！（雾）&lt;br /&gt;
Bulter Lampson—— 在一个时刻做一件事，将他做好。一个接口应当俘获一个抽象的最低限度的要件。不要进行一般化，一般化通常是错误的。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第四章-网络层数据平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章-网络层数据平面&#34;&gt;#&lt;/a&gt; 第四章 网络层：数据平面&lt;/h1&gt;
&lt;h2 id=&#34;网络层概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层概述&#34;&gt;#&lt;/a&gt; 网络层概述&lt;/h2&gt;
&lt;h3 id=&#34;数据平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据平面&#34;&gt;#&lt;/a&gt; &lt;strong&gt;数据平面&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;网络层中每台路由器的功能，决定到达路由器输入链路之一的数据报如何转发到该路由器的输出链路之一，每台路由器如何选择。&lt;/p&gt;
&lt;p&gt;传统方式的转发功能基于目标地址和转发表，SDN 方式基于多个字段和流表。&lt;/p&gt;
&lt;h3 id=&#34;控制平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制平面&#34;&gt;#&lt;/a&gt; &lt;strong&gt;控制平面&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;网络范围的逻辑，控制数据报沿着源主机到目的主机的端到端路径中路由器的路由方式，协调本地路由器的转发动作。&lt;/p&gt;
&lt;p&gt;传统的路由方法在路由器中实现，SDN 方法在远程的服务器中实现。&lt;/p&gt;
&lt;p&gt;传统方式，分布式的去做，控制平面和数据平面在一起完成。&lt;/p&gt;
&lt;p&gt;SND 有一个统一的服务器，实现解耦合的功能。&lt;/p&gt;
&lt;h3 id=&#34;网络层功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层功能&#34;&gt;#&lt;/a&gt; &lt;strong&gt;网络层功能&lt;/strong&gt;：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;转发，在数据平面实现&lt;/li&gt;
&lt;li&gt;路由选择，在控制平面中实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络服务模型&#34;&gt;#&lt;/a&gt; &lt;strong&gt;网络服务模型&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;对于单个数据报服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于单个数据报服务&#34;&gt;#&lt;/a&gt; 对于单个数据报服务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;可靠传送&lt;/li&gt;
&lt;li&gt;延迟保证&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;对于数据报流的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对于数据报流的服务&#34;&gt;#&lt;/a&gt; 对于数据报流的服务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;保序数据报传送&lt;/li&gt;
&lt;li&gt;保证流的最小宽带&lt;/li&gt;
&lt;li&gt;分组之间的延迟差&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;路由器工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器工作原理&#34;&gt;#&lt;/a&gt; 路由器工作原理&lt;/h2&gt;
&lt;p&gt;路由器包括&lt;strong&gt;输入端口、交换结构、输出端口和路由选择处理器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;基于目标的转发：仅仅依赖于 IP 数据报的目标 IP 地址。&lt;/p&gt;
&lt;p&gt;通用转发：基于头部字段的任意集合进行转发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“匹配” 加 “动作”&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;输入端口和基于目的地转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入端口和基于目的地转发&#34;&gt;#&lt;/a&gt; 输入端口和基于目的地转发&lt;/h3&gt;
&lt;h4 id=&#34;查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找&#34;&gt;#&lt;/a&gt; 查找&lt;/h4&gt;
&lt;p&gt;使用转发表来查找输出端口&lt;/p&gt;
&lt;p&gt;路由器用分组目的地址的前缀与该表中的表项进行匹配。当有多个匹配时，使用&lt;strong&gt;最长前缀匹配规则&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;其他动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他动作&#34;&gt;#&lt;/a&gt; 其他动作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;出现物理层和链路层处理&lt;/li&gt;
&lt;li&gt;检查分组的版本号、检验和以及寿命字段&lt;/li&gt;
&lt;li&gt;必须更新用于网络管理的计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输入端口缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入端口缓存&#34;&gt;#&lt;/a&gt; 输入端口缓存&lt;/h4&gt;
&lt;p&gt;排队延迟以及由于输入缓存溢出造成丢失&lt;/p&gt;
&lt;h3 id=&#34;交换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换&#34;&gt;#&lt;/a&gt; 交换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;经内存交换&lt;/p&gt;
&lt;p&gt;先将分组存入内存，再将分组复制到输出端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经总线交换&lt;/p&gt;
&lt;p&gt;一次只有一个分组能够快约总线，路由器的交换带宽受总线速率的限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经互联网络交换&lt;/p&gt;
&lt;p&gt;使用更复杂的互联网络，例如使用纵横式交换机、榕树网络，纵横式交换机就是一种由 2N 条总线组成的互联网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;输出端口处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出端口处理&#34;&gt;#&lt;/a&gt; 输出端口处理&lt;/h3&gt;
&lt;p&gt;取出排队的分组进行传输，执行所需的链路层和物理层传输功能。&lt;/p&gt;
&lt;h3 id=&#34;何处出现排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何处出现排队&#34;&gt;#&lt;/a&gt; 何处出现排队&lt;/h3&gt;
&lt;h4 id=&#34;输入排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入排队&#34;&gt;#&lt;/a&gt; 输入排队&lt;/h4&gt;
&lt;p&gt;HOL 阻塞 Head-Of-the-Line 线路前端阻塞&lt;/p&gt;
&lt;p&gt;只要输入链路上的分组到达速率达到其容量的 58%，在某些假设前提下，输入队列长度就会无限制地增大。&lt;/p&gt;
&lt;h4 id=&#34;输出排队&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出排队&#34;&gt;#&lt;/a&gt; 输出排队&lt;/h4&gt;
&lt;p&gt;如何丢弃？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弃尾&lt;/li&gt;
&lt;li&gt;根据优先权&lt;/li&gt;
&lt;li&gt;随机丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分组调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分组调度&#34;&gt;#&lt;/a&gt; 分组调度&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先进先出&lt;/p&gt;
&lt;p&gt;FIFO first in first out&lt;/p&gt;
&lt;p&gt;FCFS first come first service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权排队&lt;/p&gt;
&lt;p&gt;优先权高的先进行传输&lt;/p&gt;
&lt;p&gt;非抢占式优先权排队：一旦分组开始传输，就不能打断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环和加权公平排队&lt;/p&gt;
&lt;p&gt;保持工作排队，不允许链路保持空闲&lt;/p&gt;
&lt;p&gt;类 n 的分组传输完毕后，就传输类 n+1 的分组，如果该类暂时没有分组，就跳到下一个类进行传输。&lt;/p&gt;
&lt;p&gt;每类的服务时间可能是带有权重的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网络协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络协议&#34;&gt;#&lt;/a&gt; 网络协议&lt;/h2&gt;
&lt;p&gt;以网络为单位来访问和向外传输&lt;/p&gt;
&lt;p&gt;掌握 IP 编址就是掌握因特网的网络层！&lt;/p&gt;
&lt;h3 id=&#34;ipv4数据报格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4数据报格式&#34;&gt;#&lt;/a&gt; IPv4 数据报格式&lt;/h3&gt;
&lt;p&gt;版本&lt;/p&gt;
&lt;p&gt;首部长度&lt;/p&gt;
&lt;p&gt;服务类型&lt;/p&gt;
&lt;p&gt;数据报长度&lt;/p&gt;
&lt;p&gt;16 比特标识&lt;/p&gt;
&lt;p&gt;标志&lt;/p&gt;
&lt;p&gt;13 比特片偏移&lt;/p&gt;
&lt;p&gt;寿命&lt;/p&gt;
&lt;p&gt;上层协议&lt;/p&gt;
&lt;p&gt;首部检验和&lt;/p&gt;
&lt;p&gt;32 位比特源 IP 地址&lt;/p&gt;
&lt;p&gt;32 比特目标 IP 地址&lt;/p&gt;
&lt;p&gt;数据&lt;/p&gt;
&lt;h3 id=&#34;数据报分片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据报分片&#34;&gt;#&lt;/a&gt; 数据报分片&lt;/h3&gt;
&lt;p&gt;因为&lt;strong&gt;最大传送单元（MTU Maximum Transmission Unit）在链路层&lt;/strong&gt;的限制，IP 数据报的长度有限，并且，不同链路也许会有不同的链路层协议，有不同的 MTU，所以要对于数据报做一些调整。&lt;/p&gt;
&lt;p&gt;分片，重新组装，标记&lt;strong&gt;表示、标志和片偏移字段&lt;/strong&gt;【20 字节头部、数据、偏移量、最后一片的标志比特为 0】&lt;/p&gt;
&lt;h3 id=&#34;ipv4编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4编址&#34;&gt;#&lt;/a&gt; IPv4 编址&lt;/h3&gt;
&lt;p&gt;32 比特（4 字节），共有约 40 亿个。&lt;/p&gt;
&lt;p&gt;点分十进制记法&lt;/p&gt;
&lt;p&gt;无类别域间路由选择 a.b.c.d/x&lt;/p&gt;
&lt;p&gt;为了确定子网，分开主机和路由器的每个接口，产生几个隔离的网络岛，使用接口端接这些隔离的网络的端点。这些隔离的网络中的每一个都叫作一个子网。&lt;/p&gt;
&lt;h4 id=&#34;分类编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类编址&#34;&gt;#&lt;/a&gt; 分类编址：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;A 类 1/7/24&lt;/li&gt;
&lt;li&gt;B 类 2/14/16&lt;/li&gt;
&lt;li&gt;C 类 3/21/8&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;特殊的地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊的地址&#34;&gt;#&lt;/a&gt; 特殊的地址：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全 0 - 本网络、本主机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全 1 - 广播&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;127.x.x.x 回路地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;专用网络地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 10.0.0.0-10.255.255.255&lt;/li&gt;
&lt;li&gt;B 172.16.0.0-172.31.255.255&lt;/li&gt;
&lt;li&gt;C 192.168.0.0-192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;主机如何获得ip地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主机如何获得ip地址&#34;&gt;#&lt;/a&gt; 主机如何获得 IP 地址？&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取一块地址&lt;/p&gt;
&lt;p&gt;从一个 ISP 获取一组地址，例如该 ISP 被分配了地址 200.23.16.0/20，ISP 可以将地址块分成八个长度相等的连续地址块&lt;/p&gt;
&lt;p&gt;ICANN Internet Corporation for Assigned Names and Numbers 分配地址的机构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取主机地址：动态主机配置协议&lt;/p&gt;
&lt;p&gt;DHCP Dynamic Host Configuration 动态主机配置协议 即插即用协议 零配置协议&lt;/p&gt;
&lt;p&gt;DHCP 建立在 UDP 上&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DHCP 服务器发现&lt;/li&gt;
&lt;li&gt;DHCP 服务器提供&lt;/li&gt;
&lt;li&gt;DHCP 请求&lt;/li&gt;
&lt;li&gt;DHCP ACK&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;网络地址转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络地址转换&#34;&gt;#&lt;/a&gt; 网络地址转换&lt;/h3&gt;
&lt;p&gt;NAT Network Address Translation 网络地址转换&lt;/p&gt;
&lt;p&gt;专用网络 / 具有专用地址的网络 —— 其地址仅对该网络中的设备有意义的网络&lt;/p&gt;
&lt;p&gt;局域网的地址仅在自己内部有效。&lt;/p&gt;
&lt;p&gt;与外界通信利用&lt;strong&gt; NAT 转换表&lt;/strong&gt;，记录对应的 WAN 端和 LAN 端的 IP 地址和端口号。&lt;/p&gt;
&lt;p&gt;但是会造成 NAT 穿越问题（客户端如何和网络内部的端系统建立链接）。&lt;/p&gt;
&lt;h3 id=&#34;安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全性&#34;&gt;#&lt;/a&gt; 安全性&lt;/h3&gt;
&lt;h4 id=&#34;防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙&#34;&gt;#&lt;/a&gt; 防火墙&lt;/h4&gt;
&lt;p&gt;阻挡所有的 ICMP 回显请求分组&lt;/p&gt;
&lt;p&gt;基于源和目标 IP 端口号阻挡&lt;/p&gt;
&lt;p&gt;跟踪 TCP 连接&lt;/p&gt;
&lt;h4 id=&#34;入侵检测系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#入侵检测系统&#34;&gt;#&lt;/a&gt; 入侵检测系统&lt;/h4&gt;
&lt;p&gt;检查数据报的首部字段和有效载荷，匹配数据库中的特征，如果发现匹配，则产生告警。&lt;/p&gt;
&lt;h3 id=&#34;ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv6&#34;&gt;#&lt;/a&gt; IPv6&lt;/h3&gt;
&lt;p&gt;IP 地址更新为 128 比特&lt;/p&gt;
&lt;p&gt;删去的字段：取消分片与重新组装（丢给端系统）、取消首部检验和（丢给链路层和运输层），这些都是为了加快网络中的 IP 转发速度，除去（甩锅）冗余的步骤&lt;/p&gt;
&lt;h4 id=&#34;ipv4和ipv6之间如何通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4和ipv6之间如何通信&#34;&gt;#&lt;/a&gt; IPv4 和 IPv6 之间如何通信&lt;/h4&gt;
&lt;p&gt;采用&lt;strong&gt;隧道&lt;/strong&gt;，比如说，两个 IPv6 的地址进行通信，可以把整个 IPv6 的数据报放到 IPv4 数据报的有效载荷字段当中。&lt;/p&gt;
&lt;h2 id=&#34;通用转发和sdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用转发和sdn&#34;&gt;#&lt;/a&gt; 通用转发和 SDN&lt;/h2&gt;
&lt;p&gt;匹配 + 动作&lt;/p&gt;
&lt;p&gt;通用转发基于&lt;strong&gt; OpenFlow&lt;/strong&gt; 的讨论，匹配加动作转发表在 OpenFlow 中称为&lt;strong&gt;流表（flow table）&lt;/strong&gt;，它的每个表项包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首部字段值的集合&lt;/li&gt;
&lt;li&gt;计数器集合&lt;/li&gt;
&lt;li&gt;当分组匹配流表项时采取的动作集合&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匹配&#34;&gt;#&lt;/a&gt; 匹配&lt;/h3&gt;
&lt;p&gt;OpenFlow 匹配入端口、链路层字段、网络层字段、运输层字段&lt;/p&gt;
&lt;h3 id=&#34;动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动作&#34;&gt;#&lt;/a&gt; 动作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;转发&lt;/li&gt;
&lt;li&gt;丢弃&lt;/li&gt;
&lt;li&gt;修改字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;p&gt;网络层中的设备过多&lt;/p&gt;
&lt;p&gt;数量众多、功能各异的中间盒&lt;/p&gt;
&lt;h3 id=&#34;传统方式实现网络功能的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传统方式实现网络功能的问题&#34;&gt;#&lt;/a&gt; 传统方式实现网络功能的问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;垂直集成》昂贵，不利于创造新的生态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式、固化设备功能、网络设备朱磊繁多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理困难&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量工程较为困难&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sdn&#34;&gt;#&lt;/a&gt; SDN&lt;/h3&gt;
&lt;p&gt;SDN 远程集中，将数据平面和控制平面分离&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;水平集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业界生态开放，快速创新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产业巨大&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/</guid>
            <title>Lecture01 史前及埃及美术</title>
            <link>https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/</link>
            <category term="其他" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/" />
            <category term="西方美术史" scheme="https://quas-modo.github.io/categories/%E5%85%B6%E4%BB%96/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/" />
            <category term="美术" scheme="https://quas-modo.github.io/tags/%E7%BE%8E%E6%9C%AF/" />
            <pubDate>Tue, 20 Sep 2022 00:19:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;整个艺术发展史不是技术熟练程度的发展史，而是观念和要求的变化史。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture01&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture01&#34;&gt;#&lt;/a&gt; Lecture01&lt;/h1&gt;
&lt;p&gt;并非越像越好，每个时代都是观念先行。比如威尼斯喜欢华丽精美的画作，掌权者喜欢美人；荷兰画派的画作购买者是贩夫走卒，喜欢热闹的宴席、花卉（荷兰人民的收入来源之一）等。&lt;/p&gt;
&lt;h2 id=&#34;什么是艺术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是艺术&#34;&gt;#&lt;/a&gt; 什么是艺术&lt;/h2&gt;
&lt;h3 id=&#34;艺术作为替代物&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为替代物&#34;&gt;#&lt;/a&gt; 艺术作为替代物&lt;/h3&gt;
&lt;p&gt;法国拉斯科洞窟壁画中描绘中箭的马、受伤的动物 =》人们希望在狩猎中有所收获&lt;/p&gt;
&lt;p&gt;古埃及艺术中的雕塑 -》雕塑替代灵魂回归的载体&lt;/p&gt;
&lt;p&gt;《拉霍太普夫妇坐像》&lt;/p&gt;
&lt;p&gt;两尊人物雕像都通体着色，形象安详而庄重，同一些理想化的法老雕像相比，这对夫妇的脸部显得更&lt;strong&gt;富有个性&lt;/strong&gt;。两人手按在胸前，显示着虔诚和尊严。为了追求相貌逼真，两尊雕像的眼睛都用宝石镶嵌而成，使雕像更加栩栩如生。这尊雕像虽然从形式上恪守古埃及传统的雕塑模式，但人物生动的表情由于&lt;strong&gt;表面的色彩、镶嵌的眼睛和细节的强调&lt;/strong&gt;，显得特别逼真而且富有神采。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://bkimg.cdn.bcebos.com/pic/a71ea8d3fd1f41347249ff71251f95cad1c85e47?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;阿尔诺芬尼夫妇像 -》结婚证，防止有人不认帐，记录下此刻&lt;/p&gt;
&lt;h3 id=&#34;艺术作为工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为工具&#34;&gt;#&lt;/a&gt; 艺术作为工具&lt;/h3&gt;
&lt;p&gt;殉教的教徒、遗迹&lt;/p&gt;
&lt;p&gt;辉煌的教堂 -》象征天国的荣耀，吸引教徒遵守教义&lt;/p&gt;
&lt;h3 id=&#34;艺术作为有意味的形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#艺术作为有意味的形式&#34;&gt;#&lt;/a&gt; 艺术作为有意味的形式&lt;/h3&gt;
&lt;p&gt;门克 呐喊&lt;/p&gt;
&lt;p&gt;蒙德里安 几何抽象画&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fss2.meipian.me%2Fusers%2F67937254%2F439c86c193d84d88a3a8d306681ee932.jpeg%3Fmeipian-raw%2Fbucket%2Fivwen%2Fkey%2FdXNlcnMvNjc5MzcyNTQvNDM5Yzg2YzE5M2Q4NGQ4OGEzYThkMzA2NjgxZWU5MzIuanBlZw%3D%3D%2Fsign%2F072299bb99bfa93c28775beb1be5e419.jpg&amp;amp;refer=http%3A%2F%2Fss2.meipian.me&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=auto?sec=1666193539&amp;amp;t=d4736f50491bff759c73c304298bb613&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;史前美术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#史前美术&#34;&gt;#&lt;/a&gt; 史前美术&lt;/h2&gt;
&lt;h3 id=&#34;洞窟壁画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#洞窟壁画&#34;&gt;#&lt;/a&gt; 洞窟壁画&lt;/h3&gt;
&lt;p&gt;多以动物为主，几乎都是巨大的食草动物。&lt;/p&gt;
&lt;h4 id=&#34;阿尔太米拉洞窟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿尔太米拉洞窟&#34;&gt;#&lt;/a&gt; 阿尔太米拉洞窟&lt;/h4&gt;
&lt;p&gt;绘画分布在侧洞，即有名的 “公牛大厅”，最有名的画作是《受伤的野牛》。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.baike.soso.com/p/20090107/20090107120000-105252.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;阿斯科洞窟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿斯科洞窟&#34;&gt;#&lt;/a&gt; 阿斯科洞窟&lt;/h4&gt;
&lt;p&gt;绘画多为牛、马、熊、狼、鹿等动物&lt;/p&gt;
&lt;p&gt;位于法国多尔多涅省蒙蒂尼亚克镇的韦泽尔峡谷&lt;/p&gt;
&lt;p&gt;画面已经形成了构图，与阿尔塔米拉的静态形成强烈的对比&lt;/p&gt;
&lt;h3 id=&#34;母神雕塑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#母神雕塑&#34;&gt;#&lt;/a&gt; 母神雕塑&lt;/h3&gt;
&lt;p&gt;夸张强调女性特征 —— 胸部和腹部&lt;/p&gt;
&lt;p&gt;体现母系社会中，人们对女性和生殖的崇拜&lt;/p&gt;
&lt;p&gt;《沃尔道夫的维纳斯》&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p1.ssl.qhimg.com/dr/270_500_/t011e9c54fb60fe2152.jpg?size=816x1200&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;岩画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#岩画&#34;&gt;#&lt;/a&gt; 岩画&lt;/h3&gt;
&lt;p&gt;主要分布在北欧和西班牙的拉文特地区，描绘狩猎、劳动等场面，把运动中的人物表现为剪影效果，强调动态，忽略细节。&lt;/p&gt;
&lt;h3 id=&#34;巨石建筑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#巨石建筑&#34;&gt;#&lt;/a&gt; 巨石建筑&lt;/h3&gt;
&lt;p&gt;新时期时代&lt;/p&gt;
&lt;p&gt;对巨大的石头的崇拜&lt;/p&gt;
&lt;h4 id=&#34;斯通亨治怪石圈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#斯通亨治怪石圈&#34;&gt;#&lt;/a&gt; 斯通亨治怪石圈&lt;/h4&gt;
&lt;p&gt;也许和墓葬或者是天文&lt;/p&gt;
&lt;h2 id=&#34;古埃及美术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古埃及美术&#34;&gt;#&lt;/a&gt; 古埃及美术&lt;/h2&gt;
&lt;p&gt;与埃及人的&lt;strong&gt;生死观念&lt;/strong&gt;相关，多数保留下来的艺术品出土于坟墓和纪念碑。&lt;/p&gt;
&lt;p&gt;在古埃及的壁画中，不同的人物姿势有着不同的含义。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tse1-mm.cn.bing.net/th/id/OIP-C.g0ZPDbyTIe_YGb7B-34a9gHaFj?pid=ImgDet&amp;amp;rs=1&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;古埃及美术的特征anonymity-匿名性-symbolism象征性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#古埃及美术的特征anonymity-匿名性-symbolism象征性&#34;&gt;#&lt;/a&gt; 古埃及美术的特征 ——anonymity 匿名性 symbolism 象征性&lt;/h3&gt;
&lt;h4 id=&#34;anonymity&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#anonymity&#34;&gt;#&lt;/a&gt; Anonymity&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Craftsmen,_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg&#34;&gt;&lt;img data-src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg/440px-Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Depiction of craftworkers in ancient Egypt&lt;/p&gt;
&lt;p&gt;Ancient Egyptian artists rarely left their names. The Egyptian artwork is anonymous also because most of the time it was collective. Diodorus of Sicily, who traveled and lived in Egypt, has written: &amp;quot;So, after the craftsmen have decided the height of the statue, they all go home to make the parts which they have chosen&amp;quot; (I, 98).&lt;/p&gt;
&lt;h3 id=&#34;罗塞塔石碑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#罗塞塔石碑&#34;&gt;#&lt;/a&gt; 罗塞塔石碑&lt;/h3&gt;
&lt;h3 id=&#34;荷鲁斯horus鹰头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#荷鲁斯horus鹰头&#34;&gt;#&lt;/a&gt; 荷鲁斯 Horus（鹰头）&lt;/h3&gt;
&lt;p&gt;—— 荷鲁斯之眼，荷鲁斯的右眼象征太阳&lt;/p&gt;
&lt;p&gt;法老的守护神，王权的象征&lt;/p&gt;
&lt;h3 id=&#34;阿努比斯anubis犬头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿努比斯anubis犬头&#34;&gt;#&lt;/a&gt; 阿努比斯 Anubis（犬头）&lt;/h3&gt;
&lt;h3 id=&#34;伊西斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伊西斯&#34;&gt;#&lt;/a&gt; 伊西斯&lt;/h3&gt;
&lt;p&gt;儿童的守护神&lt;/p&gt;
&lt;h3 id=&#34;金字塔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#金字塔&#34;&gt;#&lt;/a&gt; 金字塔&lt;/h3&gt;
&lt;p&gt;法老陵墓&lt;/p&gt;
&lt;p&gt;巴斯塔巴&lt;/p&gt;
&lt;p&gt;左塞金字塔 —— 埃及历史上第一座金字塔&lt;/p&gt;
&lt;h3 id=&#34;门图霍特普享殿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#门图霍特普享殿&#34;&gt;#&lt;/a&gt; 门图霍特普享殿&lt;/h3&gt;
&lt;p&gt;方尖碑&lt;/p&gt;
&lt;p&gt;柱形建筑，造成威严的形象&lt;/p&gt;
&lt;h3 id=&#34;哈特谢普苏特hatshepsut&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哈特谢普苏特hatshepsut&#34;&gt;#&lt;/a&gt; 哈特谢普苏特&lt;strong&gt; Hatshepsut&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;她是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTUlOUYlODMlRTUlOEYlOEElRTclQUMlQUMlRTUlOEQlODElRTUlODUlQUIlRTclOEUlOEIlRTYlOUMlOUQ=&#34;&gt;第十八王朝&lt;/span&gt;法老（约公元前 1479 年－约公元前 1458 年在位）也是古埃及首位可考的女性法老，是古埃及一位著名的女法老。&lt;/p&gt;
&lt;p&gt;哈特谢普苏特宣称，她的统治不需经由和图特摩斯二世的婚姻，因为她就是尊贵的阿蒙神之女，这也影响到她至今所保留下来的雕刻都是以男性的形象出现。&lt;/p&gt;
&lt;h3 id=&#34;雕塑versus绘画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雕塑versus绘画&#34;&gt;#&lt;/a&gt; 雕塑 versus 绘画&lt;/h3&gt;
&lt;p&gt;古希腊的时候，雕塑其实是着色的。但是在文艺复兴时期已经掉色，但当时的人误会了，以为古希腊的雕像不着色，他们大肆赞美着洁白的大理石，效仿古希腊也不为雕像着色，但不知是误会。&lt;/p&gt;
&lt;h3 id=&#34;斯芬克斯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#斯芬克斯&#34;&gt;#&lt;/a&gt; 斯芬克斯&lt;/h3&gt;
&lt;p&gt;狮身人面像&lt;/p&gt;
&lt;h3 id=&#34;拉霍太普夫妇坐像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拉霍太普夫妇坐像&#34;&gt;#&lt;/a&gt; 拉霍太普夫妇坐像&lt;/h3&gt;
&lt;h3 id=&#34;卡培尔王子像村长像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#卡培尔王子像村长像&#34;&gt;#&lt;/a&gt; 卡培尔王子像（村长像）&lt;/h3&gt;
&lt;p&gt;描绘了一个掌管农业的王子，有小肚腩，但是生动&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic3.zhimg.com/v2-ec67bc9920cd306c634621edcb6d55da_b.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;书吏凯伊像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#书吏凯伊像&#34;&gt;#&lt;/a&gt; 书吏凯伊像&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fbkimg.cdn.bcebos.com%2Fpic%2F562c11dfa9ec8a13154aca95fb03918fa0ecc077&amp;amp;refer=http%3A%2F%2Fbkimg.cdn.bcebos.com&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=auto?sec=1666195095&amp;amp;t=f9d2e0634523097f6a3875091f179738&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;阿蒙霍特普四世&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿蒙霍特普四世&#34;&gt;#&lt;/a&gt; 阿蒙霍特普四世&lt;/h3&gt;
&lt;p&gt;雕像增加人性的、世俗化的一面&lt;/p&gt;
&lt;h3 id=&#34;纳菲尔提提王后像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纳菲尔提提王后像&#34;&gt;#&lt;/a&gt; 纳菲尔提提王后像&lt;/h3&gt;
&lt;p&gt;注重表现人间美貌的一面，刻画着精巧的五官，少了很多程式化的东西。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tse4-mm.cn.bing.net/th/id/OIP-C.Y7N7fcEA9xVKYs9SWPRFVQHaLI?pid=ImgDet&amp;amp;rs=1&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/</guid>
            <title>三和</title>
            <link>https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/</link>
            <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <pubDate>Sat, 17 Sep 2022 22:44:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;躲进黑匣子里的两小时。&lt;/p&gt;
&lt;p&gt;深夜胡言乱语。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;虽然我还是个每个月向家里要钱的不懂事的大学生，但是” 三和大神 “的处境倒是可以略懂一二。说实在的，白领除了看上去体面一些、办公环境好一点，本质上和他们又有什么区别呢。&lt;/p&gt;
&lt;p&gt;初入社会，不懂规则，被骗、被抢，分不清假意与真心，被社会的老人们暗戳戳地玩弄和笑话。抓住一个幻想就像是救命稻草，用想象蒙蔽现实的红姐形象，沉溺于一个虚幻的、温暖的世界。曹一句句幼稚的、低微的请求，红姐一次次震惊的、老练的回答。&lt;/p&gt;
&lt;p&gt;” 工作是累赘，工作是枷锁。“” 干一天玩三天。“” 谁干长期啊，那个日薪就走了。“&lt;/p&gt;
&lt;p&gt;” 弟弟，我每天和很多人打交道，没那么多情感。“” 红姐只爱钱。“&lt;/p&gt;
&lt;p&gt;你说他们懒散、堕落、一身穷病，其实未尝不是一种对生活的对抗。都说码农薪酬高，其实是拿命换，谁喜欢 996、007 的生活呢，更期待悠闲一点放松一点的生活。细想自己，未尝不喜欢堕落，下坡总是比上坡要容易很多的。只不过在时常警醒自己，平常人家出身的孩子，没有什么背景，没有什么支撑，唯一能靠的是自己的实力，并不能常常放松，也时时害怕、时时惊惶。&lt;/p&gt;
&lt;p&gt;光影的切换，现实与曹的故事、小波的手机屏幕的转换，父母的反转饰演，穿插的歌舞，不同的方言，与观众的互动倒是给《三和》增加了不少趣味。&lt;/p&gt;
&lt;p&gt;希望下次可以和朋友一起去看剧 ww&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <title>Lecture02-计算机体系结构的问题及解决方案</title>
            <link>https://quas-modo.github.io/2022/09/15/COA/Lecture02-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 15 Sep 2022 18:01:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;讲述了六个计算机体系结构的问题以及解决方案&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼最重要的思想存储程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼最重要的思想存储程序&#34;&gt;#&lt;/a&gt; 冯诺依曼最重要的思想 —— 存储程序&lt;/h2&gt;
&lt;p&gt;任何要计算机完成的工作都要先被编写成程序，然后将&lt;strong&gt;程序和原始数据送入主存&lt;/strong&gt;并启动执行。一旦程序被启动，计算机应能在不需要操作人员干预下，自动完成逐条取出指令和执行指令的任务。&lt;/p&gt;
&lt;p&gt;区分中央处理单元（CPU）和处理器。&lt;/p&gt;
&lt;p&gt;CPU 的制作工艺逐渐在提高，几乎不变的是 CPU 的大小，一直在增加的是晶体管的数量。&lt;/p&gt;
&lt;p&gt;目前，苹果 M2 以及可以集成 200 亿的晶体管。&lt;/p&gt;
&lt;h2 id=&#34;问题与解决思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题与解决思路&#34;&gt;#&lt;/a&gt; 问题与解决思路&lt;/h2&gt;
&lt;h3 id=&#34;可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可以通过无限增加cpu的大小来增加性能嘛&#34;&gt;#&lt;/a&gt; 可以通过无限增加 CPU 的大小来增加性能嘛？&lt;/h3&gt;
&lt;p&gt;不可以，面积越大，意味着&lt;strong&gt;互联延迟&lt;/strong&gt;越大。一个时钟周期需要大于最长互联延迟。存在物理极限。&lt;/p&gt;
&lt;h3 id=&#34;问题1cpu的频率不能无限提高&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题1cpu的频率不能无限提高&#34;&gt;#&lt;/a&gt; 问题 1：CPU 的频率不能无限提高&lt;/h3&gt;
&lt;p&gt;MOS 管开关、脉冲通过门电路需要时间&lt;/p&gt;
&lt;p&gt;为了信号同步，每个脉冲信号需要持续一定的时间&lt;/p&gt;
&lt;p&gt;面积大，连线延迟大；&lt;/p&gt;
&lt;p&gt;频率越高，开关损耗高，CPU 耗电和散热提高；&lt;/p&gt;
&lt;h3 id=&#34;解决1改变cpu芯片结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决1改变cpu芯片结构&#34;&gt;#&lt;/a&gt; 解决 1：改变 CPU 芯片结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用各种技术，对芯片体系结构进行优化：指令流水线、每周期多条指令、cache、更长流水线和双速算术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域定制，如面向人工智能的芯片&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题2内存墙的存在-memory-wall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题2内存墙的存在-memory-wall&#34;&gt;#&lt;/a&gt; 问题 2：内存墙的存在 memory wall&lt;/h3&gt;
&lt;p&gt;主存和 CPU 之间传输数据的速度跟不上 CPU 的速度&lt;/p&gt;
&lt;h3 id=&#34;解决2采用高速缓存cache&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决2采用高速缓存cache&#34;&gt;#&lt;/a&gt; 解决 2：采用高速缓存（cache）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;添加一级或多级缓存以减少存储器访问频率并提高数据传输速率&lt;/li&gt;
&lt;li&gt;增大总线的数据宽度，来增加每次所能取出的位数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问题3cpu等待io传输数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题3cpu等待io传输数据&#34;&gt;#&lt;/a&gt; 问题 3：CPU 等待 I/O 传输数据&lt;/h3&gt;
&lt;p&gt;CPU 在等待 I/O 设备时保持空闲&lt;/p&gt;
&lt;h3 id=&#34;解决3中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决3中断&#34;&gt;#&lt;/a&gt; 解决 3：中断&lt;/h3&gt;
&lt;p&gt;其他模块（例如 IO）可以中断正常处理顺序的机制&lt;/p&gt;
&lt;p&gt;中断周期加入指令周期中&lt;/p&gt;
&lt;p&gt;多重中断：顺序中断处理、嵌套中断处理&lt;/p&gt;
&lt;h3 id=&#34;问题4兼顾存储容量-速度和成本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题4兼顾存储容量-速度和成本&#34;&gt;#&lt;/a&gt; 问题 4：兼顾存储容量、速度和成本&lt;/h3&gt;
&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容量：越大越好&lt;/li&gt;
&lt;li&gt;速度：跟上处理器&lt;/li&gt;
&lt;li&gt;成本：相较于其他组件合理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;约束之间的关系&lt;/p&gt;
&lt;p&gt;​	更短的访问时间，更高的每比特成本&lt;/p&gt;
&lt;h3 id=&#34;解决4层次式存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决4层次式存储结构&#34;&gt;#&lt;/a&gt; 解决 4：层次式存储结构&lt;/h3&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大容量数据存储&lt;/li&gt;
&lt;li&gt;高速性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用存储器层次结构而不是依赖单个存储器组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;寄存器 ——cache—— 主存 —— 磁盘 —— 磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储量越来越大，速度越来越慢，离 CPU 越来越远&lt;/p&gt;
&lt;h3 id=&#34;问题5io设备传输速率差异大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题5io设备传输速率差异大&#34;&gt;#&lt;/a&gt; 问题 5：I/O 设备传输速率差异大&lt;/h3&gt;
&lt;p&gt;I/O 性能跟不上 CPU 速度的提升&lt;/p&gt;
&lt;h3 id=&#34;解决5采用缓冲区和改进io操作技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决5采用缓冲区和改进io操作技术&#34;&gt;#&lt;/a&gt; 解决 5：采用缓冲区和改进 I/O 操作技术&lt;/h3&gt;
&lt;p&gt;设立缓存区&lt;/p&gt;
&lt;h3 id=&#34;问题6计算机部件互连复杂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题6计算机部件互连复杂&#34;&gt;#&lt;/a&gt; 问题 6：计算机部件互连复杂&lt;/h3&gt;
&lt;h3 id=&#34;解决6采用总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决6采用总线&#34;&gt;#&lt;/a&gt; 解决 6：采用总线&lt;/h3&gt;
&lt;h4 id=&#34;总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线&#34;&gt;#&lt;/a&gt; 总线&lt;/h4&gt;
&lt;p&gt;目前，对通用计算机而言，各种点对点互连结构逐渐取代总线互连的方式。但是总线结构依然普遍用于嵌入式系统。&lt;/p&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;所有部件都通过总线传递数据&lt;/p&gt;
&lt;h5 id=&#34;分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时&#34;&gt;#&lt;/a&gt; 分时&lt;/h5&gt;
&lt;p&gt;只有一个部件能够传输数据&lt;/p&gt;
&lt;h5 id=&#34;功能组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能组&#34;&gt;#&lt;/a&gt; 功能组&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;控制线&lt;/strong&gt; —— 控制对数据线路与地址线路的访问和使用，控制信号传递&lt;strong&gt;命令和定时信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址线&lt;/strong&gt; —— 指定数据总线上数据的源或目的，地址总线的宽度决定了系统可能的&lt;strong&gt;最大内存容量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据线&lt;/strong&gt; —— 为系统模块之间的数据传输提供路径，一般而言，线路的条数决定了&lt;strong&gt;一次能传输的位数&lt;/strong&gt;，数据总线的宽度是决定系统整体性能的一个关键因素&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
            <title>Lecture03-结构化程序设计</title>
            <link>https://quas-modo.github.io/2022/09/15/cpp/Lecture03-%E7%BB%93%E6%9E%84%E5%8C%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="cpp" scheme="https://quas-modo.github.io/categories/NJUSE/cpp/" />
            <category term="cpp" scheme="https://quas-modo.github.io/tags/cpp/" />
            <pubDate>Thu, 15 Sep 2022 16:12:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;cpp 第三讲&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;lecture03-结构化程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lecture03-结构化程序设计&#34;&gt;#&lt;/a&gt; Lecture03 - 结构化程序设计&lt;/h1&gt;
&lt;p&gt;Data Structure + Algorithm&lt;/p&gt;
&lt;p&gt;课程结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算、控制流转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何组织（function 函数的形式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造数据类型（array，struct，union，pointer）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data&#34;&gt;#&lt;/a&gt; Data&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 性质 数据类型 名  值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 地址相关 - 可以操作系统，需要接近底层&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;datatype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datatype&#34;&gt;#&lt;/a&gt; datatype&lt;/h3&gt;
&lt;h4 id=&#34;定义值集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义值集&#34;&gt;#&lt;/a&gt; 定义值集&lt;/h4&gt;
&lt;p&gt;int double 有限 可数 离散&lt;/p&gt;
&lt;p&gt;数据类型决定值集，决定取值范围。需要知道取值范围，从而考虑和控制&lt;strong&gt; overflow 溢出&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;在计算机系统中，数值一律用&lt;strong&gt;补码&lt;/strong&gt;来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MAX &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MAX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2147483648&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2147483647&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;INT_MIN &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; INT_MIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;typedef short INT16&lt;/p&gt;
&lt;h4 id=&#34;定义计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义计算&#34;&gt;#&lt;/a&gt; 定义计算&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算数（移位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cpp 类型系统 —— 强、动静结合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也有些语言会更加灵活，比如 duck 类型，&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;
&lt;p&gt;char、int、float、double&lt;/p&gt;
&lt;p&gt;Modifiers: long、short、signed、unsigned&lt;/p&gt;
&lt;p&gt;​	char 只能用 signed、unsigned 修饰&lt;/p&gt;
&lt;p&gt;​	float 不能被修饰&lt;/p&gt;
&lt;p&gt;​	double 只能用 long 修饰&lt;/p&gt;
&lt;p&gt;​	int 可以用 4 种修饰符组合修饰&lt;/p&gt;
&lt;p&gt;省略表示&lt;/p&gt;
&lt;p&gt;操作符 sizeof&lt;/p&gt;
&lt;p&gt;ANSI C++: wchar_t、bool&lt;/p&gt;
&lt;h2 id=&#34;表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式&#34;&gt;#&lt;/a&gt; 表达式&lt;/h2&gt;
&lt;h3 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h3&gt;
&lt;p&gt;operand&lt;/p&gt;
&lt;p&gt;operator&lt;/p&gt;
&lt;p&gt;others&lt;/p&gt;
&lt;h3 id=&#34;求值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求值&#34;&gt;#&lt;/a&gt; 求值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;优先级&lt;/li&gt;
&lt;li&gt;结合性&lt;/li&gt;
&lt;li&gt;类型转换约定&lt;/li&gt;
&lt;li&gt;求值次序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#种类&#34;&gt;#&lt;/a&gt; 种类&lt;/h3&gt;
&lt;p&gt;赋值表达式&lt;/p&gt;
&lt;p&gt;算数表达式&lt;/p&gt;
&lt;p&gt;条件运算符表达式（三目运算符）&lt;/p&gt;
&lt;p&gt;逗号表达式&lt;/p&gt;
&lt;p&gt;字位运算符表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异或运算 ^&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与全 0 的二进制串的运算 —— 不变&lt;/p&gt;
&lt;p&gt;与全 1 的二进制串的运算 —— 取反&lt;/p&gt;
&lt;p&gt;与本身的运算 —— 清零&lt;/p&gt;
&lt;p&gt;与同一个对象运算两次 —— 还原&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 一个小应用 —— 交换 ab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;操作符可重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作符可重载&#34;&gt;#&lt;/a&gt; 操作符可重载&lt;/h3&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h2&gt;
&lt;h3 id=&#34;表达式语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式语句&#34;&gt;#&lt;/a&gt; 表达式语句&lt;/h3&gt;
&lt;h3 id=&#34;io语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io语句&#34;&gt;#&lt;/a&gt; IO 语句&lt;/h3&gt;
&lt;p&gt;stdio.h&lt;/p&gt;
&lt;p&gt;iostream.h&lt;/p&gt;
&lt;p&gt;cin&lt;/p&gt;
&lt;p&gt;cout&lt;/p&gt;
&lt;h3 id=&#34;控制流语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制流语句&#34;&gt;#&lt;/a&gt; 控制流语句&lt;/h3&gt;
&lt;p&gt;顺序、选择、重复&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;switch case 中只用整型表达式&lt;/strong&gt; 还可以搭配 enum 语句使用，这样可以更方便阅读，也不用在文件中硬编码，可以存到文件当中。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/</guid>
            <title>自杀专卖店</title>
            <link>https://quas-modo.github.io/2022/09/15/thoughts/%E8%87%AA%E6%9D%80%E4%B8%93%E5%8D%96%E5%BA%97/</link>
            <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <pubDate>Thu, 15 Sep 2022 00:21:46 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;生者才会感到悲伤。&lt;/li&gt;
&lt;li&gt;同样，生者才会感到快乐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;灰暗、沮丧、病态、压抑……&lt;br /&gt;
 自杀专卖店提供了各种自杀的方式，简单粗暴的上吊，和香水一样优雅的毒药，充满男子气概的武术刀，开枪自杀，沉入水中…… 最让我难过的，是一个穷人用一个塑料袋套在了自己的头上，随着塑料袋内的氧气越来越少，最终在痛苦中窒息身亡。&lt;br /&gt;
动画并没有让我感受到过于的压抑或者难过，突出的绘画风格和法语歌曲反而更吸引我一点（歌很好听捏）。听说原著当中 alan 真的在父亲的追杀下选择了自杀，可能更具悲剧色彩和感染力。&lt;br /&gt;
一直是个情感很寡淡的人，不会特别喜欢什么，也不会特别讨厌什么，不会很高兴，也不会很生气。死亡在我眼里是件很平淡的事情，可能是因为我没有什么牵挂的人或者东西吧。&lt;br /&gt;
祝好。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/</guid>
            <title>Lecture03-传输层</title>
            <link>https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E4%BC%A0%E8%BE%93%E5%B1%82/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Tue, 13 Sep 2022 17:43:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;动画有助于更好地理解&lt;/p&gt;
&lt;p&gt;interactive animation speaks a thousand words&lt;/p&gt;
&lt;p&gt;断更好几天了（趴）&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第三章-运输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章-运输层&#34;&gt;#&lt;/a&gt; 第三章 运输层&lt;/h1&gt;
&lt;p&gt;在网络层的基础上增加了&lt;strong&gt;端口号&lt;/strong&gt;来实现进程到进程的通信。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;：可靠的、保序的传输，提供多路复用、解复用，拥塞控制、流量控制、建立连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;：不可靠的、不保序的传输，提供多路复用和解复用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都不提供延时保证和带宽保证，延时和带宽依赖于网络层的服务&lt;/p&gt;
&lt;h2 id=&#34;多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用与多路分解&#34;&gt;#&lt;/a&gt; 多路复用与多路分解&lt;/h2&gt;
&lt;p&gt;multiplexing and demultiplexing&lt;/p&gt;
&lt;p&gt;在源主机从不同的套接字中收集数据块，并为每个数据块封装上首部信息，从而生成报文段，然后将报文段传递到网络层，所有这些工作称&lt;strong&gt;多路复用&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个套接字有唯一标志符&lt;/li&gt;
&lt;li&gt;传输层 / 运输层报文段中包含源端口号、目的端口号、传输数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将运输层报文段中的数据交付到正确的套接字的工作称为&lt;strong&gt;多路分解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以上可用两家小孩寄邮件类比理解。&lt;/p&gt;
&lt;h3 id=&#34;端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口号&#34;&gt;#&lt;/a&gt; 端口号&lt;/h3&gt;
&lt;p&gt;0-65535&lt;/p&gt;
&lt;p&gt;0-1023 周知端口号 / 著名端口号 well-known port number&lt;/p&gt;
&lt;p&gt;一般而言，应用程序的客户端让运输层自动地（也是透明地）分配端口号，而服务器端则分配一个特定的端口号。&lt;/p&gt;
&lt;h3 id=&#34;面向无连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向无连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向无连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 UDP 套接字是由一个&lt;strong&gt;二元组&lt;/strong&gt;全面标识的，包含一个目标 IP 地址和一个目的端口号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果两个 UDP 报文段有不同的源 IP 地址和 / 或源端口号，但具有相同的目的 IP 地址和目的端口号，那么这两个报文段将通过相同的目的套接字被定向到相同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;面向连接的多路复用与多路分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的多路复用与多路分解&#34;&gt;#&lt;/a&gt; 面向连接的多路复用与多路分解&lt;/h3&gt;
&lt;p&gt;一个 TCP 套接字是由一个&lt;strong&gt;四元组&lt;/strong&gt;全面标识的，包含源地址、源端口、目的 IP 地址、目的端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同的源将定向到不同的目的进程。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;web服务器与tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web服务器与tcp&#34;&gt;#&lt;/a&gt; Web 服务器与 TCP&lt;/h3&gt;
&lt;p&gt;连接套接字与进程之间并非总是有着一一对应的关系。如今一些高性能的 Web 服务器通常只有一个进程，但是为每个新的客户连接创建一个具有新连接套接字的新线程。&lt;/p&gt;
&lt;h2 id=&#34;无连接运输udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无连接运输udp&#34;&gt;#&lt;/a&gt; 无连接运输：UDP&lt;/h2&gt;
&lt;h3 id=&#34;udp的优点为什么要使用udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp的优点为什么要使用udp&#34;&gt;#&lt;/a&gt; UDP 的优点 / 为什么要使用 UDP：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关于发送什么数据以及何时发送的应用层控制得更为精细&lt;/li&gt;
&lt;li&gt;无须连接建立&lt;/li&gt;
&lt;li&gt;无连接状态&lt;/li&gt;
&lt;li&gt;分组首部开销小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp检验和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp检验和&#34;&gt;#&lt;/a&gt; UDP 检验和&lt;/h3&gt;
&lt;p&gt;端到端原则：某种功能必须是基于端到端的实现，“与在较高级别提供这些功能的代价相比，在较低级别设置的功能可能是冗余的或几乎没有价值的、”&lt;/p&gt;
&lt;p&gt;回卷、反码&lt;/p&gt;
&lt;p&gt;在目标地址，将四个比特字加在一起，每一位为 1，则无差错。&lt;/p&gt;
&lt;h2 id=&#34;可靠数据传输rdt的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输rdt的原理&#34;&gt;#&lt;/a&gt; 可靠数据传输（rdt）的原理&lt;/h2&gt;
&lt;p&gt;rdt: reliable data transfer protocol&lt;/p&gt;
&lt;p&gt;双向的数据传输协议就是两个单向的数据传输协议的综合&lt;/p&gt;
&lt;p&gt;FSM Finite-State Machine&lt;/p&gt;
&lt;h3 id=&#34;构造可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造可靠数据传输协议&#34;&gt;#&lt;/a&gt; 构造可靠数据传输协议&lt;/h3&gt;
&lt;h4 id=&#34;基于完全可靠信道-rdt10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于完全可靠信道-rdt10&#34;&gt;#&lt;/a&gt; 基于完全可靠信道 rdt1.0&lt;/h4&gt;
&lt;p&gt;直接传就好了 Orz&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错信道的可靠数据传输-rdt20&#34;&gt;#&lt;/a&gt; 经具有比特差错信道的可靠数据传输 rdt2.0&lt;/h4&gt;
&lt;p&gt;ARQ Automatic Repeat reQuest 自动重传请求协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;差错检测&lt;/li&gt;
&lt;li&gt;接收方反馈（ACK, NAK）&lt;/li&gt;
&lt;li&gt;重传&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停等（stop-wait）协议：发送方将不会发送一块新数据，除非发送方确信接收方已正确接受当前分组。&lt;/p&gt;
&lt;h4 id=&#34;如果acknak出错-rdt21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果acknak出错-rdt21&#34;&gt;#&lt;/a&gt; 如果 ACK/NAK 出错 -&amp;gt; rdt2.1&lt;/h4&gt;
&lt;p&gt;增加序号 0,1&lt;/p&gt;
&lt;p&gt;根据收到的序号即可确定是否正在重传前一个发送分组&lt;/p&gt;
&lt;h4 id=&#34;nak-free-在ack后加序号-rdt22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nak-free-在ack后加序号-rdt22&#34;&gt;#&lt;/a&gt; NAK free 在 ACK 后加序号 -&amp;gt; rdt2.2&lt;/h4&gt;
&lt;p&gt;为后面发送多个数据做准备&lt;/p&gt;
&lt;p&gt;确认信息减少一般，协议简单&lt;/p&gt;
&lt;h4 id=&#34;经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经具有比特差错的丢包信道的可靠数据传输-rdt30&#34;&gt;#&lt;/a&gt; 经具有比特差错的丢包信道的可靠数据传输 rdt3.0&lt;/h4&gt;
&lt;p&gt;比特交替协议 alternating-bit protocol&lt;/p&gt;
&lt;p&gt;设置倒计数计时器 (countdown timer) ，一旦超过时间，则重传&lt;/p&gt;
&lt;p&gt;虽然可能造成冗余数据分组（duplicate data packet），但 rdt2.0 已经处理了这部分内容&lt;/p&gt;
&lt;h3 id=&#34;流水线可靠数据传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流水线可靠数据传输协议&#34;&gt;#&lt;/a&gt; 流水线可靠数据传输协议&lt;/h3&gt;
&lt;p&gt;rdt3.0 的&lt;strong&gt;停等协议&lt;/strong&gt;降低了传输的性能，等待到收到回复后才进行下一步操作，链路的利用率太低。&lt;/p&gt;
&lt;p&gt;因此，开发了流水线技术，即一次传输多个分组。&lt;/p&gt;
&lt;h3 id=&#34;回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回退n步go-back-n-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; 回退 N 步 Go-Back-N —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;p&gt;N - window size 窗口长度&lt;/p&gt;
&lt;p&gt;sliding-window protocol 滑动窗口协议&lt;/p&gt;
&lt;h4 id=&#34;发送方响应的事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方响应的事件&#34;&gt;#&lt;/a&gt; 发送方响应的事件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上层调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到一个 ACK 累计确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时事件&lt;/p&gt;
&lt;p&gt;如果出现超时，发送方重传所有已发送但还未被确认过的分组。&lt;/p&gt;
&lt;p&gt;如果收到一个 ACK，但仍有已发送但未被确认的分组，则定时器被重新启动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接收方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;接收方若收到 失序、错误分组，则丢弃该分组，并为&lt;strong&gt;最近按序接收的分组&lt;/strong&gt;重新发送 ACK。&lt;/p&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;p&gt;接收缓存简单&lt;/p&gt;
&lt;h4 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;单个分组的差错就能引起 GBN 重传大量分组&lt;/p&gt;
&lt;p&gt;（配套的 GBN Java 小程序好好玩&lt;/p&gt;
&lt;h3 id=&#34;selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selective-repeat-sr-如何处理流水线的差错恢复&#34;&gt;#&lt;/a&gt; Selective Repeat SR —— 如何处理流水线的差错恢复&lt;/h3&gt;
&lt;h4 id=&#34;接收方-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接收方-2&#34;&gt;#&lt;/a&gt; 接收方&lt;/h4&gt;
&lt;p&gt;失序的分组将被缓存直到所有丢失分组（即序号更小的分组）皆被接收&lt;/p&gt;
&lt;p&gt;接收到后为&lt;strong&gt;接收的分组&lt;/strong&gt;发送 ACK&lt;/p&gt;
&lt;p&gt;不在缓存范围内的分组将被丢失&lt;/p&gt;
&lt;h4 id=&#34;发送方&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送方&#34;&gt;#&lt;/a&gt; 发送方&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从上层收到数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时 —— 每个分组都要有自己的逻辑计时器，超时发送后只能发送一个分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到 ACK—— 窗口基序号向前移动到具有最小序号的未确认分组处，如果窗口移动了并且有序号落在窗口内的为发送分组，则发送这些分组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可实际操作一下小程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出错率低适合用 GBN，链路容量大适合用 SR&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;面向连接的运输tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向连接的运输tcp&#34;&gt;#&lt;/a&gt; 面向连接的运输：TCP&lt;/h2&gt;
&lt;h3 id=&#34;tcp连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接&#34;&gt;#&lt;/a&gt; TCP 连接&lt;/h3&gt;
&lt;p&gt;全双工服务 full-duplex service&lt;/p&gt;
&lt;p&gt;最大报文段长度 MSS Maximum Segment Size&lt;/p&gt;
&lt;h3 id=&#34;tcp报文段结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp报文段结构&#34;&gt;#&lt;/a&gt; TCP 报文段结构&lt;/h3&gt;
&lt;p&gt;Holy &amp;amp;^%@! That idiot made a TCP header diagram in Lego(TM)!&lt;/p&gt;
&lt;p&gt;有趣，但孩子不玩乐高（x&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yaWdodGVvdXNpdC53b3JkcHJlc3MuY29tLzIwMTAvMDYvMjcvcHJhY3RpY2FsLXZpc3VhbC10aHJlZS1kaW1lbnNpb25hbC1wZWRhZ29neS1mb3ItaW50ZXJuZXQtcHJvdG9jb2wtcGFja2V0LWhlYWRlci1jb250cm9sLWZpZWxkcy8=&#34;&gt;https://righteousit.wordpress.com/2010/06/27/practical-visual-three-dimensional-pedagogy-for-internet-protocol-packet-header-control-fields/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;源端口号、目标端口、序号、确认号、首部长度、保留未用、标志字段、接收窗口、因特网检验和、紧急数据指针、选项、数据&lt;/p&gt;
&lt;h4 id=&#34;序号和确认号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序号和确认号&#34;&gt;#&lt;/a&gt; 序号和确认号&lt;/h4&gt;
&lt;p&gt;在主机 A 的一个进程与主机 B 的一个进程的连接中，主机 A 填充进报文段的&lt;strong&gt;确认号&lt;/strong&gt;是主机 A 期望从主机 B 收到的下一字节的序号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;累积确认&lt;/strong&gt;：TCP 只确认该流中至第一个丢失字节为止的字节&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;捎带&lt;/strong&gt;：对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据的报文段中&lt;/p&gt;
&lt;h3 id=&#34;往返时间的估计与超时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#往返时间的估计与超时&#34;&gt;#&lt;/a&gt; 往返时间的估计与超时&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;指数加权移动平均&lt;/strong&gt;：根据较近的 SampleRTT 的值估计目前的平均&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超时间隔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;TimeoutInterval = EstimatedRTT + 4 * DevRTT
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（用了一些公式计算出了 EstimatedRTT 和 DevRTT，进而估算 TimeoutInterval）&lt;/p&gt;
&lt;h3 id=&#34;可靠数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠数据传输&#34;&gt;#&lt;/a&gt; 可靠数据传输&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;超时间隔加倍&lt;/strong&gt;：再次超时，超时间隔设置为原来的两倍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冗余 ACK&lt;/strong&gt;：一旦收到 3 个冗余 ACK，TCP 就执行快速重传（fast retransmit）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 是 GBN 和 SR 协议的混合体&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h3&gt;
&lt;p&gt;区分流量控制和拥塞控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流量控制&lt;/strong&gt;是端到端的控制，例如 A 通过网络给 B 发数据，A 发送的太快导致 B 没法接收 (B 缓冲窗口过小或者处理过慢)，这时候的控制就是流量控制，原理是通过&lt;strong&gt;滑动窗口的大小&lt;/strong&gt;改变来实现。 其中，rwnd 指接收窗口 receive window。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;LastByteSent - LastByteAcked &amp;lt;= rwnd
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;是 A 与 B 之间的网络发生堵塞导致传输过慢或者丢包，来不及传输。防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络性能有关的所有因素。&lt;/p&gt;
&lt;h3 id=&#34;tcp连接管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接管理&#34;&gt;#&lt;/a&gt; TCP 连接管理&lt;/h3&gt;
&lt;p&gt;SYN&lt;/p&gt;
&lt;p&gt;FIN&lt;/p&gt;
&lt;p&gt;通过三次握手建立连接，两次握手会造成半连接（只有一端维护了连接）&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制原理&#34;&gt;#&lt;/a&gt; 拥塞控制原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;拥塞表现&lt;/strong&gt;：分组丢失、延时较长&lt;/p&gt;
&lt;h3 id=&#34;拥塞原因与代价&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞原因与代价&#34;&gt;#&lt;/a&gt; 拥塞原因与代价&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当分组的到达速率接近链路容量时，分组经历巨大的排队时延&lt;/li&gt;
&lt;li&gt;发送方必须执行重传以补偿因为缓存溢出而丢失（丢弃）的分组&lt;/li&gt;
&lt;li&gt;发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽转发不必要的分组副本&lt;/li&gt;
&lt;li&gt;当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费调了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;端到端拥塞控制&lt;/li&gt;
&lt;li&gt;网络辅助拥塞控制（NI 字段表示轻微拥塞，CI 字段表示拥塞指示）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp-拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;TCP 使用端到端的拥塞控制，而不是网络辅助的拥塞控制。网络辅助的拥塞控制代价过高。&lt;/p&gt;
&lt;h3 id=&#34;指导性原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指导性原则&#34;&gt;#&lt;/a&gt; 指导性原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一个丢失的报文段意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率。&lt;/li&gt;
&lt;li&gt;一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率。&lt;/li&gt;
&lt;li&gt;宽带检测&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tcp拥塞控制算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制算法&#34;&gt;#&lt;/a&gt; TCP 拥塞控制算法&lt;/h3&gt;
&lt;h4 id=&#34;慢启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#慢启动&#34;&gt;#&lt;/a&gt; 慢启动&lt;/h4&gt;
&lt;p&gt;指数增长，每过一个 RTT，发送速率就翻番&lt;/p&gt;
&lt;h4 id=&#34;拥塞避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞避免&#34;&gt;#&lt;/a&gt; 拥塞避免&lt;/h4&gt;
&lt;p&gt;线性增长，无论何时到达一个新的确认，就将 cwnd 增加一个 MSS 字节&lt;/p&gt;
&lt;h4 id=&#34;快速恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速恢复&#34;&gt;#&lt;/a&gt; 快速恢复&lt;/h4&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/</guid>
            <title>Lecture02-应用层</title>
            <link>https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Sun, 11 Sep 2022 00:20:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;TCP 和 UDP 编程相关总结暂缺。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第二章-应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章-应用层&#34;&gt;#&lt;/a&gt; 第二章 应用层&lt;/h1&gt;
&lt;h2 id=&#34;应用层协议原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用层协议原理&#34;&gt;#&lt;/a&gt; 应用层协议原理&lt;/h2&gt;
&lt;h3 id=&#34;网络应用程序体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用程序体系结构&#34;&gt;#&lt;/a&gt; 网络应用程序体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户 - 服务器体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2P 体系结构&lt;/p&gt;
&lt;p&gt;主机为对等方，具有自扩展性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/S 和 P2P 体系结构的混合体&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进程通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程通信&#34;&gt;#&lt;/a&gt; 进程通信&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端与服务器的进程&lt;/p&gt;
&lt;p&gt;发起通信的进程被识别为客户，在会话开始时等待联系的进程是服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程与计算机网络之间的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;套接字&lt;/strong&gt;接口，也成为应用程序编程接口，是同一台主机内应用层与运输层直接的接口。&lt;/p&gt;
&lt;p&gt;层间接口必须要携带：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传什么（要传输的报文）&lt;/li&gt;
&lt;li&gt;谁传的（IP + 端口号）&lt;/li&gt;
&lt;li&gt;传给谁（IP + 端口号）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程寻址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 四元组（源 IP、源端口号、目标 IP、目标端口号）&lt;/li&gt;
&lt;li&gt;UDP 二元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可供应用程序使用的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可供应用程序使用的运输服务&#34;&gt;#&lt;/a&gt; 可供应用程序使用的运输服务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可靠的数据传输&lt;/li&gt;
&lt;li&gt;吞吐量&lt;/li&gt;
&lt;li&gt;定时&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;因特网提供的运输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网提供的运输服务&#34;&gt;#&lt;/a&gt; 因特网提供的运输服务&lt;/h3&gt;
&lt;h4 id=&#34;tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; TCP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;面向连接的服务&lt;/li&gt;
&lt;li&gt;可靠的数据传送服务&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;SSL 加密&lt;/li&gt;
&lt;li&gt;不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp&#34;&gt;#&lt;/a&gt; UDP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以区分进程，无需建立链接&lt;/li&gt;
&lt;li&gt;不可靠&lt;/li&gt;
&lt;li&gt;没有拥塞、流量控制，不保证吞吐量和定时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web和http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web和http&#34;&gt;#&lt;/a&gt; Web 和 HTTP&lt;/h2&gt;
&lt;h3 id=&#34;http概况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http概况&#34;&gt;#&lt;/a&gt; HTTP 概况&lt;/h3&gt;
&lt;p&gt;HyperText Transfer Protocal, HTTP 超文本传输协议&lt;/p&gt;
&lt;p&gt;HTTP 定义了 Web 客户向 Web 服务器请求 Web 页面的方式，以及服务器向客户传送 Web 页面的方式。&lt;/p&gt;
&lt;p&gt;HTTP 使用 TCP 作为它的支撑运输协议。&lt;/p&gt;
&lt;p&gt;HTTP 是一个无状态协议，因为 HTTP 不保存关于客户的任何信息。&lt;/p&gt;
&lt;h3 id=&#34;非持续性连接和持续连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非持续性连接和持续连接&#34;&gt;#&lt;/a&gt; 非持续性连接和持续连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非持续连接：每个请求 / 相应对是经一个单独的 TCP 连接发送，HTTP/1.0 使用非持久连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持续连接：所有的请求及其相应经相同的 TCP 连接发送，HTTP/1.1 默认使用持久连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非流水方式的持久 HTTP（客户端在收到前一个请求的相应之后再发出下一个请求）&lt;/li&gt;
&lt;li&gt;流水方式的持久 HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文格式&#34;&gt;#&lt;/a&gt; HTTP 报文格式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 请求报文
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 响应报文
&lt;ul&gt;
&lt;li&gt;状态行&lt;/li&gt;
&lt;li&gt;首部行&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;实体体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h3&gt;
&lt;p&gt;提高 Web 服务器的性能，希望把内容和用户身份联系起来。&lt;/p&gt;
&lt;p&gt;cookie 的技术有 4 个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 HTTP 响应报文中有一个 cookie 首部行&lt;/li&gt;
&lt;li&gt;在 HTTP 请求报文中有一个 cookie 的首部行&lt;/li&gt;
&lt;li&gt;在用户端系统中存有 cookie 组件，并由用户的浏览器进行管理&lt;/li&gt;
&lt;li&gt;位于 Web 站点的一个后端数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web缓存&#34;&gt;#&lt;/a&gt; Web 缓存&lt;/h3&gt;
&lt;p&gt;web 缓存器也叫代理服务器&lt;/p&gt;
&lt;h3 id=&#34;get方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get方法&#34;&gt;#&lt;/a&gt; Get 方法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;缓存是为了性能，清除是为了更新&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;因特网中的电子邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网中的电子邮件&#34;&gt;#&lt;/a&gt; 因特网中的电子邮件&lt;/h2&gt;
&lt;p&gt;SMTP&lt;/p&gt;
&lt;p&gt;POP3 - 本地管理文件夹&lt;/p&gt;
&lt;p&gt;IMAP - 远程管理文件夹&lt;/p&gt;
&lt;h2 id=&#34;dns因特网的目录服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns因特网的目录服务&#34;&gt;#&lt;/a&gt; DNS：因特网的目录服务&lt;/h2&gt;
&lt;p&gt;DNS - Domain Name System 域名系统&lt;/p&gt;
&lt;p&gt;DNS 协议运行在 UDP 之上，使用 53 号端口。&lt;/p&gt;
&lt;h3 id=&#34;目的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的&#34;&gt;#&lt;/a&gt; 目的&lt;/h3&gt;
&lt;p&gt;实现域名和 IP 地址的转换&lt;/p&gt;
&lt;p&gt;主机别名&lt;/p&gt;
&lt;p&gt;邮件服务器别名&lt;/p&gt;
&lt;p&gt;负载分配&lt;/p&gt;
&lt;h3 id=&#34;集中式设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式设计&#34;&gt;#&lt;/a&gt; 集中式设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单点故障&lt;/li&gt;
&lt;li&gt;通信容量&lt;/li&gt;
&lt;li&gt;远距离的集中式数据库&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式-层次数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式-层次数据库&#34;&gt;#&lt;/a&gt; 分布式、层次数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根 DNS 服务器&lt;/li&gt;
&lt;li&gt;顶级域 DNS 服务器&lt;/li&gt;
&lt;li&gt;权威 DNS 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;域与物理划分无关，是逻辑的划分&lt;/p&gt;
&lt;h3 id=&#34;查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询&#34;&gt;#&lt;/a&gt; 查询&lt;/h3&gt;
&lt;p&gt;迭代查询&lt;/p&gt;
&lt;p&gt;递归查询&lt;/p&gt;
&lt;h3 id=&#34;报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文&#34;&gt;#&lt;/a&gt; 报文&lt;/h3&gt;
&lt;p&gt;DNS 查询和响应的报文格式相同&lt;/p&gt;
&lt;h2 id=&#34;p2p文件分发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p文件分发&#34;&gt;#&lt;/a&gt; P2P 文件分发&lt;/h2&gt;
&lt;p&gt;可扩展性好，随着用户数增加，最短分配时间上升得较慢&lt;/p&gt;
&lt;p&gt;BitTorrent 是一种用于文件分发的流行的 P2P 协议，参与一个特定文件夹分发的所有对等方的集合被称为一个洪流。&lt;/p&gt;
&lt;h3 id=&#34;最稀缺优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最稀缺优先&#34;&gt;#&lt;/a&gt; 最稀缺优先&lt;/h3&gt;
&lt;p&gt;首先请求最稀缺的块&lt;/p&gt;
&lt;h3 id=&#34;一报还一报&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一报还一报&#34;&gt;#&lt;/a&gt; 一报还一报&lt;/h3&gt;
&lt;p&gt;向给自己提供最大宽带的服务发送块&lt;/p&gt;
&lt;p&gt;每个 30s，随机选择其他 peer 发送块&lt;/p&gt;
&lt;h3 id=&#34;结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h3&gt;
&lt;p&gt;集中&lt;/p&gt;
&lt;p&gt;分散&lt;/p&gt;
&lt;p&gt;半分散&lt;/p&gt;
&lt;h2 id=&#34;视频流和内容分发网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视频流和内容分发网&#34;&gt;#&lt;/a&gt; 视频流和内容分发网&lt;/h2&gt;
&lt;h3 id=&#34;dash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dash&#34;&gt;#&lt;/a&gt; DASH&lt;/h3&gt;
&lt;p&gt;Dynamic Adaptive Streaming over HTTP 经 HTTP 的动态适应性流&lt;/p&gt;
&lt;p&gt;服务器：将视频文件分割成多个块，每个块独立存储，编码于不同码率，告示文件提供不同块的 URL&lt;/p&gt;
&lt;p&gt;客户端：获取告示文件，测量服务器到客户端的带宽，选择合适的码率的编码块&lt;/p&gt;
&lt;h3 id=&#34;内容分发网cdn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内容分发网cdn&#34;&gt;#&lt;/a&gt; 内容分发网 CDN&lt;/h3&gt;
&lt;p&gt;Content Distribution Network CDN&lt;/p&gt;
&lt;p&gt;做一些 copy&lt;/p&gt;
&lt;h2 id=&#34;套接字编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字编程&#34;&gt;#&lt;/a&gt; 套接字编程&lt;/h2&gt;
&lt;h3 id=&#34;tcp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp编程&#34;&gt;#&lt;/a&gt; TCP 编程&lt;/h3&gt;
&lt;h3 id=&#34;udp编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp编程&#34;&gt;#&lt;/a&gt; UDP 编程&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/</guid>
            <title>Lecture01</title>
            <link>https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/</link>
            <category term="专业书籍" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/" />
            <category term="计算机网络自顶向下" scheme="https://quas-modo.github.io/categories/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%B1%8D/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Fri, 09 Sep 2022 09:54:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;本系列参考中科大郑铨老师网课和《计算机网络：自顶向下》整理。&lt;/p&gt;
&lt;p&gt;因为是听完课很久之后整理的，所以只整理了纲要（趴&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一章-概论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-概论&#34;&gt;#&lt;/a&gt; 第一章 概论&lt;/h1&gt;
&lt;h2 id=&#34;什么是internet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是internet&#34;&gt;#&lt;/a&gt; 什么是 Internet？&lt;/h2&gt;
&lt;h3 id=&#34;从构成因特网的基本硬件和软件组件理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从构成因特网的基本硬件和软件组件理解&#34;&gt;#&lt;/a&gt; 从构成因特网的基本硬件和软件组件理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;节点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机及其上运行的应用程序&lt;/li&gt;
&lt;li&gt;路由器、交换机等网络交换设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;边&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接入网链路：主机连接到互联网的链路&lt;/li&gt;
&lt;li&gt;主干链路：路由器间的链路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从服务角度-分布式应用提供服务的联网基础设施理解&#34;&gt;#&lt;/a&gt; 从服务角度、分布式应用提供服务的联网基础设施理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用通信设施进行通信的分布式应用&lt;/li&gt;
&lt;li&gt;通信基础设施为 apps 提供编程接口（通信服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是协议&#34;&gt;#&lt;/a&gt; 什么是协议？&lt;/h2&gt;
&lt;p&gt;协议定义了在两个或多个通信实体之间交换的报文的&lt;strong&gt;格式和顺序&lt;/strong&gt;，以及报文发送和 / 或接收一条报文或其他事件所采取的&lt;strong&gt;动作&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;网络结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络结构&#34;&gt;#&lt;/a&gt; 网络结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络边缘&lt;/p&gt;
&lt;p&gt;端系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端 / 服务器模式&lt;/li&gt;
&lt;li&gt;对等（peer-peer）模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络核心&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电路交换&lt;/p&gt;
&lt;p&gt;频分复用（FDM，Frequency-Division Multiplexing）和时分复用（TDM, Time-Division Multiplexing）&lt;/p&gt;
&lt;p&gt;独享资源，不共享，用于电话，不适合计算机之间的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换&lt;/p&gt;
&lt;p&gt;储存和转发、时延（节点处理时延、排队时延、传输时延、传播时延）和分组丢失、转发表和路由选择协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据报网络&lt;/li&gt;
&lt;li&gt;虚电路网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接入网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家庭接入：DSL（数字用户线）、电缆、FTTH（光纤到户）、拨号和卫星&lt;/li&gt;
&lt;li&gt;企业（和家庭）接入：以太网和 WiFi&lt;/li&gt;
&lt;li&gt;广域无线接入：3G 和 LTE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理媒体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导引型媒体
&lt;ul&gt;
&lt;li&gt;双绞铜线&lt;/li&gt;
&lt;li&gt;同轴电缆&lt;/li&gt;
&lt;li&gt;光纤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非导引型媒体
&lt;ul&gt;
&lt;li&gt;陆地无线电信道&lt;/li&gt;
&lt;li&gt;卫星无线电信道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;internet结构和isp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#internet结构和isp&#34;&gt;#&lt;/a&gt; Internet 结构和 ISP&lt;/h2&gt;
&lt;p&gt;互联网络结构：网络的网络&lt;/p&gt;
&lt;p&gt;端系统通过接入 ISPs（Internet Service Providers）连接到互联网中&lt;/p&gt;
&lt;p&gt;因特网内容服务商（ICP, Internet Content Providers）会构建自己的网络&lt;/p&gt;
&lt;h2 id=&#34;协议层次及其服务模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议层次及其服务模型&#34;&gt;#&lt;/a&gt; 协议层次及其服务模型&lt;/h2&gt;
&lt;p&gt;上层依赖下层提供的服务，并创造新的服务和功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;p&gt;为人类用户或者其他用户进程提供网络应用服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运输层&lt;/p&gt;
&lt;p&gt;主机和主机的数据传输&lt;/p&gt;
&lt;p&gt;细分网络层的服务，进程到进程（port）&lt;/p&gt;
&lt;p&gt;将不可靠的通信变成可靠的通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层&lt;/p&gt;
&lt;p&gt;为数据报从源到目的选择路由&lt;/p&gt;
&lt;p&gt;主机主机之间的通信，端到端通信，不可靠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路层&lt;/p&gt;
&lt;p&gt;point to point 相邻网络节点间的数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理层&lt;/p&gt;
&lt;p&gt;在线路上传送 bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
            <title>Lecture01-计算机系统概述</title>
            <link>https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="计算机组成与结构" scheme="https://quas-modo.github.io/categories/NJUSE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E7%BB%93%E6%9E%84/" />
            <category term="计组" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BB%84/" />
            <pubDate>Thu, 08 Sep 2022 20:30:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;第一讲，以及对于书籍的第一章重点知识点整理&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;课程随笔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程随笔&#34;&gt;#&lt;/a&gt; 课程随笔&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用 电子 数字 计算机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用&lt;/p&gt;
&lt;p&gt;电子&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;h3 id=&#34;组织与结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组织与结构&#34;&gt;#&lt;/a&gt; 组织与结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;结构 (对于程序员是可见的)
&lt;ul&gt;
&lt;li&gt;一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别&lt;/li&gt;
&lt;li&gt;包括：指令集、各类数据类型的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织 (对于程序员是不可见的)
&lt;ul&gt;
&lt;li&gt;一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。&lt;/li&gt;
&lt;li&gt;包括：控制信号、存储技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机发展历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机发展历史&#34;&gt;#&lt;/a&gt; 计算机发展历史&lt;/h2&gt;
&lt;p&gt;真空管&lt;/p&gt;
&lt;p&gt;晶体管&lt;/p&gt;
&lt;p&gt;集成电路（scale 越来越大，SSI-&amp;gt;MSI-&amp;gt;LSI-&amp;gt;VLSI-&amp;gt;ULSI）&lt;/p&gt;
&lt;p&gt;摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）&lt;/p&gt;
&lt;h2 id=&#34;冯诺依曼结构的实现与演变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冯诺依曼结构的实现与演变&#34;&gt;#&lt;/a&gt; 冯诺依曼结构的实现与演变&lt;/h2&gt;
&lt;h3 id=&#34;cpu-北桥-南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-北桥-南桥&#34;&gt;#&lt;/a&gt; CPU + 北桥 + 南桥&lt;/h3&gt;
&lt;p&gt;芯片近北桥，远离南桥。&lt;/p&gt;
&lt;h4 id=&#34;南桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#南桥&#34;&gt;#&lt;/a&gt; 南桥&lt;/h4&gt;
&lt;p&gt;南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理&lt;strong&gt;低速信号&lt;/strong&gt;，通过北桥与中央处理器联系。&lt;br /&gt;
南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。&lt;br /&gt;
PCI、SATA、IDE、USB。&lt;/p&gt;
&lt;h4 id=&#34;北桥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#北桥&#34;&gt;#&lt;/a&gt; 北桥&lt;/h4&gt;
&lt;p&gt;北桥设计用来处理&lt;strong&gt;高速信号&lt;/strong&gt;，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。&lt;br /&gt;
芯片组（chipset）的名称就是以北桥芯片的名称来命名的。&lt;br /&gt;
北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。&lt;br /&gt;
PCIE/AGP、Memory、CPU。&lt;/p&gt;
&lt;h3 id=&#34;cpu-pch集成显卡-显示部件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu-pch集成显卡-显示部件&#34;&gt;#&lt;/a&gt; CPU + PCH（集成显卡 - 显示部件）&lt;/h3&gt;
&lt;p&gt;PCH 全称为 Platform Controller Hub，是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==&#34;&gt; intel 公司&lt;/span&gt;的集成南桥。&lt;/p&gt;
&lt;p&gt;北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.&lt;/p&gt;
&lt;h2 id=&#34;计算机性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机性能&#34;&gt;#&lt;/a&gt; 计算机性能&lt;/h2&gt;
&lt;h3 id=&#34;cpu性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
&lt;p&gt;时钟频率 / 时钟周期&lt;/p&gt;
&lt;p&gt;CPI&lt;/p&gt;
&lt;p&gt;MIPS（每秒百万条指令）&lt;/p&gt;
&lt;p&gt;MRLOPS（每秒百万条浮点操作）&lt;/p&gt;
&lt;p&gt;基准程序&lt;/p&gt;
&lt;h3 id=&#34;性能设计的基本原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能设计的基本原则&#34;&gt;#&lt;/a&gt; 性能设计的基本原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大概率事件优先原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿姆代尔定律 Amdahl 定律&lt;/p&gt;
&lt;p&gt;技术或设计的某一部分的加速不会导致性能产生相应的改进。性能的提高是有限度的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Little 定律&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对应书籍整理-计算机系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对应书籍整理-计算机系统概述&#34;&gt;#&lt;/a&gt; 对应书籍整理 - 计算机系统概述&lt;/h1&gt;
&lt;h2 id=&#34;计算机结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机结构&#34;&gt;#&lt;/a&gt; 计算机结构&lt;/h2&gt;
&lt;h3 id=&#34;硬件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件&#34;&gt;#&lt;/a&gt; 硬件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器 —— 各种算数逻辑运算&lt;/li&gt;
&lt;li&gt;控制器 —— 对指令译码并送出操作控制信号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器 —— 存放指令和数据&lt;/p&gt;
&lt;p&gt;包括 ROM 芯片和 RAM 芯片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存储器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主存&lt;/li&gt;
&lt;li&gt;高速缓存（cache）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外存储器&lt;/p&gt;
&lt;p&gt;磁盘、磁带存储器、光盘存储器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O 设备 —— 计算机和用户之间的信息交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件&#34;&gt;#&lt;/a&gt; 软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统软件 —— 介于计算机硬件和应用软件之间的各种软件
&lt;ul&gt;
&lt;li&gt;操作系统软件&lt;/li&gt;
&lt;li&gt;语言处理系统&lt;/li&gt;
&lt;li&gt;数据库管理系统&lt;/li&gt;
&lt;li&gt;各类实用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用软件
&lt;ul&gt;
&lt;li&gt;办公自动化软件&lt;/li&gt;
&lt;li&gt;互联网应用软件&lt;/li&gt;
&lt;li&gt;多媒体处理软件&lt;/li&gt;
&lt;li&gt;股票分析软件&lt;/li&gt;
&lt;li&gt;游戏软件&lt;/li&gt;
&lt;li&gt;管理信息系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;程序开发和执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序开发和执行过程&#34;&gt;#&lt;/a&gt; 程序开发和执行过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;高级语言、低级语言（汇编语言）-&amp;gt; 机器语言&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;对应计算机用户&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用程序&lt;/td&gt;
&lt;td&gt;最终用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高级语言虚拟机&lt;/td&gt;
&lt;td&gt;高级语言程序员或者应用程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;汇编语言虚拟机&lt;/td&gt;
&lt;td&gt;汇编语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统虚拟机&lt;/td&gt;
&lt;td&gt;系统管理员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机器语言虚拟机&lt;/td&gt;
&lt;td&gt;机器语言程序员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源程序&lt;/strong&gt;通过&lt;strong&gt;编译程序和汇编程序&lt;/strong&gt;得到&lt;strong&gt;目标程序&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cpu性能-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu性能-2&#34;&gt;#&lt;/a&gt; CPU 性能&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</guid>
            <title>Lecture01-计算机网络概述</title>
            <link>https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</link>
            <category term="NJUSE" scheme="https://quas-modo.github.io/categories/NJUSE/" />
            <category term="互联网计算" scheme="https://quas-modo.github.io/categories/NJUSE/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/" />
            <category term="计网" scheme="https://quas-modo.github.io/tags/%E8%AE%A1%E7%BD%91/" />
            <pubDate>Thu, 08 Sep 2022 19:49:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;鉴于 zhy 妈妈的笔记过于全面，此系列笔记仅作一些补充和重点记忆强化。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;易混的英文单词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#易混的英文单词&#34;&gt;#&lt;/a&gt; 易混的英文单词&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;单元英文&lt;/th&gt;
&lt;th&gt;单元中文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;packets&lt;/td&gt;
&lt;td&gt;报文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;frames&lt;/td&gt;
&lt;td&gt;帧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;运输层&lt;/td&gt;
&lt;td&gt;segments&lt;/td&gt;
&lt;td&gt;段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;osi-和-tcpip模型对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#osi-和-tcpip模型对比&#34;&gt;#&lt;/a&gt; OSI 和 TCP/IP 模型对比&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层次&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;对应的层&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;二进制传输&lt;/td&gt;
&lt;td&gt;信号和介质&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;网络接入层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;介质访问&lt;/td&gt;
&lt;td&gt;帧和介质访问控制&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;网络接入层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;路径选择&lt;/td&gt;
&lt;td&gt;路径选择，最优路径&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;互联网层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;终端到终端通信&lt;/td&gt;
&lt;td&gt;可靠性，流控制，错误纠正&lt;/td&gt;
&lt;td&gt;属于数据流层&lt;/td&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;进程之间通信如何用户交流&lt;/td&gt;
&lt;td&gt;对话和交流&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;展示层&lt;/td&gt;
&lt;td&gt;展示&lt;/td&gt;
&lt;td&gt;标准&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;给用户展示交互接口&lt;/td&gt;
&lt;td&gt;浏览&lt;/td&gt;
&lt;td&gt;属于应用层&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;网络拓扑topology&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络拓扑topology&#34;&gt;#&lt;/a&gt; 网络拓扑 Topology&lt;/h2&gt;
&lt;p&gt;分为物理拓扑和逻辑拓扑&lt;/p&gt;
&lt;p&gt;总线 bus&lt;/p&gt;
&lt;p&gt;环型 ring   双环 dual ring&lt;/p&gt;
&lt;p&gt;星型 star&lt;/p&gt;
&lt;p&gt;树型 tree&lt;/p&gt;
&lt;p&gt;渔网型 complete（mesh）&lt;/p&gt;
&lt;p&gt;蜂窝型 cellular 非常低效&lt;/p&gt;
&lt;h2 id=&#34;网络设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络设备&#34;&gt;#&lt;/a&gt; 网络设备&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;层级&lt;/th&gt;
&lt;th&gt;应用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;media&lt;/td&gt;
&lt;td&gt;介质&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;携带信息流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repeaters&lt;/td&gt;
&lt;td&gt;中继器&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;延长网络的长度，转发，不做过滤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hubs&lt;/td&gt;
&lt;td&gt;集线器&lt;/td&gt;
&lt;td&gt;第一层&lt;/td&gt;
&lt;td&gt;不解决冲突，转发，不做过滤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bridges&lt;/td&gt;
&lt;td&gt;网桥&lt;/td&gt;
&lt;td&gt;第二层&lt;/td&gt;
&lt;td&gt;在 lan 上过滤流量，创建冲突域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;switches&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;交换机&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;第二层&lt;/td&gt;
&lt;td&gt;结合网桥和交换机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;routers&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;路由器&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;第三层&lt;/td&gt;
&lt;td&gt;路径选择，ip 逻辑划分，切换到最佳路由&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/</guid>
            <title>欢迎来到我的世界</title>
            <link>https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/</link>
            <category term="杂谈" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/categories/%E6%9D%82%E8%B0%88/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <category term="杂谈" scheme="https://quas-modo.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <category term="书影音" scheme="https://quas-modo.github.io/tags/%E4%B9%A6%E5%BD%B1%E9%9F%B3/" />
            <pubDate>Wed, 07 Sep 2022 15:18:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;欢迎朋友们来到我的世界~&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欢迎朋友们来到我的世界~&#34;&gt;#&lt;/a&gt; 欢迎朋友们来到我的世界～&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;会在这里&lt;s&gt;不定期&lt;/s&gt;（希望是定期）更新课程笔记、专业书籍笔记整理、书影音杂感以及一些胡言乱语&lt;/p&gt;
&lt;p&gt;欢迎交流&lt;/p&gt;
&lt;p&gt;欢迎加友链&lt;/p&gt;
&lt;p&gt;（逃&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
