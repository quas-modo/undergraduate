{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "title": "Lecture11-网络安全",
            "date_published": "2023-02-08T09:53:41.000Z",
            "content_html": "<h1 id=\"lecture11-网络安全\"><a class=\"anchor\" href=\"#lecture11-网络安全\">#</a> Lecture11 - 网络安全</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第11讲：网络安全_页面_01\" /></p>\n<h2 id=\"网络安全问题概述\"><a class=\"anchor\" href=\"#网络安全问题概述\">#</a> 网络安全问题概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第11讲：网络安全_页面_02\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第11讲：网络安全_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第11讲：网络安全_页面_04\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第11讲：网络安全_页面_05\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第11讲：网络安全_页面_06\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第11讲：网络安全_页面_07\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第11讲：网络安全_页面_08\" /></p>\n<h2 id=\"一般的数据加密模型\"><a class=\"anchor\" href=\"#一般的数据加密模型\">#</a> 一般的数据加密模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第11讲：网络安全_页面_09\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第11讲：网络安全_页面_10\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第11讲：网络安全_页面_11\" /></p>\n<h2 id=\"对称密钥和公钥密码体制\"><a class=\"anchor\" href=\"#对称密钥和公钥密码体制\">#</a> 对称密钥和公钥密码体制</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第11讲：网络安全_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第11讲：网络安全_页面_13\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第11讲：网络安全_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第11讲：网络安全_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第11讲：网络安全_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第11讲：网络安全_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第11讲：网络安全_页面_18\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第11讲：网络安全_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第11讲：网络安全_页面_20\" /></p>\n<h2 id=\"数字签名\"><a class=\"anchor\" href=\"#数字签名\">#</a> 数字签名</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第11讲：网络安全_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第11讲：网络安全_页面_22\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第11讲：网络安全_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第11讲：网络安全_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第11讲：网络安全_页面_25\" /></p>\n<h2 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第11讲：网络安全_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第11讲：网络安全_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第11讲：网络安全_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第11讲：网络安全_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第11讲：网络安全_页面_30\" /></p>\n<h2 id=\"acl\"><a class=\"anchor\" href=\"#acl\">#</a> ACL</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第11讲：网络安全_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第11讲：网络安全_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第11讲：网络安全_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第11讲：网络安全_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第11讲：网络安全_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第11讲：网络安全_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第11讲：网络安全_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第11讲：网络安全_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第11讲：网络安全_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第11讲：网络安全_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第11讲：网络安全_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第11讲：网络安全_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第11讲：网络安全_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第11讲：网络安全_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第11讲：网络安全_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第11讲：网络安全_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第11讲：网络安全_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第11讲：网络安全_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第11讲：网络安全_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第11讲：网络安全_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第11讲：网络安全_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第11讲：网络安全_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第11讲：网络安全_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第11讲：网络安全_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第11讲：网络安全_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第11讲：网络安全_页面_56\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "title": "Lecture10-广域网",
            "date_published": "2023-02-08T09:53:29.000Z",
            "content_html": "<h1 id=\"lecture10-wan广域网\"><a class=\"anchor\" href=\"#lecture10-wan广域网\">#</a> Lecture10-WAN 广域网</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第10讲：广域网(wan)_页面_01\" /></p>\n<h2 id=\"广域网技术和设备\"><a class=\"anchor\" href=\"#广域网技术和设备\">#</a> 广域网技术和设备</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第10讲：广域网(wan)_页面_02\" /></p>\n<h3 id=\"广域网服务\"><a class=\"anchor\" href=\"#广域网服务\">#</a> 广域网服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第10讲：广域网(wan)_页面_03\" /></p>\n<p>定义：WAN 是通过 WAN 服务提供商连接 LAN 的通信网络</p>\n<p>WAN 在 OSI 的前三层运行，但<strong>主要集中在物理和数据链路层</strong>。</p>\n<p>广域网和局域网相比相对低效</p>\n<h3 id=\"公司的发展\"><a class=\"anchor\" href=\"#公司的发展\">#</a> 公司的发展</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第10讲：广域网(wan)_页面_04\" /></p>\n<ul>\n<li>广域网的最小单位是公司</li>\n<li>随着公司逐渐的发展才发展 (公司的发展是需求)</li>\n<li>最上角：公司刚成立的时候，小的局域网就可以搞定了 (几台主机)，对外提供服务少，局域网协同办公。</li>\n<li>右上角：随着公司的发展，一家发展到几十家，需要将不同的项目分开，每一个项目都有对应的项目经理和开发人员，多个局域网组成一个 AS (自治系统)。还是一个出口，ASP 要求高，VLAN 隔离和防火墙</li>\n<li>左下角：再次发展，有多个分支机构，区域办事处等，物理上隔离的很远，这时候建立一个数据中心 (存放全部业务数据)，保证团队可以在任何位置访问，公司向 ISP 请求租用一个广域网链路。</li>\n<li>右下角：最后进一步发展，覆盖全球：公司规模足够大，考虑成本，需要部署站点到站点之间的 VPN，保证效率更高。</li>\n</ul>\n<h3 id=\"广域网物理结构\"><a class=\"anchor\" href=\"#广域网物理结构\">#</a> 广域网物理结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第10讲：广域网(wan)_页面_05\" /></p>\n<p>通过 NetWork 远程接入，通过 WSP 提供的 CO Swtich 来连接到中心局</p>\n<p>CPE: 位于公司本地的设备 (主要是接入设备)，可以向 ISP 购买或者租用，购买上网服务 (猫)</p>\n<h3 id=\"广域网虚拟电路\"><a class=\"anchor\" href=\"#广域网虚拟电路\">#</a> 广域网虚拟电路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第10讲：广域网(wan)_页面_06\" /></p>\n<p>交换虚拟电路 (SVC，Switched Virtual Circuits) 是到目的地的 WAN 路径，可根据需要建立 (established) 和终止 (terminated)</p>\n<p>广域网虚拟电路的三个阶段 (phases)</p>\n<ol>\n<li>电路建立–创建虚拟电路 (逻辑确定)</li>\n<li>数据传输–发送和接收用户数据 (含有虚电路号等)</li>\n<li>电路中断–拆除虚拟电路</li>\n</ol>\n<p>永久 (Permanent) 虚拟电路 (PVC) 是采用以下一种模式的永久建立的电路：数据传输</p>\n<ol>\n<li>X.25 和帧中继使用 PVC</li>\n<li>减少带宽使用，但增加成本</li>\n</ol>\n<p><img data-src=\"C:/Users/QUAS/AppData/Roaming/Typora/typora-user-images/image-20230110112813672.png\" alt=\"image-20230110112813672\" /></p>\n<h3 id=\"链接类型和带宽\"><a class=\"anchor\" href=\"#链接类型和带宽\">#</a> 链接类型和带宽</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230110112856731.png\" alt=\"image-20230110112856731\" /></p>\n<ol>\n<li>T：美国标准</li>\n<li>E：欧洲标准</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第10讲：广域网(wan)_页面_07\" /></p>\n<h3 id=\"交换电路连接\"><a class=\"anchor\" href=\"#交换电路连接\">#</a> 交换电路连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第10讲：广域网(wan)_页面_08\" /></p>\n<p>ISDN: 多个 B 信道和 P 信道组合</p>\n<ul>\n<li>BRI:2 个 B 和一个 D</li>\n<li>PRI:T1:23B + D 和 E1:30B + D</li>\n</ul>\n<h3 id=\"网络连接\"><a class=\"anchor\" href=\"#网络连接\">#</a> 网络连接</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\" alt=\"img\" /></a></p>\n<ul>\n<li>直接连接到运营商，DSL 接入 (以太网转换成 DSL 信号)</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\" alt=\"img\" /></a></p>\n<ul>\n<li>永久在线连接，用于有线电视传输等，共享电缆开关等</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\" alt=\"img\" /></a></p>\n<ul>\n<li>无线\n<ul>\n<li>地面无线信道</li>\n<li>无线信道</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第10讲：广域网(wan)_页面_09\" /></p>\n<h3 id=\"广域网设备\"><a class=\"anchor\" href=\"#广域网设备\">#</a> 广域网设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第10讲：广域网(wan)_页面_10\" /></p>\n<p>为了连接到专线 (leased line)，客户必须具备以下条件：</p>\n<ol>\n<li>访问服务提供商的电路</li>\n<li>可用的适当路由器端口</li>\n<li>CSU/DSU，调制解调器，ISDN 终端适配器等。</li>\n</ol>\n<h4 id=\"调制解调器\"><a class=\"anchor\" href=\"#调制解调器\">#</a> 调制解调器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第10讲：广域网(wan)_页面_11\" /></p>\n<ol>\n<li>通道服务单元 CSU,Channel Service Units / 数字服务单元 DSU,Digital Service Units</li>\n<li>与语音级 (voice-grade) 连接接口，以便将模拟信号转换为数字信号。</li>\n</ol>\n<h2 id=\"广域网和osi模型\"><a class=\"anchor\" href=\"#广域网和osi模型\">#</a> 广域网和 OSI 模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第10讲：广域网(wan)_页面_12\" /></p>\n<h3 id=\"广域网标准\"><a class=\"anchor\" href=\"#广域网标准\">#</a> 广域网标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第10讲：广域网(wan)_页面_13\" /></p>\n<p>WAN 标准主要描述 OSI 模型的哪些层？<strong>物理层和数据链路层</strong>，物理层提供电器标准，数据链路层封装到远程的部分：帧标准</p>\n<h3 id=\"wan物理层\"><a class=\"anchor\" href=\"#wan物理层\">#</a> wan 物理层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第10讲：广域网(wan)_页面_14\" /></p>\n<ol>\n<li>描述如何为 WAN 服务提供电气，机械，操作和功能连接的协议。</li>\n<li>这些服务通常是从 WAN 服务提供商，备用运营商，电话后和电报 (PTT) 机构获得的。</li>\n<li>描述数据终端设备 (DTE, Data Terminal Equipment) 和数据电路终端设备 (DCE. Data Circuit-terminating Equipment) 之间的接口。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第10讲：广域网(wan)_页面_15\" /></p>\n<ol>\n<li>通常，DCE 是服务提供商，而 DTE 是连接的设备。</li>\n<li>在此模型中，通过调制解调器或 CSU / DSU 提供给 DTE 的服务。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第10讲：广域网(wan)_页面_16\" /></p>\n<p>指定 DTE 和 DCE 之间此接口的几种物理层标准是…</p>\n<ol>\n<li>EIA/TIA-232 (RS-232): 计算机常用</li>\n<li>EIA/TIA-449</li>\n<li>V.24</li>\n<li>V.35</li>\n<li>X.21</li>\n<li>G.703</li>\n<li>EIA-530</li>\n</ol>\n<h3 id=\"wan数据链路层\"><a class=\"anchor\" href=\"#wan数据链路层\">#</a> wan 数据链路层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第10讲：广域网(wan)_页面_17\" /></p>\n<ol>\n<li>WAN 数据链路协议描述了如何在单个数据链路上的系统之间承载帧。</li>\n<li>它们包括旨在在专用 (dedicated) 点对点，多点和多址交换服务上运行的协议。</li>\n<li>WAN 标准由许多公认的机构定义和管理，包括以下机构：ITU-T，ISO，IETF 和 EIA</li>\n<li>不是那么可靠，帧结构和以太网帧不同，协议是点对点，点对多点，多链路交换机切换</li>\n<li>为了确保正确：需要为每一个串口指定一个方式组成帧</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第10讲：广域网(wan)_页面_18\" /></p>\n<p>WAN 数据链路层定义了如何封装数据以传输到远程站点</p>\n<ol>\n<li><strong>点对点协议 (PPP,Point-to-Point Protocol)</strong>: 由 IETF 开发。PPP 包含用于识别网络层协议的协议字段 (包含一个协议单元，指定网络协议)</li>\n<li><strong>高级数据链路控制 (HDLC, High-Level Data Link Control)</strong>:ISO 标准，不同供应商之间不兼容的 HDLC，因为每个供应商都选择了实现方式。HDLC 支持点对点 / 多点配置 (抽象规范和约束，各个厂商不同)</li>\n<li><strong>帧中继 (Frame Relay)</strong>：使用简化的封装，对高质量的数字设备不进行纠错。(比较高速)</li>\n<li><strong>ISDN</strong>：通过现有电话线传输语音和数据的一组数字服务。</li>\n<li><strong>平衡的链路访问程序 (LAPB, Link Access Procedure, Balanced)</strong>：用于在 X.25 堆栈的第 2 层封装数据包的数据包交换网络。 提供点对点的可靠性和流量控制。</li>\n</ol>\n<h2 id=\"广域网访问方法\"><a class=\"anchor\" href=\"#广域网访问方法\">#</a> 广域网访问方法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第10讲：广域网(wan)_页面_19\" /></p>\n<h3 id=\"ppp-hdlc-ppp重要考试考\"><a class=\"anchor\" href=\"#ppp-hdlc-ppp重要考试考\">#</a> PPP/ HDLC PPP（重要考试考）</h3>\n<p>点对点的标准</p>\n<p>以思科厂商为标准</p>\n<p>工作在串行链路上的</p>\n<p>如果都是同一个厂商的可以用 HDLC，不然使用 PPP</p>\n<h4 id=\"串行线框字段\"><a class=\"anchor\" href=\"#串行线框字段\">#</a> 串行线框字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第10讲：广域网(wan)_页面_20\" /></p>\n<ol>\n<li>两种最常见的点对点 WAN 封装是 HDLC (High-level Data Protocol) 和 PPP (Point to Poing Protocol)</li>\n<li>所有串行线封装共享一个通用的帧格式，该格式具有以下字段</li>\n<li>封装协议的选择取决于 WAN 技术和通信设备</li>\n</ol>\n<h4 id=\"ppp-and-hdlc\"><a class=\"anchor\" href=\"#ppp-and-hdlc\">#</a> PPP and HDLC</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第10讲：广域网(wan)_页面_21\" /></p>\n<ol>\n<li>\n<p>PPP 是一种标准的</p>\n<p>串行线路</p>\n<p>封装方法</p>\n<ol>\n<li>由 IETF (The Internet Engineering Task) 开发；取代 SLIP (Serial Line Internet Protocol)</li>\n<li>包含标识网络层协议的字段</li>\n<li>PPP 可以在建立连接期间检查链接质量</li>\n<li>通过密码认证协议 (PAP) 和质询握手认证协议 (CHAP) 提供认证。</li>\n</ol>\n</li>\n<li>\n<p>HDLC 是 Cisco 串行线的默认封装</p>\n<ol>\n<li>没有窗口或流量控制</li>\n<li>框架中插入了专有类型 (所有权) 代码，这意味着 HDLC 帧不能与其他供应商的设备互操作。</li>\n<li>当专用线路连接的两端是运行 Cisco IOS 的路由器时使用</li>\n<li>不做出窗口控制和流控制</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ppp\"><a class=\"anchor\" href=\"#ppp\">#</a> ppp</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第10讲：广域网(wan)_页面_22\" /></p>\n<ol>\n<li>串行链路上使用最广泛的第 2 层协议</li>\n<li>从 SLIP 开发，\n<ol>\n<li>仅支持 IP 协议</li>\n<li>不支持动态 IP 分配</li>\n<li>不支持身份验证</li>\n<li>不支持压缩</li>\n<li>不支持错误检测</li>\n</ol>\n</li>\n<li>PPP 提供以下功能\n<ol>\n<li>网络协议多路复用</li>\n<li>动态分配 IP 地址</li>\n<li>验证：PAP，CHAP</li>\n<li>压缩</li>\n<li>错误检测</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"ppp组件\"><a class=\"anchor\" href=\"#ppp组件\">#</a> PPP 组件</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第10讲：广域网(wan)_页面_23\" /></p>\n<p>使用 HDLC (ISO HDLC，而非 Cisco HDLC) 作为封装第 3 层数据报的基础</p>\n<p>实现 LCP (链接控制协议) 以：</p>\n<ol>\n<li>建立连接</li>\n<li>连接配置选项</li>\n<li>链接质量测试</li>\n</ol>\n<p>实施 NCP (网络控制协议，Network Control Protocol) 以选择和配置第 3 层协议</p>\n<h4 id=\"ppp帧格式\"><a class=\"anchor\" href=\"#ppp帧格式\">#</a> PPP 帧格式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第10讲：广域网(wan)_页面_24\" /></p>\n<ol>\n<li>Flag: 01111110 标记：帧的开头或结尾，01111110，一位可能会连续接受到多个帧</li>\n<li>Address：11111111，广播地址</li>\n<li>Control：00000011，用户数据作为无序帧传输</li>\n<li>Protocol: 数据字段中的协议类型</li>\n<li>Data: 数据报，最大默认值为 1500 字节</li>\n<li>FCS: 2 或者 4 字节</li>\n</ol>\n<h4 id=\"ppp会话建立终止\"><a class=\"anchor\" href=\"#ppp会话建立终止\">#</a> PPP 会话建立 / 终止</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第10讲：广域网(wan)_页面_25\" /></p>\n<ol>\n<li>为了通过点对点链路建立通信，PPP 经历四个不同的阶段：\n<ol>\n<li>步骤一：链接建立和配置协商 (negotiation)(LCP)。</li>\n<li>步骤二：链接质量测试。</li>\n<li>步骤三：网络层协议配置 (NCP)。</li>\n<li>步骤四：链接终止。</li>\n</ol>\n</li>\n<li>图示如下</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第10讲：广域网(wan)_页面_26\" /></p>\n<h5 id=\"连接建立\"><a class=\"anchor\" href=\"#连接建立\">#</a> 连接建立</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第10讲：广域网(wan)_页面_27\" /></p>\n<ol>\n<li>建立链接是交换任何网络层数据报之前的第一阶段\n<ol>\n<li>每个 PPP 设备发送 LCP 来打开连接</li>\n<li>LCP 数据包包含一个配置选项字段，该字段允许设备协商选项的使用，例如<strong>压缩和身份验证协议</strong>等。</li>\n<li>如果 LCP 数据包中未包含配置选项，则采用该配置选项的<strong>默认值</strong>。</li>\n<li>当已发送和接收配置<strong>确认</strong>帧时，此阶段完成。</li>\n</ol>\n</li>\n<li>在完成这个步骤前不会传输具体数据帧的。</li>\n</ol>\n<h5 id=\"链路质量确定\"><a class=\"anchor\" href=\"#链路质量确定\">#</a> 链路质量确定</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第10讲：广域网(wan)_页面_28\" /></p>\n<ol>\n<li>发送和接收 LCP 数据包以测量链路上的错误率 (如果已配置)</li>\n<li>身份验证 (如果使用) 在网络层协议配置阶段开始之前进行。(可选)</li>\n<li>LCP 可以延迟网络层协议信息的传输，直到完成此阶段。</li>\n<li>在这之前不能传输网络帧。</li>\n</ol>\n<h5 id=\"网络层协议配置\"><a class=\"anchor\" href=\"#网络层协议配置\">#</a> 网络层协议配置</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第10讲：广域网(wan)_页面_29\" /></p>\n<ol>\n<li>在此阶段，PPP 设备发送 NCP 数据包以选择和配置一个或多个网络层协议 (例如 IP)。</li>\n<li>配置了每个选定的网络层协议后，可以通过链接发送来自每个网络层协议的数据报。</li>\n</ol>\n<h5 id=\"连接终止\"><a class=\"anchor\" href=\"#连接终止\">#</a> 连接终止</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第10讲：广域网(wan)_页面_30\" /></p>\n<p>CP 可以随时终止链接：</p>\n<ol>\n<li>应用户要求；(一方请求终止)</li>\n<li>链接质量</li>\n<li>超时</li>\n</ol>\n<p>当 LCP 关闭链接时，它将通知网络层协议，以便它们可以采取适当的措施</p>\n<h4 id=\"pap\"><a class=\"anchor\" href=\"#pap\">#</a> PAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第10讲：广域网(wan)_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第10讲：广域网(wan)_页面_32\" /></p>\n<ol>\n<li>链接的发起方 (Calling Side) 输入身份验证信息，以帮助确保用户具有网络管理员的许可来进行连接。</li>\n<li>远程节点使用双向握手 PAP 建立其身份。</li>\n<li>远程节点<strong>重复</strong>发送用户名 / 密码对，直到确认身份验证或连接终止</li>\n<li>密码以明文形式通过链接发送。</li>\n<li>在建立连接阶段之后，仅对远程节点进行一次身份验证。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第10讲：广域网(wan)_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第10讲：广域网(wan)_页面_34\" /></p>\n<h4 id=\"chap\"><a class=\"anchor\" href=\"#chap\">#</a> CHAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第10讲：广域网(wan)_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第10讲：广域网(wan)_页面_36\" /></p>\n<ol>\n<li>被叫方使用三向握手 CHAP 协议定期验证主叫方。</li>\n<li>CHAP 不允许呼叫者在没有 Challenge (随机数) 的情况下尝试进行身份验证。(Challenge-&gt; 随机数)</li>\n<li>主机 (称为参与者) 将质询消息发送到远程节点。</li>\n<li>远程节点以一个值 (加密的值，包括：接收到的质询，其用户名和密码) 进行响应:value 是 challenge 和密钥生成的</li>\n<li>主机根据自己的价值检查响应\n<ol>\n<li>如果值匹配，则确认身份验证</li>\n<li>否则，连接终止</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第10讲：广域网(wan)_页面_37\" /></p>\n<ul>\n<li>RTB 请求连接 RTA</li>\n<li>他们都存储一个用户名密码，但是用户名不同，密码相同</li>\n<li>RTB 发送一个连接请求</li>\n<li>RTA 找一个时间来发起挑战</li>\n<li>挑战中内容:\n<ul>\n<li>编号</li>\n<li>id 是第几次挑战</li>\n<li>random: 生成的随机数</li>\n<li>RTA: 谁发起的挑战</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第10讲：广域网(wan)_页面_38\" /></p>\n<ul>\n<li>RTB 进行应答，</li>\n<li>RTB 操作:pass + random 使用 MD5 算法 -&gt; 哈希值</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第10讲：广域网(wan)_页面_39\" /></p>\n<p>RTA 收到 RTB 的回复，然后比较是否相同</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第10讲：广域网(wan)_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第10讲：广域网(wan)_页面_41\" /></p>\n<h3 id=\"isdn\"><a class=\"anchor\" href=\"#isdn\">#</a> ISDN</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第10讲：广域网(wan)_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第10讲：广域网(wan)_页面_43\" /></p>\n<ol>\n<li>集成服务数字网络允许通过现有电话线传输数字信号：提供远程站点的连接</li>\n<li>ISDN 具有以下优点：\n<ol>\n<li>可以携带语音，视频和数据</li>\n<li>使用带外 D (或 Delta) 信道比调制解调器 (有时 &lt; 1s) 更快的呼叫建立</li>\n<li>使用 B (或屏障) 通道以 64kps 提供更快的数据传输</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"bribasic-rate-interface-and-priprimary-rate-interface\"><a class=\"anchor\" href=\"#bribasic-rate-interface-and-priprimary-rate-interface\">#</a> BRI(Basic Rate Interface) and PRI(Primary Rate Interface)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第10讲：广域网(wan)_页面_44\" /></p>\n<ol>\n<li>ISDN 服务有两种：\n<ol>\n<li>BRI (基本速率接口，Basic Rate Interface), 用户虚拟电路数据传，HDLC,PPP</li>\n<li>PRI (主速率接口，Primary Rate Interface)，发送控制信息，LAPD</li>\n</ol>\n</li>\n<li>ISDN BRI 服务提供两个 B 通道和一个 D 通道。</li>\n<li>ISDN BRI 将 144kbps (2B + D = 144kps) 线路的总带宽传送到三个单独的通道中。</li>\n<li>BRI B 信道服务以 64 kbps 的速率运行，旨在承载用户数据和语音流量。</li>\n<li>第三个通道，D 通道，是一个 16 kbps 信令通道，用于承载指令，这些指令告诉电话网络如何处理每个 B 通道。</li>\n<li>BRI 和 DRI 都是基于电话信道的</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第10讲：广域网(wan)_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第10讲：广域网(wan)_页面_46\" /></p>\n<ol>\n<li>ISDN 利用一套 (suit) ITU-T 标准套件，涵盖 OSI 参考模型的物理，数据链路和网络层。</li>\n<li>有几种封装选择。两种最常见的封装是 PPP 和 HDLC。</li>\n<li>ISDN 默认为 HDLC。但是，PPP 更为健壮，因为它为兼容链接和协议配置的身份验证和协商提供了出色的机制。</li>\n<li>ISDN 接口仅允许使用一种封装类型，不允许混合使用封装。</li>\n</ol>\n<h4 id=\"非对称数字用户线路adslasymmetric-digital-subscriber-line\"><a class=\"anchor\" href=\"#非对称数字用户线路adslasymmetric-digital-subscriber-line\">#</a> 非对称数字用户线路 (ADSL,Asymmetric Digital Subscriber Line)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第10讲：广域网(wan)_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第10讲：广域网(wan)_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第10讲：广域网(wan)_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第10讲：广域网(wan)_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第10讲：广域网(wan)_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第10讲：广域网(wan)_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第10讲：广域网(wan)_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第10讲：广域网(wan)_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第10讲：广域网(wan)_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第10讲：广域网(wan)_页面_56\" /></p>\n<h3 id=\"sonet\"><a class=\"anchor\" href=\"#sonet\">#</a> SONET</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第10讲：广域网(wan)_页面_57\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第10讲：广域网(wan)_页面_58\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第10讲：广域网(wan)_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第10讲：广域网(wan)_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第10讲：广域网(wan)_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第10讲：广域网(wan)_页面_62\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第10讲：广域网(wan)_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第10讲：广域网(wan)_页面_64\" /></p>\n<h3 id=\"hfc\"><a class=\"anchor\" href=\"#hfc\">#</a> HFC</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第10讲：广域网(wan)_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第10讲：广域网(wan)_页面_66\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第10讲：广域网(wan)_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第10讲：广域网(wan)_页面_68\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第10讲：广域网(wan)_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第10讲：广域网(wan)_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第10讲：广域网(wan)_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第10讲：广域网(wan)_页面_72\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_73.jpg\" alt=\"第10讲：广域网(wan)_页面_73\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_74.jpg\" alt=\"第10讲：广域网(wan)_页面_74\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "title": "Lecture09-局域网交换和vlan",
            "date_published": "2023-02-08T09:53:17.000Z",
            "content_html": "<h1 id=\"lecture9-局域网交换与vlan\"><a class=\"anchor\" href=\"#lecture9-局域网交换与vlan\">#</a> Lecture9- 局域网交换与 VLAN</h1>\n<h2 id=\"交换机\"><a class=\"anchor\" href=\"#交换机\">#</a> 交换机</h2>\n<h3 id=\"交换机基本功能\"><a class=\"anchor\" href=\"#交换机基本功能\">#</a> 交换机基本功能</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第9讲：局域网交换与vlan_页面_03\" /></p>\n<ol>\n<li>根据 MAC 地址建立和维护<strong>交换表</strong> (类似于网桥表)</li>\n<li>将帧切换出接口到目标</li>\n</ol>\n<h3 id=\"对称交换\"><a class=\"anchor\" href=\"#对称交换\">#</a> 对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第9讲：局域网交换与vlan_页面_04\" /></p>\n<ol>\n<li>对称交换可在具有相同带宽 (10/10 Mbps 或 100/100 Mbps) 的端口之间提供交换连接</li>\n<li>用户尝试访问其他网段上的服务器时，可能会导致瓶颈 (对称交换可能会导致带宽不足)</li>\n</ol>\n<h3 id=\"不对称交换\"><a class=\"anchor\" href=\"#不对称交换\">#</a> 不对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第9讲：局域网交换与vlan_页面_05\" /></p>\n<ol>\n<li>通过将带有服务器的网段连接到<strong>更高带宽的端口 (100 Mbps)</strong>，非对称交换 (asymmetric switching) 减少了服务器上潜在瓶颈的可能性</li>\n<li>非对称交换需要在交换器中进行内存缓冲</li>\n<li>非对称交换端口解决对称交换端口中的对称阻塞问题 (进一步保证了服务器的稳定实现)</li>\n</ol>\n<h3 id=\"内存缓存\"><a class=\"anchor\" href=\"#内存缓存\">#</a> 内存缓存</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第9讲：局域网交换与vlan_页面_06\" /></p>\n<ol>\n<li>交换机中存储目标和传输数据的内存区域，直到可以将其切换出正确的端口为止。\n<ol>\n<li>基于端口 (Port) 的内存缓冲\n<ol>\n<li>数据包存储在每个端口的队列中</li>\n<li>由于目标端口繁忙，一个数据包可能会延迟其他数据包的传输</li>\n<li>其他端口存在不均衡的问题。</li>\n</ol>\n</li>\n<li>共享 (Shared) 内存缓冲\n<ol>\n<li>所有端口共享的公用内存缓冲</li>\n<li>允许将数据包在一个端口上接收并在另一个端口上发送出去，而无需将其更改为其他队列。</li>\n<li>需要自己记录端口的信息</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>发生阻塞的时候，根据情况按照端口或者内存将包缓存下来</li>\n</ol>\n<h3 id=\"交换方式\"><a class=\"anchor\" href=\"#交换方式\">#</a> 交换方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第9讲：局域网交换与vlan_页面_07\" /></p>\n<p>储存转发 (Store-and-Forward，网桥、路由器等通过软件的设备)</p>\n<ol>\n<li>交换机<strong>接收整个帧</strong>，最后将其计算为 CRC，然后再将其发送到目的地</li>\n<li>接收后，校验，正确再发送</li>\n</ol>\n<p>Cut-through 直通</p>\n<ol>\n<li>转发会增加延迟：通过使用直通切换方法可以减少它</li>\n<li>快速转发切换：仅在立即转发帧之前检查目标 MAC (只看到<strong>帧的目的地址</strong>就转发)</li>\n<li>碎片释放：读取前 64 个字节去减少碰撞和帧碎片，在转发帧之前</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第9讲：局域网交换与vlan_页面_08\" /></p>\n<p>三种查看方式</p>\n<h3 id=\"第二层交换机\"><a class=\"anchor\" href=\"#第二层交换机\">#</a> 第二层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第9讲：局域网交换与vlan_页面_09\" /></p>\n<ol>\n<li>大规模集成电路，保证链路效率，低时延，低成本</li>\n<li>有一个 MAC 地址</li>\n</ol>\n<h3 id=\"第三层交换机\"><a class=\"anchor\" href=\"#第三层交换机\">#</a> 第三层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第9讲：局域网交换与vlan_页面_10\" /></p>\n<p>基于硬件的帧转发机制，较高的帧转发性能，低时延</p>\n<p>较高速的计算</p>\n<p>每一个端口的代价低</p>\n<p>流控制</p>\n<p>安全性更高</p>\n<p>对数据流进行路由，生成 MAC 和 IP 的映射，直接经过第二层（？，智能性较差</p>\n<h3 id=\"第四层交换机\"><a class=\"anchor\" href=\"#第四层交换机\">#</a> 第四层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第9讲：局域网交换与vlan_页面_11\" /></p>\n<h3 id=\"多层交换机协议\"><a class=\"anchor\" href=\"#多层交换机协议\">#</a> 多层交换机协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第9讲：局域网交换与vlan_页面_12\" /></p>\n<h2 id=\"stp-the-spanning-tree-protocol-生成树协议\"><a class=\"anchor\" href=\"#stp-the-spanning-tree-protocol-生成树协议\">#</a> STP the Spanning-Tree Protocol 生成树协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第9讲：局域网交换与vlan_页面_13\" /></p>\n<h3 id=\"桥回路\"><a class=\"anchor\" href=\"#桥回路\">#</a> 桥回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第9讲：局域网交换与vlan_页面_14\" /></p>\n<ol>\n<li>出于各种原因，网络中可能会出现环路。\n<ol>\n<li>通常，网络中的环路是<strong>故意提供冗余</strong>的结果。</li>\n<li>也可能由于配置错误而发生：在桥接网络中，环路可能是绝对灾难性的两个主要原因：\n<ol>\n<li>广播回路 (广播风暴)，没有 TTL</li>\n<li>路由表的错误</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"冗余造成了路由回路\"><a class=\"anchor\" href=\"#冗余造成了路由回路\">#</a> 冗余造成了路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第9讲：局域网交换与vlan_页面_15\" /></p>\n<h3 id=\"第二层路由回路\"><a class=\"anchor\" href=\"#第二层路由回路\">#</a> 第二层路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第9讲：局域网交换与vlan_页面_16\" /></p>\n<ol>\n<li>广播和第 2 层回路可能是危险的组合。</li>\n<li>以太网帧没有 TTL 字段</li>\n<li>以太网帧开始循环后，它可能会继续下去，直到有人关闭其中一台交换机或断开链路为止 (外部条件)</li>\n<li>交换机将抖动 (flip flop) 主机 A 的桥接表条目 (创建极高的 CPU 利用率)。</li>\n<li>消耗 CPU 和内存</li>\n</ol>\n<h4 id=\"泛洪单播帧\"><a class=\"anchor\" href=\"#泛洪单播帧\">#</a> 泛洪单播帧</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第9讲：局域网交换与vlan_页面_17\" /></p>\n<ul>\n<li>过一段时间 CAT-1 和 CAT-2 没有收到 Host-B 的信息，删除表中的对应记录</li>\n<li>在这之后，Host A 发送给 Host B 信息，然后在 CAT-1 和 CAT-2 之间进行循环</li>\n</ul>\n<h3 id=\"生成树概述\"><a class=\"anchor\" href=\"#生成树概述\">#</a> 生成树概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第9讲：局域网交换与vlan_页面_18\" /></p>\n<ol>\n<li>生成树协议的元素\n<ol>\n<li>主要功能：在<strong>交换 / 桥接网络</strong>中允许<strong>冗余路径</strong>，而不会因环路的影响而引起延迟。</li>\n<li>STP 通过计算<strong>稳定的生成树</strong>网络拓扑来防止环路</li>\n<li><strong>生成树帧</strong> (称为桥协议数据单元 - BPDU) 用于确定生成树拓扑</li>\n</ol>\n</li>\n<li>在正常情况下禁用一些端口来防止出现冗余</li>\n</ol>\n<h4 id=\"决策顺序\"><a class=\"anchor\" href=\"#决策顺序\">#</a> 决策顺序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第9讲：局域网交换与vlan_页面_19\" /></p>\n<p>生成树始终使用相同的四步决策序列：</p>\n<ol>\n<li>在拓扑里面最低的 root BID (网桥标识)【找到 root 路由器】</li>\n<li>找到 Root bridgh 的最低路径成本</li>\n<li>每个路径都会选择一个最低 BID 的 sender 这个是针对一个链路的，详见例子</li>\n<li>每个路径再指定一个最低的 ID 端口</li>\n</ol>\n<h4 id=\"bpdu-bridge-protocol-data-unit\"><a class=\"anchor\" href=\"#bpdu-bridge-protocol-data-unit\">#</a> BPDU Bridge Protocol Data Unit</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第9讲：局域网交换与vlan_页面_20\" /></p>\n<p>STP 建立一个称为<strong>根网桥的根节点</strong></p>\n<p>生成的树源自根桥。</p>\n<p>不属于最短路径树的冗余连接将被阻止。(block 端口，不转发，但是接收)（只会有一条路最短）</p>\n<p>在阻塞的链接上收到的数据帧将被丢弃。</p>\n<p>交换机发送的允许形成无环逻辑拓扑的消息是 BPDU</p>\n<h4 id=\"stp-bpdu\"><a class=\"anchor\" href=\"#stp-bpdu\">#</a> stp bpdu</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第9讲：局域网交换与vlan_页面_21\" /></p>\n<h4 id=\"bridge-identificationbid\"><a class=\"anchor\" href=\"#bridge-identificationbid\">#</a> Bridge Identification/BID</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第9讲：局域网交换与vlan_页面_22\" /></p>\n<ol>\n<li>网桥 ID (BID)：8 个字节 (2 + 6)\n<ol>\n<li>高阶 BID 子字段 (2 个字节)：网桥优先级\n<ol>\n<li>216 个可能的值：0-65,535 (默认值：32,768)</li>\n<li>通常以十进制格式表示</li>\n</ol>\n</li>\n<li>低阶子字段 (6 个字节)：分配给交换机的 MAC 地址，以十六进制格式表示</li>\n</ol>\n</li>\n<li>STP 成本值：成本越低越好。</li>\n</ol>\n<h4 id=\"选举根路由器\"><a class=\"anchor\" href=\"#选举根路由器\">#</a> 选举根路由器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第9讲：局域网交换与vlan_页面_23\" /></p>\n<ol>\n<li>交换机通过查找具有<strong>最低 BID</strong> 的交换机 (通常称为根战争) 来选择单个根交换机。</li>\n<li>如果所有交换机都使用默认的网桥优先级 32768，则最低的 MAC 地址将作为平局。</li>\n<li>配置优先级来调整根桥</li>\n</ol>\n<h3 id=\"路径代价cost\"><a class=\"anchor\" href=\"#路径代价cost\">#</a> 路径代价 cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第9讲：局域网交换与vlan_页面_24\" /></p>\n<h3 id=\"5个stp的状态\"><a class=\"anchor\" href=\"#5个stp的状态\">#</a> 5 个 STP 的状态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第9讲：局域网交换与vlan_页面_25\" /></p>\n<ol>\n<li>通过根据策略配置每个端口来建立状态</li>\n<li>然后，STP 根据流量模式 (traffic Patterns) 和潜在环路 (Protential Loops) 修改状态</li>\n<li>STP 状态的默认顺序为：\n<ol>\n<li>阻塞：没有转发帧，听到了 BPDU</li>\n<li>监听：不转发任何帧，监听数据帧 (确定自己可以参加的交换)，也会发送一些数据帧表示自己状态变了</li>\n<li>学习：不转发帧，学习地址</li>\n<li>转发：转发帧，学习地址</li>\n<li>禁用：没有转发帧，没有听到 BPDU</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113837280.png\" alt=\"image-20230109113837280\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113900889.png\" alt=\"image-20230109113900889\" /></p>\n<h3 id=\"初始stp收敛\"><a class=\"anchor\" href=\"#初始stp收敛\">#</a> 初始 STP 收敛</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第9讲：局域网交换与vlan_页面_26\" /></p>\n<ol>\n<li>当网络首次启动时，所有网桥都会混合使用 BPDU 信息来泛洪网络。(开始泛洪 BPDU 信息)</li>\n<li>立即，他们应用决策序列，允许他们 BPDU 进行 PK，然后选择出来 ROOT，从而形成整个网络的单个生成树。</li>\n</ol>\n<pre><code>(Step 1) 根交换机决定：选择一个根桥作为该网络的中心点\n(Step 2) 选择根端口：所有剩余的网桥都会计算出一组根端口\n(Step 3) 选择指定端口：其余所有网桥计算一组指定端口\n</code></pre>\n<h4 id=\"步骤1-根交换机决定\"><a class=\"anchor\" href=\"#步骤1-根交换机决定\">#</a> 步骤 1 根交换机决定</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第9讲：局域网交换与vlan_页面_27\" /></p>\n<ol>\n<li>（所有路由器都）宣布自己为根</li>\n<li>检查端口上收到的所有 BPDU 以及将在该端口上发送的 BPDU</li>\n<li>对于每个到达的 BPDU，如果其值小于为端口保存的现有 BPDU</li>\n<li>旧值被替换（由于 cat-A 的 BID 最小，所有 BC 均替换）</li>\n<li>BPDU 的发送者被接受为新的根</li>\n</ol>\n<h4 id=\"步骤2选择根端口\"><a class=\"anchor\" href=\"#步骤2选择根端口\">#</a> 步骤 2：选择根端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第9讲：局域网交换与vlan_页面_28\" /></p>\n<ol>\n<li>每个非根桥必须选择一个根端口。\n<ol>\n<li>桥的根端口是最接近根桥的端口。</li>\n<li>根路径成本是到根网桥的所有链接的累积 (cumulative) 成本。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"步骤3选择网段的指定端口\"><a class=\"anchor\" href=\"#步骤3选择网段的指定端口\">#</a> 步骤 3：选择网段的指定端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第9讲：局域网交换与vlan_页面_29\" /></p>\n<ol>\n<li>每个网段都有一个指定的端口：充当单个网桥 / 交换机端口，该端口既向该网段又向根网桥发送流量，也从该网段和根网桥接收流量。</li>\n<li>包含给定网段的指定端口的网桥 / 交换机称为该网段的指定网桥。</li>\n<li>所有网桥 / 交换机将阻止它们上未指定的端口，根网桥上的每个活动端口都将成为指定端口</li>\n<li>每个链路只有一个指定端口，一旦选定其他就 block 了</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第9讲：局域网交换与vlan_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第9讲：局域网交换与vlan_页面_31\" /></p>\n<h2 id=\"vlan\"><a class=\"anchor\" href=\"#vlan\">#</a> Vlan</h2>\n<h3 id=\"vlan介绍\"><a class=\"anchor\" href=\"#vlan介绍\">#</a> vlan 介绍</h3>\n<h4 id=\"现有的共享局域网配置\"><a class=\"anchor\" href=\"#现有的共享局域网配置\">#</a> 现有的共享局域网配置</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第9讲：局域网交换与vlan_页面_33\" /></p>\n<ol>\n<li>在典型的共享局域网中…\n<ol>\n<li>根据用户所插入 (plug) 的集线器对用户进行物理分组</li>\n<li>路由器分割局域网并提供广播防火墙</li>\n</ol>\n</li>\n<li>在虚拟局域网中\n<ol>\n<li>您可以按使用的功能，部门或应用程序对用户进行逻辑分组</li>\n<li>通过专有软件进行配置</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"lan和vlan之间的差异\"><a class=\"anchor\" href=\"#lan和vlan之间的差异\">#</a> LAN 和 VLAN 之间的差异</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第9讲：局域网交换与vlan_页面_34\" /></p>\n<p>虚拟局域网</p>\n<ol>\n<li>在第 2 层和第 3 层工作</li>\n<li>控制网络广播</li>\n<li>允许用户由网络管理员分配。</li>\n<li>提供更严格的网络安全性。</li>\n</ol>\n<h4 id=\"vlan标准\"><a class=\"anchor\" href=\"#vlan标准\">#</a> vlan 标准</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第9讲：局域网交换与vlan_页面_35\" /></p>\n<p>特点</p>\n<ol>\n<li>不限于物理交换机网段的网络设备或用户的<strong>逻辑分组</strong>。</li>\n<li>VLAN 中的设备或用户可以按功能，部门，应用程序等进行分组，而<strong>不管其物理网段的位置</strong>如何。</li>\n<li>VLAN<strong> 创建一个不限于物理网段</strong>的单个广播域，并且将其视为子网。</li>\n<li>VLAN 设置是由网络管理员使用供应商的软件在交换机中完成的。</li>\n</ol>\n<h4 id=\"分组用户\"><a class=\"anchor\" href=\"#分组用户\">#</a> 分组用户</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第9讲：局域网交换与vlan_页面_36\" /></p>\n<ol>\n<li>VLAN 可以从逻辑上将用户划分为不同的子网 (广播域)</li>\n<li>广播帧仅在具有相同 VLAN ID 的一个或多个交换机的端口之间切换。(VLAN ID 属于端口)</li>\n<li>可以通过基于以下内容的软件对用户进行逻辑分组：\n<ol>\n<li>端口号</li>\n<li>MAC 地址</li>\n<li>使用的协议</li>\n<li>使用的应用</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"有无vlan的网络广播\"><a class=\"anchor\" href=\"#有无vlan的网络广播\">#</a> 有无 vlan 的网络广播</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第9讲：局域网交换与vlan_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第9讲：局域网交换与vlan_页面_38\" /></p>\n<p>faculty studeng 分别在自己的 vlan 中传输</p>\n<h4 id=\"vlan间通信\"><a class=\"anchor\" href=\"#vlan间通信\">#</a> vlan 间通信</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第9讲：局域网交换与vlan_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第9讲：局域网交换与vlan_页面_40\" /></p>\n<h3 id=\"vlan结构\"><a class=\"anchor\" href=\"#vlan结构\">#</a> vlan 结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第9讲：局域网交换与vlan_页面_41\" /></p>\n<h4 id=\"backbone\"><a class=\"anchor\" href=\"#backbone\">#</a> backbone</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第9讲：局域网交换与vlan_页面_42\" /></p>\n<ol>\n<li>VLAN 配置需要支持互连的路由器和交换机之间的骨干数据传输。</li>\n<li>骨干网是用于 VLAN 间通信的区域</li>\n<li>骨干网应该是高速链路，通常为 100Mbps 或更高</li>\n<li>BackBone 可以跑多个 VLAN，是骨干网</li>\n</ol>\n<h4 id=\"vlan中路由器的作用\"><a class=\"anchor\" href=\"#vlan中路由器的作用\">#</a> vlan 中路由器的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第9讲：局域网交换与vlan_页面_43\" /></p>\n<ol>\n<li>路由器提供不同 VLAN 之间的连接</li>\n<li>例如，您有 VLAN1 和 VLAN2。\n<ol>\n<li>在交换机内，位于不同 VLAN 上的用户无法相互通信 (VLAN 的好处！)</li>\n<li>但是，VLAN1 上的用户可以向 VLAN2 上的用户发送电子邮件，但他们需要路由器才能执行此操作。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"在vlan中帧的作用\"><a class=\"anchor\" href=\"#在vlan中帧的作用\">#</a> 在 vlan 中帧的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第9讲：局域网交换与vlan_页面_44\" /></p>\n<ol>\n<li>交换机根据帧中的数据做出过滤和转发决策。</li>\n<li>使用了两种技术\n<ol>\n<li>帧过滤：检查有关每个帧的特定信息 (MAC 地址或第 3 层协议类型), 特定的 VLAN 记录或者映射</li>\n<li>帧标记：在整个网络骨干网中转发时，在每个帧的标题中放置一个唯一的标识符。</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"帧过滤\"><a class=\"anchor\" href=\"#帧过滤\">#</a> 帧过滤</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第9讲：局域网交换与vlan_页面_45\" /></p>\n<h5 id=\"帧标记\"><a class=\"anchor\" href=\"#帧标记\">#</a> 帧标记</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第9讲：局域网交换与vlan_页面_46\" /></p>\n<ol>\n<li>帧标记实施过程：\n<ol>\n<li>在整个网络骨干网中转发时，在每个帧的标题中放置一个 VLAN 标识符。</li>\n<li>每个开关都可以理解和检查标识符。</li>\n<li>当帧离开网络骨干网时，交换机会在帧发送到目标终端站之前删除标识符。只和端口绑定，而不影响主机</li>\n</ol>\n</li>\n<li>帧标记在第 2 层起作用</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第9讲：局域网交换与vlan_页面_47\" /></p>\n<p><strong>主机并不知道 vlan 的存在</strong></p>\n<h5 id=\"帧标签标准\"><a class=\"anchor\" href=\"#帧标签标准\">#</a> 帧标签标准</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第9讲：局域网交换与vlan_页面_48\" /></p>\n<p>IEEE802.1Q:IEEE 标准，在标头中插入 VLAN 的标签以标识所属的 VLAN。(帧标记)。</p>\n<p>ISL (Inter-Switch Link)：思科专有。ISL 在数据帧的前面添加一个 26 字节的标头，并在末尾附加一个 CRC (4 字节)。</p>\n<h3 id=\"vlan实现\"><a class=\"anchor\" href=\"#vlan实现\">#</a> vlan 实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第9讲：局域网交换与vlan_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第9讲：局域网交换与vlan_页面_50\" /></p>\n<p>实现 VLAN 的两种方法</p>\n<ol>\n<li>静态的</li>\n<li>动态的</li>\n</ol>\n<p>每一个端口绑定给一个 VLAN</p>\n<ol>\n<li>确保不共享同一 VLAN 的端口不共享广播。</li>\n<li>确保共享相同 VLAN 的端口将共享广播</li>\n</ol>\n<p>实现途径:</p>\n<ol>\n<li>基于端口的虚拟局域网</li>\n<li>基于 MAC 地址的虚拟局域网</li>\n<li>基于 IP 地址的虚拟局域网</li>\n<li>基于上层协议的虚拟局域网</li>\n</ol>\n<h4 id=\"静态vlan\"><a class=\"anchor\" href=\"#静态vlan\">#</a> 静态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第9讲：局域网交换与vlan_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第9讲：局域网交换与vlan_页面_52\" /></p>\n<p>定义：静态 VLAN 是指将交换机上的<strong>端口</strong>管理性地分配给 VLAN 的时间</p>\n<p>优点：</p>\n<ol>\n<li>安全，易于配置和监控</li>\n<li>在控制移动的网络中效果很好</li>\n</ol>\n<h4 id=\"动态vlan\"><a class=\"anchor\" href=\"#动态vlan\">#</a> 动态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第9讲：局域网交换与vlan_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第9讲：局域网交换与vlan_页面_54\" /></p>\n<ol>\n<li>当工作站最初连接到未分配的端口时，交换机会检查表中的条目，并使用正确的 VLAN 动态配置端口</li>\n<li>优点\n<ol>\n<li>添加或移动用户时减少管理 (更多前期工作)</li>\n<li>集中通知未授权用户</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"以端口为中心的vlan\"><a class=\"anchor\" href=\"#以端口为中心的vlan\">#</a> 以端口为中心的 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第9讲：局域网交换与vlan_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第9讲：局域网交换与vlan_页面_56\" /></p>\n<ol>\n<li>同一 VLAN 中的所有节点都连接到同一路由器接口</li>\n<li>使管理更容易，因为…\n<ol>\n<li>通过路由器端口分配用户</li>\n<li>VLAN 易于管理。</li>\n<li>提供更高的安全性</li>\n<li>数据包不会 &quot;泄漏&quot; 到其他域</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"access-and-trunk-links\"><a class=\"anchor\" href=\"#access-and-trunk-links\">#</a> access and trunk links</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第9讲：局域网交换与vlan_页面_57\" /></p>\n<p>分为两类:</p>\n<ol>\n<li>接入链路：通过一个 VLAN 报文</li>\n<li>骨干链路：通过多个 VLAN 报文</li>\n</ol>\n<h5 id=\"access\"><a class=\"anchor\" href=\"#access\">#</a> access</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第9讲：局域网交换与vlan_页面_58\" /></p>\n<ol>\n<li>访问连接是仅作为一个 VLAN 成员的交换机上的连接。</li>\n<li>此 VLAN 被称为端口的本机 VLAN，连接到端口的任何设备都完全不知道 VLAN 存在。</li>\n</ol>\n<h5 id=\"trunk-links\"><a class=\"anchor\" href=\"#trunk-links\">#</a> trunk links</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第9讲：局域网交换与vlan_页面_59\" /></p>\n<ol>\n<li>主干链路能够支持多个 VLAN。</li>\n<li>主干链路通常用于将交换机连接到其他交换机或路由器。</li>\n<li>交换机在快速以太网和千兆位以太网端口上都支持骨干链路。</li>\n<li>也存在访问和骨干链接</li>\n<li>一般 Trunk 就是 BackBone</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第9讲：局域网交换与vlan_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第9讲：局域网交换与vlan_页面_61\" /></p>\n<p>骨干链路不属于特定的 VLAN：充当交换机和路由器之间 VLAN 的通道。</p>\n<p>可以将骨干链路配置为传输所有 VLAN 或有限数量的 VLAN。</p>\n<p>但是，骨干链路可能具有本地 VLAN。</p>\n<p>如果骨干线链路由于任何原因失败，则骨干线的本地 VLAN 是该骨干线使用的 VLAN。</p>\n<h4 id=\"配置vlan\"><a class=\"anchor\" href=\"#配置vlan\">#</a> 配置 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第9讲：局域网交换与vlan_页面_62\" /></p>\n<p>在 Cisco 29xx 交换机上配置 VLAN 时，必须遵循以下准则：</p>\n<ol>\n<li>VLAN 的最大数量取决于交换机本身。</li>\n<li>VLAN 1 是出厂默认 VLAN 之一。(native VLAN 往往是 VLAN1，以及广播也是)</li>\n<li>VLAN 1 是默认的以太网 VLAN。</li>\n<li>思科发现协议 (CDP) 和 VLAN 骨干协议 (VTP) 通告在 VLAN 1 上发送。</li>\n<li>默认情况下，Catalyst 29xx IP 地址在 VLAN 1 广播域中。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第9讲：局域网交换与vlan_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第9讲：局域网交换与vlan_页面_64\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第9讲：局域网交换与vlan_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第9讲：局域网交换与vlan_页面_66\" /></p>\n<h3 id=\"vlan间中的路由\"><a class=\"anchor\" href=\"#vlan间中的路由\">#</a> vlan 间中的路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第9讲：局域网交换与vlan_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第9讲：局域网交换与vlan_页面_68\" /></p>\n<ol>\n<li>每个端口连接一个 VLAN，每个 IP 和一个 VLAN 连接</li>\n<li>如下图，我们使用串口线，物理上是一个一个接口，划分成多个 IP 和子接口</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109125803577.png\" alt=\"image-20230109125803577\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第9讲：局域网交换与vlan_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第9讲：局域网交换与vlan_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第9讲：局域网交换与vlan_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第9讲：局域网交换与vlan_页面_72\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "title": "Lecture08-路由协议RIPOSPF",
            "date_published": "2023-02-08T09:53:03.000Z",
            "content_html": "<h1 id=\"lecture08-路由协议rip-ospf\"><a class=\"anchor\" href=\"#lecture08-路由协议rip-ospf\">#</a> Lecture08 - 路由协议 RIP、OSPF</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_01\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_02\" /></p>\n<h2 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h2>\n<h3 id=\"rip历史\"><a class=\"anchor\" href=\"#rip历史\">#</a> RIP 历史</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_03\" /></p>\n<p>RIP v1 被认为是一种<strong>内部网关协议</strong>。</p>\n<ol>\n<li>RIP v1 是一种距离向量协议，它以预定间隔将其整个路由表广播到每个邻居路由器。默认间隔为<strong> 30 秒</strong>。</li>\n<li>RIP 使用<strong>跳数</strong>作为度量标准，最大跳数为<strong> 15</strong>，达到 16 跳的报文自动抛弃。</li>\n</ol>\n<p>RIP v1 能够在多达六个等价路径上进行<strong>负载平衡 (Load Balancing)</strong>，默认情况下为四个路径，最多 6 个，跳数相同才能完成负载均衡，跳数不同不满足条件</p>\n<p>RIP 最初是在 RFC 1058 中指定的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_04\" /></p>\n<p>RIP v1 具有以下限制：</p>\n<ol>\n<li>它不会在其更新中发送子网掩码信息：意味着必须用同样的子网掩码，不支持 VLSM 或无类域间路由 (CIDR，Classless Interdomain Routing)。</li>\n<li>它以 255.255.255.255 的广播形式发送更新：只能发给邻居，不能通过路由器转发。</li>\n<li>它不支持身份验证 (authentication): 只要启动 RIP 就可以接受到信息，也就意味着只要接入网络并且启动 RIP 进程，就可以了解到整个网络拓扑</li>\n</ol>\n<h3 id=\"rip配置\"><a class=\"anchor\" href=\"#rip配置\">#</a> RIP 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_05\" /></p>\n<p><code>router rip</code>  命令选择 RIP 作为路由协议。</p>\n<p>network 命令分配基于 NIC 的网络地址，路由器将直接连接到该网络地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_06\" /></p>\n<p>routerA 启用端口，可以简化为 <code>1.0.0.0</code>   <code>2.0.0.0</code></p>\n<h3 id=\"rip-v2\"><a class=\"anchor\" href=\"#rip-v2\">#</a> RIP v2</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_07\" /></p>\n<p>RIP v2 是 RIP v1 的改进版本，并且新增了以下的功能：</p>\n<ol>\n<li>这是一种使用<strong>跳数指标</strong>的距离矢量协议。</li>\n<li>它使用<strong>抑制计时器</strong>来防止路由循环 - 默认值为<strong> 180 秒</strong>，6 倍于交换时间</li>\n<li>它使用水平分割 (Split Horizon) 来防止路由循环 (Routing Loops)。</li>\n<li>它使用 16 跳作为<strong>无限距离的度量</strong>。(15 跳及以内可达)</li>\n</ol>\n<h3 id=\"ripv1-与-ripv2的比较\"><a class=\"anchor\" href=\"#ripv1-与-ripv2的比较\">#</a> RIPv1 与 RIPv2 的比较</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_08\" /></p>\n<p>V2 和 V1 不同的特点:</p>\n<ol>\n<li>支持有类路由：可以携带子网掩码</li>\n<li>使用主播地址 <code>244.0.0.9</code>  进行发送广播：特定给 RIP 接受，避免了接受后发现没有启动 RIP 进程耽误时间</li>\n<li>需要身份认证才确定是否继续进行接收。</li>\n</ol>\n<h3 id=\"ripv2-配置\"><a class=\"anchor\" href=\"#ripv2-配置\">#</a> RIPv2 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_09\" /></p>\n<p>network 命令导致实现以下三个功能：</p>\n<ol>\n<li>路由更新从接口多播。</li>\n<li>如果路由更新进入相同的界面，则将对其进行处理。</li>\n<li>广播直接连接到该接口的子网。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_10\" /></p>\n<p>需要设置 version2</p>\n<h3 id=\"验证和故障排除\"><a class=\"anchor\" href=\"#验证和故障排除\">#</a> 验证和故障排除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_11\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_13\" /></p>\n<ol>\n<li>The debug ip ripcommand displays RIP routing updates as they are  sent and received. In this example, the update is sent by 183.8.128.130. debug ip rip 命令显示 RIP 路由更新的发送和接收。 在本示例中，更新是通过 183.8.128.130 发送的。</li>\n<li>It reported on three routers, one of which is inaccessible because  its hop count is greater than 15. Updates were then broadcast through  183.8.128.2. 它报告了三台路由器，其中一台无法访问，因为其跳数大于 15。然后通过 183.8.128.2 广播了更新。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_14\" /></p>\n<p>120/1：表示 1 跳到达，120/2：表示 2 跳到达</p>\n<h2 id=\"ospf-open-shortest-path-first\"><a class=\"anchor\" href=\"#ospf-open-shortest-path-first\">#</a> OSPF Open Shortest Path First</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_16\" /></p>\n<p>开放最短路径优先 (OSPF，Open Shortest Path First) 是基于开放标准的链路状态路由协议。</p>\n<p>It is described in several standards of the Internet Engineering  Task Force (IETF) Internet 网络工程任务组 (IETF，Internet Engineering Task  Force) 的多个标准中对此进行了描述：The most recent description is RFC 2328. 最新的描述是 RFC  2328。(已经不是最新的了)</p>\n<p>与 RIP v1 和 RIP v2 相比，OSPF 正在成为首选的 IGP 协议，因为它具有可伸缩性。</p>\n<p>和 RIP 相比优势比较大，很多网络公司在研究 OSPF 的优化。</p>\n<h3 id=\"路由信息\"><a class=\"anchor\" href=\"#路由信息\">#</a> 路由信息</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_17\" /></p>\n<ol>\n<li>链接的状态是对接口及其与其相邻路由器的关系的描述。</li>\n<li>链接状态的集合形成一个<strong>链接状态数据库</strong>，有时也称为<strong>拓扑数据库</strong>。</li>\n<li>路由器应用<strong> Dijkstra 最短路径优先</strong> (SPF) 算法来构建以自己为根的 SPF 树。</li>\n<li>路由器通过 SPF 树计算最佳路径，然后选择最佳路径并将其放置在<strong>路由表</strong>中。</li>\n</ol>\n<h3 id=\"ospf-vs-rip\"><a class=\"anchor\" href=\"#ospf-vs-rip\">#</a> OSPF vs RIP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_18\" /></p>\n<p>用于大型网络，基于带宽，可以分层 (将网络划分成 2 层)，收敛更快，支持多路负载均衡</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_19\" /></p>\n<ul>\n<li>上面带宽大，2 跳达到，下面带宽小，1 跳到达。</li>\n<li>OSPF 从上面走，RIP 从下面走，但是上面会快一些</li>\n</ul>\n<h3 id=\"ospf-特征\"><a class=\"anchor\" href=\"#ospf-特征\">#</a> OSPF 特征</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_20\" /></p>\n<ol>\n<li>OSPF 的特征克服了这些限制\n<ol>\n<li>更健壮</li>\n<li>更具可扩展性</li>\n</ol>\n</li>\n<li>大型 OSPF 网络使用分层设计。\n<ol>\n<li>将大的网络分成多个 area，每一个 area 只和 area 0 相连，保证 area 没有回路</li>\n<li>层次最多只有 2 个，一个 area 就是 area 0。</li>\n<li>层次维持树的关系</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf术语\"><a class=\"anchor\" href=\"#ospf术语\">#</a> OSPF 术语</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_21\" /></p>\n<p>Link: 两个设备之间的物理链路</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_22\" /></p>\n<ul>\n<li>Neighbors: 相邻的路由器</li>\n<li>Link-State: 物理链路的信息：路由器连接关系、通过什么接口、链路带宽、网络类型 (点对点、多路复用) 等</li>\n<li>不同网络类型处理代价不同</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_23\" /></p>\n<p>Cost: 不同网络链路处理的时候的代价，和链路带宽相关，成反比关系，一般是固定值除以带宽</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_24\" /></p>\n<p>Area: 一个有很多路由器的端口都属于的区域 (相同)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_25\" /></p>\n<p>Autonomous System: 多个 Area 形成一个自治系统</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_28\" /></p>\n<ul>\n<li>Neighbours 必须在一个 Area 中才算是，Neighbour 之间交换 Topology Databases</li>\n<li>一个 Area 中获得全部 LS (Link State) 后计算 Tree，生成表</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_29\" /></p>\n<ul>\n<li>DR: 指定路由器，只有在多路复用的情况下使用</li>\n<li>BDR: 如果 DR 坏了，再次选举会出现问题，如果 DR 损坏，BDR 立即成为 DR</li>\n</ul>\n<h3 id=\"opsf域\"><a class=\"anchor\" href=\"#opsf域\">#</a> OPSF 域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_30\" /></p>\n<ol>\n<li>区域用 32 位数字标识\n<ol>\n<li>可以是 IP 格式，也可以是一个十进制值</li>\n<li>区域 0 或区域 0.0.0.0</li>\n</ol>\n</li>\n<li>区域 0：区域编号为 0 的单个区域</li>\n<li>OSPF 使用 2 级分层模型：逻辑上必须是 2 层结构，而物理实现上可能有一定的差异，如果更多需要进行逻辑配置。</li>\n<li>在多区域 OSPF 网络中，要求所有区域都连接到区域 0 (主干)</li>\n<li>Example:Area 是和端口相关 (注意端口)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_31\" /></p>\n<h3 id=\"ospf行为\"><a class=\"anchor\" href=\"#ospf行为\">#</a> OSPF 行为</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_32\" /></p>\n<ol>\n<li>OSPF 使用邻居的邻接关系 (Adjacencies) 来全面了解网络。</li>\n<li>OSPF 操作包括五个步骤：\n<ol>\n<li>步骤 1：建立邻接关系</li>\n<li>步骤 2：选择 DR 和 BDR (如果需要): 多路复用的时候才需要</li>\n<li>步骤 3：发现路线</li>\n<li>步骤 4：选择适当的路线</li>\n<li>步骤 5：维护路线信息</li>\n</ol>\n</li>\n<li>OSPF 具有七个状态。简而言之，它们是：\n<ol>\n<li>Init, 2Way, Ex Start, Exchange, Loading, Full</li>\n<li>初始化，双向操作，预先启动，交换，加载，完成</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_33\" /></p>\n<h3 id=\"选择dr和bdr\"><a class=\"anchor\" href=\"#选择dr和bdr\">#</a> 选择 DR 和 BDR</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_34\" /></p>\n<p>OSPF 网络类型</p>\n<ol>\n<li>广播多路复用网络，例如以太网</li>\n<li>点对点网络</li>\n<li>非广播多路复用网络 (NBMA, Nonbroadcasr multi-access)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_35\" /></p>\n<p>只有多路复用才需要选择 DR 和 BDR</p>\n<p>原先，每一个都要建立 10 (5 * 4/2) 个链接，如果有了 DR 就只需要 4 个连接</p>\n<p>对于所有 OSPF 路由器，DR 使用 224.0.0.5 (自己的 IP) 的<strong>主播地址</strong>向该网段上的所有其他路由器发送链接状态信息。</p>\n<p>为确保 DR/BDR 看到所有路由器在网段上发送的链接状态，使用了所有 DR/BDR 的多播地址 224.0.0.6。(DR 和 BDR 之间）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_36\" /></p>\n<h3 id=\"ospf报文\"><a class=\"anchor\" href=\"#ospf报文\">#</a> OSPF 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_38\" /></p>\n<p>包，并继续以固定的时间间隔 (intervals) 发送 hello。</p>\n<p>控制 (govern) OSPF hello 数据包交换的规则称为 Hello 协议。</p>\n<p>Hello 数据包的地址为 224.0.0.5。</p>\n<p>默认情况下，广播多路访问和点对点网络上<strong>每 10 秒</strong>发送一次 Hello 报文。</p>\n<p>在连接到 NBMA 网络的接口 (例如帧中继) 上，默认时间是 30 秒。</p>\n<p>保持心跳，确定还活着。Hello 几乎是空报文，给所有跑 OSPF 的路由器发送</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_40\" /></p>\n<h3 id=\"哪个路由器将成为dr\"><a class=\"anchor\" href=\"#哪个路由器将成为dr\">#</a> 哪个路由器将成为 DR？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_41\" /></p>\n<ol>\n<li>优先级 + 路由器 ID，最大的是 DR，第二大的是 BDR。</li>\n<li>优先级：1-255，默认值：1</li>\n<li>路由器 ID\n<ol>\n<li>环回 IP 地址 (逻辑端口)，避免端口宕机出现问题。</li>\n<li>如果没有环回 IP 地址，则接口 IP 为最高值地址 (Active 的端口上的 IP 作为参考)</li>\n<li>如果接口出现故障，则路由器必须重新建立邻接关系并重新转换 (readvertising) LSA</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf机制\"><a class=\"anchor\" href=\"#ospf机制\">#</a> OSPF 机制</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_43\" /></p>\n<ul>\n<li>准备交换数据库 (Exstart Starts)</li>\n<li>首先确认主方 (发送方)、从方 (接受方)，保证数据有序，简单就是谁的 Router ID 高</li>\n<li>Router ID 高的 (主方) 发送自己 DBD 报文，从方对主方发送的 DBD 接受处理并发送</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_44\" /></p>\n<p>交换完成后，各自检查自己是不是有全部的信息</p>\n<ul>\n<li>如果有完整的信息，则发送 LSAck</li>\n<li>如果发现有没有的，则发送 LSR，等待 LSU (整个链路的详细信息，不是 LSA) 来进行学习，之后收到完成后发送 LSAck</li>\n</ul>\n<h3 id=\"ospf操作\"><a class=\"anchor\" href=\"#ospf操作\">#</a> OSPF 操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_45\" /></p>\n<h4 id=\"建立邻接关系\"><a class=\"anchor\" href=\"#建立邻接关系\">#</a> 建立邻接关系</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_46\" /></p>\n<p>路由器每隔一段时间发送一次 hello 数据包，Hello 报文的 TTL 是 1，表明不会跨路由传播。</p>\n<p>如果邻居被发现了：将邻居添加到邻居数据库</p>\n<p>发现网络类型</p>\n<ol>\n<li>如果是多路复用网络，进入 DR/BDR 选举过程，然后进入步骤 2。</li>\n<li>如果是点对点或点对多点网络，则不会举行 DR/BDR 选举过程，并跳过步骤 2。</li>\n<li>如果 hello 数据包标头中的 DR/BDR 字段已被占用 (即 DR / BDR 对已经存在)，则不会进行 DR/BDR 选举，并跳过步骤 2。</li>\n</ol>\n<p>如果对方的 DP/BDP 优于我的 DP/BDP，则接受对方的</p>\n<h4 id=\"选举dr和bdr\"><a class=\"anchor\" href=\"#选举dr和bdr\">#</a> 选举 DR 和 BDR</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_47\" /></p>\n<ol>\n<li>如果没有其他路由器联机，则该路由器将成为 DR。下一个要 &quot;启动&quot; 的路由器将是 BDR。</li>\n<li>如果多个路由器 (两个或更多) 同时联机，则\n<ol>\n<li>优先级最高的路由器成为 DR：优先级为零表示 &quot;从不 DR&quot;</li>\n<li>如果存在平局，则具有最高路由器 ID 的路由器将成为 DR：路由器 ID 是最高的环回或接口 IP 地址</li>\n<li>具有第二高优先级或路由器 ID 的路由器成为 BDR</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_48\" /></p>\n<ol>\n<li>如果 DR 无效，则 BDR 变为 DR。</li>\n<li>然而\n<ol>\n<li>如果新的 OSPF 路由器以更高的优先级或路由器 ID 加入网络，则当前的 DR 和 BDR<strong> 不会更改</strong>。</li>\n<li>仅当当前 DR 失败时，它才成为新的 BDR；或者仅当当前 DR 和 BDR 失败时，才成为新的 DR。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"发现路线\"><a class=\"anchor\" href=\"#发现路线\">#</a> 发现路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_49\" /></p>\n<ol>\n<li>这一步从 Ex Start 状态转换到完整状态</li>\n<li>路由器确定 &quot;主 / 从 (master/slave)&quot; 关系</li>\n<li>多路复用网络中的 DR/BDR 交换 LSA，并且所有其他 DR 将其 Type 2 DBD 发送给 DR/BDR。</li>\n<li>如有必要，路由器可以通过发送请求更多信息的 LSR 进入负载状态：所有路由器必须在 &quot;加载状态&quot; 中等待，直到完全更新请求的路由器。</li>\n<li>路由器现在进入完整状态</li>\n</ol>\n<h4 id=\"选择适当的路线\"><a class=\"anchor\" href=\"#选择适当的路线\">#</a> 选择适当的路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_50\" /></p>\n<p>现在，将与网络上的所有其他路由器并行地计算 SPF 算法。</p>\n<ol>\n<li>切记：在发生这种情况之前，所有路由器必须具有相同的链接状态数据库。</li>\n<li>SPF 使用 Cost 作为指标</li>\n<li>SPF 将从其自身到目的地的每条路径的成本相加，并以路由器为根来构建树</li>\n<li>OSPF 然后在路由表中安装成本最低的路径：最多将安装 4 条等价路径以进行负载共享</li>\n</ol>\n<h4 id=\"维护路由信息\"><a class=\"anchor\" href=\"#维护路由信息\">#</a> 维护路由信息</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_51\" /></p>\n<ol>\n<li>常规的 Hello 交换是 OSPF 用于检测新邻居或故障 (downed) 邻居的机制。</li>\n<li>根据网络的类型，Hello 数据包以不同的默认间隔发送。(确定对方是不是还好)\n<ol>\n<li>对于速度为 T1 (1.544 Mbps) 或更高的链接，每 10 秒：广播多路访问和点对点链接</li>\n<li>对于小于 T1 的链接，每 30 秒：非广播多路访问链接</li>\n<li>&quot;死间隔&quot; 是问候间隔的四倍。(如果在这样子对方还没有成功则对方死了)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"链路状态出现变化\"><a class=\"anchor\" href=\"#链路状态出现变化\">#</a> 链路状态出现变化</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_52\" /></p>\n<ul>\n<li>Router A tells all OSPF DRs on 224.0.0.6</li>\n<li>Event 触发交换：比如 A 连接的网段断掉了</li>\n<li>A 使用 LSU 告知<strong> DR</strong></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_53\" /></p>\n<ul>\n<li>DR tells others on 224.0.0.5</li>\n<li>DR 通过 LSU 告知所有的路由器</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_54\" /></p>\n<p>如果 B 连接了别的 Area，则继续进行交换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_55\" /></p>\n<p>所有的路由信息交换完毕后，同时更新路由表</p>\n<h3 id=\"基本的ospf配置\"><a class=\"anchor\" href=\"#基本的ospf配置\">#</a> 基本的 OSPF 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_56\" /></p>\n<ol>\n<li>在路由器上启动 OSPF\n<ol>\n<li><code>Router (config)# router ospf process-id</code></li>\n<li>进程号:process-id\n<ol>\n<li>取值: 1 ~ 65535</li>\n<li>在一台路由器上识别多个 OSPF 进程</li>\n<li>通常在整个 AS (自治系统) 中保持相同的进程 ID</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>在路由器上识别 IP 网络\n<ol>\n<li><code>Router (config-router) # network address wildcardmask area area-id</code></li>\n<li>网络地址可以是整个网络，子网或接口的地址。</li>\n<li>address:IP 地址</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_57\" /></p>\n<ul>\n<li>只有一个 Area，则为 0</li>\n<li><strong>Wild-card Mask 和子网掩码相反</strong>：子网掩码是 255.255.255.0，则 Wild-card Address 就是 0.0.0.255</li>\n<li>写 IP 和写网段最后都是一样的</li>\n</ul>\n<h3 id=\"配置回路地址\"><a class=\"anchor\" href=\"#配置回路地址\">#</a> 配置回路地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_58\" /></p>\n<p>为 OSPF 路由器 ID 添加稳定性</p>\n<ol>\n<li>必须在 OSPF 进程开始之<strong>前</strong>配置回环接口：会涉及到主从关系确定和 DR 的选举</li>\n<li>配置环回地址时，请使用 / 32 掩码以避免潜在的路由问题</li>\n<li>I 建议您在基于 OSPF 的网络中的所有关键路由器上使用环回地址 (专用或公用地址)。</li>\n<li>一旦配置立刻生效，不需要 no shutdown 的命令即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_60\" /></p>\n<p>操纵 DR/BDR 选举</p>\n<ol>\n<li><code>Router (config-if) # ip ospf priority number</code></li>\n<li>优先级：越大越高\n<ol>\n<li>值：0-255, 默认为 1</li>\n<li>优先级 0 表示接口不能被选为 DR 或 BDR</li>\n</ol>\n</li>\n</ol>\n<p>操作 OSPF 的端口的优先级： <code>Router # show ip ospf [interface type number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_61\" /></p>\n<h3 id=\"osof成本-标准\"><a class=\"anchor\" href=\"#osof成本-标准\">#</a> OSOF 成本 = 标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_62\" /></p>\n<ol>\n<li>Cost 适用于所有路由器连接路径</li>\n<li>16 位数字 (1 – 65,535)</li>\n<li>较低的 Cost-&gt; 更理想</li>\n<li>路径决定是基于路径的总成本。</li>\n<li>指标受到带宽的影响</li>\n<li>用一个很大的数字去除以当前的带宽得到代价，计算方法如下</li>\n</ol>\n<h3 id=\"ospf-path-cost\"><a class=\"anchor\" href=\"#ospf-path-cost\">#</a> OSPF Path Cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_64\" /></p>\n<ol>\n<li>需要更改成本的常见情况是在多供应商 (multi-vendor) 路由环境中。成本更改将确保一个供应商的成本值与另一供应商的成本值匹配。</li>\n<li>另一种情况是使用千兆以太网。默认成本将最低成本值 1 分配给 100 Mbps 链路。</li>\n</ol>\n<h3 id=\"设置ospf计时器\"><a class=\"anchor\" href=\"#设置ospf计时器\">#</a> 设置 OSPF 计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_65\" /></p>\n<p>OSPF 区域中的所有路由器必须在相同的 hello 间隔和相同的死间隔上达成一致，默认情况下：</p>\n<ol>\n<li>T1 或更高链接 (广播) 为 10 秒</li>\n<li>慢于 T1 的链接为 30 秒 (非广播)</li>\n<li>死亡间隔 = <strong>4</strong> * 问候间隔</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_66\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "title": "Lecture07-路由器",
            "date_published": "2023-02-08T09:52:47.000Z",
            "content_html": "<h1 id=\"lecture07-routing-and-routers路由器和网络\"><a class=\"anchor\" href=\"#lecture07-routing-and-routers路由器和网络\">#</a> Lecture07-Routing and Routers 路由器和网络</h1>\n<h2 id=\"路由器基础\"><a class=\"anchor\" href=\"#路由器基础\">#</a> 路由器基础</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第7讲：路由与路由器_页面_03\" /></p>\n<h3 id=\"路由器内部组件\"><a class=\"anchor\" href=\"#路由器内部组件\">#</a> 路由器内部组件</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第7讲：路由与路由器_页面_04\" /></p>\n<h3 id=\"ram-random-access-memory-随机存取存储器\"><a class=\"anchor\" href=\"#ram-random-access-memory-随机存取存储器\">#</a> RAM Random Access Memory 随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第7讲：路由与路由器_页面_05\" /></p>\n<p>路由器配置文件的临时存储，一般做为内存使用</p>\n<p>断电或重新启动时 RAM 内容丢失</p>\n<p>存储:</p>\n<ol>\n<li>路由表</li>\n<li>ARP 缓存</li>\n<li>快速切换缓存</li>\n<li>报文缓存：可能前面有正在处理的，需要等待</li>\n<li>数据包保留队列</li>\n</ol>\n<h3 id=\"nvram-non-volatile-ram-非易失随机存取存储器\"><a class=\"anchor\" href=\"#nvram-non-volatile-ram-非易失随机存取存储器\">#</a> NVRAM Non-volatile RAM 非易失随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第7讲：路由与路由器_页面_06\" /></p>\n<p>存储备份 (backup)/ 启动 (startup) 配置文件</p>\n<p>路由器掉电或重启时内容不会丢失</p>\n<h3 id=\"flash\"><a class=\"anchor\" href=\"#flash\">#</a> Flash</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第7讲：路由与路由器_页面_07\" /></p>\n<ol>\n<li>电子可擦可编程只读存储器 (EEPROM, Electronically Erasable Programmable Read-Only Memory)</li>\n<li>存储了 Cisco IOS (互联网操作系统)</li>\n<li>允许更新软件而无需更换闪存芯片</li>\n<li>可以存储多个版本的 IOS</li>\n<li>断电保持</li>\n</ol>\n<h3 id=\"rom-read-only-memory\"><a class=\"anchor\" href=\"#rom-read-only-memory\">#</a> ROM Read-Only Memory</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第7讲：路由与路由器_页面_08\" /></p>\n<ol>\n<li>包含 POST (开机自检):PC 也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li>\n<li>引导程序 (加载 Cisco IOS)</li>\n<li>作系统软件\n<ol>\n<li>IOS 的备份，精简 (trimmed down) 版本</li>\n<li>升级需要安装新的芯片组</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第7讲：路由与路由器_页面_09\" /></p>\n<p>数据包通过其进入和离开路由器的网络连接口</p>\n<p>附在主板 (motherboard) 上或作为单独的模块。</p>\n<h2 id=\"路由器启动程序\"><a class=\"anchor\" href=\"#路由器启动程序\">#</a> 路由器启动程序</h2>\n<h3 id=\"系统启动程序\"><a class=\"anchor\" href=\"#系统启动程序\">#</a> 系统启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第7讲：路由与路由器_页面_11\" /></p>\n<ol>\n<li>执行开机自检 (POST)：在此自检期间，路由器从所有硬件模块上的 ROM 执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li>\n<li>验证 CPU，内存和网络接口端口的基本操作。</li>\n<li>软件初始化。</li>\n</ol>\n<h3 id=\"软件启动程序\"><a class=\"anchor\" href=\"#软件启动程序\">#</a> 软件启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第7讲：路由与路由器_页面_12\" /></p>\n<ol>\n<li>步骤 1:ROM 中的通用引导加载程序 (bootstrap) 在 CPU 卡上执行。</li>\n<li>步骤 2: 可以在以下几个位置之一找到操作系统 (Cisco IOS)。该位置在配置寄存器的引导字段中公开。</li>\n<li>步骤 3: 加载操作系统映像。\n<ol>\n<li>先从 Flash 找，也就只有一个 image 文件，将 image 导入内存</li>\n<li>如果 image 找不到，则到 TFTP Server，如果能找到则下载下拉一个 image</li>\n<li>如果 TFTP 也没有配置，则去 ROM 中导出 IOS</li>\n</ol>\n</li>\n<li>步骤 4: 将保存在 NVRAM 中的配置文件加载到主存储器中，并一次执行一行。\n<ol>\n<li>先看 NVRAM 中有没有配置 (start.config)</li>\n<li>然后看 TFTP Server 有没有配置，如果有则下载一个</li>\n<li>如果都没有，用 console 进行配置</li>\n</ol>\n</li>\n<li>步骤 5 - 如果 NVRAM 中<strong>没有</strong>有效的配置文件，则执行问题驱动 (question-driven) 的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</li>\n</ol>\n<h3 id=\"路由器初始化过程\"><a class=\"anchor\" href=\"#路由器初始化过程\">#</a> 路由器初始化过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230107174143705.png\" alt=\"image-20230107174143705\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第7讲：路由与路由器_页面_13\" /></p>\n<h3 id=\"基本的路由器配置\"><a class=\"anchor\" href=\"#基本的路由器配置\">#</a> 基本的路由器配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第7讲：路由与路由器_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第7讲：路由与路由器_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第7讲：路由与路由器_页面_16\" /></p>\n<h2 id=\"路由和配置\"><a class=\"anchor\" href=\"#路由和配置\">#</a> 路由和配置</h2>\n<h3 id=\"使用网络寻址进行路由\"><a class=\"anchor\" href=\"#使用网络寻址进行路由\">#</a> 使用网络寻址进行路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第7讲：路由与路由器_页面_18\" /></p>\n<p>路由器通常使用两个基本功能 (路径确定功能和交换功能) 将数据包从一条数据链路中继 (relay) 到另一条数据链路。</p>\n<ol>\n<li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li>\n<li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li>\n</ol>\n<p>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</p>\n<p>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机</p>\n<h3 id=\"静态路由\"><a class=\"anchor\" href=\"#静态路由\">#</a> 静态路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第7讲：路由与路由器_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第7讲：路由与路由器_页面_20\" /></p>\n<p>尽管 (whereas) 动态路由倾向于显示 (reveal) 有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</p>\n<p>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将 B 所有不知道位置的全部交给 A，由 A 去进行访问)</p>\n<p>这种分区称为末节网络 (Stub Network）</p>\n<h3 id=\"静态路由配置\"><a class=\"anchor\" href=\"#静态路由配置\">#</a> 静态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第7讲：路由与路由器_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第7讲：路由与路由器_页面_22\" /></p>\n<ol>\n<li>** 管理距离 (administrative distance)** 是路由信息源的可信赖性的等级，表示为从 0 到 255 的数值。(管理距离)</li>\n<li>数字越大，可信度 (trustworthiness) 越低。</li>\n<li>因此静态路由的管理距离通常很短 (默认值为 1)</li>\n<li>管理距离是 0 的路由是什么情况？直连网段是最可信的，比静态路由还高</li>\n</ol>\n<h3 id=\"动态路由配置\"><a class=\"anchor\" href=\"#动态路由配置\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第7讲：路由与路由器_页面_23\" /></p>\n<p>动态路由协议还可以重定向网络中不同路径之间的流量 (或负载分担 (loadshare))</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第7讲：路由与路由器_页面_24\" /></p>\n<ol>\n<li>动态路由依赖于路由协议在路由器之间共享知识。</li>\n<li>动态路由取决于两个基本路由器功能：\n<ol>\n<li>维护 (maintance) 路由表 (动态维持的)</li>\n<li>向其他路由器分发 (distribution) 路由信息</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"收敛时间\"><a class=\"anchor\" href=\"#收敛时间\">#</a> 收敛时间</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第7讲：路由与路由器_页面_25\" /></p>\n<ul>\n<li>收敛发生在所有路由用了相对稳定的网络拓扑</li>\n<li>当拓扑变化的时候，路由器必须重新计算路由</li>\n<li>路由器重新发生收敛的进程和时间根据不同的路由协议有所区别</li>\n</ul>\n<h3 id=\"动态路由协议分类\"><a class=\"anchor\" href=\"#动态路由协议分类\">#</a> 动态路由协议分类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第7讲：路由与路由器_页面_26\" /></p>\n<h4 id=\"距离矢量协议\"><a class=\"anchor\" href=\"#距离矢量协议\">#</a> 距离矢量协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第7讲：路由与路由器_页面_27\" /></p>\n<ol>\n<li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li>\n<li>基于距离矢量的路由算法 (也称为 Bellman-Ford 算法) 在路由器之间传递路由表的周期性副本。\n<ol>\n<li>大家交换 Routing Table</li>\n<li>只知道可达，但是不知道怎么可达 (知道 where, 但是不知道 how)，不知道整个网路的具体拓扑</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"问题路由环路\"><a class=\"anchor\" href=\"#问题路由环路\">#</a> 问题：路由环路</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第7讲：路由与路由器_页面_28\" /></p>\n<p><strong>稳定之后</strong>，如果 NetWork1 不可到达</p>\n<p>B 发现不可达，但是告知 C 的时候比较晚，C 已经将信息告诉了 D，这样子就可能循环下去，然后不收敛。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第7讲：路由与路由器_页面_29\" /></p>\n<p>网络 1 的无效更新将继续循环，直到其他进程停止循环为止。</p>\n<p>尽管有一个基本事实，即目标网络 (网络 1) 已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</p>\n<p>当路由器计数到无穷远时，无效信息将允许存在路由环路</p>\n<h5 id=\"解决方案设置最大值\"><a class=\"anchor\" href=\"#解决方案设置最大值\">#</a> 解决方案 —— 设置最大值</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第7讲：路由与路由器_页面_30\" /></p>\n<p>设置最大跳数，比如最多转发 15 跳，16 跳以上为不可达</p>\n<h5 id=\"结局方案路由中毒\"><a class=\"anchor\" href=\"#结局方案路由中毒\">#</a> 结局方案 —— 路由中毒</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第7讲：路由与路由器_页面_31\" /></p>\n<ol>\n<li>当网络 5 发生故障时，路由器 E 通过将网络 5 的表条目设置为<strong> 16 或不可访问</strong>来启动路由中毒。(而不是删除条目)</li>\n<li>、当路由器 C 从路由器 E 接收到路由中毒时，它会将更新 (称为毒性逆转，poison reverse) 发送回路由器 E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li>\n<li>最终所有的路由器都知道不可达</li>\n<li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值 (metric) 设为无穷大 16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li>\n</ol>\n<h5 id=\"解决方案水平分割\"><a class=\"anchor\" href=\"#解决方案水平分割\">#</a> 解决方案 —— 水平分割</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第7讲：路由与路由器_页面_32\" /></p>\n<ol>\n<li>从某个端口收到的报文信息，不能再从端口发送回去</li>\n<li>比如 A 发送给 B 和 D，之后 B 和 D 又把之后的报文还给 A，这时候就不接受 B 和 D 的。也即使 A 只接受 B 的</li>\n<li>如果 B 和 D 接收到一个到达目的网段 1 的更好的路径，A 是会接收的</li>\n<li><strong>有名词解释题目</strong></li>\n</ol>\n<h5 id=\"解决方案计时器\"><a class=\"anchor\" href=\"#解决方案计时器\">#</a> 解决方案 —— 计时器</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第7讲：路由与路由器_页面_33\" /></p>\n<ol>\n<li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时 (这个信息包含请计时信息)</li>\n<li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li>\n<li>计时器结束后，删除掉对应的条目，避免出现问题</li>\n<li>每一条路由表的记录都有<strong>有效时间</strong></li>\n</ol>\n<h5 id=\"阻止发送路由更新\"><a class=\"anchor\" href=\"#阻止发送路由更新\">#</a> 阻止发送路由更新</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第7讲：路由与路由器_页面_34\" /></p>\n<ol>\n<li>为了防止接口发出任何路由更新信息，请使用以下命令： <code>Router(config-router)#Passive-interface f0/0</code></li>\n<li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li>\n<li><strong>接受路由表的更新，但是不发送报文出去</strong></li>\n</ol>\n<h4 id=\"链接状态协议lsp-link-state-protocol\"><a class=\"anchor\" href=\"#链接状态协议lsp-link-state-protocol\">#</a> 链接状态协议 (LSP, Link-state Protocol)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第7讲：路由与路由器_页面_35\" /></p>\n<ol>\n<li>基于链接状态的路由算法也称为 SPF (最短路径优先) 算法，维护复杂的拓扑信息数据库：对树处理路由表，没有环路问题</li>\n<li>链接状态路由使用：\n<ol>\n<li>链接状态广告 (LSAs): 告诉你我有这个链路 (每一个网段都是相同性质链路，链路上有唯一的 NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行 LSA，告知对方主 Key，如果再需要的话，再给具体信息)</li>\n<li>拓扑数据库 (有 LSA 组成，每个结点都持有)</li>\n<li>根据 SPF (shortest path first) 算法生成的 SPF 树 (Tree 会不一样，因为每一个路由都是以自己为根的)</li>\n<li>每个网络的路径和端口的路由表</li>\n</ol>\n</li>\n<li>RFC 1583 包含对 OSPF 链路状态概念和操作的描述。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第7讲：路由与路由器_页面_36\" /></p>\n<ol>\n<li>路由器之间<strong>交换 LSA</strong>，每个路由器都以直接连接的网络开头</li>\n<li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有 LSA。</li>\n<li><strong>SPF 算法计算网络可达性</strong>：路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先 (SPF) 排序。</li>\n<li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第7讲：路由与路由器_页面_37\" /></p>\n<ol>\n<li>处理和存储要求\n<ul>\n<li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要 CPU 进行计算</li>\n</ul>\n</li>\n<li>带宽要求\n<ol>\n<li>在初始链路状态数据包泛洪 (flooding) 期间，所有使用链路状态路由协议的路由器会将 LSA 数据包发送到所有其他路由器。 随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li>\n<li>一开始的时候报文会比较频繁多 (所以告知 LSA 而不是 LS，减小压力)</li>\n<li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第7讲：路由与路由器_页面_38\" /></p>\n<p>链路状态路由必须确保所有路由器都获得所有必要的 LSA 数据包。</p>\n<p>具有不同 LSA 集的路由器根据不同的拓扑数据计算路由</p>\n<p>如果有一个链路的状态发生变化 (恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大 (SPF 算法)。</p>\n<h4 id=\"ls和dv的比较\"><a class=\"anchor\" href=\"#ls和dv的比较\">#</a> LS 和 DV 的比较</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第7讲：路由与路由器_页面_39\" /></p>\n<ol>\n<li>DV: 距离矢量\n<ol>\n<li>视野窄，代价小</li>\n<li>基于跳数</li>\n<li>定期交换路由表，收敛慢</li>\n<li>交换路由表</li>\n</ol>\n</li>\n<li>LS: 链路状态\n<ol>\n<li>视野宽，有一定代价</li>\n<li>基于带宽</li>\n<li>初期充分交换，收敛快</li>\n<li>交换 Linked State 的数据库</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"混合协议\"><a class=\"anchor\" href=\"#混合协议\">#</a> 混合协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第7讲：路由与路由器_页面_40\" /></p>\n<p>混合协议的示例：</p>\n<ol>\n<li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li>\n<li>Cisco’s EIGRP (Enhanced Interior Gateway Routing Protocol). 基于负载和带宽评判，定时交换路由表</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第7讲：路由与路由器_页面_41\" /></p>\n<table>\n<thead>\n<tr>\n<th>英文缩写</th>\n<th>英文解释</th>\n<th>中文解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RIP</td>\n<td>a distance-vector routing protocol</td>\n<td>距离矢量协议</td>\n<td>DV</td>\n</tr>\n<tr>\n<td>IGRP</td>\n<td>Cisco’s distance-vector routing protocol IGRP</td>\n<td>思科的距离矢量路由协议</td>\n<td>DV，基本启用</td>\n</tr>\n<tr>\n<td>OSPF</td>\n<td>Open Shortest Path First</td>\n<td>开放式最短路径优先</td>\n<td>LSP</td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>-</td>\n<td>平衡的混合路由协议</td>\n<td>杂合</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"路由协议的主要目标\"><a class=\"anchor\" href=\"#路由协议的主要目标\">#</a> 路由协议的主要目标</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第7讲：路由与路由器_页面_42\" /></p>\n<ol>\n<li>最佳 (Optimal) 路线：选择最佳路线</li>\n<li>效率 (Efficiency): 最少使用带宽和路由器处理器资源</li>\n<li>快速收敛 (Rapid Convergence): 越快越好。有些比其他人收敛更快。</li>\n<li>灵活性 (Flexibility): 可以处理各种情况，例如高使用率和失败的路由</li>\n</ol>\n<h3 id=\"动态路由配置-2\"><a class=\"anchor\" href=\"#动态路由配置-2\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第7讲：路由与路由器_页面_43\" /></p>\n<h3 id=\"设置默认路由\"><a class=\"anchor\" href=\"#设置默认路由\">#</a> 设置默认路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第7讲：路由与路由器_页面_44\" /></p>\n<ol>\n<li>默认路由使路由表更短。(很多路由被省略)</li>\n<li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第7讲：路由与路由器_页面_45\" /></p>\n<p>使用动态路由协议定义默认路由: <code>Router(config)# ip default-network [network-number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第7讲：路由与路由器_页面_46\" /></p>\n<ol>\n<li>将默认路由定义为静态路由： <code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li>\n<li>配置默认路由后，使用 show ip route 将显示：(172.16.1.2 是默认的下一跳地址)\n<ol>\n<li>不得已的网关是到网络 0.0.0.0 的 172.16.1.2</li>\n<li>所有不知道转发给谁的都给 172.16.1.2</li>\n</ol>\n</li>\n</ol>\n<p>RAM</p>\n<p>报文缓存 —— 缓存区</p>\n<p>hold queues——</p>\n<p>路由器的启动过程（考试要求）</p>\n<p>阻止发送路由更新</p>\n<p>手动配置</p>\n<p>Why do we need split horizon? Because distance vector protocols, such as Routing Information Protocol (RIP), are susceptible to routing loops, which occur when a data <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3BhY2tldA==\">packet</span> is caught in an endless circle and continuously routed through the same <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3JvdXRlcg==\">routers</span>. To avoid these loops, the protocols often rely on split horizon. Other types of protocols, such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL09TUEYtT3Blbi1TaG9ydGVzdC1QYXRoLUZpcnN0\">Open Shortest Path First</span>, use different mechanisms to deter packet looping.</p>\n<p>When enabled, split horizon prevents a router from advertising a route back to the router from which it learned a route. In other words, if a router receives routing information from another router, the first router will not broadcast that information back to the second router, thus preventing routing loops from occurring.</p>\n<p>RIP</p>\n<p>SPF</p>\n<p>DR BDR</p>\n<p>A 类地址 0 1-126</p>\n<p>B 类地址 10 128-191</p>\n<p>C 类地址 110 128+64=192 192-223</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "Lecture06-会话、表示、应用层",
            "date_published": "2023-02-08T09:52:36.000Z",
            "content_html": "<h1 id=\"lecture6-会话层-展示层应用层\"><a class=\"anchor\" href=\"#lecture6-会话层-展示层应用层\">#</a> Lecture6 - 会话层、展示层应用层</h1>\n<h1 id=\"会话层\"><a class=\"anchor\" href=\"#会话层\">#</a> 会话层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6讲：会话、表示、应用层_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6讲：会话、表示、应用层_页面_04\" /></p>\n<ol>\n<li>双向同步通讯？\n<ol>\n<li>全双工通信</li>\n<li>半双工通信</li>\n<li>单工通信</li>\n</ol>\n</li>\n<li>双向交替控制？\n<ol>\n<li>会话连接、活动开始、数据校验 (同步)</li>\n<li>令牌转换等</li>\n</ol>\n</li>\n<li>是否同步了您的会话的主题？</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6讲：会话、表示、应用层_页面_05\" /></p>\n<p>** 同步点 (CheckPoint)** 用于分隔会话的各个部分，以前称为对话 (dialogues)</p>\n<ol>\n<li>同步点：发送一定数据后设置同步点</li>\n<li>次同步点：作为同步点的一个子集，进行数据校验</li>\n<li>主同步点：按照主同步点进行校验确认</li>\n<li>如果错误，恢复到上次都已经同步的主同步点</li>\n</ol>\n<p>对话分离 (Seperation) 是通信的有序启动，终止和管理</p>\n<p>尽量保证了通话的效率和可靠性</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6讲：会话、表示、应用层_页面_06\" /></p>\n<h1 id=\"展示层\"><a class=\"anchor\" href=\"#展示层\">#</a> 展示层</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6讲：会话、表示、应用层_页面_08\" /></p>\n<p>表示层负责以接收<strong>设备可以理解</strong>的形式表示数据。</p>\n<ol>\n<li>传送语法协商</li>\n<li>接受语法协商</li>\n</ol>\n<p>表示层具有 3 个主要功能：</p>\n<ol>\n<li>数据格式 (format)</li>\n<li>数据压缩 (compression): 早期网络比较慢，倾向于先压缩在发送</li>\n<li>数据加密 (encryption)</li>\n</ol>\n<h2 id=\"数据格式\"><a class=\"anchor\" href=\"#数据格式\">#</a> 数据格式</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6讲：会话、表示、应用层_页面_09\" /></p>\n<ol>\n<li>想象两个不同 (dissimilar) 的系统。\n<ol>\n<li>一种使用扩展二进制编码的十进制交换码 (EBCDIC,Extended Binary Coded Decimal Interchange Code) 格式化文本</li>\n<li>另一种使用 ** 美国信息交换标准码 (ASCII)** 格式化文本</li>\n<li>选择大家都能识别的编码形式传输，保证大家都能理解</li>\n</ol>\n</li>\n<li>第 6 层提供了这两种不同类型的代码之间的转换</li>\n</ol>\n<h3 id=\"图形文件格式\"><a class=\"anchor\" href=\"#图形文件格式\">#</a> 图形文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6讲：会话、表示、应用层_页面_10\" /></p>\n<ol>\n<li>互联网通常使用两种二进制文件格式来显示图像：\n<ol>\n<li>图形交换格式 (GIF，Graphic Interchange Format)</li>\n<li>联合图像专家组 (JPEG，Joint Photographic Experts Group)。</li>\n</ol>\n</li>\n<li>任何具有读取器的 GIF 和 JPEG 文件格式的计算机都可以读取这些文件类型，而与计算机的类型无关。</li>\n</ol>\n<h3 id=\"多媒体文件格式\"><a class=\"anchor\" href=\"#多媒体文件格式\">#</a> 多媒体文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6讲：会话、表示、应用层_页面_11\" /></p>\n<p>多媒体文件格式是另一种二进制文件，它存储声音，音乐和视频。</p>\n<ol>\n<li>这些文件可以完全下载，然后播放，也可以在播放时下载。</li>\n<li>后一种方法称为流音频。</li>\n</ol>\n<h2 id=\"数据加密和压缩\"><a class=\"anchor\" href=\"#数据加密和压缩\">#</a> 数据加密和压缩</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6讲：会话、表示、应用层_页面_12\" /></p>\n<ol>\n<li>第 6 层负责数据加密：数据加密可在信息传输过程中保护信息。</li>\n<li>表示层还负责文件的压缩。</li>\n</ol>\n<h1 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6讲：会话、表示、应用层_页面_14\" /></p>\n<p>第七层对应的是应用界面</p>\n<h2 id=\"应用层概述\"><a class=\"anchor\" href=\"#应用层概述\">#</a> 应用层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6讲：会话、表示、应用层_页面_15\" /></p>\n<p>应用层（最接近用户）支持一个应用的交流模块</p>\n<p>应用层：</p>\n<ul>\n<li>确定并建立预期的通信合作伙伴的可用性</li>\n<li>同步合作的应用程序</li>\n<li>建立有关错误恢复程序的协议</li>\n<li>控制数据完整性</li>\n</ul>\n<h2 id=\"http-hypertext-transfrer-protocol超文本传输协议\"><a class=\"anchor\" href=\"#http-hypertext-transfrer-protocol超文本传输协议\">#</a> HTTP HyperText Transfrer Protocol 超文本传输协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6讲：会话、表示、应用层_页面_16\" /></p>\n<h3 id=\"url统一资源定位符\"><a class=\"anchor\" href=\"#url统一资源定位符\">#</a> URL 统一资源定位符</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6讲：会话、表示、应用层_页面_17\" /></p>\n<pre><code>&lt;URL的访问方式&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\n</code></pre>\n<ol>\n<li>访问方式：协议 HTTPS 或者 HTTP</li>\n<li>主机：域名的方式</li>\n<li>端口对应进程</li>\n<li>路径对应具体的文件</li>\n</ol>\n<h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6讲：会话、表示、应用层_页面_18\" /></p>\n<p>无状态的</p>\n<h2 id=\"http报文结构\"><a class=\"anchor\" href=\"#http报文结构\">#</a> HTTP 报文结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第6讲：会话、表示、应用层_页面_19\" /></p>\n<p>应答码：</p>\n<ol>\n<li>2xx: 成功</li>\n<li>3xx: 重定向</li>\n<li>4xx: 错误</li>\n<li>5xx: 服务器内部错误</li>\n</ol>\n<h3 id=\"http请求报文的一些方法\"><a class=\"anchor\" href=\"#http请求报文的一些方法\">#</a> HTTP 请求报文的一些方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第6讲：会话、表示、应用层_页面_20\" /></p>\n<h3 id=\"html超文本标记语言\"><a class=\"anchor\" href=\"#html超文本标记语言\">#</a> html 超文本标记语言</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第6讲：会话、表示、应用层_页面_21\" /></p>\n<h2 id=\"ftp-和-tftp\"><a class=\"anchor\" href=\"#ftp-和-tftp\">#</a> FTP 和 TFTP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第6讲：会话、表示、应用层_页面_22\" /></p>\n<p>FTP 是一种可靠的，<strong>面向连接</strong>的服务，它使用 TCP 传输文件。</p>\n<ol>\n<li>FTP 首先在客户端和服务器 (端口 21) 之间建立<strong>控制连接</strong></li>\n<li>然后，建立第二个连接，这是计算机之间通过其传输数据的链接。(端口 20)</li>\n</ol>\n<p>TFTP 是使用 UDP 的<strong>无连接</strong>服务 (简化的 FTP)</p>\n<ol>\n<li>体积小，易于实施。更加方便</li>\n<li>例如。 TFTP 在路由器上用于传输配置文件和 Cisco IOS 映像</li>\n<li>不支持交互，没有目录浏览功能</li>\n</ol>\n<p>互联网早期的时候，文件传输量是很大的。</p>\n<h3 id=\"主进程工作步骤\"><a class=\"anchor\" href=\"#主进程工作步骤\">#</a> 主进程工作步骤</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第6讲：会话、表示、应用层_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第6讲：会话、表示、应用层_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第6讲：会话、表示、应用层_页面_25\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第6讲：会话、表示、应用层_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第6讲：会话、表示、应用层_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第6讲：会话、表示、应用层_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第6讲：会话、表示、应用层_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第6讲：会话、表示、应用层_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第6讲：会话、表示、应用层_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第6讲：会话、表示、应用层_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第6讲：会话、表示、应用层_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第6讲：会话、表示、应用层_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第6讲：会话、表示、应用层_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第6讲：会话、表示、应用层_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第6讲：会话、表示、应用层_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第6讲：会话、表示、应用层_页面_38\" /></p>\n<h2 id=\"telnet\"><a class=\"anchor\" href=\"#telnet\">#</a> Telnet</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第6讲：会话、表示、应用层_页面_39\" /></p>\n<p>Telnet 客户端软件提供了登录到运行 Telnet 服务器应用程序的远程 Internet 主机，然后从命令行执行命令的功能。</p>\n<h2 id=\"smtp-pop\"><a class=\"anchor\" href=\"#smtp-pop\">#</a> SMTP POP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第6讲：会话、表示、应用层_页面_40\" /></p>\n<p>电子邮件服务器使用 SMTP 发送和 POP 接收邮件相互通信。</p>\n<ol>\n<li>SMTP (Simple Mail Transfer Protocol) SMTP (简单邮件传输协议) 邮件发送，登录发送等操作</li>\n<li>POP3 (Post Office Protocol version 3) 邮件接收，邮件到达邮件服务端，由客户端和服务端联系接收邮件。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第6讲：会话、表示、应用层_页面_41\" /></p>\n<p>发送者先登录到服务器，通过服务器根据 SMTP 传输到对应的服务器，然后用户登录后通过 POP3 协议收邮件到本地</p>\n<h3 id=\"mime-multipurpose-internet-mail-extensions-因特网协议扩充\"><a class=\"anchor\" href=\"#mime-multipurpose-internet-mail-extensions-因特网协议扩充\">#</a> MIME Multipurpose Internet Mail Extensions 因特网协议扩充</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第6讲：会话、表示、应用层_页面_42\" /></p>\n<p>将非 ASCII 码的文件转换成 ASCII 文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第6讲：会话、表示、应用层_页面_43\" /></p>\n<h2 id=\"snmp-simple-network-management-protocol-简单网络管理协议\"><a class=\"anchor\" href=\"#snmp-simple-network-management-protocol-简单网络管理协议\">#</a> SNMP Simple Network Management Protocol 简单网络管理协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第6讲：会话、表示、应用层_页面_44\" /></p>\n<p>一种促进管理信息交换的应用层协议</p>\n<p>网管，通过下发请求对上网的所有的主机关于流量等等信息进行管理 (监控)</p>\n<h2 id=\"dns-domain-name-system域名系统\"><a class=\"anchor\" href=\"#dns-domain-name-system域名系统\">#</a> DNS Domain Name System 域名系统</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第6讲：会话、表示、应用层_页面_45\" /></p>\n<p>域名系统 (DNS) 是网络上的服务，该服务管理域名并响应客户端将域名转换为关联 IP 地址的请求。</p>\n<ol>\n<li>早期是用 IP 地址以及 Host 文件来进行访问</li>\n</ol>\n<h3 id=\"domain-name-域名\"><a class=\"anchor\" href=\"#domain-name-域名\">#</a> Domain Name 域名</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第6讲：会话、表示、应用层_页面_46\" /></p>\n<h3 id=\"tld-top-level-domain-顶级域\"><a class=\"anchor\" href=\"#tld-top-level-domain-顶级域\">#</a> TLD Top Level Domain 顶级域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第6讲：会话、表示、应用层_页面_47\" /></p>\n<p>国家 TLD (nTLD)</p>\n<ol>\n<li>.cn (CHINA) 中国</li>\n<li>.us (United States) 美国</li>\n<li>.uk (United kingdom), etc. 英国等等</li>\n</ol>\n<p>通用 TLD (gTLD)，最早的域包括：</p>\n<ol>\n<li>.com Enterprises and companies 企业和公司</li>\n<li>.net Network services providers 网络服务提供者</li>\n<li>.org Nonprofit organizations 非盈利组织</li>\n<li>.edu Educational facilities 教育机构</li>\n<li>.gov Governments (only for U.S.A) 政府 (美国)</li>\n<li>.mil Military facilities (only for U.S.A) 军方 (美军)</li>\n<li>.int International organizations 国际组织</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第6讲：会话、表示、应用层_页面_48\" /></p>\n<p>Infrastructure domain 基础设施领域</p>\n<ol>\n<li>Only one: arpa, for resolving domain names reversely 仅一个：arpa，用于反向解析域名</li>\n</ol>\n<p>Recently, new TLD domain added:</p>\n<ol>\n<li>.aero (航空运输企业)</li>\n<li>.biz (公司和企业)</li>\n<li>.cat (加泰隆人的语言和文化团体)</li>\n<li>.coop (合作团体)</li>\n<li>.info (各种资讯)</li>\n<li>.jobs (人力资源管理者)</li>\n<li>.mobi (移动产品与服务的用户和提供者)</li>\n<li>.museum (博物馆)</li>\n<li>.name   (个人)</li>\n<li>.pro (经过认证的专业人员)</li>\n<li>.travel  (旅游业)</li>\n</ol>\n<h3 id=\"域名服务器\"><a class=\"anchor\" href=\"#域名服务器\">#</a> 域名服务器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第6讲：会话、表示、应用层_页面_49\" /></p>\n<ul>\n<li>顶级域名底下的域名就是由顶级域名下面进行管理</li>\n<li>根域名服务器存储位置，所以子服务器知道根服务器的地址即可</li>\n</ul>\n<h3 id=\"结合域名服务器查找ip地址\"><a class=\"anchor\" href=\"#结合域名服务器查找ip地址\">#</a> 结合域名服务器查找 IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第6讲：会话、表示、应用层_页面_50\" /></p>\n<ol>\n<li>DNS 系统以层次 (hierarchy) 结构设置，该层次结构创建不同级别的 DNS 服务器。</li>\n<li>此级别的 DNS 服务器判断其自身是否能够将域名转换为关联的 IP 地址：\n<ol>\n<li>如果可以，则将结果返回给客户端</li>\n<li>如果没有，它将请求发送到更高级别。(向上级请求)</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第6讲：会话、表示、应用层_页面_51\" /></p>\n<ul>\n<li>请求分为两种:\n<ul>\n<li>能够应答</li>\n<li>不能够应答</li>\n</ul>\n</li>\n<li>递归地进行查找：具体过程在上图</li>\n<li>下面递归，上面迭代</li>\n</ul>\n<h3 id=\"应用层通讯方式\"><a class=\"anchor\" href=\"#应用层通讯方式\">#</a> 应用层：通讯方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第6讲：会话、表示、应用层_页面_52\" /></p>\n<ol>\n<li>通信处理发生的一种方式：(无上下文，请求后就断开)\n<ol>\n<li>当浏览器打开时，它将连接到默认页面，并且该页面的文件将传输到客户端。</li>\n<li>处理完成后，连接断开</li>\n</ol>\n</li>\n<li>第二种方式：(有上下文)\n<ol>\n<li>作为 Telnet 和 FTP，建立与服务器的连接并保持该连接，直到执行所有处理。</li>\n<li>当用户确定他 / 她已完成时，客户端将终止连接。</li>\n</ol>\n</li>\n<li>所有的交流活动都属于这两类之一。</li>\n</ol>\n<h2 id=\"dhcp-dynamic-host-configuration-protocol-动态主机配置协议\"><a class=\"anchor\" href=\"#dhcp-dynamic-host-configuration-protocol-动态主机配置协议\">#</a> DHCP Dynamic Host Configuration Protocol 动态主机配置协议</h2>\n<h2 id=\"dhcp工作原理\"><a class=\"anchor\" href=\"#dhcp工作原理\">#</a> DHCP 工作原理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6.1讲：dhcp_页面_03\" /></p>\n<h3 id=\"dhcp过程\"><a class=\"anchor\" href=\"#dhcp过程\">#</a> DHCP 过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6.1讲：dhcp_页面_04\" /></p>\n<p>AB 是两个 Server</p>\n<p>Client 先 Discover 去搜索</p>\n<p>Server 返回一个 Offer 报文</p>\n<p>Client 选择优先返回的 Offer 来优先服务</p>\n<p>Client 进行广播，告知到底服务了谁</p>\n<p>然后 B 返回一个 Ack 报文</p>\n<p>到了时间之后，选择 release 或者续租</p>\n<h3 id=\"发现阶段\"><a class=\"anchor\" href=\"#发现阶段\">#</a> 发现阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6.1讲：dhcp_页面_05\" /></p>\n<h3 id=\"响应阶段\"><a class=\"anchor\" href=\"#响应阶段\">#</a> 响应阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6.1讲：dhcp_页面_06\" /></p>\n<h3 id=\"选择问题\"><a class=\"anchor\" href=\"#选择问题\">#</a> 选择问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第6.1讲：dhcp_页面_07\" /></p>\n<h3 id=\"租约确认问题\"><a class=\"anchor\" href=\"#租约确认问题\">#</a> 租约确认问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6.1讲：dhcp_页面_08\" /></p>\n<h3 id=\"租期续约\"><a class=\"anchor\" href=\"#租期续约\">#</a> 租期续约</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6.1讲：dhcp_页面_09\" /></p>\n<h3 id=\"租期释放\"><a class=\"anchor\" href=\"#租期释放\">#</a> 租期释放</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6.1讲：dhcp_页面_10\" /></p>\n<h3 id=\"dhcp报文结构\"><a class=\"anchor\" href=\"#dhcp报文结构\">#</a> DHCP 报文结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6.1讲：dhcp_页面_11\" /></p>\n<ol>\n<li>op: 报文类型，1 请求，2 应答</li>\n<li>HTYPE: 硬件地址类型，1 表示 10M 以太网地址</li>\n<li>HLEN: 以太网地址长度，10M 为 6</li>\n<li>Hops: 是否使用代理服务器进行处理</li>\n</ol>\n<h3 id=\"报文类型\"><a class=\"anchor\" href=\"#报文类型\">#</a> 报文类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6.1讲：dhcp_页面_12\" /></p>\n<ol>\n<li>DHCP Discover：发现</li>\n<li>DHCP Offer：提供</li>\n<li>DHCP Request：告知决定</li>\n<li>DHCP ACK：租约确认</li>\n<li>DHCP NAK：租约不确认</li>\n<li>DHCP Release：释放租约</li>\n<li>DHCP Decline: 收到 Ack 后，Client 告诉服务器不接受</li>\n<li>DHCP Inform: 客户端向服务器端请求详细信息</li>\n</ol>\n<h2 id=\"dhcp-欺骗与防范\"><a class=\"anchor\" href=\"#dhcp-欺骗与防范\">#</a> DHCP 欺骗与防范</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6.1讲：dhcp_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6.1讲：dhcp_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6.1讲：dhcp_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6.1讲：dhcp_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6.1讲：dhcp_页面_18\" /></p>\n<p>ARP ip-&gt;mac</p>\n<p>RARP mac-&gt;ip</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "title": "Lecture05-传输层",
            "date_published": "2023-02-08T09:52:20.000Z",
            "content_html": "<h1 id=\"lecture05-第四层传输层\"><a class=\"anchor\" href=\"#lecture05-第四层传输层\">#</a> Lecture05 - 第四层传输层</h1>\n<p>第四层运输层主要是实现了主机之间的通信。数据通信是服务于主机上的<strong>进程</strong> (Session)。</p>\n<h2 id=\"第四层概述\"><a class=\"anchor\" href=\"#第四层概述\">#</a> 第四层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第5讲：传输层原理与技术_页面_03\" /></p>\n<ol>\n<li>\n<p>分割上层应用程序数据 (新的数据单元 - 数据段)</p>\n</li>\n<li>\n<p>建立端到端 (end to end) 的通讯</p>\n</li>\n<li>\n<p>从一个终端主机向另一个终端主机发送<strong>段 segment</strong></p>\n<p>(第三层和第二层不进行可靠性检验，第四层完成可靠性检验，接受方认为数据错误，在第四层进行要求重传)</p>\n</li>\n<li>\n<p>流量控制和可靠性</p>\n<ol>\n<li>可以比喻为与外国人交谈：通常，您会要求外国人重复他 / 她的话 (可靠性) 并慢声说话 (流量控制)</li>\n<li>双方主机的网络的处理能力不同，缓存能力不同</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第5讲：传输层原理与技术_页面_04\" /></p>\n<ol>\n<li>传输控制协议 (TCP, Transmission Control Protocol)</li>\n<li>用户数据报协议 (UDP, User Datagram Protocol)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第5讲：传输层原理与技术_页面_05\" /></p>\n<p>将传出邮件分成多个部分</p>\n<p>在目标站重新组合消息</p>\n<p>TCP: 可靠 (效率比较低，早期网络应用少，需要可靠性)</p>\n<ol>\n<li>面向连接</li>\n<li>软件检查段 segment</li>\n<li>重新发送丢失或错误的任何内容</li>\n<li>使用确认机制</li>\n<li>提供流量控制</li>\n</ol>\n<p>UDP: 不可靠</p>\n<ol>\n<li>无连接</li>\n<li>不提供段的软件检查</li>\n<li>不使用确认</li>\n<li>不进行流量控制</li>\n<li>直接丢弃错误的报文，而不进行其他操作。</li>\n</ol>\n<h3 id=\"服务模型\"><a class=\"anchor\" href=\"#服务模型\">#</a> 服务模型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第5讲：传输层原理与技术_页面_06\" /></p>\n<ol>\n<li>\n<p>TCP 和 UDP 都使用<strong>端口</strong>来跟踪 (track) 同时穿越网络的不同会话</p>\n</li>\n<li>\n<p>应用软件开发人员已同意使用 RFC1700 中定义的知名端口号</p>\n</li>\n<li>\n<p>低于 255 的端口号 (0-255) 保留给 TCP 和 UDP 公共应用程序使用。</p>\n<p>0-1023 是知名端口，有分发的规范，不应当被随意使用</p>\n<p>1024-49151 的端口号进行登记使用，有的是应用程序已经的使用端口号，避免冲突</p>\n</li>\n</ol>\n<h3 id=\"套接字\"><a class=\"anchor\" href=\"#套接字\">#</a> 套接字</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第5讲：传输层原理与技术_页面_07\" /></p>\n<ol>\n<li>套接字表示为 (IP 地址，端口)</li>\n<li>每个连接都表示为 (socket  source ，socket  destination)，这是一个点对点全双工通道</li>\n<li><strong>TCP 不支持多播和广播</strong></li>\n</ol>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第5讲：传输层原理与技术_页面_09\" /></p>\n<ol>\n<li>可靠传输</li>\n<li>流控制\n<ol>\n<li>滑动窗口 (窗口进行通信，一次数据传输是有上限发的，缓存问题，拥塞问题)</li>\n<li>避免拥塞</li>\n</ol>\n</li>\n<li>连接控制\n<ol>\n<li>建立连接 ——<strong> 三次</strong>握手</li>\n<li>断开连接 ——<strong> 四次</strong>握手</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"tcp数据段格式\"><a class=\"anchor\" href=\"#tcp数据段格式\">#</a> TCP 数据段格式</h3>\n<h4 id=\"源端口-目的端口\"><a class=\"anchor\" href=\"#源端口-目的端口\">#</a> 源端口 目的端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第5讲：传输层原理与技术_页面_10\" /></p>\n<p>socket</p>\n<h4 id=\"序号\"><a class=\"anchor\" href=\"#序号\">#</a> 序号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第5讲：传输层原理与技术_页面_11\" /></p>\n<p>我们从小向大进行使用，如果使用到最大之后，我们会从小再次重新开始分配。</p>\n<h4 id=\"确认号\"><a class=\"anchor\" href=\"#确认号\">#</a> 确认号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第5讲：传输层原理与技术_页面_12\" /></p>\n<p>发数据的同时，对对方上一次的传输做确认</p>\n<h4 id=\"数据偏移\"><a class=\"anchor\" href=\"#数据偏移\">#</a> 数据偏移</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第5讲：传输层原理与技术_页面_13\" /></p>\n<h4 id=\"保留\"><a class=\"anchor\" href=\"#保留\">#</a> 保留</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第5讲：传输层原理与技术_页面_14\" /></p>\n<h4 id=\"标记位urg\"><a class=\"anchor\" href=\"#标记位urg\">#</a> 标记位 ——URG</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第5讲：传输层原理与技术_页面_15\" /></p>\n<p>比如说按 Ctrl+C 终止程序的信息可能会将 URG 置为 1</p>\n<h4 id=\"标记位ack\"><a class=\"anchor\" href=\"#标记位ack\">#</a> 标记位 ——ACK</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第5讲：传输层原理与技术_页面_16\" /></p>\n<h4 id=\"标记位psh\"><a class=\"anchor\" href=\"#标记位psh\">#</a> 标记位 ——PSH</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第5讲：传输层原理与技术_页面_17\" /></p>\n<p>根据网络条件调整，正常情况下缓存满了才会传输</p>\n<h4 id=\"标记位rst\"><a class=\"anchor\" href=\"#标记位rst\">#</a> 标记位 ——RST</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第5讲：传输层原理与技术_页面_18\" /></p>\n<p>连接失败</p>\n<h4 id=\"标记位syn\"><a class=\"anchor\" href=\"#标记位syn\">#</a> 标记位 ——SYN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第5讲：传输层原理与技术_页面_19\" /></p>\n<h4 id=\"标记位fin\"><a class=\"anchor\" href=\"#标记位fin\">#</a> 标记位 ——FIN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第5讲：传输层原理与技术_页面_20\" /></p>\n<h4 id=\"窗口\"><a class=\"anchor\" href=\"#窗口\">#</a> 窗口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第5讲：传输层原理与技术_页面_21\" /></p>\n<h4 id=\"检验和\"><a class=\"anchor\" href=\"#检验和\">#</a> 检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第5讲：传输层原理与技术_页面_22\" /></p>\n<h4 id=\"紧急指针\"><a class=\"anchor\" href=\"#紧急指针\">#</a> 紧急指针</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第5讲：传输层原理与技术_页面_23\" /></p>\n<h4 id=\"可选部分\"><a class=\"anchor\" href=\"#可选部分\">#</a> 可选部分</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第5讲：传输层原理与技术_页面_24\" /></p>\n<p>MSS Maximum Segment Size 最大报文段长度</p>\n<h4 id=\"填充\"><a class=\"anchor\" href=\"#填充\">#</a> 填充</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第5讲：传输层原理与技术_页面_25\" /></p>\n<h3 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第5讲：传输层原理与技术_页面_26\" /></p>\n<p>主机使用网段 (TPDU) 交换数据</p>\n<p>每个段都有：</p>\n<ol>\n<li>首部为 20 个字节 (可选部分除外)</li>\n<li>0 或更多数据字节 (请求连接的时候)</li>\n</ol>\n<p>段的大小必须与 IP 数据包匹配，并且还必须满足底层的需求</p>\n<ol>\n<li>例如，以太网的 MTU (最大传输单位) 为 1500 字节</li>\n<li>是面向字节的传输。</li>\n</ol>\n<p>每个字节都有一个 32 位序号</p>\n<h3 id=\"可靠连接两军问题\"><a class=\"anchor\" href=\"#可靠连接两军问题\">#</a> 可靠连接 —— 两军问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第5讲：传输层原理与技术_页面_27\" /></p>\n<p>蓝军必须一起攻打才能打败白军</p>\n<p>蓝军信息可能被白军篡改或者阻碍</p>\n<p>结论：无论通信多少次，都不能有一个完全可信的消息（进入死循环）</p>\n<h3 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h3>\n<h4 id=\"第一次握手\"><a class=\"anchor\" href=\"#第一次握手\">#</a> 第一次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第5讲：传输层原理与技术_页面_28\" /></p>\n<ol>\n<li>服务器：执行 LISTEN 和 ACCEPT 原语，并进行被动监视</li>\n<li>客户端：执行 CONNECT 原语，生成 SYN = 1 和 ACK = 0 的 TCP 段，代表连接请求</li>\n</ol>\n<h4 id=\"第二次握手\"><a class=\"anchor\" href=\"#第二次握手\">#</a> 第二次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第5讲：传输层原理与技术_页面_29\" /></p>\n<p>服务器检查是否存在监视端口的服务进程</p>\n<ol>\n<li>如果没有任何进程，请使用 RST = 1 回答一个 TCP 段</li>\n<li>如果存在进程，则决定拒绝或接受请求</li>\n<li>如果接受连接请求，则发送 SYN = 1 和 ACK = 1 的网段</li>\n</ol>\n<h4 id=\"第三次握手\"><a class=\"anchor\" href=\"#第三次握手\">#</a> 第三次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第5讲：传输层原理与技术_页面_30\" /></p>\n<p>客户端发送一个 SYN = 0 和 ACK = 1 的段以确认连接</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第5讲：传输层原理与技术_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第5讲：传输层原理与技术_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第5讲：传输层原理与技术_页面_33\" /></p>\n<h3 id=\"传输控制\"><a class=\"anchor\" href=\"#传输控制\">#</a> 传输控制</h3>\n<p>数据传输 —— 停止等待协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第5讲：传输层原理与技术_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第5讲：传输层原理与技术_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第5讲：传输层原理与技术_页面_36\" /></p>\n<h3 id=\"可靠通信arq\"><a class=\"anchor\" href=\"#可靠通信arq\">#</a> 可靠通信 ARQ</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第5讲：传输层原理与技术_页面_37\" /></p>\n<p>ARQ (Automatic Repeat reQuest) 自动重传请求：这表示 &quot;重新发送请求&quot; 为自动发送并且接收方无需请求发送方重新发送错误段</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第5讲：传输层原理与技术_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第5讲：传输层原理与技术_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第5讲：传输层原理与技术_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第5讲：传输层原理与技术_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第5讲：传输层原理与技术_页面_42\" /></p>\n<h3 id=\"tcp-释放连接\"><a class=\"anchor\" href=\"#tcp-释放连接\">#</a> TCP 释放连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第5讲：传输层原理与技术_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第5讲：传输层原理与技术_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第5讲：传输层原理与技术_页面_45\" /></p>\n<p>server 持续发完数据</p>\n<p>FIN = 1，表示数据处理完成</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第5讲：传输层原理与技术_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第5讲：传输层原理与技术_页面_47\" /></p>\n<h3 id=\"为什么必须等待2msl\"><a class=\"anchor\" href=\"#为什么必须等待2msl\">#</a> 为什么必须等待 2MSL</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第5讲：传输层原理与技术_页面_48\" /></p>\n<ol>\n<li>\n<p>为了确保 A 发送的最后一个 ACK 可以到达 B</p>\n</li>\n<li>\n<p>防止出现任何无效的连接请求段</p>\n<p>等待 2 MSL 之后，我们可以确保连接上的所有段均已消失</p>\n</li>\n</ol>\n<h3 id=\"tcp中的计时器\"><a class=\"anchor\" href=\"#tcp中的计时器\">#</a> Tcp 中的计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第5讲：传输层原理与技术_页面_49\" /></p>\n<ol>\n<li>\n<p>重传计时器：多长时间进行重传</p>\n</li>\n<li>\n<p>坚持计时器：避免死锁 (WIN = 0 的时候修改 WIN 但是没有办法发送过去)：收到 WIN = 0 的时候，开始进行计时，到时间主动询问</p>\n</li>\n<li>\n<p>保持计时器:</p>\n<ol>\n<li>发送数据段后，刷新</li>\n<li>如果到达一定的时间，则再次询问是不是还要保持连接。</li>\n<li>长期没有数据，和对方协商是否可以终止</li>\n</ol>\n</li>\n<li>\n<p>时间等待计时器</p>\n</li>\n</ol>\n<h3 id=\"tcp的有限状态机\"><a class=\"anchor\" href=\"#tcp的有限状态机\">#</a> TCP 的有限状态机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第5讲：传输层原理与技术_页面_50\" /></p>\n<ol>\n<li>粗线：正常的服务器端</li>\n<li>虚线：正常客户端</li>\n<li>细线：异常状态的问题</li>\n</ol>\n<h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第5讲：传输层原理与技术_页面_52\" /></p>\n<p>为什么我们需要 UDP？</p>\n<ol>\n<li>没有建立连接 (避免延时)</li>\n<li>简单：发送方，接收方无连接状态</li>\n<li>小段 header</li>\n<li>没有拥塞控制：UDP 可以按照期望的速度传输</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第5讲：传输层原理与技术_页面_53\" /></p>\n<p>无连接：没有复杂控制，头部简单</p>\n<ol>\n<li>UDP 发送方，接收方之间没有握手 (HandShake，包含进程等信息的)</li>\n<li>每个 UDP 段都独立处理</li>\n</ol>\n<p>常用于流媒体 (Stream) 多媒体 (multimedia) 应用</p>\n<ol>\n<li>容忍损失：无非就是降低帧率</li>\n<li>这类应用是<strong>速率敏感</strong>的应用，而不一定是质量敏感的应用。</li>\n</ol>\n<p>UDP 用于：</p>\n<ol>\n<li>RIP: 定期发送路由信息 (periodically)</li>\n<li>DNS: 避免延迟建立 TCP 连接 (DNS 需要快速找到)</li>\n<li>SNMP:SNMP：拥塞时 (congestion)，SNMP 必须仍然可运行。在没有拥塞和可靠性控制机制的情况下，UDP 在这种情况下的性能要优于 TCP。(主播和多播，大量信息传输)</li>\n<li>其他协议包括 TFTP，DHCP</li>\n</ol>\n<h3 id=\"udp帧结构\"><a class=\"anchor\" href=\"#udp帧结构\">#</a> UDP 帧结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第5讲：传输层原理与技术_页面_54\" /></p>\n<ol>\n<li>UDP 的数据段很简单</li>\n<li>UDP 只有 8 个字节的首部</li>\n<li>源端口、目的端口、长度、校验 (data)、Data</li>\n<li>校验也要对 data 一并校验，如果出现错误，直接丢弃。</li>\n<li>应用层进行数据切片，决定如何进行发送，UDP 直接发送</li>\n</ol>\n<h2 id=\"应用nat和pat\"><a class=\"anchor\" href=\"#应用nat和pat\">#</a> 应用：NAT 和 PAT</h2>\n<h3 id=\"什么是nat\"><a class=\"anchor\" href=\"#什么是nat\">#</a> 什么是 NAT？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第5讲：传输层原理与技术_页面_56\" /></p>\n<ol>\n<li>NAT，是在 IP 数据包头中将一个地址交换为另一个地址的过程\n<ol>\n<li>网络地址转换</li>\n<li>是网络地址即将用完的解决方案</li>\n</ol>\n</li>\n<li>实际上，NAT 用于允许私下寻址的主机访问 Internet。</li>\n<li>IP 地址耗尽的解决方案之一\n<ol>\n<li>保留注册 (合法) 地址</li>\n<li>连接到 Internet 时增加灵活性</li>\n</ol>\n</li>\n<li>RFC 1631 - Network Address Translator (NAT)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第5讲：传输层原理与技术_页面_57\" /></p>\n<h3 id=\"nat类型\"><a class=\"anchor\" href=\"#nat类型\">#</a> NAT 类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第5讲：传输层原理与技术_页面_58\" /></p>\n<h3 id=\"nat地址类型\"><a class=\"anchor\" href=\"#nat地址类型\">#</a> NAT 地址类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第5讲：传输层原理与技术_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第5讲：传输层原理与技术_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第5讲：传输层原理与技术_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第5讲：传输层原理与技术_页面_62\" /></p>\n<h3 id=\"nat优缺点\"><a class=\"anchor\" href=\"#nat优缺点\">#</a> NAT 优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第5讲：传输层原理与技术_页面_63\" /></p>\n<ol>\n<li>优点：由于并非每个内部主机都需要同时进行外部访问，因此您可以使用少量的全局唯一地址池来服务相对大量的私有寻址主机。</li>\n<li>缺点：一一映射，并没有从根本上解决地址短缺的问题。</li>\n<li>也就是说，如果专用地址空间为 / 8，但公用地址为 / 24，则一次只能有 254 个主机可以访问 Internet，主要内网不是同时有很多主机上网，就可以如上操作，进一步降低地址压力 (类似并行和穿行的区别)</li>\n</ol>\n<p>TCP 不支持多播和广播</p>\n<p>**</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "title": "Lecture04-网络层",
            "date_published": "2023-02-08T09:52:09.000Z",
            "content_html": "<h1 id=\"lecture04-网络层\"><a class=\"anchor\" href=\"#lecture04-网络层\">#</a> Lecture04 - 网络层</h1>\n<h2 id=\"网络层概述\"><a class=\"anchor\" href=\"#网络层概述\">#</a> 网络层概述</h2>\n<h3 id=\"网络层职责\"><a class=\"anchor\" href=\"#网络层职责\">#</a> 网络层职责</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_003.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_003\" /></p>\n<ol>\n<li>通过网络移动数据：不同网段之间的通信，不同的广播域，两个广播域之间的进行了划分，互不干扰</li>\n<li>使用分层寻址方案 (与 MAC 寻址相反，后者没有层次)</li>\n<li>细分网络并控制流量</li>\n<li>减少交通拥堵，基于 IP 做分段和传达，用来减少拥塞</li>\n<li>与其他网络通讯</li>\n</ol>\n<h3 id=\"网络层设备\"><a class=\"anchor\" href=\"#网络层设备\">#</a> 网络层设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_004.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_004\" /></p>\n<ol>\n<li>路由器\n<ol>\n<li>互连网段或网络 (不同网段的分割)</li>\n<li>根据 IP 地址做出合理的决定</li>\n<li>确定最佳路径，根据路由表。</li>\n<li>将数据包从入站端口切换到出站端口</li>\n</ol>\n</li>\n<li>如果 A 网段的设备向路由器发送了一个 B 网段的广播地址，那么路由器会进行转发，然而如果 A 网段设备发送的是本网段的广播地址，路由器则不会进行转发。(广播域划分)</li>\n</ol>\n<h2 id=\"ip地址和子网划分\"><a class=\"anchor\" href=\"#ip地址和子网划分\">#</a> IP 地址和子网划分</h2>\n<h3 id=\"第三层数据报格式\"><a class=\"anchor\" href=\"#第三层数据报格式\">#</a> 第三层数据报格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_006.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_006\" /></p>\n<h3 id=\"报文详解\"><a class=\"anchor\" href=\"#报文详解\">#</a> 报文详解</h3>\n<h4 id=\"首部\"><a class=\"anchor\" href=\"#首部\">#</a> 首部</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_007.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_007\" /></p>\n<h4 id=\"首部部分\"><a class=\"anchor\" href=\"#首部部分\">#</a> 首部部分</h4>\n<p>上面蓝框部分的整体是首部部分，包括固定部分和可变部分</p>\n<h4 id=\"版本号\"><a class=\"anchor\" href=\"#版本号\">#</a> 版本号</h4>\n<p>占 4 bit，指 IP 协议的版本。</p>\n<p>目前的 IP 协议版本号为 4 (即 IPv4)(6 也就对应 IPv6)</p>\n<h4 id=\"首部长度\"><a class=\"anchor\" href=\"#首部长度\">#</a> 首部长度</h4>\n<p>占 4 bit，可表示的最大数值是 15 个单位 (一个单位为 4 字节) 因此 IP 的首部长度的最大值是 60 字节。</p>\n<p>一行是 5 个字节，固定部分有 20 个字节，可变部分最多有 40 个字节。</p>\n<h4 id=\"服务类型\"><a class=\"anchor\" href=\"#服务类型\">#</a> 服务类型</h4>\n<p>占 8bit，用来获得更好的服务，这个字段以前一直没有被人们使用。</p>\n<h4 id=\"总长度\"><a class=\"anchor\" href=\"#总长度\">#</a> 总长度</h4>\n<p>占 16 bit，指<strong>首部和数据</strong>之和的长度，单位为字节，因此数据报的最大长度为 65535 字节 (由于放到帧里面，所以大多数不比 1500 字节长)。总长度必须不超过最大传送单元 MTU。</p>\n<h4 id=\"标识\"><a class=\"anchor\" href=\"#标识\">#</a> 标识</h4>\n<p>标识 (identification)：占 16 bit，它是一个计数器，用来产生数据报的标识。</p>\n<p>解决<strong>报文分片</strong>的问题。相同的标识可以合并成一个大报文。</p>\n<h4 id=\"标志\"><a class=\"anchor\" href=\"#标志\">#</a> 标志</h4>\n<p>标志占 3 bit，最高位为 0</p>\n<ol>\n<li>让发送方对报文进行控制，让中间路由器对其进行控制</li>\n<li>DF (Don’t fragment)：是否允许做分片，0 允许做分片，1 不允许做分片</li>\n<li>MF (More Fragment)：MF 为 0 表示最后一个分片，1 是指后面还有分片</li>\n</ol>\n<h4 id=\"片偏移\"><a class=\"anchor\" href=\"#片偏移\">#</a> 片偏移</h4>\n<p>片偏移 (13 bit) 指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以<strong> 8 个字节</strong>为偏移单位。</p>\n<ol>\n<li>相同标识号，然后根据片偏移进行重排</li>\n<li>因为 16-3 = 13，2^3 = 8 (因为单位是字节，所以用 13 位就可以补齐)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102115026718.png\" alt=\"image-20230102115026718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_017.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_017\" /></p>\n<h4 id=\"生存时间\"><a class=\"anchor\" href=\"#生存时间\">#</a> 生存时间</h4>\n<p>生存时间 (8 bit) 记为 TTL (Time To Live) 数据报在网络中可通过的<strong>路由器数</strong>的最大值。</p>\n<p>是通过计数的方式来进行统计，最大值是<strong> 255</strong> (最多经过 255 个路由器)，路由器每转发一次，就会对生存时间 - 1，减小为 0 后，就会丢弃掉，并且通知给发送方我已经丢弃掉这个报文。</p>\n<p>防止在环上进行传输，避免由于回路问题，造成过大的网络资源浪费</p>\n<h4 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h4>\n<p>协议 (8 bit) 字段指出此数据报携带的数据使用何种协议以便目的主机的 IP 层将数据部分上交给哪个处理过程</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_020.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_020\" /></p>\n<p>有的协议是上层的，有的协议是第三层协议，具体协议的情况如上</p>\n<h4 id=\"首部检验和\"><a class=\"anchor\" href=\"#首部检验和\">#</a> 首部检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_022.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_022\" /></p>\n<p>首部检验和 (16 bit) 字段：只检验数据报的首部，不包括数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p>\n<p>一般不用，一是只检验首部，不检验数据；二是消耗性能</p>\n<h4 id=\"源地址和目的地址\"><a class=\"anchor\" href=\"#源地址和目的地址\">#</a> 源地址和目的地址</h4>\n<p>各占 4 个字节</p>\n<h3 id=\"网络层地址\"><a class=\"anchor\" href=\"#网络层地址\">#</a> 网络层地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_024.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_024\" /></p>\n<ol>\n<li>\n<p>IP 地址为 32 位长 (Ipv4 中)</p>\n</li>\n<li>\n<p>它们以点分十进制格式表示为四个八位字节：133.14.17.0</p>\n</li>\n<li>\n<p>IP 地址包含两个组成部分：</p>\n<ul>\n<li>\n<p>网络 ID</p>\n</li>\n<li>\n<p>主机 ID</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_025.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_025\" /></p>\n<h4 id=\"网络地址用来标识网段\"><a class=\"anchor\" href=\"#网络地址用来标识网段\">#</a> 网络地址：用来标识网段</h4>\n<p>一个网络中，共享一个网络地址</p>\n<ol>\n<li>原来由 ARIN (美国互联网号码注册机构，<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hcmluLm5ldA==\">www.arin.net</span>) 分配，现在已经更换</li>\n<li>标识设备所连接 (attached) 的网络</li>\n<li>可以由前三个八位位组 (octets) 中的一个，两个或三个来标识</li>\n</ol>\n<h4 id=\"主机idip地址后面占据1-3个字节\"><a class=\"anchor\" href=\"#主机idip地址后面占据1-3个字节\">#</a> 主机 ID：IP 地址后面占据 1-3 个字节</h4>\n<ol>\n<li>由网络管理员分配</li>\n<li>识别该网络上的特定设备</li>\n<li>可以由最后三个八位位组中的一个，两个或三个来标识</li>\n</ol>\n<h3 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_026.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_026\" /></p>\n<p>不同的类地址为地址的网络部分和主机部分保留不同数量的位</p>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_027.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_027\" /></p>\n<p><strong>A 类第一位必为 0，B 开头为 10，C 为 110</strong></p>\n<p>根据第一个地址的数值确定是哪类地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_028.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_028\" /></p>\n<ol>\n<li>\n<p>每个类别的最大主机数量各不相同。(不包含网络号)</p>\n<ul>\n<li>\n<p>A 类拥有 16,777,214 个可用主机 (2<sup>24</sup> – 2)</p>\n</li>\n<li>\n<p>Class B has 65,534 available hosts (2<sup>16</sup> – 2) B 类具有 65,534 个可用主机 (2<sup>16</sup> – 2)</p>\n</li>\n<li>\n<p>Class C has 254 available hosts (2<sup>8</sup> – 2) C 类具有 254 个可用主机 (2<sup>8</sup> –2)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>为什么每一类地址中都要减去 2？</p>\n<ul>\n<li>\n<p>每个网络中的第一个地址都保留用于该网络地址</p>\n</li>\n<li>\n<p>最后一个地址是为广播地址保留的。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"保留地址\"><a class=\"anchor\" href=\"#保留地址\">#</a> 保留地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_029.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_029\" /></p>\n<p>网络地址：在地址的主机部分中以二进制 0 结尾的 IP 地址</p>\n<ol>\n<li>A 类网络地址示例：113.0.0.0</li>\n<li>网络上的主机只有具有相同网络 ID 的其他主机才能直接通信。(用来确定是不是在一个网段里面)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_030.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_030\" /></p>\n<p>广播地址：用于将数据发送到网络上的所有设备。(一般是一个网段之间的)</p>\n<ol>\n<li>广播 IP 地址在地址的主机部分中以二进制 1 结尾。</li>\n<li>B 类地址的广播地址的示例：176.10.255.255 (decimal 255 = binary 11111111)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_031.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_031\" /></p>\n<p>例子</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_032.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_032\" /></p>\n<p>用于局域网内部使用</p>\n<p>IP 地址耗尽（IP address delpetion）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102123731364.png\" alt=\"image-20230102123731364\" /></p>\n<h3 id=\"子网划分\"><a class=\"anchor\" href=\"#子网划分\">#</a> 子网划分</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_033.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_033\" /></p>\n<p>网络管理员有时需要将网络划分为较小的网络，称为<strong>子网</strong>，以提供<strong>额外的灵活性</strong>.</p>\n<p>从主机字段借来的位被指定为子网字段 (Subnet Fields)</p>\n<h4 id=\"子网的基本概念\"><a class=\"anchor\" href=\"#子网的基本概念\">#</a> 子网的基本概念</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_034.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_034\" /></p>\n<ol>\n<li>子网是网络的较小部分\n<ul>\n<li>提供寻址灵活性</li>\n</ul>\n</li>\n<li>子网地址通常由网络管理员在本地分配</li>\n<li>子网减少了广播域：使得广播域变小，提高网络利用率，避免接受到大量的无用的广播，广播只能在对应子网中进行广播。</li>\n</ol>\n<h4 id=\"我们可以借多少位\"><a class=\"anchor\" href=\"#我们可以借多少位\">#</a> 我们可以借多少位？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_035.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_035\" /></p>\n<p>最少借 2 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_036.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_036\" /></p>\n<ol>\n<li>\n<p>借用的最小位数是 2，为什么？</p>\n<p>I 如果只借用 1 位以创建一个子网，那么您将只有一个网络号 -.0 网络 - 和广播号 -.1 网络，没有可以使用的专用网络。</p>\n<p>两位的时候，01 和 10 给 Host，00 给网络 ID，11 位广播地址</p>\n</li>\n<li>\n<p>可以借用的最大位数可以是保留至少 2 位主机号的任何数字 (给 Host 至少保留 2 位，因为 1 位的话，要么一个是 NET 无法使用，要么一个是广播地址)</p>\n</li>\n</ol>\n<h4 id=\"副作用浪费地址\"><a class=\"anchor\" href=\"#副作用浪费地址\">#</a> 副作用：浪费地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_037.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_037\" /></p>\n<p>我们必须在所需的子网数，每个子网可接受的主机以及地址的浪费之间取得平衡 (strike a balance)。</p>\n<h4 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_038.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_038\" /></p>\n<p>别名：扩展网络前缀</p>\n<p>定义我们用来构建网络的位数，以及描述主机地址的位数</p>\n<h4 id=\"计算一个子网\"><a class=\"anchor\" href=\"#计算一个子网\">#</a> 计算一个子网</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_039.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_039\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_040.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_040\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_041.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_041\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_042.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_042\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_043.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_043\" /><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_044.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_045.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_046.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_046\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_047.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_047\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_048.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_048\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_049.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_049\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_050.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_050\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_051.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_051\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_052.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_052\" /></p>\n<p>路由器需要做一个与运算，交换机不用</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_053.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_053\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_054.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_054\" /></p>\n<h2 id=\"第三层设备路由器\"><a class=\"anchor\" href=\"#第三层设备路由器\">#</a> 第三层设备 —— 路由器</h2>\n<h3 id=\"路径选择\"><a class=\"anchor\" href=\"#路径选择\">#</a> 路径选择</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_056.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_056\" /></p>\n<p>路由器选择下一路径，根据带宽、跳数、延迟等</p>\n<h3 id=\"ip地址-2\"><a class=\"anchor\" href=\"#ip地址-2\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_057.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_057\" /></p>\n<ol>\n<li>IP 地址是用软件实现的，是指设备所在的网络。</li>\n<li>路由器连接网络，每个网络必须具有<strong>唯一的网络号</strong>才能成功进行寻找路径。</li>\n<li>唯一的网络号包含在分配 (incorporated) 给该网络上每个设备的 IP 地址中</li>\n<li>IP 地址是逻辑的，是我们配置的。(不同于 MAC 地址)</li>\n<li>IP 地址是有层次，做转发的依据是网段而不是具体的 IP，同一网段设备都有相同的 IP 地址，也就是我们只要到达网段即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_058.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_058\" /></p>\n<p>路由器每个端口需要配一个地址，和所连接的网段是同一个信息的</p>\n<h3 id=\"路由器转发实例\"><a class=\"anchor\" href=\"#路由器转发实例\">#</a> 路由器转发实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_059.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_059\" /></p>\n<p>A5 发到 B5</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_060.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_060\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_061.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_061\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_062.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_062\" /></p>\n<p>查询路由表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_063.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_063\" /></p>\n<p>形成一个新的帧，MAC 地址是 B1 的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_064.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_064\" /></p>\n<ol>\n<li>\n<p>接口是路由器连接到网络的附加装置，在 IP 路由中也可以称为端口。这个 IP 地址往往被作为这个网络的网关</p>\n</li>\n<li>\n<p>每个接口必须具有一个单独的唯一网络地址。</p>\n<p>比如上图中 S1 和 S2 不能是相同的 IP 地址，否则会发生歧义，S0 不知道转发给谁，路由器的连接的网段一定要是不同的</p>\n</li>\n</ol>\n<h3 id=\"ip地址分配\"><a class=\"anchor\" href=\"#ip地址分配\">#</a> IP 地址分配</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_065.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_065\" /></p>\n<ol>\n<li>\n<p>静态地址分配 (Static addressing)</p>\n<ol>\n<li>为每个单独的设备配置一个 IP 地址</li>\n<li>您应该保留非常细致的记录，因为如果使用重复的 IP 地址，可能会出现问题。</li>\n</ol>\n</li>\n<li>\n<p>动态地址分配 (Dynamic addressing)</p>\n<p>有几种不同的方法可用于动态分配 IP 地址：</p>\n<ul>\n<li>RARP: Reverse Address Resolution Protocol. RARP：反向地址解析协议。发起请求</li>\n<li>BOOTP: BOOTstrap Protocol. BOOTP：BOOTstrap 协议。用于工作栈</li>\n<li>DHCP: Dynamic Host Configuration Protocol. (<strong>比较多用</strong>) DHCP：动态主机配置协议</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"arp-协议\"><a class=\"anchor\" href=\"#arp-协议\">#</a> ARP 协议</h2>\n<p>Address Resolution Protocol 地址解析协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_067.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_067\" /></p>\n<ol>\n<li>为了使设备进行通信，发送设备需要目标设备的<strong> IP 地址和 MAC 地址</strong>。</li>\n<li>ARP 使计算机能够查找与 IP 地址关联的计算机的 MAC 地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_068.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_068\" /></p>\n<ol>\n<li>目的方 IP 地址 -&gt; 目的方 MAC 地址</li>\n<li>需要知道对方的 MAC 地址，来形成数据地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_069.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_069\" /></p>\n<p>ARP Table</p>\n<p>ARP 缓存</p>\n<h3 id=\"arp操作mac地址解析\"><a class=\"anchor\" href=\"#arp操作mac地址解析\">#</a> ARP 操作，MAC 地址解析</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_070.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_070\" /></p>\n<p>此时目的地 MAC 地址不知道</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_071.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_071\" /></p>\n<p>向目的地地址请求，发出广播</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_072.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_072\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_073.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_073\" /></p>\n<p>C 回应</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_074.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_074\" /></p>\n<p>写入 ARP 缓存，发送正常的帧</p>\n<h3 id=\"目的地本地\"><a class=\"anchor\" href=\"#目的地本地\">#</a> 目的地本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_075.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_075\" /></p>\n<h3 id=\"网络交流\"><a class=\"anchor\" href=\"#网络交流\">#</a> 网络交流</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_076.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_076\" /></p>\n<h4 id=\"默认网关\"><a class=\"anchor\" href=\"#默认网关\">#</a> 默认网关</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_077.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_077\" /></p>\n<ol>\n<li>为了使设备与另一网络上的另一设备通信，您必须为其<strong>提供默认网关</strong>。</li>\n<li><strong>默认网关是路由器上连接到源主机所在网段的接口的 IP 地址。</strong></li>\n<li>为了使设备将数据发送到另一个网段上的设备的地址，源设备将数据<strong>发送到默认网关</strong>。</li>\n</ol>\n<h4 id=\"代理\"><a class=\"anchor\" href=\"#代理\">#</a> 代理</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_078.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_078\" /></p>\n<p>无法设置默认网关的情况</p>\n<ol>\n<li>代理 ARP 是 ARP 的一种变体 (variation)。</li>\n<li>如果源主机未配置默认网关。</li>\n</ol>\n<h3 id=\"目的地址不是本地\"><a class=\"anchor\" href=\"#目的地址不是本地\">#</a> 目的地址不是本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_079.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_079\" /></p>\n<p>路由器把自己的 MAC 地址给 Host Y</p>\n<h3 id=\"arp流程图\"><a class=\"anchor\" href=\"#arp流程图\">#</a> ARP 流程图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_080.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_080\" /></p>\n<h2 id=\"网络层服务\"><a class=\"anchor\" href=\"#网络层服务\">#</a> 网络层服务</h2>\n<h3 id=\"面向连接的网络服务\"><a class=\"anchor\" href=\"#面向连接的网络服务\">#</a> 面向连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_082.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_082\" /></p>\n<ol>\n<li>\n<p>面向连接的网络服务 —— 在数据传输之前，在传输方和接收方之间建立连接</p>\n<ul>\n<li>\n<p>就是任何发送数据的行为之前，先要建立好连接，协商好参数才会开始传输，所有数据进行有序传输</p>\n</li>\n<li>\n<p>网络情况导致数据出现问题，需要接受方进行一定处理来保证数据正确</p>\n</li>\n</ul>\n</li>\n<li>\n<p>传输过程中要保持连接距离，只有完成传输后才能断开连接。</p>\n</li>\n<li>\n<p>传输比较可靠，代价高。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_083.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_083\" /></p>\n<ol>\n<li>\n<p>（虚）电路交换 vs 面向连接的网络服务</p>\n<p>但是，两个名词并不一样。</p>\n</li>\n<li>\n<p>面向连接：在数据传输之前，与接收方建立一个连接</p>\n</li>\n<li>\n<p>所有 packet（报文）在同一条道路上依次传输，更普遍的，是在同一条虚电路上</p>\n</li>\n</ol>\n<p>虚电路要强于面向连接的，传输更加可靠，保证<strong>传输先后关系</strong>。</p>\n<h3 id=\"无连接的网络服务\"><a class=\"anchor\" href=\"#无连接的网络服务\">#</a> 无连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_084.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_084\" /></p>\n<p>他们分别对待每个数据包。</p>\n<p>IP 是<strong>无连接系统</strong>。</p>\n<h3 id=\"报文交换\"><a class=\"anchor\" href=\"#报文交换\">#</a> 报文交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_085.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_085\" /></p>\n<ol>\n<li>无连接网络与数据包交换：这两个词都不一样</li>\n<li>当数据包从源传递到目标时，它们可以：\n<ol>\n<li>切换到其他路径。(每一报文有各自的发送方和接收方，可以根据当前的网络情况，进行路由选择)</li>\n<li>乱序到达。</li>\n</ol>\n</li>\n<li>设备根据<strong>各种标准</strong>为每个数据包<strong>进行路径选择</strong>。不同的报文可能有不同的标准。</li>\n</ol>\n<p>大部分的 Connetionless network 都是基于 packet switched 进行实现，控制网络拥塞。</p>\n<h2 id=\"路由协议\"><a class=\"anchor\" href=\"#路由协议\">#</a> 路由协议</h2>\n<h3 id=\"网络协议操作\"><a class=\"anchor\" href=\"#网络协议操作\">#</a> 网络协议操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_087.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_087\" /></p>\n<p>ABC 之间都是通过帧进行计算的，直到第三层。</p>\n<h3 id=\"被动路由协议\"><a class=\"anchor\" href=\"#被动路由协议\">#</a> 被动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_088.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_088\" /></p>\n<ol>\n<li>为网络层提供支持的协议称为路由协议或可路由协议。</li>\n<li>IP 是网络层协议，因此，它可以通过互联网络进行路由。</li>\n</ol>\n<h3 id=\"不可路由协议\"><a class=\"anchor\" href=\"#不可路由协议\">#</a> 不可路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_089.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_089\" /></p>\n<ol>\n<li>\n<p>不可路由协议是不支持第 3 层的协议。</p>\n</li>\n<li>\n<p>这些不可路由协议中最常见的是 NetBEUI。</p>\n<ul>\n<li>\n<p>直接根据目的方的地址在局域网中进行生成定位</p>\n</li>\n<li>\n<p>这个协议不支持第三层，也就是跨局域网是不可以的。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NetBEUI 是一种小型，快速且高效的协议，仅限于在一个网段上运行</p>\n</li>\n</ol>\n<h3 id=\"可路由协议的寻址\"><a class=\"anchor\" href=\"#可路由协议的寻址\">#</a> 可路由协议的寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_090.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_090\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_091.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_091\" /></p>\n<h3 id=\"分类1静态vs动态\"><a class=\"anchor\" href=\"#分类1静态vs动态\">#</a> 分类 1：静态 vs 动态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_092.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_092\" /></p>\n<ol>\n<li>\n<p>静态路由：网络管理员在路由器中手动输入路由信息。</p>\n</li>\n<li>\n<p>动态路由</p>\n<ul>\n<li>\n<p>路由器可以在运行过程中互相学习信息。</p>\n</li>\n<li>\n<p>使用路由协议更新路由信息。</p>\n</li>\n<li>\n<p>RIP, IGRP, EIGRP, OSPF …</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_093.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_093\" /></p>\n<ol>\n<li>\n<p>静态路由</p>\n<ol>\n<li>\n<p>用于<strong>隐藏</strong>部分网络。</p>\n<p>安全 (不必进行路由表的交换)</p>\n</li>\n<li>\n<p>测试网络中的特定链接。</p>\n</li>\n<li>\n<p>在到达目标网络的路径只有一条通路时，维护路由表。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>动态路由</p>\n<ol>\n<li>维护路由表。</li>\n<li>以路由更新的形式及时分发信息。</li>\n<li>依靠路由协议共享知识。</li>\n<li>路由器可以调整以适应不断变化的网络状况。</li>\n<li>打开后会启动<strong>进程</strong>，按照不同的协议，和网上的不同设备学习信息，然后根据<strong>算法</strong>生成路由表</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"主动路由协议\"><a class=\"anchor\" href=\"#主动路由协议\">#</a> 主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_094.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_094\" /></p>\n<h3 id=\"被动路由协议和主动路由协议\"><a class=\"anchor\" href=\"#被动路由协议和主动路由协议\">#</a> 被动路由协议和主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_095.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_095\" /></p>\n<ol>\n<li>Routed Portocol 用于路由器之间，用来保证路由器之间连通 (完成转发)。</li>\n<li>Routing Protocol 用于做各自的路由表的生成：路由器彼此交换信息。</li>\n<li>Routing Protocol 决定 Routed Protocals</li>\n</ol>\n<h3 id=\"分类2igp-vs-egp\"><a class=\"anchor\" href=\"#分类2igp-vs-egp\">#</a> 分类 2：IGP VS EGP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_096.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_096\" /></p>\n<ol>\n<li>\n<p>动态路由</p>\n</li>\n<li>\n<p>内部网关协议 Interior Gateway  Protocols</p>\n<p>RIP，IGRP，EIGRP，OSPF</p>\n<p>可在自治系统 (autonomous  system，大的单位或者管理方) 中使用，该系统是一个主管部门下的路由器网络，例如公司 (corporate) 网络，学区的网络或政府机构的网络。</p>\n</li>\n<li>\n<p>外部网关协议 Exterior Gateway Protocols</p>\n<p>EGP，BGP</p>\n<p>用于在自治系统之间路由数据包。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_097.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_097\" /></p>\n<p>自治系统是<strong>逻辑</strong>的划分，而未必是物理层次的划分。</p>\n<h3 id=\"分类3igp分为两类dvp-vs-lsp\"><a class=\"anchor\" href=\"#分类3igp分为两类dvp-vs-lsp\">#</a> 分类 3：IGP 分为两类：DVP VS LSP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_098.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_098\" /></p>\n<p><strong>DVP</strong></p>\n<p>距离矢量协议 Distance-Vector Protocols</p>\n<p>RIP, IGRP</p>\n<ol>\n<li>从<strong>邻居</strong>的角度查看网络拓扑。(注意不基于全局)</li>\n<li>在路由器之间添加距离向量。(根据跳数来决定，经过一个路由器 + 1 一次)</li>\n<li>经常定期 (periodic) 更新。（<strong>定时</strong>）</li>\n<li>将路由表的<strong>副本</strong>传递到邻居路由器。</li>\n</ol>\n<p><strong>LVP</strong></p>\n<p>链路状态协议 Link State Protocols</p>\n<p>OSPF</p>\n<ol>\n<li>获取<strong>全局</strong>网络拓扑的通用视图。</li>\n<li>计算到其他路由器的<strong>最短路径</strong>。(基于带宽计算出来的 cost，形成 cost 拓扑图，然后计算出对应的路径代价作为评判依据)</li>\n<li><strong>事件</strong>触发的更新。</li>\n<li>将链接状态路由更新传递给其他路由器</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_099.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_100.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_100\" /></p>\n<p>Link State</p>\n<p>用 SPF 算法</p>\n<h3 id=\"rip路由信息协议dvp\"><a class=\"anchor\" href=\"#rip路由信息协议dvp\">#</a> RIP 路由信息协议（DVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_101.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_101\" /></p>\n<ol>\n<li>很受欢迎</li>\n<li>内部网关协议</li>\n<li>距离矢量协议</li>\n<li>基于跳数</li>\n<li>最远可达跳数 15</li>\n<li>每 30 秒更新</li>\n<li>不选择最快路径（选择跳数最短的路径）</li>\n<li>产生很多网络流量（network traffic)</li>\n<li>v2 是 v1 的一个进阶版本</li>\n</ol>\n<h3 id=\"igrp-vs-eigrpdvp\"><a class=\"anchor\" href=\"#igrp-vs-eigrpdvp\">#</a> IGRP vs EIGRP(DVP)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_102.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_102\" /></p>\n<ol>\n<li>思科知识产权的。</li>\n<li>内部网关协议。</li>\n<li>距离矢量协议</li>\n<li>指标由 ** 带宽 (bandwidth)，负载 (load)，延迟 (delay) 和可靠性 (reliability)** 组成。加权进行运算。</li>\n<li>IGRP 最大跳数为 255。</li>\n<li>每 90 秒更新一次。</li>\n<li>EIGRP 是 IGRP 的高级版本，它是<strong>混合</strong>路由协议 (不全是根据跳数来计算)。</li>\n</ol>\n<p>比 RIP 性能好很多</p>\n<h3 id=\"ospflvp\"><a class=\"anchor\" href=\"#ospflvp\">#</a> OSPF（LVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_103.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_103\" /></p>\n<ol>\n<li>最短路径优先协议</li>\n<li>内部网关协议</li>\n<li>链路状态协议，消耗内存和 CPU</li>\n<li>指标由带宽，速度，流量，可靠性和安全性组成，本科阶段只考虑带宽的。</li>\n<li>事件触发的更新。</li>\n<li>最快和什么有关？(最快指的是带宽)\n<ol>\n<li>和实时各条链路上的通信冗余有关，也和管理方案有关，简单来说是和带宽有关</li>\n<li>带宽表示为代价，带宽和代价成<strong>反比</strong>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"vlsmvariable-length-subnet-mask-可变长度子网掩码\"><a class=\"anchor\" href=\"#vlsmvariable-length-subnet-mask-可变长度子网掩码\">#</a> VLSM (Variable Length Subnet Mask) 可变长度子网掩码</h2>\n<h3 id=\"经典路由和可变长度子网掩码\"><a class=\"anchor\" href=\"#经典路由和可变长度子网掩码\">#</a> 经典路由和可变长度子网掩码</h3>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_105.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_105\" /></p>\n<ul>\n<li>\n<p>有类路由</p>\n<p>有类的路由协议要求单个网络使用相同的子网掩码。</p>\n<p>例如：网络 192.168.187.0 必须仅使用一个子网掩码，例如 255.255.255.0。</p>\n</li>\n<li>\n<p>可变长度子网掩码</p>\n<p>VLSM 只是一个特征，它允许单个自治系统的网络具有不同的子网掩码。</p>\n<p>可有效解决网络号浪费的问题</p>\n</li>\n</ul>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_106.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_106\" /></p>\n<ol>\n<li>使用 VLSM，网络管理员可以在主机少的网络上使用长掩码，而在主机多的子网上使用短掩码。(提供了很高的灵活性)</li>\n<li>如果路由协议允许 VLSM\n<ol>\n<li>在路由网络连接上使用 30 位子网掩码 255.255.255.252（两个路由器相连）</li>\n<li>用户网络的 24 位掩码 255.255.255.0</li>\n<li>或者，对于最多 1000 个用户的网络，甚至是 22 位掩码 255.255.252.0。(保留 10 位)</li>\n</ol>\n</li>\n<li>在 CIDR 的基础上发展的，报文中包含有子网掩码。</li>\n</ol>\n<h3 id=\"为什么使用vlsm\"><a class=\"anchor\" href=\"#为什么使用vlsm\">#</a> 为什么使用 VLSM</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_107.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_107\" /></p>\n<ol>\n<li>VLSM 允许组织在同一网络地址空间内使用多个子网掩码。</li>\n<li>实施 VLSM 通常被称为 &quot;子网划分&quot;，可用于最大化寻址效率。</li>\n<li>VLSM 是有助于缩小 IPv4 和 IPv6 之间差距的修改 (modifications) 之一。</li>\n</ol>\n<h3 id=\"vlsm的优缺点\"><a class=\"anchor\" href=\"#vlsm的优缺点\">#</a> VLSM 的优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_108.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_108\" /></p>\n<ol>\n<li>高效使用 IP 地址</li>\n<li>更好的路由聚合 (aggregation): 构建超网</li>\n</ol>\n<p>很多协议都支持 VLSM 协议，只有 RIP v1 不支持</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_109.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_109\" /></p>\n<p>会导致地址空间的浪费：广播地址和网络号都无法被使用。</p>\n<ol>\n<li>过去，建议不要使用第一个和最后一个子网。但是我们可以使用 Cisco IOS ver12.0 中的子网 0。</li>\n<li>从 IOS ver12.0 起，Cisco 路由器默认使用零子网。</li>\n<li>如果想要禁止零子网，使用该指令: <code>router(config)#no ip subnet-zero()</code></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_110.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_110\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_111.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_111\" /></p>\n<p>路由器之间不需要那么多地址，可以进行优化</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_112.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_113.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_113\" /></p>\n<p>为了计算 VLSM 子网，各个主机首先从地址范围分配最大的需求。需求级别应从<strong>最大到最小</strong>列出。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_114.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_114\" /></p>\n<p>Octet 八位字节</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_115.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_115\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_116.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_117.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_117\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_118.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_118\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_119.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_119\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_120.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_120\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_121.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_121\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_122.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_122\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_123.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_123\" /></p>\n<p>没被用过的子网才能进一步划分</p>\n<h3 id=\"路由聚集\"><a class=\"anchor\" href=\"#路由聚集\">#</a> 路由聚集</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_124.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_124\" /></p>\n<p>Classless InterDomain Routing (CIDR) 无类域间路由</p>\n<p>将 3 个 / 24 的子网合并成一个 / 16 的网络</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_125.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_125\" /></p>\n<p>多层聚集</p>\n<h4 id=\"如何计算路由聚集\"><a class=\"anchor\" href=\"#如何计算路由聚集\">#</a> 如何计算路由聚集</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_126.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_126\" /></p>\n<p>提取尽可能多的相同的位作为 net 位，其他作为 host 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_127.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_127\" /></p>\n<ul>\n<li>\n<p>减少路由表条目的数量。</p>\n</li>\n<li>\n<p>可用于隔离拓扑更改</p>\n</li>\n</ul>\n<h2 id=\"icmp\"><a class=\"anchor\" href=\"#icmp\">#</a> ICMP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_129.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_129\" /></p>\n<p>Internet Control Message Protocol 因特网控制报文协议</p>\n<h3 id=\"icmp报文格式\"><a class=\"anchor\" href=\"#icmp报文格式\">#</a> ICMP 报文格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_130.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_130\" /></p>\n<h3 id=\"两种icmp报文\"><a class=\"anchor\" href=\"#两种icmp报文\">#</a> 两种 ICMP 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_131.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_131\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_132.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_132\" /></p>\n<h3 id=\"icmp差错报告报文的数据字段的内容\"><a class=\"anchor\" href=\"#icmp差错报告报文的数据字段的内容\">#</a> ICMP 差错报告报文的数据字段的内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_133.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_133\" /></p>\n<h3 id=\"不应发送icmp差错报告报文的几种情况\"><a class=\"anchor\" href=\"#不应发送icmp差错报告报文的几种情况\">#</a> 不应发送 ICMP 差错报告报文的几种情况</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_134.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_134\" /></p>\n<h3 id=\"ping\"><a class=\"anchor\" href=\"#ping\">#</a> PING</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_135.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_135\" /></p>\n<p>PING Packet InterNet Groper</p>\n<h2 id=\"一些其他\"><a class=\"anchor\" href=\"#一些其他\">#</a> 一些其他</h2>\n<p>基于 IP 地址，而不是 MAC 地址。</p>\n<p>【IP 地址和 MAC 地址的区别】IP 地址是一个框架，有逻辑和层次。MAC 地址较为平坦（谁生产的商品）</p>\n<p>G 0/0/0 模块 板子 接口</p>\n<p>s 0/1/0 模块 板子 接口</p>\n<p>802.3</p>\n<p>The maximum size of the L-PDU for a 10Mbps network is 1500 bytes. Because 8 bytes are used within the L-PDU for the LLC header, this means that the maximum size of the data field is <strong>1492 bytes</strong>.</p>\n<p>802.11</p>\n<p>The frame body of the 802.11 packet can range from 0-<strong>2312 bytes</strong>.</p>\n<p>Routed protocol</p>\n<p>被动路由协议</p>\n<p>基于路由表</p>\n<p>Non-routable protobal</p>\n<p>不基于路由表</p>\n<p>多播地址</p>\n<p>D 类地址，开头为 1110</p>\n<p>多播地址范围为 224.0.0.0～239.255.255.255</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture03-%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture03-%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "Lecture03-链路层",
            "date_published": "2023-02-08T09:51:59.000Z",
            "content_html": "<h1 id=\"链路层\"><a class=\"anchor\" href=\"#链路层\">#</a> 链路层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_02\" /></p>\n<h2 id=\"数据链路层概述\"><a class=\"anchor\" href=\"#数据链路层概述\">#</a> 数据链路层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_03\" /></p>\n<p>数据链路层 data link layer 提供了：</p>\n<ul>\n<li>访问网络媒体</li>\n<li>跨媒体的物理传输</li>\n</ul>\n<p>第二层协议 procedure =  protocol 定义了：</p>\n<ul>\n<li>数据传输格式</li>\n<li>节点行为规范</li>\n</ul>\n<h3 id=\"局域网和数据链路层\"><a class=\"anchor\" href=\"#局域网和数据链路层\">#</a> 局域网和数据链路层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_04\" /></p>\n<p>主要工作</p>\n<ul>\n<li>错误识别 (notification)</li>\n<li>网络拓扑 (Network topology)</li>\n<li>流控制 (Flow control)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>第一层</th>\n<th>第二层</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无法与上层通信</td>\n<td>通过 LLC 与上层通信</td>\n</tr>\n<tr>\n<td>无法确定哪台主机将会传输或接受二进制数据</td>\n<td>通过 MAC 确定</td>\n</tr>\n<tr>\n<td>无法命名或标识主机</td>\n<td>通过寻址或命名过程来实现</td>\n</tr>\n<tr>\n<td>仅仅能描述比特流</td>\n<td>通过帧来组织 / 分组比特</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"提供的服务\"><a class=\"anchor\" href=\"#提供的服务\">#</a> 提供的服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_05\" /></p>\n<ol>\n<li>\n<p>(最弱，最不靠谱的) 没有确认 (acknowledgement) 的无连接 (Connectionless) 服务</p>\n<p>发送取出就行，不用等收到确认</p>\n<p>一般用于：</p>\n<ul>\n<li>可靠 (Reliable) 的链接 (上层以确保数据正确性)</li>\n<li>实时任务，比较高效</li>\n<li>适用于<strong>大多数局域网</strong>（局域网比较可靠，一般为本地链接）</li>\n</ul>\n</li>\n<li>\n<p>带有确认的无连接服务：</p>\n<p>不可靠的链接，例如无线网络：需要保证一定的通信质量 (比如无线网络的传输)，同时会损失一定的性能。</p>\n</li>\n<li>\n<p>带有确认的连接服务</p>\n<ul>\n<li>比如蓝牙：需要先确定绑定关系才能进行通信</li>\n<li>手机和手机之间的蓝牙连接需要确定一些信息</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"建立在mac上的常见局域网\"><a class=\"anchor\" href=\"#建立在mac上的常见局域网\">#</a> 建立在 MAC 上的常见局域网</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_06\" /></p>\n<ol>\n<li>\n<p>以太网 (Ethernet)</p>\n<p>逻辑上，总线拓扑 (信息流在线性总线上)</p>\n<p>物理上，星形或扩展星形</p>\n</li>\n<li>\n<p>令牌环 (Token Ring)</p>\n<p>逻辑上，环拓扑 (信息流在一个环中)</p>\n<p>物理上，星形拓扑</p>\n</li>\n<li>\n<p>FDDI (光纤分布式数据接口)</p>\n<p>光纤作为传输介质，后被以太网取代</p>\n<p>逻辑上，环拓扑 (信息流在一个环中)</p>\n<p>物理上，双环拓扑</p>\n</li>\n</ol>\n<h3 id=\"mac访问方法\"><a class=\"anchor\" href=\"#mac访问方法\">#</a> MAC 访问方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_07\" /></p>\n<p>确定性轮流 Deterministic</p>\n<p>​\t轮流式的 taking turns</p>\n<p>​\tToken Ring and FDDI (Fiber Distributed Data Interface，光纤分布式数据接口)</p>\n<p>​\t类似军棋，需要拿到令牌才能出棋</p>\n<p>争用式 Non-deterministic (probabilistic)</p>\n<p>​\t非确定性、概率性 —— 先到先得 first come, first sesrved</p>\n<p>​\tEthernet/802.3</p>\n<h4 id=\"确定式mac协议\"><a class=\"anchor\" href=\"#确定式mac协议\">#</a> 确定式 MAC 协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_08\" /></p>\n<ol>\n<li>特殊数据令牌在环中循环 (circulates)。</li>\n<li>当主机收到令牌时，它可以传输数据而不是令牌。这称为夺取 (seizing) 令牌。</li>\n<li>当发送的帧返回到发送器时，站点将发送新令牌，帧从环上去除或脱落 (stripped)。</li>\n</ol>\n<h4 id=\"非确定性mac协议\"><a class=\"anchor\" href=\"#非确定性mac协议\">#</a> 非确定性 MAC 协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_09\" /></p>\n<ol>\n<li>\n<p>此 MAC 协议称为<strong>带冲突检测的载波侦听多路访问 (CSMA/CD，Carrier Sense Multiple Access with Collision Detection)</strong></p>\n</li>\n<li>\n<p>为了使用这种共享介质技术，以太网允许网络设备为传输权进行仲裁 (arbitrate)。</p>\n</li>\n<li>\n<p>以太网是一种局域网，是<strong>无确认的无连接服务</strong>。</p>\n<p><strong>CSMA/CD Carrier Sense Multiple Access with Collision Detection 带冲突检测的载波侦听多路访问</strong><br />\n载波侦听，确保正确。</p>\n</li>\n</ol>\n<h3 id=\"局域网传输方法\"><a class=\"anchor\" href=\"#局域网传输方法\">#</a> 局域网传输方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_10\" /></p>\n<ul>\n<li>\n<p>单播</p>\n<p>将单个数据包从源发送到网络上的单个目标</p>\n</li>\n<li>\n<p>多播</p>\n<p>由发送到网络上特定节点子集的单个数据包组成</p>\n<p>这些节点都有同样的进程进行响应</p>\n</li>\n<li>\n<p>广播</p>\n<p>由单个数据包组成，该数据包传输到网络上的所有节点。</p>\n<p>广播的目的地址是 0x11111111</p>\n</li>\n</ul>\n<h2 id=\"以太网和csmacd\"><a class=\"anchor\" href=\"#以太网和csmacd\">#</a> 以太网和 CSMA/CD</h2>\n<h3 id=\"局域网标准\"><a class=\"anchor\" href=\"#局域网标准\">#</a> 局域网标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_12\" /></p>\n<ol>\n<li>定义物理层介质和接入设备</li>\n<li>在数据链路层定义设备的通信方式</li>\n<li>数据链路层定义了如何在物理介质上传输数据。</li>\n<li>数据链路层还定义了如何封装特定于协议的流量，以使去往不同上层协议的流量在到达堆栈时可以使用相同的通道。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_13\" /></p>\n<blockquote>\n<p>IEEE 802.2 对应 LLC，IEEE802.3 对应物理层和 MAC，以太网则覆盖物理层和链路层</p>\n</blockquote>\n<ol>\n<li>IEEE 将数据链路层分为两部分：\n<ol>\n<li>介质访问控制 (MAC)(转换到介质)</li>\n<li>逻辑链路控制 (LLC)(过渡到网络层)</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_14\" /></p>\n<ol>\n<li>乍一看，IEEE 标准的两种方式都违反了 OSI 模型。\n<ol>\n<li>首先，它定义自己的层 (LLC)，包括其接口等。</li>\n<li>其次，看来 MAC 层标准 802.3 和 802.5 跨越了第 2 层 / 第 1 层接口。\n<ul>\n<li>802.5 令牌环网</li>\n<li>802.3 覆盖了物理层和第二层下半层</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>但是，802.3 和 802.5 定义了用于构建特定技术的命名，框架和介质访问控制规则，都规范了对应的方案，不同方案不同解决标准</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_15\" /></p>\n<ol>\n<li>MAC 子层 (802.3)\n<ul>\n<li>定义如何在物理线路上传输帧 (frames)</li>\n<li>处理物理寻址</li>\n<li>定义网络拓扑</li>\n<li>定义线路规程</li>\n</ul>\n</li>\n<li>LLC 子层 (802.2)\n<ul>\n<li>逻辑上标识不同的协议类型，然后将其封装，兼容不同介质的访问</li>\n<li>使用<strong> SAP</strong> 标识符执行逻辑标识，用来做发送的位置的标识</li>\n<li>LLC 帧的类型取决于上层协议期望的标识符，对于上层服务进行支持</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"mac-子层\"><a class=\"anchor\" href=\"#mac-子层\">#</a> MAC 子层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_16\" /></p>\n<p>注意是字节不是字</p>\n<h4 id=\"前导码preamble\"><a class=\"anchor\" href=\"#前导码preamble\">#</a> 前导码 preamble</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_17\" /></p>\n<p>前同步码告诉接收站一帧即将到来，前面 7 个字节是 0x10101010，最后一个是 0x10101011 (用于进行时钟同步)。</p>\n<p>使用曼彻斯特编码，0 电平的时候无电压。</p>\n<h4 id=\"目的地址-源地址\"><a class=\"anchor\" href=\"#目的地址-源地址\">#</a> 目的地址、源地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_18\" /></p>\n<p>先看目的地址的好处：交换机等看到目的地址就可以进行判断，提高效率</p>\n<h4 id=\"长度字段\"><a class=\"anchor\" href=\"#长度字段\">#</a> 长度字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_19\" /></p>\n<p>早期这里是长度字段，以太网二用类型取代长度字段。不需要长度参数也可以算出帧的长度。</p>\n<h4 id=\"数据字段\"><a class=\"anchor\" href=\"#数据字段\">#</a> 数据字段</h4>\n<p>最小的<strong> 46</strong> 字节，最多 1500 字节。</p>\n<p><strong>4 个 64 字节大小帧同时发送才能保证占据全部的链路</strong>，100m 链路，用 512us，就是 512bit，也就是 64 字节。64-（6+6+2+4）=46 。【前引导码不算帧长度】</p>\n<p>如果没有 46，则补零。</p>\n<h4 id=\"fcs字段\"><a class=\"anchor\" href=\"#fcs字段\">#</a> FCS 字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_20\" /></p>\n<p>循环冗余校验 (cyclic redundancy check) 值 —— 自己补充</p>\n<p>固定 4 字节</p>\n<h3 id=\"llc子层\"><a class=\"anchor\" href=\"#llc子层\">#</a> LLC 子层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_21\" /></p>\n<ol>\n<li>\n<p>逻辑链路控制 (LLC) 子层管理单个链路管理设备之间的通信</p>\n</li>\n<li>\n<p>LLC 在 IEEE 802.2 规范中定义，并且同时支持<strong>无连接和面向连接</strong>的服务。</p>\n<p><strong>可以服务于总线、令牌环</strong></p>\n</li>\n<li>\n<p>LLC 子层允许部分数据链接层独立于现有技术运行，单个 LLC 子层可以与不同的 MAC 子层兼容 (compatible)。</p>\n</li>\n</ol>\n<h4 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_22\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_23\" /></p>\n<ol>\n<li>\n<p>LLC 获取网络协议数据 (数据包，packet)，并添加更多控制信息以帮助将数据包传递到其目的地。</p>\n</li>\n<li>\n<p>它添加了 802.2 规范的两个寻址组件，以在每一端标识上层协议：</p>\n<ul>\n<li>目标服务访问点 (DSAP)</li>\n<li>源服务访问点 (SSAP)</li>\n</ul>\n<p>基于 SAP 规范进行地址和分配。</p>\n</li>\n<li>\n<p>然后，此重新打包的数据将传输到 MAC 以进一步封装数据。</p>\n</li>\n</ol>\n<h3 id=\"介质访问控制\"><a class=\"anchor\" href=\"#介质访问控制\">#</a> 介质访问控制</h3>\n<h4 id=\"mac地址\"><a class=\"anchor\" href=\"#mac地址\">#</a> MAC 地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_25\" /></p>\n<ol>\n<li>MAC 地址为<strong> 48 位</strong>，始终表示为<strong> 12 个十六进制数字</strong>。</li>\n<li>IEEE 管理的前 6 个十六进制数字 (从左到右) 标识制造商或销售商 (供应商)，并包括<strong>组织唯一标识符 (OUI)</strong>。\n<ul>\n<li>OUI 是生产的厂商，比如 0060CF 就是 Cisco 的，然后可以使用后面 24 个 bit 进行自己的编码</li>\n<li>一个厂商是可以买多个 OUI 的，也可以几个单位买一个 OUI</li>\n<li>第一个 bit 取 0 表示这个地址是一个单播地址，取 1 则是表示是一个多播地址。</li>\n<li>第二个 bit 取 0 表示这个地址是全球唯一地址，取 1 则表示是本地唯一地址</li>\n</ul>\n</li>\n<li>其余的 6 位十六进制数字包括接口序列号，由特定供应商管理。</li>\n</ol>\n<h4 id=\"ethernet-8023-广播\"><a class=\"anchor\" href=\"#ethernet-8023-广播\">#</a> Ethernet 802.3 广播</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_26\" /></p>\n<ol>\n<li>广播\n<ul>\n<li>目标 MAC：全 1 (FFFF.FFFF.FFFF)</li>\n<li>保证所有的设备都能收到这个地址</li>\n<li>会导致非目的主机进行地址解析</li>\n</ul>\n</li>\n<li>广播会不必要地打断基站，从而严重影响基站的性能</li>\n<li>因此，仅在以下情况下才应使用广播：\n<ul>\n<li>目的地的 MAC 地址未知</li>\n<li>目的地是所有主机</li>\n</ul>\n</li>\n<li>非必要情况下我们不希望有很多广播，有可能会导致广播风暴，需要严格限制广播的使用</li>\n</ol>\n<h4 id=\"以太网操作\"><a class=\"anchor\" href=\"#以太网操作\">#</a> 以太网操作</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_27\" /></p>\n<p>上图中 1 是总线拓扑，1 发送的数据帧会传达给所有在这个总线上的设备，非目的主机检查目的地址和本机 MAC 地址不同，则会将该帧丢弃。</p>\n<ol>\n<li>以太网是广播网络，也就是说，每个站都可以看到所有帧，而不管它们是否是目的地</li>\n<li>通过 MAC 地址判断站点是否为目的地</li>\n<li>目标站在 OSI 层上发送数据。其他节点丢弃帧</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_28\" /></p>\n<ol>\n<li>听然后传送</li>\n<li>广播 jam 信号\n<ul>\n<li>是一个 32bit 的全 1 的数据帧表示出现了冲突</li>\n<li>标准思科认为是所有侦听的设备都会发送</li>\n</ul>\n</li>\n<li>发生碰撞 (Collision)\n<ul>\n<li>两个设备同时使用链路发送电信号，则会出错。</li>\n<li>如果有冲突，则会一直侦听总线，等到空闲则可以组织数据帧发送</li>\n<li>仍然存在问题 —— 多台主机同时进行组织数据帧进行发送</li>\n<li>因为同时还在侦听总线，如果出现冲突，则会发出 jam 信号，只要有 0 或者 1 传输，有电平则会表示使用</li>\n</ul>\n</li>\n<li>设备退回 (back off) 适当的时间，然后重新传输 (retransmit), 发生冲突的设备，根据特定的回退算法</li>\n</ol>\n<p>帧至少为 64 字节，数据部分至少为 46 字节。</p>\n<h2 id=\"以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd\"><a class=\"anchor\" href=\"#以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd\">#</a> 以太网 和 带冲突检测的载波侦听多路访问 Ethernet and CSMA/CD</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_29\" /></p>\n<ol>\n<li>首先设备要发送数据</li>\n<li>开始侦听链路是非忙，如果忙，则过一阵来再看看</li>\n<li>如果不忙，则开始准备发送\n<ul>\n<li>如果有错误，则到 9，表示有冲突发送，广播一个 jam sighnal，把自己尝试的次数 + 1 (重发有一定限度)</li>\n<li>尝试次数过多，会像上层协议传输网络不可用</li>\n<li>尝试次数还可，则到 13 计算一个回退时间，来再次尝试，回退时间单位，会保证 A 和 D 的时间差能保证第一个人已经用完电路来避免冲突。</li>\n</ul>\n</li>\n<li>如果没有错误，则一直传输到结束为止</li>\n</ol>\n<p>什么介质决定用什么网卡</p>\n<p>曼彻斯特编码，从低到高或从高到低为 0，选取一个方案不冲突即可。</p>\n<p>网络接入层<br />\n Internet access layer</p>\n<h3 id=\"pdu协议数据单元\"><a class=\"anchor\" href=\"#pdu协议数据单元\">#</a> PDU 协议数据单元</h3>\n<p>Protocol Data Unit</p>\n<p>在 OSI 模型系统里，PDU 和最底下四层相关。</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclODklQTklRTclOTAlODYlRTUlQjElODI=\">物理层</span>（一层）PDU 指<strong>数据位</strong>（<strong>Bit</strong>）。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTYlOTUlQjAlRTYlOEQlQUUlRTklOTMlQkUlRTglQjclQUYlRTUlQjElODI=\">数据链路层</span>（二层）PDU 指<strong>数据帧</strong>（<strong>Frame</strong>）。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclQkQlOTElRTclQkIlOUMlRTUlQjElODI=\">网络层</span>（三层）PDU 指<strong>数据包</strong> [<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvemgtaGFucy8lRTUlOEQlOEYlRTglQUUlQUUlRTYlOTUlQjAlRTYlOEQlQUUlRTUlOEQlOTUlRTUlODUlODMjY2l0ZV9ub3RlLTE=\">注 1]</span>（<strong>Packet</strong>）或<strong>数据报</strong>（<strong>Datagram</strong>）[<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvemgtaGFucy8lRTUlOEQlOEYlRTglQUUlQUUlRTYlOTUlQjAlRTYlOEQlQUUlRTUlOEQlOTUlRTUlODUlODMjY2l0ZV9ub3RlLWNmLXBhY2tldC0y\">1]</span>。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTQlQkMlQTAlRTglQkUlOTMlRTUlQjElODI=\">传输层</span>（四层）PDU 指<strong>数据段</strong>（<strong>Segment</strong>）。</li>\n</ol>\n<p>第五层或以上为<strong>数据</strong>（<strong>data</strong>）。</p>\n<h2 id=\"无线局域网与csmaca\"><a class=\"anchor\" href=\"#无线局域网与csmaca\">#</a> 无线局域网与 CSMA/CA</h2>\n<h3 id=\"无线局域网\"><a class=\"anchor\" href=\"#无线局域网\">#</a> 无线局域网</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_31\" /></p>\n<p>无线局域网</p>\n<ul>\n<li>基于单元的通信</li>\n<li>基站发送的信号只能被附近的基站接收</li>\n<li>短距离传输</li>\n</ul>\n<p>无线局域网标准</p>\n<ul>\n<li>IEEE 802.11</li>\n<li>IEEE 802.11b</li>\n<li>IEEE 802.11a</li>\n<li>IEEE 802.11g</li>\n<li>IEEE 802.11n</li>\n</ul>\n<p>无线局域网分为两类</p>\n<ol>\n<li>有基础设施拓扑网络 (Infrastructure mode)</li>\n<li>无基础设施拓扑网络 (ad-hoc mode)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_32\" /></p>\n<p>IEEE 802.11</p>\n<ul>\n<li>一项关键技术：<strong>直接序列扩频 (DSSS，Direct Sequence Spread Spectrum)</strong></li>\n<li>DSSS 适用于在 1 到 2 Mbps 范围内运行的无线设备，上面的这个速率在实际生活场景中要除以 2，因为无线通信都是有确认的，所以一般我们认为信道一来一回才有一次通信。</li>\n<li>DSSS 可以高达 11 Mbps 的速度运行，但在 2 Mbps 以上时将不被视为兼容</li>\n<li>也称为 Wi-Fi™，无线保证度，是星型拓扑，基站作为中心</li>\n</ul>\n<p>IEEE 802.11b(Wi-Fi)</p>\n<ul>\n<li>传输能力提高到 11 Mbps（采用高速直连技术，将传输能力提高好几倍）</li>\n<li>所有 802.11b 系统都向后兼容 (backward compliant)，因为它们还仅针对 DSSS 支持 1 和 2 Mbps 数据速率的 802.11。</li>\n<li>通过使用与 802.11 不同的编码技术来实现 (Achieves) 更高的数据吞吐率</li>\n<li>在 2.4 GHz 内运行，解决了 802.11 中出现的部分问题</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_33\" /></p>\n<p>IEEE 802.11a</p>\n<ul>\n<li>涵盖在 5 GHz 传输频带中运行的 WLAN 设备</li>\n<li>运行在 5GHz 上</li>\n<li>802.11a 能够提供 54 Mbps 的数据吞吐量，并且采用称为 &quot;速率加倍&quot; 的专有技术已达到 108 Mbps。</li>\n<li>实际上，更标准的等级是 20-26 Mbps。</li>\n<li>传播距离相比 802.11 和 802.11b 短，信号衰减厉害，但是对于多用户上网的支持更好了。</li>\n<li>使用<strong>正交频分复用</strong>技术。</li>\n</ul>\n<p>proprietary 所有的，专利的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_34\" />IEEE 802.11g</p>\n<ul>\n<li>可以提供与 802.11a (54Mbps) 相同的功能，但具有 802.11b 的向后兼容性</li>\n<li>使用 ** 正交频分复用 (OFDM，Orthogonal Frequency Division Multiplexing)** 技术。</li>\n</ul>\n<p>IEEE 802.11n: 下一代的 WLAN</p>\n<ul>\n<li>提供的带宽是 802.11g 的两倍，即 108Mbps，理论上可达 500-600Mbps。实际上是 100M 左右</li>\n<li>目前使用比较多的方案。</li>\n</ul>\n<h3 id=\"无线局域网拓扑\"><a class=\"anchor\" href=\"#无线局域网拓扑\">#</a> 无线局域网拓扑</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_35\" /></p>\n<p>分为 infrastructure mode 和 ad-hoc mode</p>\n<p>AP 形成星型拓扑，基站之间不相互连接，只与 AP 相连，形成基本服务集 BSS</p>\n<p>多个 AP 形成扩展的服务集 ESS</p>\n<h4 id=\"infrastructure-mode\"><a class=\"anchor\" href=\"#infrastructure-mode\">#</a> Infrastructure Mode</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_36\" /></p>\n<ol>\n<li>\n<p>基本服务集 (BSS) 包括一个基站 (BS) 和几个无线主机</p>\n<ul>\n<li>所有主机都可以在本地 BSS 中直接相互通信</li>\n<li>基站中两个主机之间是不直接互相通信的。</li>\n<li>同一个 BSS 中的主机间直接通信</li>\n</ul>\n</li>\n<li>\n<p>接入点 (AP) 充当基础架构模式的基站 (BS)</p>\n<ul>\n<li>AP 硬连线到有线 (cabled) 局域网，以提供 Internet 访问和与有线网络的连接</li>\n<li>安装 AP 后，将分配服务集标识符 (SSID) 和通道</li>\n<li>单元格的范围是 91.44 至 152.4 米 (300 至 500 英尺)</li>\n<li>速率一般约为百兆，覆盖大概 100m 左右</li>\n</ul>\n</li>\n<li>\n<p>一个 BSS 可以通过分发系统 (DS) 连接到另一个 BSS，并构造一个扩展服务集 (ESS)。</p>\n<p>家里的路由器既有 AP 的功能又有路由器功能，但是理论上只应该是 AP 的功能，一般我们认为家用路由器是一个 AP</p>\n</li>\n</ol>\n<h3 id=\"accessing-procedure访问过程\"><a class=\"anchor\" href=\"#accessing-procedure访问过程\">#</a> Accessing Procedure 访问过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_37\" /></p>\n<ol>\n<li>在 WLAN 中激活客户端时，它将开始 &quot;侦听&quot; 与之 &quot;关联&quot; 的兼容设备</li>\n<li>这被称为 &quot;扫描&quot;\n<ul>\n<li>主动扫描</li>\n<li>被动扫描</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"主动扫描\"><a class=\"anchor\" href=\"#主动扫描\">#</a> 主动扫描</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_38\" /></p>\n<ol>\n<li>希望加入网络的无线节点发送探测 (probe) 请求。</li>\n<li>探测请求将包含它希望加入的网络的服务集标识符 (SSID)</li>\n<li>当找到具有相同 SSID 的 AP 时，该 AP 将发出探测响应</li>\n<li>身份验证（authentication）和关联步骤已完成</li>\n<li>移动端发出请求帧，但是 AP 不发送自己的信息，AP 比较安全。不用发送出自己的 SSID</li>\n</ol>\n<h4 id=\"被动扫描\"><a class=\"anchor\" href=\"#被动扫描\">#</a> 被动扫描</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_39\" /></p>\n<ol>\n<li>侦听由 AP（有基础设施拓扑网络）或对等节点 (无基础设施拓扑网络) 传输的信标管理帧 (beacon management frames)，包含自己的 SSID 信息</li>\n<li>当节点接收到包含要尝试加入的网络的 SSID 的信标时，将尝试加入该网络。</li>\n<li>被动扫描是一个连续的过程，并且随着信号强度的变化，节点可能会与 AP 关联或分离，也是因为强度变化，所以连接状态需要维持。</li>\n</ol>\n<h3 id=\"无线局域网的帧结构\"><a class=\"anchor\" href=\"#无线局域网的帧结构\">#</a> 无线局域网的帧结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_40\" /></p>\n<ol>\n<li>\n<p>WLAN 不使用标准的 802.3 帧。</p>\n</li>\n<li>\n<p>框架有三种类型</p>\n<ul>\n<li>控制帧 (Control Frames)</li>\n<li>管理帧 (Management frames)</li>\n<li>数据帧 (仅数据帧类似于 802.3 帧)</li>\n</ul>\n</li>\n<li>\n<p>无线数据帧和 802.3 帧的有效载荷 (payload) 为 1500 字节</p>\n<ul>\n<li>\n<p>但是，以太帧不能超过 1518 字节，而无线帧则可能高达<strong> 2346 字节</strong>。</p>\n<p>是因为在无线情况下使用的是有确认的信息，增加无线帧有效数据大小，来对冲确认的信息的损耗。</p>\n</li>\n<li>\n<p>通常，WLAN 帧大小将被限制为 1518 字节，因为它最常连接到有线以太网。（有线以太网属于有线局域网，以太帧限制在 1518 字节）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数据帧结构80211-wlan无线局域网\"><a class=\"anchor\" href=\"#数据帧结构80211-wlan无线局域网\">#</a> 数据帧结构（802.11 WLAN 无线局域网）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_41\" /></p>\n<p>WEP 规格，Wired Equivalent Privacy</p>\n<p>有基础设施网络拓扑用地址 1、2、3</p>\n<p>无基础设施网络拓扑用地址 4</p>\n<h4 id=\"数据帧中的地址\"><a class=\"anchor\" href=\"#数据帧中的地址\">#</a> 数据帧中的地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_42\" /></p>\n<p>扩展星型拓扑</p>\n<p>A 发往 AP，AP 发往 B</p>\n<h3 id=\"csmaca\"><a class=\"anchor\" href=\"#csmaca\">#</a> CSMA/CA</h3>\n<h4 id=\"为什么我们需要csmaca\"><a class=\"anchor\" href=\"#为什么我们需要csmaca\">#</a> 为什么我们需要 CSMA/CA</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_43\" /></p>\n<p>用于无基站的情况</p>\n<p>冲突 (Collisions) 可能发生在 WLAN 无线局域网中，但是站点只能知道附近的传输，因此 CSMA/CD 不是一个好的选择。【有线局域网是总线模式，可以知道所有的传输】</p>\n<ul>\n<li>隐藏站问题：当 A 将数据传输到 B 时，C 无法检测到 A 和 B 之间的传输，因此 C 可能会决定将数据传输到 B 并导致 B 发生冲突。</li>\n<li>暴露站问题：当 B 将数据传输到 A 时，C 可以检测到传输，因此 C 不会将数据传输到 D。但这是一个错误。</li>\n</ul>\n<h4 id=\"多路复用机制\"><a class=\"anchor\" href=\"#多路复用机制\">#</a> 多路复用机制</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_44\" /></p>\n<p>以太网（有线局域网）</p>\n<ul>\n<li>信号被传输到电缆上的<strong>所有</strong>站。</li>\n<li>发送站检测到冲突。</li>\n<li>一次只能在信道上发送一个有效帧。</li>\n</ul>\n<p>WLAN （无线局域网）</p>\n<ul>\n<li>信号通过电缆传输到发送站附近的站 (相邻，不可以跨越有效距离发送)</li>\n<li>MAC 协议必须尽最大努力确保只有一个相邻接收基站的发送点</li>\n<li>由接收基站来确定冲突。</li>\n<li>多路传输，一次可以在通道上传输<strong>多</strong>个有效 (effective) 帧</li>\n</ul>\n<h4 id=\"csmaca-避免冲突的载波侦听多路访问\"><a class=\"anchor\" href=\"#csmaca-避免冲突的载波侦听多路访问\">#</a> CSMA/CA 避免冲突的载波侦听多路访问</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_45\" /></p>\n<p>CSMA/CA(Carrier Sense Multiple Access with Collision Avoidance)</p>\n<p>RTS Request To Send</p>\n<p>CTS Clear To Send</p>\n<p>有可能在 B 处发生冲突，C 由于与 B 较远，未听到 CTS，与 A 同时发送</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_46\" /></p>\n<ol>\n<li>\n<p>为避免冲突，802.11 所有站点在完成一个事务后必须等待一段时间才能进行下一个动作，这个时间被称为 IFS，具体取决于帧的类型。</p>\n</li>\n<li>\n<p>SIFS (Short interframe space): 短帧间间隔 28us，用于本设备接受发送状态转换，不足够源站接受 CTS</p>\n</li>\n<li>\n<p>DIFS (Distributed Inter-frame Spacing)：分布协调功能帧间间隔 128us (多个节点进行协调)</p>\n</li>\n<li>\n<p>应答 CTS (Clear to Send)，等待 SIFS (Short interframe space) 后发送数据</p>\n</li>\n<li>\n<p>在收到 ACK 之后，一次通讯结束</p>\n</li>\n<li>\n<p>过程中的时间写入帧的<strong>时间数据标记位</strong></p>\n</li>\n<li>\n<p>NAV (网络分配向量)：网络协调时间，时间长度；</p>\n<p>NAV 计算方式在后面，NAV 是一开始就进行预估了，别的节点抢到了节点时，我们会减掉别人正常通信的时间，不是一直累积下去的情况。</p>\n</li>\n<li>\n<p>这次通讯结束，下一次经过争用窗口来抢</p>\n</li>\n<li>\n<p>源站需要收到确认信息 CTS 才能接着发送信息</p>\n</li>\n<li>\n<p>多个源站向目的站发 RTS 给目的站，目的站发现冲突，告诉各自站点，PPT 处理的是 RTS</p>\n</li>\n</ol>\n<h4 id=\"csmaca实例\"><a class=\"anchor\" href=\"#csmaca实例\">#</a> CSMA/CA 实例</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_47\" /></p>\n<h4 id=\"实际数据传输率\"><a class=\"anchor\" href=\"#实际数据传输率\">#</a> 实际数据传输率</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_48\" /></p>\n<ol>\n<li>当源节点发送帧时，接收节点将返回肯定确认 (ACK)。\n<ul>\n<li>这可能导致消耗 50％的可用带宽 (bandwidth)。</li>\n<li>在额定为 11 Mbps 的 802.11b 无线局域网上，这会将实际数据吞吐量降低到最大 5.0 到 5.5Mbps。</li>\n</ul>\n</li>\n<li>网络性能也会受到信号强度的影响\n<ul>\n<li>随着信号变弱，可以调用<strong>自适应速率选择 (ARS)</strong></li>\n<li>信号会受到距离影响，越远信号越弱，功率越低，带宽不能稳定到初始带宽</li>\n<li>传输单元会将数据速率从 11 Mbps 降低到 5.5Mbps，从 5.5 Mbps 降低到 2 Mbps 或 2 Mbps 到 1 Mbps。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"wlan和ethernet区别\"><a class=\"anchor\" href=\"#wlan和ethernet区别\">#</a> WLAN 和 Ethernet 区别</h3>\n<table>\n<thead>\n<tr>\n<th>Ethernet</th>\n<th>WLAN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>信号被传输到连接在线缆上的所有站点上</td>\n<td>信号只被传输到接近发送站点的站点</td>\n</tr>\n<tr>\n<td></td>\n<td>接受站点检测冲突</td>\n</tr>\n<tr>\n<td>只会有一个有效帧在信道上传播</td>\n<td>会有多个有效帧同时在信道上传播</td>\n</tr>\n<tr>\n<td></td>\n<td>MAC 协议必须尽可能保证只有发送站点接近接收站点</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第二层设备\"><a class=\"anchor\" href=\"#第二层设备\">#</a> 第二层设备</h2>\n<h3 id=\"nics网卡\"><a class=\"anchor\" href=\"#nics网卡\">#</a> NICs 网卡</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_50\" /></p>\n<p>NIC 执行重要的第 2 层数据链路层功能：</p>\n<ol>\n<li>逻辑链接控制 - 与计算机上层通信</li>\n<li>媒体访问控制 - 提供对共享访问媒体的结构化访问</li>\n<li>命名 - 提供唯一的 MAC 地址标识符</li>\n<li>成帧 - 封装过程的一部分，打包比特以进行传输。</li>\n<li>发信号 - 使用内置收发器创建信号并与媒体接口 (也有第一层功能，01 序列变成信号发出去)</li>\n</ol>\n<h3 id=\"bridges网桥\"><a class=\"anchor\" href=\"#bridges网桥\">#</a> Bridges 网桥</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_51\" /></p>\n<ol>\n<li>\n<p>网桥将流量划分为多个部分，并根据 MAC 地址而不是协议对流量进行过滤。</p>\n</li>\n<li>\n<p>网桥可以通过减少较大的冲突域来提高网络性能。</p>\n</li>\n<li>\n<p>在从网络的一个网段到其他网段的流量较低的情况下，网桥最有效。</p>\n<p>当网段之间的流量变大时，网桥会成为瓶颈 (bottleneck)，并减慢通信速度。(网桥将数据帧检验存储再转发)</p>\n</li>\n</ol>\n<h4 id=\"透明网桥\"><a class=\"anchor\" href=\"#透明网桥\">#</a> 透明网桥</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_52\" /></p>\n<ol>\n<li>Mac 表放到缓存的位置，刚启动时是空表，之后在发送中逐渐学习。\n<ul>\n<li>Mac 地址表是有生命周期的，如果计时超过一个阈值没有刺激刷新 Mac 表，则会刷新表</li>\n<li>比如笔记本更换接入地址。</li>\n</ul>\n</li>\n<li>&quot;透明&quot; 指局域网中的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的</li>\n<li>原理\n<ol>\n<li>从 A 发出的帧从接口 x 进入了网桥，则从这个接口发出帧就一定能达到 A。网桥每收到一个帧，就记下其源地址和进入网桥的接口，写入转发表。</li>\n<li>在收到一个新的帧时，在转发表中匹配此帧的目的地址，找到对应的接口并转发。</li>\n<li>在网桥的转发表中写入的信息除了地址和接口外，还有帧进入网桥的时间，因为\n<ul>\n<li>拓扑可能经常变化</li>\n<li>站点也可能会更换适配器 (这就改变了站点的地址)</li>\n<li>站点并非总是处于工作状态</li>\n<li>把每个帧到达网桥的时间登记下来，就可以在转发表中只保留网络拓扑的最新状态信息，使得网桥中的转发表能反映当前网络的最新拓扑</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_53\" /></p>\n<ol>\n<li>问题：网络上的设备要发送数据但不知道目标地址时。\n<ul>\n<li>向网络上的所有设备发送<strong>广播</strong>。因为希望数据帧能够发送到全网，尽可能到达目的地</li>\n<li>由于网络上的每个设备都必须注意此类广播，因此<strong>网桥始终会转发这些广播</strong>。</li>\n</ul>\n</li>\n<li>广播过多会导致<strong>广播风暴</strong>，并且可能导致：\n<ul>\n<li>网络延时 (network time-outs)</li>\n<li>交通减速 (traffic slowdowns)</li>\n<li>低于可接受的性能</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"源路由网桥\"><a class=\"anchor\" href=\"#源路由网桥\">#</a> 源路由网桥</h4>\n<ol>\n<li>发送帧时将详细的路由信息放在帧的首部中，从而使每个经过的网桥都了解帧的路径</li>\n<li>在令牌环网络中被广泛使用</li>\n<li>原理 —— 源站以广播方式向目的站发送一个发现帧，每个发现帧都记录所经过的路由。发现帧到达目的站时就沿各自的路由返回源站。源站在得知这些路由后，从所有可能的路由中选择出一个最佳路由。凡从该源站向该目的站发送的帧的首部，都必须携带源站所确定的这一路由信息。</li>\n</ol>\n<h3 id=\"switches\"><a class=\"anchor\" href=\"#switches\">#</a> Switches</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_54\" /></p>\n<p>执行两个基本操作：</p>\n<ol>\n<li>帧交换：在输入介质 (medium) 上接收帧，然后将其传输到输出介质</li>\n<li>维护交换操作：交换器建立和维护交换表并搜索回路。 路由器构建并维护路由表和交换表。(STB 协议避免回路)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_55\" /></p>\n<p>交换机可以分离冲突域。</p>\n<p>交换是一项通过减少流量和提高带宽来缓解以太网 LAN 拥塞 (alleviates congestion) 的技术.</p>\n<ol>\n<li>交换机创建专用 (dedicated) 的网段或点对点连接，并将这些网段连接到交换机内的虚拟网络中。</li>\n<li>之所以称为<strong>虚拟电路</strong>，是因为它仅在两个端口需要通信时才存在，并且在交换机内建立。网桥内部有一个高带宽的总线 (一般内部母线带宽是端口带宽的 10 倍)</li>\n<li>您可以将每个交换机端口视为一个微桥 (micro-bridge)。该过程称为微分段 (microsegmentation)。</li>\n<li>每个交换机端口将介质的全部带宽提供给每个主机</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_56\" /></p>\n<p>局域网交换机可减少冲突域的大小</p>\n<p>但是，连接到交换机的所有主机仍位于同一广播域中。</p>\n<ol>\n<li>也就是说，通过 LAN 交换机连接的所有其他节点仍将看到来自一个节点的广播。</li>\n<li><strong>交换机不能划分广播域</strong> (端口 -&gt; 所有端口转发)</li>\n</ol>\n<p>交换机连接的是一个局域网，而路由器连接的是不同局域网。</p>\n<h4 id=\"交换机划分冲突域\"><a class=\"anchor\" href=\"#交换机划分冲突域\">#</a> 交换机划分冲突域</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_57\" /></p>\n<ol>\n<li>\n<p>转发的速度明显加快，因为它们在<strong>硬件</strong>中进行切换，而网桥在<strong>软件</strong>中进行切换。</p>\n</li>\n<li>\n<p>可以使用交换机连接 10 Mbps 以太网 LAN 和 100 Mbps 以太网 LAN。</p>\n</li>\n<li>\n<p>在交换式以太网实现中，可用带宽可以接近 100％。</p>\n</li>\n<li>\n<p>共享以太网网络的容量不足其全部容量的 30％至 40％时，其性能最佳。</p>\n</li>\n<li>\n<p>一些交换机支持直通交换，这减少了延迟和延迟，而网桥仅支持存储转发交换 (存储转发，存下来检验转发)</p>\n<p>直通交换：快速转发，不做校验，只看前 6 字节的 MAC 地址（目的地址）。局域网下，网速比较快，传输速率高，网线比较短，可以认为是基本没有错误的，所以可以进行直通转发</p>\n</li>\n</ol>\n<h3 id=\"路由器分割广播域和冲突域\"><a class=\"anchor\" href=\"#路由器分割广播域和冲突域\">#</a> 路由器分割广播域和冲突域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_58\" /></p>\n<ol>\n<li>路由器可以创建最高级别的细分：\n<ol>\n<li>创建较小的<strong>碰撞域</strong></li>\n<li>创建较小的<strong>广播域</strong>：除非经过编程，否则路由器不会转发广播。</li>\n</ol>\n</li>\n<li>路由器通过检查数据包上的<strong>目标逻辑地址</strong>，然后在其路由表中查找转发指令来完成数据包的转发</li>\n<li>由于路由器比网桥执行更多的功能，因此它们以更高的延迟率运行。</li>\n<li>路由器可以用作<strong>网关</strong>，用于连接不同的网络媒体和不同的 LAN 技术</li>\n<li>是根据逻辑地址 (<strong>IP 地址</strong>) 进行转发，不再是 MAC</li>\n</ol>\n<p><strong>路由器可以分割广播域</strong></p>\n<h3 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h3>\n<p>Service Set Identifier(SSID)</p>\n<p>主动扫描，较为安全，不用发送 SSID</p>\n<p>被动扫描，存在安全隐患，会潜在 SSID</p>\n<h3 id=\"无线局域网帧结构有考试要求\"><a class=\"anchor\" href=\"#无线局域网帧结构有考试要求\">#</a> 无线局域网帧结构（有考试要求）</h3>\n<p>以太帧不能超过 1518 字节，而无线帧则可能高达<strong> 2346 字节</strong>。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VuZ2luZWVyX2phbWVzL2FydGljbGUvZGV0YWlscy8xMDI2MjUzMjQ=\">帧结构</span></p>\n<p>持续期 —— 告诉周边节点正在发送，避免发生冲突</p>\n<h2 id=\"第二层设备-2\"><a class=\"anchor\" href=\"#第二层设备-2\">#</a> 第二层设备</h2>\n<h3 id=\"nic网卡\"><a class=\"anchor\" href=\"#nic网卡\">#</a> NIC 网卡</h3>\n<p><strong>网络接口控制器</strong>（英语：network interface controller，NIC）</p>\n<p>是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件。</p>\n<h3 id=\"网桥\"><a class=\"anchor\" href=\"#网桥\">#</a> 网桥</h3>\n<h4 id=\"透明网桥-2\"><a class=\"anchor\" href=\"#透明网桥-2\">#</a> 透明网桥</h4>\n<p>缓存是 RAM，从开始时是空表，到逐渐学习记录。</p>\n<h4 id=\"源路由网桥-2\"><a class=\"anchor\" href=\"#源路由网桥-2\">#</a> 源路由网桥</h4>\n<p>ROM —— Read-Only Memory</p>\n<p>只读储存器 ，对于电脑来讲就是硬盘，对于手机来讲就是内置储存，对于单片机来讲就是 Flash。用于存放操作系统的软件。ROM 可以在掉电的情况下，依然保存原有的数据。</p>\n<p>RAM —— Random-Access Memory</p>\n<p>随机储存器 ，就是电脑的内存条。用于存放动态数据。(也叫运行内存) 系统运行的时候，需要把操作系统从 ROM 中读取出来，放在 RAM 中运行。RAM 为随机存储，掉电不会保存数据</p>\n<h3 id=\"交换机\"><a class=\"anchor\" href=\"#交换机\">#</a> 交换机</h3>\n<p>可以划分冲突域，但是不能够隔绝广播域。</p>\n<p>交换机连接的是一个局域网，而路由器连接的是不同局域网。</p>\n<p>一些交换机<strong>支持直通交换</strong>，这减少了延迟和延迟，而网桥仅支持<strong>存储转发交换 (存储转发，存下来检验转发)</strong>。</p>\n<ol>\n<li>直通交换：快速转发，不做校验，只看前 6 字节的 MAC 地址。</li>\n<li>局域网：网速比较快，传输速率高，网线比较短，可以认为是基本没有错误的，所以可以进行直通转发</li>\n</ol>\n<p>SDN 只用交换机做控制，不用路由器做控制。</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "title": "Lecture14-模板",
            "date_published": "2023-02-08T09:49:10.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140245554.png\" alt=\"image-20221213140245554\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140325903.png\" alt=\"image-20221213140325903\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140639104.png\" alt=\"image-20221213140639104\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140700118.png\" alt=\"image-20221213140700118\" /></p>\n<p>反而变得复杂、可读性变差</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140851851.png\" alt=\"image-20221213140851851\" /></p>\n<p>添加新的声明 <code>template &lt;typename T&gt;</code></p>\n<p>使用 typename 来声明类型参数而不是 class，防止产生歧义。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142015728.png\" alt=\"image-20221213142015728\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142501077.png\" alt=\"image-20221213142501077\" /></p>\n<p>如何处理 max (x,m) 的处理【x 和 m 的类型不一样】？</p>\n<p>可以定义一个 max 的重载函数。</p>\n<p>非模板函数、模板函数（显式具体化）、重载函数 —— 编译器会优先调用重载函数、显式具体化的模板函数，然后是非模板函数，不会出现歧义。函数模板和函数重载可以配合在一起使用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142850552.png\" alt=\"image-20221213142850552\" /></p>\n<p>类也可以模板化。</p>\n<p>左边是初始版本，右边是类模板。</p>\n<p>在类外定义函数的时候，需要再次声明类型参数 T。 <code>template &lt;class T&gt;</code></p>\n<p>创建的时候需要显式实例化，int 和 double 的 Stack 是两个类。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143356564.png\" alt=\"image-20221213143356564\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143809099.png\" alt=\"image-20221213143809099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144212201.png\" alt=\"image-20221213144212201\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144522445.png\" alt=\"image-20221213144522445\" /></p>\n<p>cpp 完整的定义通常定义在头文件中</p>\n<p>file2.cpp 找不到 max 定义，也找不到完整的 S 代码</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144541044.png\" alt=\"image-20221213144541044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213150026993.png\" alt=\"image-20221213150026993\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141328851.png\" alt=\"image-20221220141328851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141344849.png\" alt=\"image-20221220141344849\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141355901.png\" alt=\"image-20221220141355901\" /></p>\n<p>输入输出流的重定向</p>\n<p>先新建一个输入流  <code>ifstream in(&quot;in.txt&quot;);</code></p>\n<p>保存输入流</p>\n<p>重置输入流</p>\n<p>测试用例可以从文件读入并输出到文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141909130.png\" alt=\"image-20221220141909130\" /></p>\n<p>不能作为类的成员函数进行重载</p>\n<p>不正确的解决方案</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141922509.png\" alt=\"image-20221220141922509\" /></p>\n<p>正确的解决方案</p>\n<p>非虚函数进行虚化，非虚接口。</p>\n<p>全局函数针对不同的类也有派生类。调用虚函数。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141942718.png\" alt=\"image-20221220141942718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142000257.png\" alt=\"image-20221220142000257\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142011316.png\" alt=\"image-20221220142011316\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142028306.png\" alt=\"image-20221220142028306\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture13-newdelete/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture13-newdelete/",
            "title": "Lecture13-newdelete",
            "date_published": "2023-02-08T09:49:01.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152207062.png\" alt=\"image-20221208152207062\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152217123.png\" alt=\"image-20221208152217123\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152525691.png\" alt=\"image-20221208152525691\" /></p>\n<p>如何记录可用的位置？</p>\n<p>用数组或者链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153029941.png\" alt=\"image-20221208153029941\" /></p>\n<p>如何 new</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153043266.png\" alt=\"image-20221208153043266\" /></p>\n<p>如何 delete</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153107962.png\" alt=\"image-20221208153107962\" /></p>\n<p>自嵌入链表形式的缺点：</p>\n<p>？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153833507.png\" alt=\"image-20221208153833507\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153642961.png\" alt=\"image-20221208153642961\" /></p>\n<p>这样可以减少 new 和 delete 的次数</p>\n<p>使用 template 推广到其他使用场景。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "title": "Lecture12-多态",
            "date_published": "2023-02-08T09:48:46.000Z",
            "content_html": "<h1 id=\"lecture12-多态\"><a class=\"anchor\" href=\"#lecture12-多态\">#</a> Lecture12 - 多态</h1>\n<p>&amp; 引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p>\n<p>引用的声明方法：类型标识符 &amp; 引用名 = 目标变量名；</p>\n<p>return *this 返回的是当前对象的克隆或者本身（若返回类型为 A， 则是拷贝， 若返回类型为 A&amp;， 则是本身 ）。return this 返回当前对象的地址（指向当前对象的指针）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206140630613.png\" alt=\"image-20221206140630613\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129140810020.png\" alt=\"image-20221129140810020\" /></p>\n<h2 id=\"操作符重载\"><a class=\"anchor\" href=\"#操作符重载\">#</a> 操作符重载</h2>\n<h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3>\n<ol>\n<li><strong>名同、参数不同</strong>，返回值不同没有用的：参数顺序、参数类型匹配 (找到最佳匹配)</li>\n<li>静态绑定</li>\n</ol>\n<h3 id=\"歧义控制\"><a class=\"anchor\" href=\"#歧义控制\">#</a> 歧义控制</h3>\n<p>最佳匹配:</p>\n<ol>\n<li>原则一：这个匹配每一个参数不必其他的匹配更差</li>\n<li>原则二：这个匹配有一个参数更精确匹配</li>\n</ol>\n<p>整型提升：标准转化都是一视同仁的（char to unsigned char, char to double）</p>\n<p>窄转换：是被允许的，把表数范围大的 赋值给表数范围小的叫做窄转换，特点是 不安全 不是自动的 可能会发生精度丢失 需要进行强制类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129141712045.png\" alt=\"image-20221129141712045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129142310557.png\" alt=\"image-20221129142310557\" /></p>\n<p>至少要包含一个用户自定义的类型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143856395.png\" alt=\"image-20221129143856395\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143908332.png\" alt=\"image-20221129143908332\" /></p>\n<h3 id=\"可重载的操作符\"><a class=\"anchor\" href=\"#可重载的操作符\">#</a> 可重载的操作符</h3>\n<p>操作符的重载本质上是函数的调用，不能够改变原来的语法</p>\n<p>不可以重载的操作符：</p>\n<p><code>.</code>  (成员访问操作符)、</p>\n<p><code>.*</code>  (成员指针访问运算符，如下)、</p>\n<p><code>::</code>  (域操作符)、</p>\n<p><code>?:</code>  (条件操作符)、</p>\n<p><code>sizeof</code>  也不重载</p>\n<ol>\n<li>原因：前两个为了防止类访问出现混乱</li>\n<li>:: 后面是名称不是变量</li>\n<li>?: 条件运算符是跳转和流程控制，重载之后会出现理解的偏差</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150203584.png\" alt=\"image-20221129150203584\" /></p>\n<ol>\n<li>格式: <code>&lt;ret type&gt;operator #(&lt;arg&gt;)</code></li>\n<li>this: 隐含，必然是第一个参数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150334475.png\" alt=\"image-20221129150334475\" /></p>\n<p>全局函数要有两个参数</p>\n<p>？不懂</p>\n<p>注意: <code>=</code> 、 <code>()</code> 、 <code>[]</code> 、 <code>-&gt;</code>  不可以作为全局函数重载</p>\n<ul>\n<li>大体上来讲，C++ 一个类本身对这几个运算符就已经有了相应的解释了。</li>\n<li>如果将这四种符号进行友元全局重载，则会出现一些冲突</li>\n<li>下标和箭头运算符为什么？有保留调用顺序，我们希望能保留原来的顺序，而全局不能要求，而成员函数的 this 就可以解决这个问题</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDc4MTEwNy9hcnRpY2xlL2RldGFpbHMvOTgxNDc5Mzg=\">参考</span></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129151553515.png\" alt=\"image-20221129151553515\" /></p>\n<p>需要支持一些交换律，全局函数可以作为补充</p>\n<p>全局函数作为补充：</p>\n<ol>\n<li>单目运算符、类型转换函数最好重载为类的成员函数（不存在上图出现的情况）（单目操作不需要补充）</li>\n<li>双目运算符最好重载为类的友元函数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141107489.png\" alt=\"image-20221206141107489\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141117260.png\" alt=\"image-20221206141117260\" /></p>\n<p>​\t返回什么值，由应用场景决定，返回右值的就要按值传递，临时变量。</p>\n<p>​\t四则运算大多数都是右值。</p>\n<p>​\t其他大多数都是左值。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141829112.png\" alt=\"image-20221206141829112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141838660.png\" alt=\"image-20221206141838660\" /></p>\n<p>prefix 和 postfix 是不一样的。</p>\n<p>prefix &amp; 返回引用</p>\n<p>postfix 返回值 dummy argument 传值没有用，仅作为区分</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> =</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206142025129.png\" alt=\"image-20221206142025129\" /></p>\n<p>如果程序员没有提供等号的操作符重载，编译器会提供默认的赋值操作符重载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值操作符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// A a (b); 拷贝构造函数</span></pre></td></tr></table></figure><p>必须同时有赋值操作符和拷贝构造函数。</p>\n<p>一个对象只能被初始化一次，所以需要有赋值。</p>\n<p>拷贝构造函数效率更高，且会被经常使用（函数的传参）。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144008728.png\" alt=\"image-20221206144008728\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>等号是右结合的</p>\n<p>a = b = c</p>\n<p>(a = b) = c</p>\n<p>可以按左值 -》传递引用</p>\n<p>内存可能不够？</p>\n<p>这段代码写得不好，应该<strong>先申请，再释放</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>temp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144737520.png\" alt=\"image-20221206144737520\" /></p>\n<p>上面那个代码如果出现 “自我赋值”，会出现错误，把数据删除了。</p>\n<p>解决方法 1：做一个额外的检测。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// rhs  right hand side</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加上正同测试</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上只是一个很简单的操作</span></pre></td></tr></table></figure><p>解决方法 2：先申请再释放可以解决。</p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> []</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206150836412.png\" alt=\"image-20221206150836412\" /></p>\n<p>可以有两个重载函数吗？可以。</p>\n<p>在前文歧义控制的最佳匹配中，可以解释，为什么 s 的构建会匹配第一个重载函数，cs 则会调用第二个重载函数。因为是” 更精确的匹配 “</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aacd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一个重载加上 const 可以使得 const 或者非 const 对象都可以调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span><span class=\"token char\">'const'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const 版本不想被赋值 (返回 const 的)，非 const 版本想要被赋值，之后再进行重载的时候就需要同时重载两个</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206152243321.png\" alt=\"image-20221206152243321\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153301599.png\" alt=\"image-20221206153301599\" /></p>\n<p>用于内存资源、多维数组的管理。</p>\n<p>wrapper</p>\n<p>隐式转换，explicit 禁用。</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> ()</h3>\n<p>函数调用、类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153818186.png\" alt=\"image-20221206153818186\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206154436607.png\" alt=\"image-20221206154436607\" /></p>\n<p>问题：为什么禁止在类外禁止重载赋值操作符？</p>\n<ol>\n<li>如果没有类内提供一个赋值操作符，则编译器会默认提供一个类内的复制操作符</li>\n<li>查找操作符优先查找类内，之后查找全局，所以全局重载赋值操作符不可能被用到</li>\n</ol>\n<h3 id=\"-\"><a class=\"anchor\" href=\"#-\">#</a> -&gt;</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208141511572.png\" alt=\"image-20221208141511572\" /></p>\n<p>CPanel 中有一个 CPen，需要修改 pen 的颜色</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPanel c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">getPen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 箭头重定义之后</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c<span class=\"token operator\">-></span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重载时按照一元操作符重载描述</p>\n<p>必须返回指针类型？不是，还可以返回一些能够进行箭头操作的引用。</p>\n<h3 id=\"prevent-memory-leak\"><a class=\"anchor\" href=\"#prevent-memory-leak\">#</a> prevent memory leak</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208143634290.png\" alt=\"image-20221208143634290\" /></p>\n<p>一定不会出现内存泄漏吗？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//return 的时候就没有办法 delete 了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以上是</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>多出口</strong>程序的处理出现了问题。</p>\n<ol>\n<li>\n<p>用 RAII 进行处理。将 <code>A *p = new A;</code>  写成  <code>AWrapper p(new A);</code> ，资源和对象同生命周期，栈上的对象一定会消亡，不需要管理多出口问题，且是可控的。</p>\n<p>将箭头操作符重载  <code>A *operator -&gt; () &#123; return p;&#125; </code>  使得申请的资源暴露，就像普通的指针一样使用。</p>\n</li>\n<li>\n<p>所有类型都需要写一个 wrapper 吗？</p>\n<p>不需要，利用泛型 / 模板解决。</p>\n</li>\n<li>\n<p>如此用 wrapper 封装，有什么局限性？</p>\n<p>资源和对象必须同生命周期。</p>\n<p>解决方法：例如，shared_ptr</p>\n</li>\n</ol>\n<h3 id=\"new-delete\"><a class=\"anchor\" href=\"#new-delete\">#</a> new、delete</h3>\n<p>new 和 delete 的操作步骤</p>\n<p>new</p>\n<ol>\n<li>获得一块内存空间</li>\n<li>调用构造函数</li>\n<li>返回一个正确的指针</li>\n</ol>\n<p>delete</p>\n<ol>\n<li>调用析构函数</li>\n<li>确定指向分配空间的指针</li>\n<li>归还内存空间</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144624639.png\" alt=\"image-20221208144624639\" /></p>\n<p>系统自助管理的缺点：系统频繁调用系统的存储管理，影响效率。并且会造成内存碎片。</p>\n<p>重载 new 和 delete 之后：程序自身管理内存，提高效率</p>\n<p>重载过的 new 和 delete 是静态成员：默认是 static，不能调用非静态函数</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144830546.png\" alt=\"image-20221208144830546\" /> 返回类型：void * ，不知道 new 什么类型</p>\n<p>返回参数：第一个参数是固定的，其他参数可有可无。系统知道要申请的大小，参数 size_t 是给程序员用的。</p>\n<p>new 是可以被继承的。</p>\n<p>定位 new   <code>A *p =  new (place) A</code></p>\n<p>可以自己在栈上申请一块内存，反复新建和销毁 A。好处是，效率高（？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208151134563.png\" alt=\"image-20221208151134563\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture11-%E7%BB%A7%E6%89%BF%E3%80%81%E8%99%9A%E5%87%BD%E6%95%B0/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture11-%E7%BB%A7%E6%89%BF%E3%80%81%E8%99%9A%E5%87%BD%E6%95%B0/",
            "title": "Lecture11-继承、虚函数",
            "date_published": "2023-02-08T09:47:48.000Z",
            "content_html": "<h1 id=\"lecture11-继承-虚函数\"><a class=\"anchor\" href=\"#lecture11-继承-虚函数\">#</a> Lecture11 - 继承、虚函数</h1>\n<p><strong>能声明成 const 就声明成 const</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115142752636.png\" alt=\"image-20221115142752636\" /></p>\n<h2 id=\"单继承\"><a class=\"anchor\" href=\"#单继承\">#</a> 单继承</h2>\n<ol>\n<li>\n<p>protected:</p>\n<ol>\n<li>如果没有继承的话，protected 和 private 是相同的</li>\n<li>派生类可以访问基类中 protected 的属性的成员。（student 可以访问自己的 id）</li>\n<li>派生类不可以访问<strong>基类中的对象</strong>的 protected 的属性。（Undergraduate_Student 不能访问自己引用的 student 的 protected 属性）</li>\n<li><strong>派生类含有基类的所有成员变量</strong></li>\n</ol>\n</li>\n<li>\n<p>class 和 struct 的默认权限<br />\n使用 <strong>class</strong> 时，类中的成员默认都是<strong> private</strong> 属性的；</p>\n<p>而使用 <strong>struct</strong> 时，结构体中的成员默认都是 <strong>public</strong> 属性的。</p>\n<p>class 继承默认是 private 继承，而 struct 继承默认是 public 继承</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115144636871.png\" alt=\"image-20221115144636871\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">//id 在 Undergraduated_Student 中仍然是私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> nickname<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">set_ID</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>id <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">strcpy</span> <span class=\"token punctuation\">(</span>nickname<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> dept_no<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学院编号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setDeptNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>dept_no <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">set_ID</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>……<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Student<span class=\"token double-colon punctuation\">::</span>nickname<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这样在才能修改可见性</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新定义了一个 private 方法，父类对应方法被隐藏</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Undergraduated_Student us<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>us<span class=\"token punctuation\">.</span><span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以吗？不可以，因为是新的名空间，重定义后面的名空间访问不到</span></pre></td></tr></table></figure><p>基类的方法，将函数指针传给派生类。</p>\n<p>虚函数，virtual，延迟到运行的时候确定调用的函数类型，和 java 类似。</p>\n<p><code>class Undergraduated_Studnet: public Student</code>  在函数定义的时候需要写出 Student</p>\n<h3 id=\"继承方式\"><a class=\"anchor\" href=\"#继承方式\">#</a> 继承方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115143338570.png\" alt=\"image-20221115143338570\" /></p>\n<h3 id=\"继承声明方式\"><a class=\"anchor\" href=\"#继承声明方式\">#</a> 继承声明方式</h3>\n<p>区分声明和定义，前向声明只是告诉别人有这个东西，定义要明确需要占用多少内存空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明的时候是不用声明继承的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 正确声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"基类和继承类的方法关系\"><a class=\"anchor\" href=\"#基类和继承类的方法关系\">#</a> 基类和继承类的方法关系</h3>\n<h4 id=\"基类与派生类中的showinfo访问\"><a class=\"anchor\" href=\"#基类与派生类中的showinfo访问\">#</a> 基类与派生类中的 showInfo 访问</h4>\n<p><strong>隐藏 (不是重写 / 覆盖)</strong>，隐藏基类的所有的 showInfo () 函数，重定义将名空间进行了覆盖</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">//id 在 Undergraduated_Student 中仍然是私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">char</span> nickname<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduated_Student</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> dept_no<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学院编号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span> dept_no <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> nickname <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Undergraduated_Student <span class=\"token operator\">*</span>student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Undergraduated_Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    student<span class=\"token operator\">-></span><span class=\"token function\">showInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不能够运行，在 undergraduated_student 里面设置之后，student 含参和无参的函数都没有了。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>区分重载、隐藏、重写（覆盖）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4MzUxNzI4OC9hcnRpY2xlL2RldGFpbHMvNDg5NzYwOTc=\">https://blog.csdn.net/zx3517288/article/details/48976097</span></p>\n<p>如何访问父类中被隐藏的函数？</p>\n<p>父类中的所有的函数都不可见：但是我们可以通过指定名空间来完成访问: <code>using Student::showInfo</code> , 所有的版本都可以见，这时候是重写。</p>\n<h4 id=\"继承权限修改\"><a class=\"anchor\" href=\"#继承权限修改\">#</a> 继承权限修改</h4>\n<ol>\n<li>class ABC : private XYZ        //private derivation</li>\n<li>class ABC : public XYZ        //public derivation</li>\n<li>class ABC : protected XYZ        //protected derivation</li>\n<li>class ABC: XYZ               //private derivation by default</li>\n</ol>\n<p>public 继承，protected 继承，private 继承</p>\n<h3 id=\"不可以被继承的部分\"><a class=\"anchor\" href=\"#不可以被继承的部分\">#</a> 不可以被继承的部分</h3>\n<ol>\n<li>\n<p>构造函数和析构函数是不可以被继承的：是对类进行初始化的，无法继承</p>\n</li>\n<li>\n<p>运算符重载函数也是不可以被继承的</p>\n</li>\n</ol>\n<h3 id=\"访问权限的修改方法\"><a class=\"anchor\" href=\"#访问权限的修改方法\">#</a> 访问权限的修改方法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Student<span class=\"token double-colon punctuation\">::</span>nickname<span class=\"token punctuation\">;</span><span class=\"token comment\">//char nickname [16]; 语法上没问题，没有将原来的 nickname 变为私有的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetNickName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新定义了一个 private 方法，父类对应方法被隐藏</span></pre></td></tr></table></figure><p>如果重新声明 <code>char nickname[16];</code> ， 并没有修改原来父类中 nickname 访问等级，语法无误，但是语义不对；</p>\n<h3 id=\"友元和protected\"><a class=\"anchor\" href=\"#友元和protected\">#</a> 友元和 protected</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153353920.png\" alt=\"image-20221115153353920\" /></p>\n<p><code>void clobber(Sneaky &amp;s)</code>  通过传入派生类访问基类的 protected 成员。 <code>void clovver(Base &amp;b) </code> 传入基类不能够访问。</p>\n<p>protected 只能由派生类来访问。否则只要声明某基类的派生类，就能够访问该基类的 protected 成员，绕过保护机制，随意访问保护成员。</p>\n<p>友元不具有传递性。不能通过成为派生类的友元而成为基类的友元。</p>\n<h2 id=\"继承的初始化\"><a class=\"anchor\" href=\"#继承的初始化\">#</a> 继承的初始化</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153818892.png\" alt=\"image-20221115153818892\" /></p>\n<p>4<img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115154011142.png\" alt=\"image-20221115154011142\" /></p>\n<p>没有在成员初始化表中指出，则调用默认构造函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> B<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>B <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 有 B 的 copy 构造函数，b2 的值 copy 错误，编译器无法明确是只 copy x 还是都 copy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b1 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>b2 <span class=\"token number\">0</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造函数调用顺序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如果没有 B 的 copy 构造函数，b2 的值 copy 正确</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>b1 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b2 <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 可以 copy x 的 copy 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> B<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>语法糖</p>\n<p><code>using A::A;</code>  继承 A 的构造函数</p>\n<h2 id=\"虚函数\"><a class=\"anchor\" href=\"#虚函数\">#</a> 虚函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122101802410.png\" alt=\"image-20221122101802410\" /></p>\n<p>类型相容：类型相同、派生类</p>\n<p>赋值相容（不丢失信息）：类型相同、派生类【发生<strong>对象切片</strong>，属于派生类的属性不复存在】</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A a<span class=\"token punctuation\">;</span> B b<span class=\"token punctuation\">;</span> a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 相当于调用了 A 的拷贝构造函数，调用哪个，取决于声明的变量是什么类型的</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103030879.png\" alt=\"image-20221122103030879\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tpa<span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 均调用 A 的 f</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103419160.png\" alt=\"image-20221122103419160\" /></p>\n<ol>\n<li>\n<p>前期绑定</p>\n<p>在编译的时候就可以确定【func1\\func2 在编译时就已经确定调用 A 的 f】</p>\n<p>cpp 默认前期绑定</p>\n</li>\n<li>\n<p>动态绑定</p>\n<p>java 虚拟机动态地决定调用哪个版本</p>\n</li>\n<li>\n<p>cpp 是一门注重效率的语言</p>\n<p>cpp 需要通过<strong>显式指出使用后期绑定</strong></p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103808406.png\" alt=\"image-20221122103808406\" /></p>\n<p>在方法前加 virtual 关键字动态绑定</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122103859475.png\" alt=\"image-20221122103859475\" /></p>\n<h3 id=\"限制\"><a class=\"anchor\" href=\"#限制\">#</a> 限制</h3>\n<ol>\n<li>成员函数才可以时虚函数，全局函数不能是虚函数</li>\n<li>静态成员函数通过类来调用，编译期间确定，相当于全局函数</li>\n<li>内联成员函数编译时要展开，在编译时需要确定</li>\n<li>构造函数，虚函数表需要构造函数构造，虚函数只有在声明基类指向子类的时候才会调用，构造函数不存在声明类型与构造函数的类型不一致的情况。没有实际意义。</li>\n<li>析构函数（子类会声明新的变量）</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122104329491.png\" alt=\"image-20221122104329491\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 a 的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 b 的函数</span></pre></td></tr></table></figure><p>如何确定调用哪个？传入一个虚函数表【vtable】</p>\n<p>如何确定虚函数表的偏移？传入一个虚函数指针，vpointer，确认排序，查找函数。</p>\n<p>如何实现查表的操作？ <code>(**((char *)p-4))(p) </code>    (char*) p -4，偏移 4 个字节，第一次解引用解出了虚函数表的指针，第二次解引用解出了 f 的函数指针。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122111714347.png\" alt=\"image-20221122111714347\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>B b<span class=\"token punctuation\">;</span><span class=\"token comment\">//A 的构造函数 A 的 f B 的构造函数，B 的构造函数还未调用，vtable 还没有改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// B::f</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// A::g g 是非虚函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// A::h, B::f, A::g</span></pre></td></tr></table></figure><p>构造函数不应该调用莫名其妙的东西（比如虚函数）</p>\n<p>直到构造函数返回之后，对象方可正常使用（虚函数表才构建好）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// B::f() B::g()</span></pre></td></tr></table></figure><p>虚函数调用非虚函数，类型变为一致。</p>\n<p>非虚函数调用虚函数，非虚函数就是非虚函数，虚函数就是虚函数。【 <strong>非虚接口</strong>， 可以用不同的虚函数来实现这个非虚函数，非虚函数调用虚函数来获得虚函数的特性】【实现算法骨架的复用】</p>\n<h3 id=\"final-override\"><a class=\"anchor\" href=\"#final-override\">#</a> final, override</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122113523933.png\" alt=\"image-20221122113523933\" /></p>\n<p>override 告诉编译器是一个虚函数的重定义。</p>\n<p>final 不能够再 override。</p>\n<p>不能够写成 <code>void f1(int) override</code> ， 这样更改了 f1 的类型</p>\n<p><code>void f2(int)</code>  名隐藏，不能够再调用 <code>d.f2()</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122114428240.png\" alt=\"image-20221122114428240\" /></p>\n<p>纯虚函数用于抽象类，抽象类用于框架中</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122114804082.png\" alt=\"image-20221122114804082\" /></p>\n<p>为什么不能直接设置 display 的空函数，而是设置纯虚函数？</p>\n<p>因为抽象类不能创建对象，而且会出现对象切片，出现在栈上（降低效率）；抽象类不能创建对象，只能通过指针和引用的方式传递参数，保证了一定会出现多态的特性。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221122115451339.png\" alt=\"image-20221122115451339\" /></p>\n<p>通过构建非虚函数 <code>CreateButton()</code> ，可以实现更好的代码复用</p>\n<p><strong>抽象工厂模式</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124141423470.png\" alt=\"image-20221124141423470\" /></p>\n<p>是否需要新的析构函数，看是否声明了新的成员变量。</p>\n<p>需要释放新的变量，与基类不同，需要新的析构函数，需要是虚函数。</p>\n<p>调用完 D 的析构函数后，就会调用 B 的析构函数。【<strong>倒着</strong>的次序调用】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124142320235.png\" alt=\"image-20221124142320235\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">*</span>p_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p_a <span class=\"token operator\">-></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 打印 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A <span class=\"token operator\">*</span>p_a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>C c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p_a1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p_a1 <span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 打印 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 如果 class C:public B 仍然打印 0</span></pre></td></tr></table></figure><p>编译器不知道指针指向谁，默认参数值为声明的类型的默认值。</p>\n<p>从效率的角度出发，没有动态绑定参数值，参数值相当于一个全局或者静态的变量，不被改变。</p>\n<p>只有虚函数表示动态的，默认参数是静态的。</p>\n<h3 id=\"公有继承-is_a\"><a class=\"anchor\" href=\"#公有继承-is_a\">#</a> 公有继承 is_a</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124143344316.png\" alt=\"image-20221124143344316\" /></p>\n<p>（嘿嘿公开继承应该不考</p>\n<p><strong>前置条件更弱，后置条件更强。</strong></p>\n<p>比如 base.f (x)，参数要求正整数，返回 int；derive.f (x)，参数要求整数，返回 int 的子集。以上，derive.f (x) 就可以替代 base.f (x)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//v1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不修改的声明为 const 是好习惯</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">// 设置为 private 可以避免父类的方法被单独调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前后校验不变式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Square <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Rectangle <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">;</span><span class=\"token comment\">// 即使 square 声明成 private 方法，改成 rectangle 指针之后，还是可以调用方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p<span class=\"token operator\">-></span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//v2 添加虚函数声明</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span><span class=\"token comment\">// 注意是 public 的</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 问题：如下的操作如果传入正方形</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Widen</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> oldHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原来的高和现在的高不一致，长宽一起增加了</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//v3</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setLength</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span><span class=\"token comment\">// 修改为 private</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 完全无效，编译时函数即被确定</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Widen</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    r<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 编译的时候检查 rectangle 是 public 的，可以通过编译。</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 之后调用的时候发现是虚函数，然后从虚函数表能找到 private 的函数，并且调用。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> oldHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>长方形的性质和正方形的性质不兼容</p>\n<p>程序中的基类和子类，与生活中的一般与特殊并不一致</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    <span class=\"token keyword\">void</span> <span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>D x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>B<span class=\"token operator\">*</span> pB <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pB<span class=\"token operator\">-></span><span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//B:mf</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>D<span class=\"token operator\">*</span> pD <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pD<span class=\"token operator\">-></span><span class=\"token function\">mf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//D:mf</span></pre></td></tr></table></figure><p>同一个对象更换指针，就出现了不同的行为。实际上是更换了名空间。</p>\n<p>修改：不要定义继承而来的同名函数。</p>\n<h3 id=\"私有继承-has_a\"><a class=\"anchor\" href=\"#私有继承-has_a\">#</a> 私有继承 has_a</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124151137410.png\" alt=\"image-20221124151137410\" /></p>\n<p>实际上是 Has-A 关系（is a，是这个类的一种，继承，派生类是一个基类对象；has a, 含有这个类，包含，在派生类中拥有一个基类对象）</p>\n<p>Student 私有继承 HumanBeing，则不能够调用 b.eat。</p>\n<p>函数参数无法从派生类隐式转换为基类：如果两个类的继承是私有的，则不能在派生类外将派生类转换成基类对象。不能在派生类外部隐式转化。</p>\n<p>一般私有继承是很罕见的，仅是可以使用基类的 protected 成员。</p>\n<h3 id=\"虚函数的使用情景\"><a class=\"anchor\" href=\"#虚函数的使用情景\">#</a> 虚函数的使用情景</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124152246426.png\" alt=\"image-20221124152246426\" /></p>\n<p>纯虚函数 —— 每个派生类依赖小，自己实现自己的。</p>\n<p>一般虚函数 —— 覆盖功能多，派生类只需要修改部分。依赖性强。</p>\n<p>非虚函数 —— 绝对不要重定义。保证所有的行为一致。</p>\n<h2 id=\"多继承\"><a class=\"anchor\" href=\"#多继承\">#</a> 多继承</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124152817915.png\" alt=\"image-20221124152817915\" /></p>\n<h3 id=\"名冲突\"><a class=\"anchor\" href=\"#名冲突\">#</a> 名冲突</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153222563.png\" alt=\"image-20221124153222563\" /></p>\n<p>出现名冲突的问题，Bed 和 Sofa 同时都有 SetWeight ()</p>\n<p>如何解决名冲突的问题：</p>\n<ol>\n<li>都是自己设计 —— 基类分解 Base-Class Decomposition，形成<strong>格</strong>的结构</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153341543.png\" alt=\"image-20221124153341543\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153456359.png\" alt=\"image-20221124153456359\" /></p>\n<ol start=\"2\">\n<li>不是自己设计的类 —— 用<strong>名空间的调用</strong>来消除名冲突</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124153711861.png\" alt=\"image-20221124153711861\" /></p>\n<h3 id=\"虚基类\"><a class=\"anchor\" href=\"#虚基类\">#</a> 虚基类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124154018657.png\" alt=\"image-20221124154018657\" /></p>\n<p>virtual public 和 public virtual 等价</p>\n<p>虚基类什么时候构造？D 只有一个 A，不能有两个 A。D 先构造 A，BC 不再构造 A。所有对象中只有一个 A 的对象。解决了在菱形设计中名冲突的问题。</p>\n<h3 id=\"内存存储\"><a class=\"anchor\" href=\"#内存存储\">#</a> 内存存储</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221124154455909.png\" alt=\"image-20221124154455909\" /></p>\n<p>多继承有多个虚函数表指针 B1、B2、B3。</p>\n<p>B1、B2 中都有 virtual 的 f，那么 D 重写，父类中的虚函数 f 全部都被重写。</p>\n<h1 id=\"期末题型\"><a class=\"anchor\" href=\"#期末题型\">#</a> 期末题型</h1>\n<p>读程序理解（编译是否正确，如果错误，在哪里出了错) 要么得分，要么没分</p>\n<p>手写代码</p>\n<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">using</span> B<span class=\"token double-colon punctuation\">::</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  B <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115152301500.png\" alt=\"image-20221115152301500\" /></p>\n<p>只能修改原来就是可见（public）的</p>\n<p>x 原本就没有权限</p>\n<h2 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  D <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 打印出来为 0，调用的是 B 的 getY</span></pre></td></tr></table></figure><h2 id=\"3\"><a class=\"anchor\" href=\"#3\">#</a> 3</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  D <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里多了参数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 打印出来是 10</span></pre></td></tr></table></figure><h2 id=\"4\"><a class=\"anchor\" href=\"#4\">#</a> 4</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    x <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  B <span class=\"token operator\">*</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> D<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里声明为 B</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//B 中没有无参数的 setX 函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  pb<span class=\"token operator\">-></span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221115153218615.png\" alt=\"image-20221115153218615\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture06-PriorityQueue/",
            "title": "Lecture06-PriorityQueue",
            "date_published": "2022-12-05T08:26:39.000Z",
            "content_html": "<p>最大堆、最小堆、堆排序、代码实现。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture06-proiority-queues优先级队列\"><a class=\"anchor\" href=\"#lecture06-proiority-queues优先级队列\">#</a> Lecture06-Proiority Queues 优先级队列</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>A priority queue is a collection of zero or more elements. Each  element has a priority or value.</p>\n<p>一个优先级队列是 0 个或者更多元素的集合。每一个元素都有一个优先级或者值</p>\n<p>进入队列的时候有优先级，出队列优先出高优先级的.</p>\n<h3 id=\"如何确定优先级\"><a class=\"anchor\" href=\"#如何确定优先级\">#</a> 如何确定优先级</h3>\n<p>以下我们确定元素的优先级是通过数字的大小来确定。</p>\n<ol>\n<li>\n<p>In a min priority queue the find operation finds the element with  minimum priority, while the delete operation delete this  element.</p>\n<p>在最小优先级队列中，当需要删除一个元素的时候，我们找到优先级最小的元素来删除</p>\n</li>\n<li>\n<p>In a max priority queue, the find operation finds the element with  maximum priority, while the delete operation delete this  element.</p>\n<p>在最大优先级队列中，当需要删除一个元素的时候，我们找到优先级最大的元素来删除</p>\n</li>\n</ol>\n<h3 id=\"adt逻辑上最大优先级队列\"><a class=\"anchor\" href=\"#adt逻辑上最大优先级队列\">#</a> ADT (逻辑上最大优先级队列)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205130741555.png\" alt=\"image-20221205130741555\" /></p>\n<h2 id=\"heap\"><a class=\"anchor\" href=\"#heap\">#</a> Heap</h2>\n<p>A max heap (min Heap):(最大堆)</p>\n<ol>\n<li>\n<p>is A complete binary tree</p>\n<p>最大堆是一个完全二叉树</p>\n</li>\n<li>\n<p>The value in each node is greater(less) than or equal to those in its children(if any).</p>\n<p>每一个节点上的值都大于 (小于) 或者等于他的子节点 (如果有的话)</p>\n</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/1.png\" alt=\"img\" /></a></p>\n<p>最大堆：节点比自己的每个子节点都大</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/2.png\" alt=\"img\" /></a></p>\n<p>最小堆：节点比自己的每个子节点都笑</p>\n<p>注意：完全二叉树可以用矩阵来进行存储。</p>\n<ul>\n<li>从上向下一层一层进行记录。</li>\n</ul>\n<h3 id=\"最大优先级队列的代码实现\"><a class=\"anchor\" href=\"#最大优先级队列的代码实现\">#</a> 最大优先级队列的代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131454054.png\" alt=\"image-20221205131454054\" /></p>\n<h4 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131644445.png\" alt=\"image-20221205131644445\" /></p>\n<h4 id=\"插入算法\"><a class=\"anchor\" href=\"#插入算法\">#</a> 插入算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131713780.png\" alt=\"image-20221205131713780\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205131734821.png\" alt=\"image-20221205131734821\" /></p>\n<p>首先，将插入元素插入到堆的最后；然后，经过反复操作【和父节点比优先级】，一直比较直到比父节点小为止。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132008168.png\" alt=\"image-20221205132008168\" /></p>\n<p>用数组模拟完全二叉树，可以用<strong>常数时间复杂度</strong>求出它的父节点下标；</p>\n<p>为什么堆排序中，i/2 是父节点？</p>\n<p>直观感受：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132744256.png\" alt=\"image-20221205132744256\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132754856.png\" alt=\"image-20221205132754856\" /></p>\n<p>推导：</p>\n<p>利用等比数列求和</p>\n<p>第 n 行的第 a 个元素在数组中下标为：2<sup>n</sup> + a - 1</p>\n<p>第 n 行的第 2a - 1 和 2a 个元素在数组中的下标为：2<sup>n+1</sup> + 2a 和 2<sup>n+1</sup> + 2a - 1</p>\n<h4 id=\"删除算法\"><a class=\"anchor\" href=\"#删除算法\">#</a> 删除算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205132925899.png\" alt=\"image-20221205132925899\" /></p>\n<p>最大堆删除<br />\n树根删除，最后一个节点放到树根</p>\n<p>下滤：左节点和右节点比较，较大的和父节点相比，如果父节点较大，循环结束，否则，换完继续和子节点比较。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205133015811.png\" alt=\"image-20221205133015811\" /></p>\n<p><code>ci &lt; CurrentSize &amp;&amp; heap[ci] &lt; heap[ci + 1] </code></p>\n<p>对比一下，左子节点和右子节点哪个更大。跟大的那个进行比较，不断进行下滤的操作。</p>\n<h4 id=\"minheap的实现cpp代码实现\"><a class=\"anchor\" href=\"#minheap的实现cpp代码实现\">#</a> minHeap 的实现（cpp 代码实现）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142159835.png\" alt=\"image-20221205142159835\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142257272.png\" alt=\"image-20221205142257272\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142318851.png\" alt=\"image-20221205142318851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142445030.png\" alt=\"image-20221205142445030\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142524014.png\" alt=\"image-20221205142524014\" /></p>\n<h4 id=\"初始化一个非空的最大优先级数列自底向上\"><a class=\"anchor\" href=\"#初始化一个非空的最大优先级数列自底向上\">#</a> 初始化一个非空的最大优先级数列（自底向上）</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/8.png\" alt=\"img\" /></a></p>\n<p>把初始指针指向最后一个节点的父结点 (N/2), 然后进行循环，然后每一个都换一遍就完成。</p>\n<p>总体来讲是从最后一个节点的父结点开始，对所有的非叶节点进行下滤操作。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205142925609.png\" alt=\"image-20221205142925609\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205143139842.png\" alt=\"image-20221205143139842\" /></p>\n<h4 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h4>\n<p>对于不同层的节点，其下滤的计算量时不同的</p>\n<p>如何从感觉上立即这个问题 —— 在数据的开始是不会到 <code>lgn</code>  的，而只有到后面的时候才能达到 <code>lgn(lgn = log2n)</code></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/9.png\" alt=\"img\" /></a></p>\n<p>第 <code>i</code>  层需要交换 <code>k-i</code>  次，该层中有 2<sup>i</sup> 个结点</p>\n<p><code>i </code> 到 根的距离， <code>j </code> 到 叶的距离</p>\n<p><strong>O(n)</strong> 的算术复杂度</p>\n<h4 id=\"自上向下的初始化操作\"><a class=\"anchor\" href=\"#自上向下的初始化操作\">#</a> 自上向下的初始化操作</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/10.png\" alt=\"img\" /></a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEwNjg3MDIvYXJ0aWNsZS9kZXRhaWxzLzUyNzEyNjM0\">最详细的最小堆构建、插入、删除的过程图解</span></p>\n<h2 id=\"优先级队列的应用\"><a class=\"anchor\" href=\"#优先级队列的应用\">#</a> 优先级队列的应用</h2>\n<h3 id=\"堆排序容易考\"><a class=\"anchor\" href=\"#堆排序容易考\">#</a> 堆排序 (容易考)</h3>\n<h4 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h4>\n<ol>\n<li>\n<p>initialize a max heap with the n elements to be sorted O(n)</p>\n<p>初始化一个 n 个元素的最大堆，O (n)</p>\n</li>\n<li>\n<p>each time we delete one element, then adjust the heap O(log2n)</p>\n<p>每次我们删除最大的元素，调整堆的时间复杂度为 O (log2n)</p>\n</li>\n<li>\n<p>Time complexity is O(n)+O(n<em>log2n)= O(n</em>log2n)</p>\n<p>对于所有情况，堆排序的复杂度都是  <code>nlgn</code></p>\n</li>\n</ol>\n<h4 21,25,49,25*,16,08=\"\" id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子:</h4>\n<p>25 为什么有个星号？因为数组里面有两个 25</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/11.png\" alt=\"img\" /></a></p>\n<p>删除 49，8 放到根的位置，49 放到 8 的位置。</p>\n<p>堆排序每次删除最大的，然后把最大的放到最下方节点，把节点交换到顶部后进行下滤算法。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/12.png\" alt=\"img\" /></a></p>\n<p>堆排序是<strong>不稳定</strong>的：因为相同数据的相对位置改变</p>\n<p>稳定：25 25<em> 的相对位置不变<br />\n不稳定：25 25</em> 的相对位置改变</p>\n<h4 id=\"堆排序代码实现\"><a class=\"anchor\" href=\"#堆排序代码实现\">#</a> 堆排序代码实现（？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144226520.png\" alt=\"image-20221205144226520\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144440890.png\" alt=\"image-20221205144440890\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205144457500.png\" alt=\"image-20221205144457500\" /></p>\n<p>堆排序可视化网站：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9IZWFwU29ydC5odG1s\">https://www.cs.usfca.edu/~galles/visualization/HeapSort.html</span></p>\n<h2 id=\"the-selection-problem-查找问题\"><a class=\"anchor\" href=\"#the-selection-problem-查找问题\">#</a> The Selection Problem 查找问题</h2>\n<p>问题描述：在 N 个元素中找出第 K 个最大元素。</p>\n<ol>\n<li>1A 算法：读入 N 个元素放入数组， 并将其选择排序，返回适当的元素。算法时间复杂度：O (N2)</li>\n<li>1B 算法:\n<ol>\n<li>将 K 个元素读入数组，并对其排序 (按递减次序)。最小者在第 K 个位置上。</li>\n<li>一个一个地处理其余元素：每读入一个元素与数组中第 K 个元素 (在 K 个元素中为最小) 比较，如果大于，则删除第 K 个元素，再将该元素放在合适的位置上 (调整过程)。如果小于，则舍弃。最后在数组 K 位置上的就是第 K 个最大元素。</li>\n<li>运行时间 (1B 算法)： O (K2 + (N - K)<em>K ) = O( N</em>K ) 当 K = N / 2 (向上取整),   O ( N<sup>2</sup>)</li>\n</ol>\n</li>\n<li>例如：3, 5, 8, 9, 1, 10，找第 3 个最大元素。</li>\n</ol>\n<h3 id=\"421-用堆来解决当前问题\"><a class=\"anchor\" href=\"#421-用堆来解决当前问题\">#</a> 4.2.1. 用堆来解决当前问题</h3>\n<ol>\n<li>6A 算法：假设求第 K 个最小元素\n<ol>\n<li>将 N 个元素建堆 (最小) O ( N )</li>\n<li>执行 K 次 delete，O (K*logN) O ( N + K * log N )\n<ol>\n<li>如果 K = (N/2)(向上取整)，O ( N * log N )</li>\n<li>如果 K = N ，O (N * log N) 堆排序</li>\n</ol>\n</li>\n<li>如果是 N 取代最后一个是 nlgn，可以考虑使用不同的情况来确定建立最大堆还是最小堆。</li>\n</ol>\n</li>\n<li>6B 算法：假设求第 K 个最大元素\n<ol>\n<li>读入前 K 个元素， 建立最小堆 O (K)</li>\n<li>其余元素一一读入：每读入一个元素与堆中第 K 个最大元素比 (实际上是堆中最小元素) O (1)\n<ul>\n<li>大于，则将小元素去掉 (堆顶)，该元素进入，进行一次调整。O (log K )</li>\n<li>小于，则舍弃。</li>\n</ul>\n</li>\n<li>O( K + ( N-K) * log K ) = O( N*log K)</li>\n<li>当 K = (N/2)(向上取整) ,  θ(N * log N )</li>\n</ol>\n</li>\n<li>对 6A, 6B, 用同样的数据进行测试， 只需几秒钟左右给出问题解。</li>\n</ol>\n<h2 id=\"例题2009统考题\"><a class=\"anchor\" href=\"#例题2009统考题\">#</a> 例题：2009 统考题</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/14.png\" alt=\"img\" /></a></p>\n<ol>\n<li>答案：A</li>\n<li>直接按照顺序一行一行生成。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt8/13.png\" alt=\"img\" /></a></p>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "url": "https://quas-modo.github.io/2022/12/05/dataStructure/Lecture05-Hash/",
            "title": "Lecture05-Hash",
            "date_published": "2022-12-05T08:26:21.000Z",
            "content_html": "<p>不同的散列方式。<br />\n取余法、平方取中法、乘法杂凑法、线性探测法 linear probing、二次探测法 quadratic probing、双散列函数 double hashing、分离链接法 separate chainging。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture05-散列函数\"><a class=\"anchor\" href=\"#lecture05-散列函数\">#</a> Lecture05 - 散列函数</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>散列表 (Hash function/name-address function)</p>\n<p>Address = hash (key)，将搜索的复杂度降到<strong>常数复杂度 O (C)</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221204234733417.png\" alt=\"image-20221204234733417\" /></p>\n<p>如何解决冲突？</p>\n<p>α=n / b</p>\n<p>n 是元素个数，b 是桶的数目</p>\n<h2 id=\"散列函数\"><a class=\"anchor\" href=\"#散列函数\">#</a> 散列函数</h2>\n<h3 id=\"取余法\"><a class=\"anchor\" href=\"#取余法\">#</a> 取余法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/2.png\" alt=\"img\" /></a></p>\n<p>大小通常取最大质数，避免造成散列中存在始终未用到的部分。</p>\n<h3 id=\"平方取中法\"><a class=\"anchor\" href=\"#平方取中法\">#</a> 平方取中法</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/3.png\" alt=\"img\" /></a></p>\n<p>先进行原来的数据进行平方，然后取<strong>八进制</strong>，再选取中间的合适部分。</p>\n<h3 id=\"乘法杂凑函数\"><a class=\"anchor\" href=\"#乘法杂凑函数\">#</a> 乘法杂凑函数</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/4.png\" alt=\"img\" /></a></p>\n<p>M 是表长？<br />\n用一个无理数乘 key 值然后丢掉整数得到小数部分。</p>\n<h3 id=\"针对字符串-1\"><a class=\"anchor\" href=\"#针对字符串-1\">#</a> 针对字符串 - 1</h3>\n<p>to add up the ASCII (or Unicode) value of the characters in  the string. 把字符串中的每一个字符的 ASCII 值或者 Unicode 值相加</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> hashVal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashVal <span class=\"token operator\">+=</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span> i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> hashVal <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果字符串长度很短，那么会集中在前面的散列表</p>\n<h3 id=\"针对字符串-2\"><a class=\"anchor\" href=\"#针对字符串-2\">#</a> 针对字符串 - 2</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/5.png\" alt=\"img\" /></a></p>\n<p>前面乘一个乘数，把数据打散</p>\n<h2 id=\"如何解决散列表冲突问题\"><a class=\"anchor\" href=\"#如何解决散列表冲突问题\">#</a> 如何解决散列表冲突问题</h2>\n<p>碰撞的两个 (或多个) 关键码称为同义词，即 H (k1)=H (k2),k1 不等于 k2</p>\n<h3 id=\"linear-probing线性探测法\"><a class=\"anchor\" href=\"#linear-probing线性探测法\">#</a> linear Probing (线性探测法)</h3>\n<p>If hash(key)= d and the bucket is already occupied then we will  examine successive buckets d+1, d+2,……m-1, 0, 1, 2, ……d-1, in the  array</p>\n<p>如果 key 的哈希值是 d，并且 d 对应的位置已经被占据，然后我们会按照线性顺序向后成环形查找</p>\n<p>散列表已经满了之后，算法复杂度比较高，需要遍历整个散列表</p>\n<h4 id=\"例一\"><a class=\"anchor\" href=\"#例一\">#</a> 例一</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/6.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/7.png\" alt=\"img\" /></a></p>\n<p>放入 58 的时候和 80 冲突，因此放到下一个 4</p>\n<p>同理，放入 35 的时候冲突</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/8.png\" alt=\"img\" /></a></p>\n<p>计算例一中的平均成功访问次数</p>\n<p>58 查 2 次，35 查 4 次</p>\n<h4 id=\"例二\"><a class=\"anchor\" href=\"#例二\">#</a> 例二</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/9.png\" alt=\"img\" /></a></p>\n<p>线性表示法的弊端 —— 堆积问题</p>\n<p>如果一个地方发生了冲突，那么周围的复杂度会迅速升高</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/10.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/11.png\" alt=\"img\" /></a></p>\n<p>查询 35 从位置 2 开始查询，不是的话查询下一个。如果 58 被删除，35 在寻访位置 4 的时候是<strong>空的</strong>，停止查询。</p>\n<p>不能直接删除线性表中的数据，应该是<strong>进行标记</strong>，标志该元素已经删除。</p>\n<h4 id=\"线性探测法的c实现\"><a class=\"anchor\" href=\"#线性探测法的c实现\">#</a> 线性探测法的 c++ 实现</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//hashtable 的构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span><span class=\"token comment\">//E 和 K 需要被实例化后，这个类才能被调用。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    D <span class=\"token operator\">=</span> divisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ht <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> E<span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    empty<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>D<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span><span class=\"token comment\">//home bucket</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span> <span class=\"token comment\">//start at home bucket</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> ht<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span><span class=\"token comment\">//fit</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        j<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> D<span class=\"token punctuation\">;</span> <span class=\"token comment\">//next bucket</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//returned to home? 是否循环完成一遍</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">//table full;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 参数进行引用 K&amp;k</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> K<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span>E<span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//put element that matches k in e.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//return false if no match.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span> <span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>k<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    e<span class=\"token operator\">=</span>ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">K</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>HashTable<span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token class-name\">HashTable</span><span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span>K<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> E<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     K k<span class=\"token operator\">=</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//extract key</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token function\">hSearch</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        empty<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ht<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token function\">NoMem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//table full</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二次探测法quadratic-probing\"><a class=\"anchor\" href=\"#二次探测法quadratic-probing\">#</a> 二次探测法 (Quadratic probing)</h3>\n<p>quadratic 平方</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221205000529035.png\" alt=\"image-20221205000529035\" /></p>\n<p>注意，平方如果冲突之后，是在原来的位置 - 1， -4， -9 进行循环的</p>\n<h4 id=\"实现方法\"><a class=\"anchor\" href=\"#实现方法\">#</a> 实现方法</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/13.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> interface Hashable <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Hashable element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    boolean isActive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">HashEntry</span><span class=\"token punctuation\">(</span>Hashable e<span class=\"token punctuation\">,</span> boolean i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuadraticProbingHashTable</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuadraticProbingHashable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> Hashable <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Hashable x<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_TABLE_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">protected</span> HashEntry <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arraySize <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> boolean <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> currentPos <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findPos</span><span class=\"token punctuation\">(</span> Hashable x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 需要扩大 hash 表大小的时候，再哈希</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> boolean <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"双散列哈希double-hashing\"><a class=\"anchor\" href=\"#双散列哈希double-hashing\">#</a> 双散列哈希 (Double Hashing)</h3>\n<p>If hash1(k)= d and the bucket is already occupied then we will  counting hash2(k) = c, examine successive buckets d+c, d+2c, d+3c……，in  the array</p>\n<p>如果 k 的第一哈希值为 d，而这个对应的格子已经被占用则我们继续计算 k 的第二哈希值，然后检查 d+c…</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/14.png\" alt=\"img\" /></a></p>\n<p>第一个散列函数发生冲突，那么使用第二个散列函数来放置，如果再次冲突则进行相应探测。</p>\n<p>再散列 (<strong>进行扩容</strong>)</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/15.png\" alt=\"img\" /></a></p>\n<p>尽量<strong>保证表项数 &gt; 表的 70%</strong>，也就是意味着如果不满足，就需要进行再散列。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/16.png\" alt=\"img\" /></a></p>\n<h4 id=\"再散列的实现\"><a class=\"anchor\" href=\"#再散列的实现\">#</a> 再散列的实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">HashEntry</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldArray <span class=\"token operator\">=</span> array <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">allocateArray</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    currentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> oldArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>oldArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分离链接法separate-chaining\"><a class=\"anchor\" href=\"#分离链接法separate-chaining\">#</a> 分离链接法 (Separate Chaining)</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt7/17.png\" alt=\"img\" /></a></p>\n<p>使用每个位置对应线性表解决这个问题，避免了出现向下进行顺延的情况。</p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeparateChainingHashTable</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> theLists<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Hashable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> tableSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> name<span class=\"token punctuation\">,</span> tableSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> object rhs <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> rhs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> seniority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">DEFAULT_TABLE_SIZE</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeparateChainingHashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    theLists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span> <span class=\"token function\">nextPrime</span><span class=\"token punctuation\">(</span> size <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> theLists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeEmpty</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Hashable</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> <span class=\"token punctuation\">)</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token class-name\">Retrieve</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Hashable</span> x <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">LinkedList</span> whichList <span class=\"token operator\">=</span> theLists<span class=\"token punctuation\">[</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span> theLists<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">LinkedListItr</span> itr <span class=\"token operator\">=</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> itr<span class=\"token punctuation\">.</span><span class=\"token function\">isPastEnd</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        whichList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> whichList<span class=\"token punctuation\">.</span><span class=\"token function\">zeroth</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/02/COA/Lecture14-%E6%8C%87%E4%BB%A4/",
            "url": "https://quas-modo.github.io/2022/12/02/COA/Lecture14-%E6%8C%87%E4%BB%A4/",
            "title": "Lecture14-指令系统",
            "date_published": "2022-12-02T06:35:51.000Z",
            "content_html": "<p>操作码、操作数、寻址方式</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture14-指令系统\"><a class=\"anchor\" href=\"#lecture14-指令系统\">#</a> Lecture14 - 指令系统</h1>\n<p>对应教材</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202131829598.png\" alt=\"image-20221202131829598\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201161740120.png\" alt=\"image-20221201161740120\" /></p>\n<h2 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201161814535.png\" alt=\"image-20221201161814535\" /></p>\n<h3 id=\"指令要素\"><a class=\"anchor\" href=\"#指令要素\">#</a> 指令要素</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201162521172.png\" alt=\"image-20221201162521172\" /></p>\n<h3 id=\"指令表示\"><a class=\"anchor\" href=\"#指令表示\">#</a> 指令表示</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201162651133.png\" alt=\"image-20221201162651133\" /></p>\n<p>如何避免指令的二义性？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201162709724.png\" alt=\"image-20221201162709724\" /></p>\n<h3 id=\"例子y-a-b-c-d-e-三两单零地址指令分别是怎么操作的\"><a class=\"anchor\" href=\"#例子y-a-b-c-d-e-三两单零地址指令分别是怎么操作的\">#</a> 例子：Y = (A - B) / (C + D * E ) 三 / 两 / 单 / 零地址指令分别是怎么操作的？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201164205387.png\" alt=\"image-20221201164205387\" /></p>\n<p>三地址：占用更多的指令操作数，但是不需要覆盖</p>\n<p>双地址：有一个地址必须承担双重任务，需要先做一次 “move” 操作</p>\n<p>单地址：第二个地址是隐含的，其隐含地址被称为 “累加器”(Accumulator, AC)</p>\n<p>零地址：空指令、停机指令、中断指令</p>\n<h3 id=\"指令格式扩展操作码\"><a class=\"anchor\" href=\"#指令格式扩展操作码\">#</a> 指令格式：扩展操作码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202132746822.png\" alt=\"image-20221202132746822\" /></p>\n<h3 id=\"例题如何计算零地址-一地址-二地址指令条数\"><a class=\"anchor\" href=\"#例题如何计算零地址-一地址-二地址指令条数\">#</a> 例题：如何计算零地址、一地址、二地址指令条数？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201163012730.png\" alt=\"image-20221201163012730\" /></p>\n<p>第一问</p>\n<p>​\t16 - 6 - 6 = 4</p>\n<p>​\t2 <sup>4</sup> = 16</p>\n<p>​\t16 - M - N</p>\n<p>第二问（关键是，需要留出至少 1 位标志是零地址或一地址）</p>\n<p>​\t0000-1110</p>\n<p>第三问</p>\n<p>​\t设一地址指令最多由 R 种</p>\n<p>​\tQ = [(2 <sup>4</sup> - P) * 2 <sup>6</sup> - R]* 2 <sup>6</sup></p>\n<p>详细解答：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tLXzIwMTgvYXJ0aWNsZS9kZXRhaWxzLzExMDkxODYwOQ==\">https://blog.csdn.net/KK_2018/article/details/110918609</span></p>\n<h3 id=\"指令格式\"><a class=\"anchor\" href=\"#指令格式\">#</a> 指令格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201163040707.png\" alt=\"image-20221201163040707\" /></p>\n<h2 id=\"操作码\"><a class=\"anchor\" href=\"#操作码\">#</a> 操作码</h2>\n<h3 id=\"差异与共性\"><a class=\"anchor\" href=\"#差异与共性\">#</a> 差异与共性</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202132908798.png\" alt=\"image-20221202132908798\" /></p>\n<h3 id=\"操作码数据传送\"><a class=\"anchor\" href=\"#操作码数据传送\">#</a> 操作码：数据传送</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202132933086.png\" alt=\"image-20221202132933086\" /></p>\n<h3 id=\"操作码算数运算\"><a class=\"anchor\" href=\"#操作码算数运算\">#</a> 操作码：算数运算</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202132953492.png\" alt=\"image-20221202132953492\" /></p>\n<h3 id=\"操作码逻辑运算\"><a class=\"anchor\" href=\"#操作码逻辑运算\">#</a> 操作码：逻辑运算</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202133031883.png\" alt=\"image-20221202133031883\" /></p>\n<p>区分逻辑移位和算术移位</p>\n<p><strong>特别关注一下算数左移</strong></p>\n<h3 id=\"操作码输入输出\"><a class=\"anchor\" href=\"#操作码输入输出\">#</a> 操作码：输入输出</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202133204651.png\" alt=\"image-20221202133204651\" /></p>\n<h3 id=\"操作码控制转移\"><a class=\"anchor\" href=\"#操作码控制转移\">#</a> 操作码：控制转移</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202133249793.png\" alt=\"image-20221202133249793\" /></p>\n<h4 id=\"分支指令-branch-jump\"><a class=\"anchor\" href=\"#分支指令-branch-jump\">#</a> 分支指令 Branch Jump</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202133454994.png\" alt=\"image-20221202133454994\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201165209301.png\" alt=\"image-20221201165209301\" /></p>\n<p>BR 无条件跳转</p>\n<p>BRE R1 R2 X 判断是否相等</p>\n<p>BRZ 211 如果是 0，那么跳转到 211 的位置</p>\n<p>BRE R1 R2 235 如果 R1 = R2，那么跳转到 235 的位置</p>\n<h4 id=\"跳步指令step\"><a class=\"anchor\" href=\"#跳步指令step\">#</a> 跳步指令 Step</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202133522328.png\" alt=\"image-20221202133522328\" /></p>\n<p>ISZ increment-and-skip-if-zero 加 1 并且若为 0 则跳步</p>\n<p>ISZ R1 如果 R1 是 0，就跳到 311，否则 R1 = R1 + 1</p>\n<p>BR 301 无条件跳转回 301</p>\n<h4 id=\"过程调用指令\"><a class=\"anchor\" href=\"#过程调用指令\">#</a> 过程调用指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201170849399.png\" alt=\"image-20221201170849399\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201164024643.png\" alt=\"image-20221201164024643\" /> 什么时候必须使用栈？<strong>递归调用</strong></p>\n<p>PC + deta 为什么是下一条指令的地址？</p>\n<p>三种常用的保存返回地址的位置：<strong>寄存器、被调过程开始处、栈顶部</strong></p>\n<ol>\n<li>\n<p>寄存器：</p>\n<p>缺点是只能单线程调用，支持没有嵌入的调用</p>\n</li>\n<li>\n<p>返回地址存于过程开始处：</p>\n<p>4101 放在 4500，4601 放在 4800，返回 4800 的值到 4601，4651 放到 4800，再返回 4651，返回 4101。</p>\n<p>函数的开头地址不会被修改（只要没有被调用），但是自己调用自己，会造成地址的覆盖</p>\n</li>\n<li>\n<p>使用栈：解决递归的问题</p>\n</li>\n</ol>\n<h2 id=\"操作数\"><a class=\"anchor\" href=\"#操作数\">#</a> 操作数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202135837472.png\" alt=\"image-20221202135837472\" /></p>\n<h3 id=\"操作数地址\"><a class=\"anchor\" href=\"#操作数地址\">#</a> 操作数：地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202140015572.png\" alt=\"image-20221202140015572\" /></p>\n<p>零地址、一地址、二地址、三地址的操作数</p>\n<p>指令越短、cpu 越简单</p>\n<p>指令越长、cpu 越复杂、成本上升</p>\n<h3 id=\"操作数数值\"><a class=\"anchor\" href=\"#操作数数值\">#</a> 操作数：数值</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202140222294.png\" alt=\"image-20221202140222294\" /></p>\n<h3 id=\"操作数字符\"><a class=\"anchor\" href=\"#操作数字符\">#</a> 操作数：字符</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202140259609.png\" alt=\"image-20221202140259609\" /></p>\n<h3 id=\"操作数逻辑数据\"><a class=\"anchor\" href=\"#操作数逻辑数据\">#</a> 操作数：逻辑数据</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202140526641.png\" alt=\"image-20221202140526641\" /></p>\n<h3 id=\"操作数大端序和小端序\"><a class=\"anchor\" href=\"#操作数大端序和小端序\">#</a> 操作数：大端序和小端序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201164946182.png\" alt=\"image-20221201164946182\" /></p>\n<p>大端序 —— 高位放小地址</p>\n<p>小端序 —— 低位放小地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202140549149.png\" alt=\"image-20221202140549149\" /></p>\n<p>以字节为单位</p>\n<h3 id=\"操作数引用\"><a class=\"anchor\" href=\"#操作数引用\">#</a> 操作数引用</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141028247.png\" alt=\"image-20221202141028247\" /></p>\n<h2 id=\"寻址方式\"><a class=\"anchor\" href=\"#寻址方式\">#</a> 寻址方式</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201171841509.png\" alt=\"image-20221201171841509\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221201171918273.png\" alt=\"image-20221201171918273\" /></p>\n<h3 id=\"记号\"><a class=\"anchor\" href=\"#记号\">#</a> 记号</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141050795.png\" alt=\"image-20221202141050795\" /></p>\n<h3 id=\"立即寻址\"><a class=\"anchor\" href=\"#立即寻址\">#</a> 立即寻址</h3>\n<p>立即寻址（不需要寻址，直接获得数据）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141130201.png\" alt=\"image-20221202141130201\" /></p>\n<p>“直接放在指令里面” 是立即寻址</p>\n<h3 id=\"直接寻址\"><a class=\"anchor\" href=\"#直接寻址\">#</a> 直接寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141210970.png\" alt=\"image-20221202141210970\" /></p>\n<p>直接获得地址</p>\n<p>在当代计算机体系中已不多见</p>\n<h3 id=\"间接寻址\"><a class=\"anchor\" href=\"#间接寻址\">#</a> 间接寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141228399.png\" alt=\"image-20221202141228399\" /></p>\n<p>先到主存，主存中存取了另一个地址</p>\n<h3 id=\"寄存器寻址\"><a class=\"anchor\" href=\"#寄存器寻址\">#</a> 寄存器寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141247348.png\" alt=\"image-20221202141247348\" /></p>\n<p>到寄存器，寄存器中操作数</p>\n<h3 id=\"寄存器间接寻址\"><a class=\"anchor\" href=\"#寄存器间接寻址\">#</a> 寄存器间接寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141326253.png\" alt=\"image-20221202141326253\" /></p>\n<p>参数 - 寄存器 - 主存 - 数据</p>\n<h3 id=\"偏移寻址\"><a class=\"anchor\" href=\"#偏移寻址\">#</a> 偏移寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141350941.png\" alt=\"image-20221202141350941\" /></p>\n<h3 id=\"偏移寻址相对寻址\"><a class=\"anchor\" href=\"#偏移寻址相对寻址\">#</a> 偏移寻址：相对寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141443552.png\" alt=\"image-20221202141443552\" /></p>\n<h3 id=\"偏移寻址基址寄存器寻址\"><a class=\"anchor\" href=\"#偏移寻址基址寄存器寻址\">#</a> 偏移寻址：基址寄存器寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141504937.png\" alt=\"image-20221202141504937\" /></p>\n<h3 id=\"偏移寻址变址寻址\"><a class=\"anchor\" href=\"#偏移寻址变址寻址\">#</a> 偏移寻址：变址寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141537139.png\" alt=\"image-20221202141537139\" /></p>\n<p>IX 变址寄存器</p>\n<p>重复操作</p>\n<p>以上三种相对的对象不同</p>\n<h3 id=\"栈寻址\"><a class=\"anchor\" href=\"#栈寻址\">#</a> 栈寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141551627.png\" alt=\"image-20221202141551627\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141630182.png\" alt=\"image-20221202141630182\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141636236.png\" alt=\"image-20221202141636236\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141641806.png\" alt=\"image-20221202141641806\" /></p>\n<h2 id=\"指令格式的设计原则\"><a class=\"anchor\" href=\"#指令格式的设计原则\">#</a> 指令格式的设计原则</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141657479.png\" alt=\"image-20221202141657479\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141719616.png\" alt=\"image-20221202141719616\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141727547.png\" alt=\"image-20221202141727547\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141738268.png\" alt=\"image-20221202141738268\" /></p>\n<h2 id=\"指令集设计\"><a class=\"anchor\" href=\"#指令集设计\">#</a> 指令集设计</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141757763.png\" alt=\"image-20221202141757763\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141802927.png\" alt=\"image-20221202141802927\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202141817797.png\" alt=\"image-20221202141817797\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/02/COA/Lecture13-%E6%80%BB%E7%BA%BF/",
            "url": "https://quas-modo.github.io/2022/12/02/COA/Lecture13-%E6%80%BB%E7%BA%BF/",
            "title": "Lecture13-总线",
            "date_published": "2022-12-02T06:35:26.000Z",
            "content_html": "<p>总线类型、仲裁、带宽、传输速率、层次结构<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture13-总线\"><a class=\"anchor\" href=\"#lecture13-总线\">#</a> Lecture13 - 总线</h1>\n<h2 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164542001.png\" alt=\"image-20221129164542001\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164549696.png\" alt=\"image-20221129164549696\" /></p>\n<p>系统总线 - io 控制器</p>\n<p>通信总线 - io 设备</p>\n<p>地址线和数据线可以复用</p>\n<h2 id=\"总线结构\"><a class=\"anchor\" href=\"#总线结构\">#</a> 总线结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164619373.png\" alt=\"image-20221129164619373\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164628381.png\" alt=\"image-20221129164628381\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164646312.png\" alt=\"image-20221129164646312\" /></p>\n<h2 id=\"设计要素\"><a class=\"anchor\" href=\"#设计要素\">#</a> 设计要素</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163100682.png\" alt=\"image-20221129163100682\" /></p>\n<h3 id=\"用途\"><a class=\"anchor\" href=\"#用途\">#</a> 用途</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163132214.png\" alt=\"image-20221129163132214\" /></p>\n<p>专用总线： “或”</p>\n<h3 id=\"仲裁\"><a class=\"anchor\" href=\"#仲裁\">#</a> 仲裁</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163146357.png\" alt=\"image-20221129163146357\" /></p>\n<h4 id=\"集中式\"><a class=\"anchor\" href=\"#集中式\">#</a> 集中式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163331416.png\" alt=\"image-20221129163331416\" /></p>\n<h5 id=\"链式查询\"><a class=\"anchor\" href=\"#链式查询\">#</a> 链式查询</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163345822.png\" alt=\"image-20221129163345822\" /></p>\n<p>橙色 “繁忙” 的是双向箭头</p>\n<p>在总线不忙的时候，才能发起请求，但是一个时钟周期内可能有多个设备发起请求。</p>\n<p>总线仲裁器在总线不忙的时候，才能发起允许信号。</p>\n<p>设备 1 优先级最高，设备 N 优先级最低。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163403728.png\" alt=\"image-20221129163403728\" /></p>\n<p>不能保证公平性 —— 设备 N 很难拿到允许信号</p>\n<p>对电路故障敏感 —— 后面的设备无法判断是前面的设备想使用，还是前面的设备坏了。之前的设备坏了，后面的电路都无法使用。</p>\n<p>限制总线的速度 —— 平均要等待 n <sup>2</sup> / 2 的时间</p>\n<h5 id=\"计数器查询\"><a class=\"anchor\" href=\"#计数器查询\">#</a> 计数器查询</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163732251.png\" alt=\"image-20221129163732251\" /></p>\n<p>与 “链式查询” 相比，绿色（串联的线）变成一条总线。</p>\n<p>报到自己的 ID 则可以占用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163749814.png\" alt=\"image-20221129163749814\" /></p>\n<h5 id=\"独立请求\"><a class=\"anchor\" href=\"#独立请求\">#</a> 独立请求</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163827636.png\" alt=\"image-20221129163827636\" /></p>\n<p>每个设备都有允许线和请求线。</p>\n<p>只要总线不繁忙，想要请求就可以请求，每个设备没有无谓的等待的时间。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163837822.png\" alt=\"image-20221129163837822\" /></p>\n<h4 id=\"分布式\"><a class=\"anchor\" href=\"#分布式\">#</a> 分布式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163337594.png\" alt=\"image-20221129163337594\" /></p>\n<h5 id=\"自举式\"><a class=\"anchor\" href=\"#自举式\">#</a> 自举式</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129162852324.png\" alt=\"image-20221129162852324\" /></p>\n<p>自举式（自主选举式）</p>\n<p>向上的箭头 —— 表达自己想要用的请求</p>\n<p>向下的箭头 —— 接受优先级更高的设备是否有想用的请求</p>\n<p>设备 3 的优先级最高</p>\n<p>设备 0 的优先级最低，没有请求线，没有优先级更低的设备去监听请求</p>\n<h5 id=\"冲突检测\"><a class=\"anchor\" href=\"#冲突检测\">#</a> 冲突检测</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129163853249.png\" alt=\"image-20221129163853249\" /></p>\n<p>只要总线空闲，就立刻请求</p>\n<p>&quot;随机时间间隔&quot;</p>\n<h3 id=\"时序\"><a class=\"anchor\" href=\"#时序\">#</a> 时序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164021701.png\" alt=\"image-20221129164021701\" /></p>\n<p>离散事件、系统动力</p>\n<p>同步时序、异步时序、半同步是一类，分离事务是另外一个</p>\n<p>同步时序：时钟周期</p>\n<p>异步时序：事务的相对顺序</p>\n<h4 id=\"同步时序\"><a class=\"anchor\" href=\"#同步时序\">#</a> 同步时序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129164211629.png\" alt=\"image-20221129164211629\" /></p>\n<p>约定好，第一个时刻取地址，第二个时刻取数据，etc……</p>\n<p>快的迁就慢的</p>\n<h5 id=\"异步时序\"><a class=\"anchor\" href=\"#异步时序\">#</a> 异步时序</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221130000246383.png\" alt=\"image-20221130000246383\" /></p>\n<p>Ready: 你可以来拿了</p>\n<p>Ack: 我已经拿好了</p>\n<p>都有上升沿和下降沿（在总线上放好了，撤好了）</p>\n<p>非互锁 —— 仅表示前后顺序</p>\n<p>半互锁 ——Ack 上升，Ready 才可以撤，可以防止 Ready 提前撤，Ready 持续等</p>\n<p>全互锁 —— 防止 Ack 先撤，Ready 没接收到持续等</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129165308456.png\" alt=\"image-20221129165308456\" /></p>\n<p>有两根 ready 线，ReadReq 和 DataRdy</p>\n<p>1 CPU 告诉存储器，地址已经准备好</p>\n<p>2 存储器告诉 CPU，已经读取完毕</p>\n<p>3 CPU 收到读取完毕信号，释放 Ready</p>\n<p>4 存储器收到释放完毕的信号，释放 Ack</p>\n<p>5 存储器告诉 CPU，数据已经准备好</p>\n<p>6 CPU 告诉存储器，数据已经读取完毕</p>\n<p>7 存储器释放 Ready 信号</p>\n<p>8 CPU 释放 Ack 信号</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129165321583.png\" alt=\"image-20221129165321583\" /></p>\n<h5 id=\"半同步时序\"><a class=\"anchor\" href=\"#半同步时序\">#</a> 半同步时序</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129171706250.png\" alt=\"image-20221129171706250\" /></p>\n<p>发生在时钟上升沿才认为是有效的</p>\n<h5 id=\"分离事务\"><a class=\"anchor\" href=\"#分离事务\">#</a> 分离事务</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129171714657.png\" alt=\"image-20221129171714657\" /></p>\n<p>中间过程释放给其他设备使用，数据需要准备时间，数据准备好再请求。</p>\n<h3 id=\"总线带宽和数据传输速率\"><a class=\"anchor\" href=\"#总线带宽和数据传输速率\">#</a> 总线带宽和数据传输速率</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129171725186.png\" alt=\"image-20221129171725186\" /></p>\n<p>区分总线带宽和数据传输速率</p>\n<p>总线带宽更偏向于理想状态</p>\n<p>数据传输速率偏向于实际状态（一般求的是数据传输速率）</p>\n<h4 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129171825254.png\" alt=\"image-20221129171825254\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172040507.png\" alt=\"image-20221129172040507\" /></p>\n<p>5 的时候，如果数据准备不好，那么就不能如期进行数据传输</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172437848.png\" alt=\"image-20221129172437848\" /></p>\n<p>同步总线需要使用整数倍的时钟周期</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172451555.png\" alt=\"image-20221129172451555\" /></p>\n<p>每次传输，一个地址。</p>\n<p>64 位宽 —— 每次可以传输两个字</p>\n<p>4 同步读取 并且 cache 降低</p>\n<p>200MHz 时钟频率 ——5ns 时钟周期</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172817342.png\" alt=\"image-20221129172817342\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172827388.png\" alt=\"image-20221129172827388\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172907110.png\" alt=\"image-20221129172907110\" /></p>\n<p>要么提高数据量，要么减少所耗费的时间</p>\n<p>块传输 —— 减少地址时间，减少后面的数据的访问时间</p>\n<p>分离总线事务 —— 一个事务分成两个过程，中间的过程让别的事务来，节省数据准备的时间</p>\n<p>分离地址线和数据线 —— 原先是地址和数据分别传输，现在地址和数据可以同时传输</p>\n<h3 id=\"总线层次结构\"><a class=\"anchor\" href=\"#总线层次结构\">#</a> 总线层次结构</h3>\n<h4 id=\"单总线结构\"><a class=\"anchor\" href=\"#单总线结构\">#</a> 单总线结构</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172920605.png\" alt=\"image-20221129172920605\" /></p>\n<p>车越多，路越堵</p>\n<h4 id=\"双总线结构i\"><a class=\"anchor\" href=\"#双总线结构i\">#</a> 双总线结构 I</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172929509.png\" alt=\"image-20221129172929509\" /></p>\n<p>增加存储器总线</p>\n<p>CPU 和存储器的传输占很大的一部分负担</p>\n<h4 id=\"双总线结构ii\"><a class=\"anchor\" href=\"#双总线结构ii\">#</a> 双总线结构 II</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172936750.png\" alt=\"image-20221129172936750\" /></p>\n<p>增加 IO 总线和 IOP</p>\n<h4 id=\"多总线结构i\"><a class=\"anchor\" href=\"#多总线结构i\">#</a> 多总线结构 I</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172945516.png\" alt=\"image-20221129172945516\" /></p>\n<h4 id=\"多总线结构ii\"><a class=\"anchor\" href=\"#多总线结构ii\">#</a> 多总线结构 II</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129172953025.png\" alt=\"image-20221129172953025\" /></p>\n<p>DMA 总线 (IO 部分会讲)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129173001369.png\" alt=\"image-20221129173001369\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129173013477.png\" alt=\"image-20221129173013477\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/12/02/COA/Lecture12-%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/",
            "url": "https://quas-modo.github.io/2022/12/02/COA/Lecture12-%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/",
            "title": "Lecture12-虚拟存储器",
            "date_published": "2022-12-02T06:34:56.000Z",
            "content_html": "<p>资源调度<br />\n分区方式、分页方式<br />\n虚拟存储器（分页式、分段式、段页式）</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture12-虚拟存储器\"><a class=\"anchor\" href=\"#lecture12-虚拟存储器\">#</a> Lecture12 - 虚拟存储器</h1>\n<p><strong>调度和存储器管理</strong></p>\n<h2 id=\"操作系统的出现\"><a class=\"anchor\" href=\"#操作系统的出现\">#</a> 操作系统的出现</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112310506.png\" alt=\"image-20221128112310506\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112328386.png\" alt=\"image-20221128112328386\" /></p>\n<h2 id=\"存储器管理\"><a class=\"anchor\" href=\"#存储器管理\">#</a> 存储器管理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112349315.png\" alt=\"image-20221128112349315\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112431728.png\" alt=\"image-20221128112431728\" /></p>\n<h2 id=\"分区\"><a class=\"anchor\" href=\"#分区\">#</a> 分区</h2>\n<h3 id=\"简单固定分区\"><a class=\"anchor\" href=\"#简单固定分区\">#</a> 简单固定分区</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112918126.png\" alt=\"image-20221128112918126\" /></p>\n<h3 id=\"可变长分区\"><a class=\"anchor\" href=\"#可变长分区\">#</a> 可变长分区</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128112949961.png\" alt=\"image-20221128112949961\" /></p>\n<p>分区方式会产生碎片的问题</p>\n<h2 id=\"分页\"><a class=\"anchor\" href=\"#分页\">#</a> 分页</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113021152.png\" alt=\"image-20221128113021152\" /></p>\n<p>帧 / 页帧 / 页框 —— 存储器分成相当小的、相等的固定长度的存储块，每个存储块被成为页帧、帧</p>\n<p>页 —— 每个进程划分为小的固定长的程序块，程序的每个程序块成为页</p>\n<p>页表 —— 记录了进程每页的帧地址</p>\n<p>逻辑地址 —— 页号和页中相对地址</p>\n<p>物理地址 —— 帧号和相对地址</p>\n<p>进程和主存划分的块的大小相同</p>\n<h2 id=\"虚拟存储器\"><a class=\"anchor\" href=\"#虚拟存储器\">#</a> 虚拟存储器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113046823.png\" alt=\"image-20221128113046823\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113150993.png\" alt=\"image-20221128113150993\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113202150.png\" alt=\"image-20221128113202150\" /></p>\n<h3 id=\"分页式虚拟存储器\"><a class=\"anchor\" href=\"#分页式虚拟存储器\">#</a> 分页式虚拟存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113349365.png\" alt=\"image-20221128113349365\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113458053.png\" alt=\"image-20221128113458053\" /></p>\n<p>页表存在主存中</p>\n<p>页表存储了所有的序列</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113514924.png\" alt=\"image-20221128113514924\" /></p>\n<p>页表项包括哪些？xxx 位，存放位置按着最长的算，虚页号不算，有可能要进行字节的整数倍的调整</p>\n<p>null—— 空的指针</p>\n<p>PP0\\PP1\\PP2—— 实际上已经存在了主存中</p>\n<p>空的 —— 存在硬盘上，用指针表示位置</p>\n<p>虚拟页号需要放吗？—— 不要，页表存储了所有的序列，获取某一行的信息，只需要去相应的页号检查就可以，虚页的位置是不需要存储的。</p>\n<p>将虚拟页号转换为物理页号，偏移量不变</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113526154.png\" alt=\"image-20221128113526154\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113550866.png\" alt=\"image-20221128113550866\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113539856.png\" alt=\"image-20221128113539856\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113603448.png\" alt=\"image-20221128113603448\" /></p>\n<p>情况 23</p>\n<p>不同的进程，同样的数据块</p>\n<h3 id=\"分段式虚拟存储器\"><a class=\"anchor\" href=\"#分段式虚拟存储器\">#</a> 分段式虚拟存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113622258.png\" alt=\"image-20221128113622258\" /></p>\n<h3 id=\"段页式虚拟存储器\"><a class=\"anchor\" href=\"#段页式虚拟存储器\">#</a> 段页式虚拟存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113646202.png\" alt=\"image-20221128113646202\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221128113710641.png\" alt=\"image-20221128113710641\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/21/COA/Lecture11-RAID/",
            "url": "https://quas-modo.github.io/2022/11/21/COA/Lecture11-RAID/",
            "title": "Lecture11-RAID",
            "date_published": "2022-11-21T06:06:58.000Z",
            "content_html": "<p>RAID0-6<br />\n 条带、镜像、并行存取（海明码、位交错奇偶校验）、独立存取（块交错奇偶检验、块级分布式奇偶检验、双冗余度）</p>\n<p>并行存取的大数据传输率高，独立存取的 IO 请求快。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture11-raid\"><a class=\"anchor\" href=\"#lecture11-raid\">#</a> Lecture11-RAID</h1>\n<p>区分高数据传输率和高速 IO 请求</p>\n<h2 id=\"raid冗余磁盘阵列简介redundant-arrays-of-independent-disks\"><a class=\"anchor\" href=\"#raid冗余磁盘阵列简介redundant-arrays-of-independent-disks\">#</a> RAID 冗余磁盘阵列简介 ——Redundant Arrays of Independent Disks</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161456782.png\" alt=\"image-20221117161456782\" /></p>\n<p>Redundant 冗余 —— 进行错误恢复以提高系统可靠性</p>\n<h2 id=\"raid分类\"><a class=\"anchor\" href=\"#raid分类\">#</a> RAID 分类</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161543752.png\" alt=\"image-20221117161543752\" /></p>\n<p>0-6 都是条带式的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163203515.png\" alt=\"image-20221117163203515\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163224833.png\" alt=\"image-20221117163224833\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163240540.png\" alt=\"image-20221117163240540\" /></p>\n<h3 id=\"raid0-不是raid成员\"><a class=\"anchor\" href=\"#raid0-不是raid成员\">#</a> RAID0 - 不是 RAID 成员</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161726563.png\" alt=\"image-20221117161726563\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221121125725716.png\" alt=\"image-20221121125725716\" /></p>\n<p>如果单个 IO 请求有多个逻辑相邻的条带组成，则多达对 n 个条带的请求可以并行处理，这样大大地减少了 IO 传输时间。</p>\n<h3 id=\"raid1-镜像\"><a class=\"anchor\" href=\"#raid1-镜像\">#</a> RAID1 - 镜像</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161806501.png\" alt=\"image-20221117161806501\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161823895.png\" alt=\"image-20221117161823895\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161835837.png\" alt=\"image-20221117161835837\" /></p>\n<p>大批读请求，速度较快；写请求，与 RAID0 类似。</p>\n<h3 id=\"raid01-vs-raid10\"><a class=\"anchor\" href=\"#raid01-vs-raid10\">#</a> RAID01 VS RAID10</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117161936601.png\" alt=\"image-20221117161936601\" /></p>\n<h4 id=\"如果disk-0和disk-3坏了会怎么样\"><a class=\"anchor\" href=\"#如果disk-0和disk-3坏了会怎么样\">#</a> 如果 Disk 0 和 Disk 3 坏了会怎么样？</h4>\n<ul>\n<li>\n<p>对于 RAID01 来说</p>\n<p>Disk1 损坏，左边的 RAID 0 报废；Disk3 损坏，右边的 RAID 0 报废，整体的 RAID 1 报废</p>\n</li>\n<li>\n<p>对于 RAID10 来说</p>\n<p>Disk1 损坏，左边的 RAID 1 仍能够使用；Disk3 损坏，右边的 RAID 1 仍能够使用，整体的 RAID1 仍能够使用</p>\n</li>\n</ul>\n<p>​\t对于同样的出错，RAID10 仍能够正常运行，但是 RAID1 无法使用，所以 RAID10<strong> 容错率更高</strong></p>\n<h3 id=\"raid2-并行存取\"><a class=\"anchor\" href=\"#raid2-并行存取\">#</a> RAID2 - 并行存取</h3>\n<p>并行存取 —— 所有磁盘成员都参与每个 IO 请求的执行，各个驱动器的轴是<strong>同步旋转</strong>的。</p>\n<p>RAID2 和 RAID3 的<strong>条带非常小</strong>，经常小到一个字节或一个字。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162002788.png\" alt=\"image-20221117162002788\" /></p>\n<p>读写时，都需要进行校验，读操作要访问所有磁盘，写操作要访问所有数据盘和校验盘。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162035002.png\" alt=\"image-20221117162035002\" /></p>\n<p>需要时间开销处理海明码</p>\n<h3 id=\"raid3-并行存取\"><a class=\"anchor\" href=\"#raid3-并行存取\">#</a> RAID3 - 并行存取</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117162051620.png\" alt=\"image-20221117162051620\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163754445.png\" alt=\"image-20221117163754445\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163718019.png\" alt=\"image-20221117163718019\" /></p>\n<p>并行存取</p>\n<p>四个盘同时读写</p>\n<p>数据传输率 —— 任何 IO 请求将包含所有数据盘的并行数据传送，对于大量传送，性能改善特别明显。</p>\n<p>面对多个事务 —— 但是一次只能执行一个 IO 请求，在面向事务的环境中，性能将受损。</p>\n<h3 id=\"raid4-独立存取\"><a class=\"anchor\" href=\"#raid4-独立存取\">#</a> RAID4 - 独立存取</h3>\n<p>独立存取阵列更适合与需要高速 IO 请求的应用，而相对较少用于需要高数据传输率的场合。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163553896.png\" alt=\"image-20221117163553896\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163604760.png\" alt=\"image-20221117163604760\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117164749605.png\" alt=\"image-20221117164749605\" /></p>\n<p>独立存取，每个磁盘的操作都是独立的。</p>\n<p>写损失 —— 既要修改数据盘，也要修改校验盘。</p>\n<p>一次写入 包括<strong>两读两写</strong> —— 两次读操作（数据盘、校验盘）、两次写操作（数据盘、校验盘）</p>\n<h3 id=\"raid5-独立存取\"><a class=\"anchor\" href=\"#raid5-独立存取\">#</a> RAID5 - 独立存取</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117163643553.png\" alt=\"image-20221117163643553\" /></p>\n<p>避免潜在的 IO 瓶颈问题 —— 校验条带分开了可以同时读取 (</p>\n<p>读没有影响，写受到限制（还是两读两写</p>\n<h3 id=\"raid50\"><a class=\"anchor\" href=\"#raid50\">#</a> RAID50</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165428182.png\" alt=\"image-20221117165428182\" /></p>\n<h3 id=\"raid6-独立存取-两种不同的奇偶校验码\"><a class=\"anchor\" href=\"#raid6-独立存取-两种不同的奇偶校验码\">#</a> RAID6 - 独立存取 - 两种不同的奇偶校验码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165615475.png\" alt=\"image-20221117165615475\" /></p>\n<h2 id=\"raid比较\"><a class=\"anchor\" href=\"#raid比较\">#</a> RAID 比较</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165842161.png\" alt=\"image-20221117165842161\" /></p>\n<p>基本需求 —— 快、可用性</p>\n<p>0 和 1 没有达到兼顾</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117165949394.png\" alt=\"image-20221117165949394\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117170009169.png\" alt=\"image-20221117170009169\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117170031768.png\" alt=\"image-20221117170031768\" /></p>\n<p>一些 callback</p>\n<p>3 和 4 的区别在于，是不是一起转的</p>\n<p>5 和 6 各有优劣</p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/21/cpp/Homework4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://quas-modo.github.io/2022/11/21/cpp/Homework4-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "Homework4-内存管理",
            "date_published": "2022-11-20T17:01:58.000Z",
            "content_html": "<p>深拷贝、shared_ptr、memory context<br />\nmap、pair 的应用<br />\n收获很大的一次作业 qvq<br />\n<span id=\"more\"></span></p>\n<h1 id=\"homework4-内存管理相关\"><a class=\"anchor\" href=\"#homework4-内存管理相关\">#</a> Homework4 - 内存管理相关</h1>\n<h2 id=\"编写深拷贝容器\"><a class=\"anchor\" href=\"#编写深拷贝容器\">#</a> 编写深拷贝容器</h2>\n<p>基于我们给的代码框架，编写一个容器 MyContainer，用该容器维护一个堆内存上的数组</p>\n<p>该内存容器是一个典型的 RAII 容器，通过这个练习学习如何使用 RAII 来安全管理资源</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContainer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        _count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            _data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止二次释放</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        _count <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">MyContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            _data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        _count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    MyContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _data<span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">,</span> Other<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">+</span> _size<span class=\"token punctuation\">,</span> _data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 去掉了参数当中的 const，写了另外一个版本，没有考虑自己 move 给自己的情况，不然会丢失数据……</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//log：看错题目了，这个函数实现的是拷贝赋值不是移动构造，那没事了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    MyContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MyContainer <span class=\"token operator\">&amp;</span>Other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        _size <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        _data <span class=\"token operator\">=</span> Other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        Other<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        Other<span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> _count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> _count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// C++11 引入的 initializer_list</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> MyContainer<span class=\"token double-colon punctuation\">::</span>_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    MyContainer <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    MyContainer <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    MyContainer m3 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 1 2 0</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">//copy</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> prev_ptr <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> prev_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 1 2 0 2 0 2 0 2 1</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    MyContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        MyContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">// 1 2 0 2 0 2 0 1</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h3>\n<p>无参数、无返回值、不能重载</p>\n<p>离开作用域后自动销毁</p>\n<p>释放空间时记得将指针设为 nullptr，防止出现多次释放和悬挂指针的情况</p>\n<h3 id=\"拷贝构造函数\"><a class=\"anchor\" href=\"#拷贝构造函数\">#</a> 拷贝构造函数</h3>\n<p>一个对象，多个副本，副本之间是独立的关系。</p>\n<p>创建对象时，用一同类的对象对其初始化的时候进行调用。</p>\n<p>复制拷贝构造、传参拷贝构造、返回值拷贝构造</p>\n<h3 id=\"移动构造函数\"><a class=\"anchor\" href=\"#移动构造函数\">#</a> 移动构造函数</h3>\n<p>移动构造函数移动堆中的资源，即不像复制构造函数复制现有对象的数据并将其分配给新对象移动构造函数只是使<strong>声明对象的指针指向临时对象的数据并清空临时对象的指针</strong>。因此，移动构造函数可以防止在内存中不必要地复制数据。</p>\n<p>移动构造函数的工作看起来有点像默认的成员复制构造函数，但在这种情况下，它会清空临时对象的指针，防止多个对象指向同一内存位置。</p>\n<h3 id=\"扩展学习\"><a class=\"anchor\" href=\"#扩展学习\">#</a> 扩展学习</h3>\n<h4 id=\"explicit关键字\"><a class=\"anchor\" href=\"#explicit关键字\">#</a> explicit 关键字</h4>\n<ol>\n<li>指定构造函数或转换函数 (C++11 起) 为显式，即它不能用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2ltcGxpY2l0X2NvbnZlcnNpb24=\">隐式转换</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy96aC5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL2NvcHlfaW5pdGlhbGl6YXRpb24=\">复制初始化</span>.</li>\n<li>explicit 指定符可以与常量表达式一同使用。函数若且唯若该常量表达式求值为 true 才为显式. (C++20 起)</li>\n</ol>\n<p>构造函数为什么会使用 explicit 关键字进行标注</p>\n<ul>\n<li>\n<p>如果不使用 explicit，对于 <code>MyContainer m = 10</code> ，编译器会进行隐式类型转换，此时程序的行为可能不符合我们预期</p>\n</li>\n<li>\n<p>有的时候利用 explicit 的特性可以帮助我们简化代码，但可能会对可读性造成影响</p>\n</li>\n</ul>\n<h4 id=\"成员变量定义时为什么加上\"><a class=\"anchor\" href=\"#成员变量定义时为什么加上\">#</a> 成员变量定义时为什么加上</h4>\n<p>这是一个好习惯，可以防止一些因未初始化问题导致的难以分析的 bug</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"可以尝试在构造函数-拷贝构造-拷贝赋值中插入打印语句查看下列代码的输出\"><a class=\"anchor\" href=\"#可以尝试在构造函数-拷贝构造-拷贝赋值中插入打印语句查看下列代码的输出\">#</a> 可以尝试在构造函数、拷贝构造、拷贝赋值中插入打印语句，查看下列代码的输出</h4>\n<h4 id=\"oo优化\"><a class=\"anchor\" href=\"#oo优化\">#</a> OO 优化</h4>\n<pre><code class=\"language-c++\">MyContainer get()&#123;\n  MyContainer m &#123;1&#125;;\n  return m;\n&#125;\nint main()&#123;\n  MyContainer m = get();\n  return 0;\n&#125;\n</code></pre>\n<ul>\n<li>\n<p>可以先猜测一下共输出多少语句，再运行程序</p>\n<ul>\n<li>\n<p>拷贝了 1 次？2 次？3 次？</p>\n</li>\n<li>\n<p>我在 x86-64 gcc 7.5 上用 - O0 优化的输出结果中，并没有任何拷贝的发生，只有一次构造和一次析构</p>\n<p>cxy 的测试，输出结果如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create my container<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>destroy my container<span class=\"token operator\">!</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>如果实际输出的结果比你预想的要少，可以查看以下链接进一步了解</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTI5NTMxMjcvd2hhdC1hcmUtY29weS1lbGlzaW9uLWFuZC1yZXR1cm4tdmFsdWUtb3B0aW1pemF0aW9u\">https://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization</span></p>\n<p>copy elision 拷贝的省略</p>\n<p>Copy elision is an optimization implemented by most compilers to prevent extra (potentially expensive) copies in certain situations. It makes returning by value or pass-by-value feasible 可行的 in practice (restrictions apply 限制应用).</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"报错\"><a class=\"anchor\" href=\"#报错\">#</a> 报错</h3>\n<p>free(): double free detected in tcache 2<br />\nfree（）：在 tcache 2 中检测到双空闲，在执行程序的过程中对同一块内存单元进行了两次 free () 操作</p>\n<h3 id=\"操作符重载\"><a class=\"anchor\" href=\"#操作符重载\">#</a> 操作符重载</h3>\n<p>对于系统的所有操作符，一般情况下，只支持基本数据类型和标准库中提供的 class，对于用户自己定义的 class，如果想支持基本操作，比如比较大小，判断是否相等，等等，则需要用户自己来定义关于这个操作符的具体实现。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWlktRHJlYW0vcC8xMDA2ODk5My5odG1s\">https://www.cnblogs.com/ZY-Dream/p/10068993.html</span></p>\n<h2 id=\"引用计数的共享内存容器-shared-container\"><a class=\"anchor\" href=\"#引用计数的共享内存容器-shared-container\">#</a> 引用计数的共享内存容器 Shared Container</h2>\n<p>目标</p>\n<p>基于我们给的代码框架，编写一个容器 SharedContainer，用该容器维护一个堆内存上的 Content 对象。</p>\n<p>这个堆内存上的对象可被一个或多个 SharedContainer 所共享，当没有 SharedContainer 持有这个对象的话，则销毁这个对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"create \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroy \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SharedContainer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">explicit</span> <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mem_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    _data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span>mem_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">delete</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        _data <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    _data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  SharedContainer<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> _data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    _data <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    _ref_count <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>_ref_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\">//TODO</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>_ref_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function\">SharedContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  SharedContainer <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> SharedContainer <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  Content <span class=\"token operator\">*</span>_data<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>_ref_count<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">//TODO: design your own reference counting mechanism</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  SharedContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  SharedContainer <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  SharedContainer m2 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  m1 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 需要考虑拷贝构造的时候，自己给自己赋值的情况</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    SharedContainer m3 <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  SharedContainer <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  SharedContainer <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  m1 <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    SharedContainer <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    m1 <span class=\"token operator\">=</span> m3<span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时已经没有指向 Content1 的指针，应该手动销毁</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">get_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"扩展学习待查看\"><a class=\"anchor\" href=\"#扩展学习待查看\">#</a> 扩展学习【待查看】</h3>\n<ol>\n<li>\n<p>思考如何扩展本练习中的共享内存容器，以支持对任意类型内存的共享</p>\n<ul>\n<li>请参考 shared_ptr 的基本原理，可能需要一些模板编程的知识</li>\n</ul>\n</li>\n<li>\n<p>有了 shared_ptr，我们是不是可以只需要创建资源，剩下的都交给 shared_ptr 管理</p>\n<ul>\n<li>\n<p>shared_ptr 可能产生循环引用而导致的内存泄漏</p>\n</li>\n<li>\n<p>shared_ptr 的额外性能开销</p>\n<ul>\n<li>标准库的 shared_ptr 不是线程安全的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>shared_ptr 既然能清理不被使用的内存，那么垃圾收集又是什么？</p>\n<ul>\n<li>前者回收资源是 eager 的；后者回收资源是 lazy 的</li>\n<li>前者有循环引用问题；后者没有</li>\n<li>...</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"智能指针的简介\"><a class=\"anchor\" href=\"#智能指针的简介\">#</a> 智能指针的简介</h4>\n<p>垃圾回收机制已经大行其道，得到了诸多编程语言的支持，例如 Java、Python、C#、PHP 等。而 C++ 虽然从来没有公开得支持过垃圾回收机制，但 C<ins>98/03 标准中，支持使用 auto_ptr 智能指针来实现堆内存的自动回收；C</ins>11 新标准在废弃 auto_ptr 的同时，增添了 unique_ptr、shared_ptr 以及 weak_ptr 这 3 个智能指针来实现堆内存的自动回收。</p>\n<p>相较于普通指针，智能指针可以在适当时机<strong>自动释放分配的内存</strong>。</p>\n<p>C++ 智能指针底层是采用<strong>引用计数</strong>的方式实现的。</p>\n<p>均可直接参考 cppreference。</p>\n<h4 id=\"shared_ptr\"><a class=\"anchor\" href=\"#shared_ptr\">#</a> shared_ptr</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3Lzc4OTguaHRtbA==\">http://c.biancheng.net/view/7898.html</span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 不传入任何实参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 传入空指针 nullptr, 指向空指针，计数为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 明确指向</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 调用拷贝构造函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p4</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者 std::shared_ptr&lt;int> p4 = p3;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 调用移动构造函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">p5</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 或者 std::shared_ptr&lt;int> p5 = std::move (p4);</span></pre></td></tr></table></figure><p>空的 shared_ptr 指针，其初始引用计数为 0，而不是 1。</p>\n<p>同一普通指针不能同时为多个 shared_ptr 对象赋值，否则会导致程序发生异常。</p>\n<p>在初始化 shared_ptr 智能指针时，还可以自定义所指堆内存的释放规则。对于申请的动态数组来说，shared_ptr 指针默认的释放规则是不支持释放数组的，只能自定义对应的释放规则，才能正确地释放申请的堆内存。</p>\n<h4 id=\"unique_ptr\"><a class=\"anchor\" href=\"#unique_ptr\">#</a> unique_ptr</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94aHkzMDU0LmdpdGh1Yi5pby9jcHAtdW5pcXVlLXB0ci8=\">https://xhy3054.github.io/cpp-unique-ptr/</span></p>\n<ol>\n<li><code>unique_ptr</code>  内部存储一个内置指针，当 <code>unique_ptr</code>  析构时，它的析构函数将会负责析构它持有的对象。</li>\n<li><code>unique_ptr</code>  提供了 <code>operator*()</code>  和 <code>operator-&gt;()</code>  成员函数，像内置指针一样，我们可以使用 * <strong>解引用</strong> unique_ptr，使用 -&gt; 来<strong>访问</strong> unique_ptr 所持有对象的成员。</li>\n<li><code>unique_ptr</code>  并不提供 <strong>copy</strong> 操作，这是为了防止多个 <code>unique_ptr</code>  指向同一对象。</li>\n<li>但 <code>unique_ptr</code>  提供了 <strong>move</strong> 操作，因此我们可以用 <code>std::move()</code>  来转移 unique_ptr。</li>\n</ol>\n<h4 id=\"weak_ptr\"><a class=\"anchor\" href=\"#weak_ptr\">#</a> weak_ptr</h4>\n<p>weak_ptr 是为了配合 shared_ptr 而引入的一种智能指针，它指向一个由 shared_ptr 管理的对象而不影响所指对象的生命周期，也就是将<strong>一个 weak_ptr 绑定到一个 shared_ptr 不会改变 shared_ptr 的引用计数</strong>。不论是否有 weak_ptr 指向，一旦最后一个指向对象的 shared_ptr 被销毁，对象就会被释放。从这个角度看，weak_ptr 更像是 shared_ptr 的一个助手而不是智能指针。</p>\n<p>我们不能使用 weak_ptr 直接访问对象。那么我们如何判断 weak_ptr 指向对象是否存在呢？C++ 中提供了 lock 函数来实现该功能。如果对象存在，lock () 函数返回一个指向共享对象的 shared_ptr，否则返回一个空 shared_ptr。</p>\n<h3 id=\"pointer-指针还是地址自增\"><a class=\"anchor\" href=\"#pointer-指针还是地址自增\">#</a> *pointer  指针还是地址自增？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODIwODAyMS9ob3ctdG8taW5jcmVtZW50LWEtcG9pbnRlci1hZGRyZXNzLWFuZC1wb2ludGVycy12YWx1ZQ==\">https://stackoverflow.com/questions/8208021/how-to-increment-a-pointer-address-and-pointers-value</span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value pointed at by ptr is incremented</span></pre></td></tr></table></figure><p>注意<strong> operator precedence</strong>—— the ++ operator takes precedence over the * operator, and the () operators take precedence over everything else.</p>\n<h2 id=\"内存管理-memory-contextmc\"><a class=\"anchor\" href=\"#内存管理-memory-contextmc\">#</a> 内存管理 memory context (MC)</h2>\n<blockquote>\n<p>主要考察析构函数</p>\n</blockquote>\n<p>由于 libc 原生的内存管理 API 的种种问题（例如，内存泄露和 double-free），某些数据库管理系统基于这些 API  实现了新的动态内存管理机制。具体地，这些实现中引入了一个称为 “memory  context” 的概念（后文简称为 “MC”），动态内存管理不再直接使用  <code>malloc</code>  /  <code>free</code>  等函数，而是调用某个 MC 对象提供的 API 进行。这些 MC 对象被组织为树状结构，如图 1 所示。这样，使用者不再需要为之前分配的每个内存块调用  <code>free</code>  等函数，而是等到相应的 MC 对象被销毁时统一地归还其下的动态内存。同时，由于树状结构的存在，在销毁较为高层的 MC 对象时，处于低层次的  MC 对象也同样会被销毁。这种机制极大降低了管理动态内存的心智负担，更好地避免了内存泄露和 double-free 等问题。</p>\n<p>可参考 Homework4 中 “内存管理” 的 pdf</p>\n<p>经过分析，用左子树表示子节点，用右子树表示兄弟节点构造树的结构。</p>\n<p>“如果一个 MC 有多个子 MC，那么按照创建这些子 MC 的顺序进行销毁”-》可以看出应该采用<strong>后序遍历</strong></p>\n<p>“如果一个 MC 下的内存块，按照分配顺序的逆序（即，后进先出）的顺序进行销毁”-》可以看出用<strong> stack</strong> 的数据结构模拟</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 除了 TODO 标出的部分，不要修改原有的声明和定义，否则后果自负！</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryContext</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   * @param parent 父节点，可能为 nullptr</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">~</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 禁止拷贝和移动</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  MemoryContext <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">using</span> chunk_id_t <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk_id_t <span class=\"token operator\">&amp;</span>chunk_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> parentMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> leftMC<span class=\"token punctuation\">;</span><span class=\"token comment\">// 子节点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> rightMC<span class=\"token punctuation\">;</span><span class=\"token comment\">// 兄弟节点</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  stack<span class=\"token operator\">&lt;</span>chunk_id_t<span class=\"token operator\">></span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  parentMC <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  leftMC <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  rightMC <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parentMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    MemoryContext <span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>leftMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      parent <span class=\"token operator\">-></span> leftMC <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">-></span> rightMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>rightMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      tmp <span class=\"token operator\">-></span> rightMC <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">// TODO: your code</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> pointer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pointer <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pointer<span class=\"token operator\">-></span>parentMC <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    pointer <span class=\"token operator\">=</span> pointer <span class=\"token operator\">-></span> parentMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MemoryContext <span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>leftMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    next <span class=\"token operator\">=</span> child <span class=\"token operator\">-></span> rightMC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// delete child;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    child <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  chunk_id_t str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    str <span class=\"token operator\">=</span> ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    ptr<span class=\"token operator\">-></span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Chunk \"</span> <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> <span class=\"token string\">\" freed.\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MemoryContext</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> chunk_id_t <span class=\"token operator\">&amp;</span>chunk_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  chunk<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>E <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>E <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>F <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  D<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  E<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/1/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  F<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1/2/4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span> A <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MemoryContext<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>B <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>C <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>D <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  MemoryContext <span class=\"token operator\">*</span>G <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MemoryContext</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  A<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  B<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3/5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1024/2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  C<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1024/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  G<span class=\"token operator\">-></span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8192/1/4095\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">REGISTER_TEST_CASE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span> #name<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>      test_functions_by_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>      <span class=\"token function\">REGISTER_TEST_CASE</span><span class=\"token punctuation\">(</span>test_5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string test_case_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> test_case_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> test_functions_by_name<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>test_case_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> test_functions_by_name<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token keyword\">auto</span> fn <span class=\"token operator\">=</span> it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token comment\">// 摸了 1h30min 但是不是很懂</span></pre></td></tr></table></figure><h3 id=\"cpp中this的理解\"><a class=\"anchor\" href=\"#cpp中this的理解\">#</a> cpp 中 this 的理解</h3>\n<p>在 C++ 中，每一个对象都能通过 <strong>this</strong> 指针来访问自己的地址。<strong>this</strong> 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象。</p>\n<h3 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h3>\n<p>pop 不返回参数，只是弹出</p>\n<p>需要用 top 函数进行顶层元素的访问</p>\n<h3 id=\"报错-2\"><a class=\"anchor\" href=\"#报错-2\">#</a> 报错</h3>\n<p>basic_string::_M_construct null not valid 错误的原因</p>\n<p>将 String 初始化为 NULL，这显然是非常降智的</p>\n<h2 id=\"ui-设计\"><a class=\"anchor\" href=\"#ui-设计\">#</a> UI 设计</h2>\n<p>公司 A 开发设计软件。请逐步实现功能。</p>\n<p>具体可参见 UI.pdf</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 改代码的 group 功能有些问题，无法正常访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rectangle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  string id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">double</span> grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">group</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle <span class=\"token operator\">*</span><span class=\"token operator\">></span> mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  string gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> aid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aid <span class=\"token operator\">&lt;</span> bid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp2</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">double</span> agrey <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">double</span> bgrey <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>grey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agrey <span class=\"token operator\">&lt;</span> bgrey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>agrey <span class=\"token operator\">></span> bgrey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  string delimiter <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  string token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">+</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle<span class=\"token operator\">></span> rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>group<span class=\"token operator\">></span> grp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    op <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      rectangle foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>grey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      rec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      group foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            foo<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      grp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>              item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>              item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>              item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                item<span class=\"token operator\">-></span>red <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                item<span class=\"token operator\">-></span>green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                item<span class=\"token operator\">-></span>blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Gray\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>      item<span class=\"token punctuation\">.</span>grey <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token operator\">-></span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>type <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象了一个 set 函数，缩了 20 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rectangle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  string id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">red</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">green</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">blue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//struct 的初始化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">double</span> <span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> red <span class=\"token operator\">*</span> <span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> green <span class=\"token operator\">*</span> <span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> blue <span class=\"token operator\">*</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">//set 归 set， 初始化归初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    red <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> green <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span> blue <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      red <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      green <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      blue <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      green <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      blue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">group</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  string gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">int</span> aid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aid <span class=\"token operator\">&lt;</span> bid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp2</span><span class=\"token punctuation\">(</span>rectangle a<span class=\"token punctuation\">,</span> rectangle b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">grey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">cmp1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  string delimiter <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  string token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pos <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    token <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">+</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>rectangle<span class=\"token operator\">></span> rec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>group<span class=\"token operator\">></span> grp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    op <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      rectangle foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      rec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      group foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      foo<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">=</span> op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> item <span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            foo<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>      grp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            item<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>gp<span class=\"token operator\">:</span> grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">.</span>gid <span class=\"token operator\">==</span> op<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> gpmem <span class=\"token operator\">=</span> gp<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gpmem<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>              <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span> rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> gpmem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                  item<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"Gray\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token operator\">:</span>rec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>red <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>green <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 佬的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">RECT</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> G<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 将 set 的函数抽象出来重复调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        R <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span> G <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span> B <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            R <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            G <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> G<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            B <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            G <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            B <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 不用单独存一个 gray 的量，用函数进行比较</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> R<span class=\"token operator\">*</span><span class=\"token number\">0.299</span> <span class=\"token operator\">+</span> G<span class=\"token operator\">*</span><span class=\"token number\">0.587</span> <span class=\"token operator\">+</span> B<span class=\"token operator\">*</span><span class=\"token number\">0.114</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmpgray</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">gray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmpi</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> groups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> rects<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>N<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        string cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cin <span class=\"token operator\">>></span> cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            RECT tmp<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cin <span class=\"token operator\">>></span> tmp<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            rects<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                cin <span class=\"token operator\">>></span> r <span class=\"token operator\">>></span> g <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                rects<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" G%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> gr <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                cin <span class=\"token operator\">>></span> r <span class=\"token operator\">>></span> g <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">:</span> gr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    rects<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"Group\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">int</span> N1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            cin <span class=\"token operator\">>></span> N1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>N1 <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" P%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">int</span> gid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" G%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>gid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            groups<span class=\"token punctuation\">[</span>gid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    string o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    cin <span class=\"token operator\">>></span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">>></span> outputs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> r<span class=\"token operator\">:</span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        outputs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token string\">\"Normal\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmpgray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> RECT<span class=\"token operator\">></span> r<span class=\"token operator\">:</span> outputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P\"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>R <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>G <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h3>\n<p>struct 默认成员函数是<strong> public</strong> 的</p>\n<p>struct 可以写函数</p>\n<h3 id=\"pair\"><a class=\"anchor\" href=\"#pair\">#</a> pair</h3>\n<p>pair 的定义 ——pair 可以理解为一个<strong>结构体</strong>，pair 将一对值 (T1 和 T2) 组合成一个值，这一对值可以具有<strong>不同的数据类型</strong>（T1 和 T2），两个值可以分别用 pair 的两个公有函数<strong> first</strong> 和<strong> second</strong> 访问。</p>\n<p>pair 的应用 ——pair 是将 2 个数据组合成一组数据，当需要这样的需求时就可以使用 pair，如 stl 中的 map 就是将 key 和 value 放在一起来保存。另一个应用是，当一个函数需要返回 2 个数据的时候，可以选择 pair。</p>\n<h4 id=\"pair的定义\"><a class=\"anchor\" href=\"#pair的定义\">#</a> pair 的定义</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 创建一个空的 pair 对象（使用默认构造），它的两个元素分别是 T1 和 T2 类型，采用值初始化。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">></span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 创建一个 pair 对象，它的两个元素分别是 T1 和 T2 类型，其中 first 成员初始化为 v1，second 成员初始化为 v2。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 以 v1 和 v2 的值创建一个新的 pair 对象，其元素类型分别是 v1 和 v2 的类型。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1 <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 两个 pair 对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者！(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回 true。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p1 <span class=\"token operator\">==</span> p2；                  <span class=\"token comment\">// 如果两个对象的 first 和 second 依次相等，则这两个对象相等；该运算使用元素的 == 操作符。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 返回对象 p1 中名为 first 的公有数据成员</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 返回对象 p1 中名为 second 的公有数据成员</span></pre></td></tr></table></figure><h4 id=\"pair的初始化\"><a class=\"anchor\" href=\"#pair的初始化\">#</a> pair 的初始化</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> anon<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 创建一个空对象 anon，两个元素类型都是 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> word_count<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 创建一个空对象 word_count, 两个元素类型分别是 string 和 int 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> line<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个空对象 line，两个元素类型分别是 string 和 vector 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Joy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 创建一个 author 对象，两个元素类型分别为 string 类型，并默认初始值为 James 和 Joy。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">name_age</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">name_age2</span><span class=\"token punctuation\">(</span>name_age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 拷贝构造初始化</span></pre></td></tr></table></figure><h4 id=\"typedef简化\"><a class=\"anchor\" href=\"#typedef简化\">#</a> typedef 简化</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span> Author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author <span class=\"token function\">proust</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"March\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Proust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Author <span class=\"token function\">Joy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Joy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"make_pair\"><a class=\"anchor\" href=\"#make_pair\">#</a> make_pair</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1 <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//output: 1 1.2</span></pre></td></tr></table></figure><h3 id=\"struct-initialization\"><a class=\"anchor\" href=\"#struct-initialization\">#</a> struct initialization</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221117152152036.png\" alt=\"image-20221117152152036\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhdWxrZzEyL2FydGljbGUvZGV0YWlscy84NTE5ODYyNA==\">https://blog.csdn.net/paulkg12/article/details/85198624</span></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        }
    ]
}