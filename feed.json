{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "https://quas-modo.github.io/2022/09/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture03-%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "Lecture03-应用层",
            "date_published": "2022-09-13T09:43:01.000Z",
            "content_html": "<p>动画有助于更好地理解</p>\n<p>interactive animation speaks a thousand words</p>\n<p>断更好几天了（趴）</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"第三章-运输层\"><a class=\"anchor\" href=\"#第三章-运输层\">#</a> 第三章 运输层</h1>\n<p>在网络层的基础上增加了<strong>端口号</strong>来实现进程到进程的通信。</p>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<ul>\n<li>\n<p><strong>TCP</strong>：可靠的、保序的传输，提供多路复用、解复用，拥塞控制、流量控制、建立连接</p>\n</li>\n<li>\n<p><strong>UDP</strong>：不可靠的、不保序的传输，提供多路复用和解复用</p>\n</li>\n</ul>\n<p>都不提供延时保证和带宽保证，延时和带宽依赖于网络层的服务</p>\n<h2 id=\"多路复用与多路分解\"><a class=\"anchor\" href=\"#多路复用与多路分解\">#</a> 多路复用与多路分解</h2>\n<p>multiplexing and demultiplexing</p>\n<p>在源主机从不同的套接字中收集数据块，并为每个数据块封装上首部信息，从而生成报文段，然后将报文段传递到网络层，所有这些工作称<strong>多路复用</strong>。</p>\n<ul>\n<li>每个套接字有唯一标志符</li>\n<li>传输层 / 运输层报文段中包含源端口号、目的端口号、传输数据等</li>\n</ul>\n<p>将运输层报文段中的数据交付到正确的套接字的工作称为<strong>多路分解</strong>。</p>\n<p>以上可用两家小孩寄邮件类比理解。</p>\n<h3 id=\"端口号\"><a class=\"anchor\" href=\"#端口号\">#</a> 端口号</h3>\n<p>0-65535</p>\n<p>0-1023 周知端口号 / 著名端口号 well-known port number</p>\n<p>一般而言，应用程序的客户端让运输层自动地（也是透明地）分配端口号，而服务器端则分配一个特定的端口号。</p>\n<h3 id=\"面向无连接的多路复用与多路分解\"><a class=\"anchor\" href=\"#面向无连接的多路复用与多路分解\">#</a> 面向无连接的多路复用与多路分解</h3>\n<p>一个 UDP 套接字是由一个<strong>二元组</strong>全面标识的，包含一个目标 IP 地址和一个目的端口号。</p>\n<p><strong>如果两个 UDP 报文段有不同的源 IP 地址和 / 或源端口号，但具有相同的目的 IP 地址和目的端口号，那么这两个报文段将通过相同的目的套接字被定向到相同的目的进程。</strong></p>\n<h3 id=\"面向连接的多路复用与多路分解\"><a class=\"anchor\" href=\"#面向连接的多路复用与多路分解\">#</a> 面向连接的多路复用与多路分解</h3>\n<p>一个 TCP 套接字是由一个<strong>四元组</strong>全面标识的，包含源地址、源端口、目的 IP 地址、目的端口。</p>\n<p><strong>不同的源将定向到不同的目的进程。</strong></p>\n<h3 id=\"web服务器与tcp\"><a class=\"anchor\" href=\"#web服务器与tcp\">#</a> Web 服务器与 TCP</h3>\n<p>连接套接字与进程之间并非总是有着一一对应的关系。如今一些高性能的 Web 服务器通常只有一个进程，但是为每个新的客户连接创建一个具有新连接套接字的新线程。</p>\n<h2 id=\"无连接运输udp\"><a class=\"anchor\" href=\"#无连接运输udp\">#</a> 无连接运输：UDP</h2>\n<h3 id=\"udp的优点为什么要使用udp\"><a class=\"anchor\" href=\"#udp的优点为什么要使用udp\">#</a> UDP 的优点 / 为什么要使用 UDP：</h3>\n<ul>\n<li>关于发送什么数据以及何时发送的应用层控制得更为精细</li>\n<li>无须连接建立</li>\n<li>无连接状态</li>\n<li>分组首部开销小</li>\n</ul>\n<h3 id=\"udp检验和\"><a class=\"anchor\" href=\"#udp检验和\">#</a> UDP 检验和</h3>\n<p>端到端原则：某种功能必须是基于端到端的实现，“与在较高级别提供这些功能的代价相比，在较低级别设置的功能可能是冗余的或几乎没有价值的、”</p>\n<p>回卷、反码</p>\n<p>在目标地址，将四个比特字加在一起，每一位为 1，则无差错。</p>\n<h2 id=\"可靠数据传输rdt的原理\"><a class=\"anchor\" href=\"#可靠数据传输rdt的原理\">#</a> 可靠数据传输（rdt）的原理</h2>\n<p>rdt: reliable data transfer protocol</p>\n<p>双向的数据传输协议就是两个单向的数据传输协议的综合</p>\n<p>FSM Finite-State Machine</p>\n<h3 id=\"构造可靠数据传输协议\"><a class=\"anchor\" href=\"#构造可靠数据传输协议\">#</a> 构造可靠数据传输协议</h3>\n<h4 id=\"基于完全可靠信道-rdt10\"><a class=\"anchor\" href=\"#基于完全可靠信道-rdt10\">#</a> 基于完全可靠信道 rdt1.0</h4>\n<p>直接传就好了 Orz</p>\n<h4 id=\"经具有比特差错信道的可靠数据传输-rdt20\"><a class=\"anchor\" href=\"#经具有比特差错信道的可靠数据传输-rdt20\">#</a> 经具有比特差错信道的可靠数据传输 rdt2.0</h4>\n<p>ARQ Automatic Repeat reQuest 自动重传请求协议</p>\n<ul>\n<li>差错检测</li>\n<li>接收方反馈（ACK, NAK）</li>\n<li>重传</li>\n</ul>\n<p>停等（stop-wait）协议：发送方将不会发送一块新数据，除非发送方确信接收方已正确接受当前分组。</p>\n<h4 id=\"如果acknak出错-rdt21\"><a class=\"anchor\" href=\"#如果acknak出错-rdt21\">#</a> 如果 ACK/NAK 出错 -&gt; rdt2.1</h4>\n<p>增加序号 0,1</p>\n<p>根据收到的序号即可确定是否正在重传前一个发送分组</p>\n<h4 id=\"nak-free-在ack后加序号-rdt22\"><a class=\"anchor\" href=\"#nak-free-在ack后加序号-rdt22\">#</a> NAK free 在 ACK 后加序号 -&gt; rdt2.2</h4>\n<p>为后面发送多个数据做准备</p>\n<p>确认信息减少一般，协议简单</p>\n<h4 id=\"经具有比特差错的丢包信道的可靠数据传输-rdt30\"><a class=\"anchor\" href=\"#经具有比特差错的丢包信道的可靠数据传输-rdt30\">#</a> 经具有比特差错的丢包信道的可靠数据传输 rdt3.0</h4>\n<p>比特交替协议 alternating-bit protocol</p>\n<p>设置倒计数计时器 (countdown timer) ，一旦超过时间，则重传</p>\n<p>虽然可能造成冗余数据分组（duplicate data packet），但 rdt2.0 已经处理了这部分内容</p>\n<h3 id=\"流水线可靠数据传输协议\"><a class=\"anchor\" href=\"#流水线可靠数据传输协议\">#</a> 流水线可靠数据传输协议</h3>\n<p>rdt3.0 的<strong>停等协议</strong>降低了传输的性能，等待到收到回复后才进行下一步操作，链路的利用率太低。</p>\n<p>因此，开发了流水线技术，即一次传输多个分组。</p>\n<h3 id=\"回退n步go-back-n-如何处理流水线的差错恢复\"><a class=\"anchor\" href=\"#回退n步go-back-n-如何处理流水线的差错恢复\">#</a> 回退 N 步 Go-Back-N —— 如何处理流水线的差错恢复</h3>\n<p>N - window size 窗口长度</p>\n<p>sliding-window protocol 滑动窗口协议</p>\n<h4 id=\"发送方响应的事件\"><a class=\"anchor\" href=\"#发送方响应的事件\">#</a> 发送方响应的事件</h4>\n<ul>\n<li>\n<p>上层调用</p>\n</li>\n<li>\n<p>收到一个 ACK 累计确认</p>\n</li>\n<li>\n<p>超时事件</p>\n<p>如果出现超时，发送方重传所有已发送但还未被确认过的分组。</p>\n<p>如果收到一个 ACK，但仍有已发送但未被确认的分组，则定时器被重新启动。</p>\n</li>\n</ul>\n<h4 id=\"接收方\"><a class=\"anchor\" href=\"#接收方\">#</a> 接收方</h4>\n<p>接收方若收到 失序、错误分组，则丢弃该分组，并为<strong>最近按序接收的分组</strong>重新发送 ACK。</p>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h4>\n<p>接收缓存简单</p>\n<h4 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h4>\n<p>单个分组的差错就能引起 GBN 重传大量分组</p>\n<p>（配套的 GBN Java 小程序好好玩</p>\n<h3 id=\"selective-repeat-sr-如何处理流水线的差错恢复\"><a class=\"anchor\" href=\"#selective-repeat-sr-如何处理流水线的差错恢复\">#</a> Selective Repeat SR —— 如何处理流水线的差错恢复</h3>\n<h4 id=\"接收方-2\"><a class=\"anchor\" href=\"#接收方-2\">#</a> 接收方</h4>\n<p>失序的分组将被缓存直到所有丢失分组（即序号更小的分组）皆被接收</p>\n<p>接收到后为<strong>接收的分组</strong>发送 ACK</p>\n<p>不在缓存范围内的分组将被丢失</p>\n<h4 id=\"发送方\"><a class=\"anchor\" href=\"#发送方\">#</a> 发送方</h4>\n<ul>\n<li>\n<p>从上层收到数据</p>\n</li>\n<li>\n<p>超时 —— 每个分组都要有自己的逻辑计时器，超时发送后只能发送一个分组。</p>\n</li>\n<li>\n<p>收到 ACK—— 窗口基序号向前移动到具有最小序号的未确认分组处，如果窗口移动了并且有序号落在窗口内的为发送分组，则发送这些分组。</p>\n</li>\n</ul>\n<p>具体可实际操作一下小程序</p>\n<p><strong>出错率低适合用 GBN，链路容量大适合用 SR</strong></p>\n<h2 id=\"面向连接的运输tcp\"><a class=\"anchor\" href=\"#面向连接的运输tcp\">#</a> 面向连接的运输：TCP</h2>\n<h3 id=\"tcp连接\"><a class=\"anchor\" href=\"#tcp连接\">#</a> TCP 连接</h3>\n<p>全双工服务 full-duplex service</p>\n<p>最大报文段长度 MSS Maximum Segment Size</p>\n<h3 id=\"tcp报文段结构\"><a class=\"anchor\" href=\"#tcp报文段结构\">#</a> TCP 报文段结构</h3>\n<p>Holy &amp;^%@! That idiot made a TCP header diagram in Lego(TM)!</p>\n<p>有趣，但孩子不玩乐高（x</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaWdodGVvdXNpdC53b3JkcHJlc3MuY29tLzIwMTAvMDYvMjcvcHJhY3RpY2FsLXZpc3VhbC10aHJlZS1kaW1lbnNpb25hbC1wZWRhZ29neS1mb3ItaW50ZXJuZXQtcHJvdG9jb2wtcGFja2V0LWhlYWRlci1jb250cm9sLWZpZWxkcy8=\">https://righteousit.wordpress.com/2010/06/27/practical-visual-three-dimensional-pedagogy-for-internet-protocol-packet-header-control-fields/</span></p>\n<p>源端口号、目标端口、序号、确认号、首部长度、保留未用、标志字段、接收窗口、因特网检验和、紧急数据指针、选项、数据</p>\n<h4 id=\"序号和确认号\"><a class=\"anchor\" href=\"#序号和确认号\">#</a> 序号和确认号</h4>\n<p>在主机 A 的一个进程与主机 B 的一个进程的连接中，主机 A 填充进报文段的<strong>确认号</strong>是主机 A 期望从主机 B 收到的下一字节的序号。</p>\n<p><strong>累积确认</strong>：TCP 只确认该流中至第一个丢失字节为止的字节</p>\n<p><strong>捎带</strong>：对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据的报文段中</p>\n<h3 id=\"往返时间的估计与超时\"><a class=\"anchor\" href=\"#往返时间的估计与超时\">#</a> 往返时间的估计与超时</h3>\n<p><strong>指数加权移动平均</strong>：根据较近的 SampleRTT 的值估计目前的平均</p>\n<p><strong>超时间隔</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>=</mo><mi>E</mi><mi>s</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mn>4</mn><mo>∗</mo><mi>D</mi><mi>e</mi><mi>v</mi><mi>R</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">TimeoutInterval = EstimatedRTT + 4 * DevRTT\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></p>\n<p>（用了一些公式计算出了 EstimatedRTT 和 DevRTT，进而估算 TimeoutInterval）</p>\n<h3 id=\"可靠数据传输\"><a class=\"anchor\" href=\"#可靠数据传输\">#</a> 可靠数据传输</h3>\n<p><strong>超时间隔加倍</strong>：再次超时，超时间隔设置为原来的两倍</p>\n<p><strong>冗余 ACK</strong>：一旦收到 3 个冗余 ACK，TCP 就执行快速重传（fast retransmit）</p>\n<p><strong>TCP 是 GBN 和 SR 协议的混合体</strong></p>\n<h3 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h3>\n<p>区分流量控制和拥塞控制。</p>\n<p><strong>流量控制</strong>是端到端的控制，例如 A 通过网络给 B 发数据，A 发送的太快导致 B 没法接收 (B 缓冲窗口过小或者处理过慢)，这时候的控制就是流量控制，原理是通过<strong>滑动窗口的大小</strong>改变来实现。 其中，rwnd 指接收窗口 receive window。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>S</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>−</mo><mi>L</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>A</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>d</mi><mo>&lt;</mo><mo>=</mo><mi>r</mi><mi>w</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">LastByteSent - LastByteAcked &lt;= rwnd\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span></span></span></span></span></p>\n<p><strong>拥塞控制</strong>是 A 与 B 之间的网络发生堵塞导致传输过慢或者丢包，来不及传输。防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络性能有关的所有因素。</p>\n<h3 id=\"tcp连接管理\"><a class=\"anchor\" href=\"#tcp连接管理\">#</a> TCP 连接管理</h3>\n<p>SYN</p>\n<p>FIN</p>\n<p>通过三次握手建立连接，两次握手会造成半连接（只有一端维护了连接）</p>\n<h2 id=\"拥塞控制原理\"><a class=\"anchor\" href=\"#拥塞控制原理\">#</a> 拥塞控制原理</h2>\n<p><strong>拥塞表现</strong>：分组丢失、延时较长</p>\n<h3 id=\"拥塞原因与代价\"><a class=\"anchor\" href=\"#拥塞原因与代价\">#</a> 拥塞原因与代价</h3>\n<ul>\n<li>当分组的到达速率接近链路容量时，分组经历巨大的排队时延</li>\n<li>发送方必须执行重传以补偿因为缓存溢出而丢失（丢弃）的分组</li>\n<li>发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽转发不必要的分组副本</li>\n<li>当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终被浪费调了</li>\n</ul>\n<h3 id=\"拥塞控制方法\"><a class=\"anchor\" href=\"#拥塞控制方法\">#</a> 拥塞控制方法</h3>\n<ul>\n<li>端到端拥塞控制</li>\n<li>网络辅助拥塞控制（NI 字段表示轻微拥塞，CI 字段表示拥塞指示）</li>\n</ul>\n<h2 id=\"tcp-拥塞控制\"><a class=\"anchor\" href=\"#tcp-拥塞控制\">#</a> TCP 拥塞控制</h2>\n<p>TCP 使用端到端的拥塞控制，而不是网络辅助的拥塞控制。网络辅助的拥塞控制代价过高。</p>\n<h3 id=\"指导性原则\"><a class=\"anchor\" href=\"#指导性原则\">#</a> 指导性原则</h3>\n<ol>\n<li>一个丢失的报文段意味着拥塞，因此当丢失报文段时应当降低 TCP 发送方的速率。</li>\n<li>一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率。</li>\n<li>宽带检测</li>\n</ol>\n<h3 id=\"tcp拥塞控制算法\"><a class=\"anchor\" href=\"#tcp拥塞控制算法\">#</a> TCP 拥塞控制算法</h3>\n<h4 id=\"慢启动\"><a class=\"anchor\" href=\"#慢启动\">#</a> 慢启动</h4>\n<p>指数增长，每过一个 RTT，发送速率就翻番</p>\n<h4 id=\"拥塞避免\"><a class=\"anchor\" href=\"#拥塞避免\">#</a> 拥塞避免</h4>\n<p>线性增长，无论何时到达一个新的确认，就将 cwnd 增加一个 MSS 字节</p>\n<h4 id=\"快速恢复\"><a class=\"anchor\" href=\"#快速恢复\">#</a> 快速恢复</h4>\n",
            "tags": [
                "专业书籍",
                "计算机网络自顶向下",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "https://quas-modo.github.io/2022/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture02-%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "Lecture02-应用层",
            "date_published": "2022-09-10T16:20:37.000Z",
            "content_html": "<p>TCP 和 UDP 编程相关总结暂缺。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"第二章-应用层\"><a class=\"anchor\" href=\"#第二章-应用层\">#</a> 第二章 应用层</h1>\n<h2 id=\"应用层协议原理\"><a class=\"anchor\" href=\"#应用层协议原理\">#</a> 应用层协议原理</h2>\n<h3 id=\"网络应用程序体系结构\"><a class=\"anchor\" href=\"#网络应用程序体系结构\">#</a> 网络应用程序体系结构</h3>\n<ol>\n<li>\n<p>客户 - 服务器体系结构</p>\n</li>\n<li>\n<p>P2P 体系结构</p>\n<p>主机为对等方，具有自扩展性</p>\n</li>\n<li>\n<p>C/S 和 P2P 体系结构的混合体</p>\n</li>\n</ol>\n<h3 id=\"进程通信\"><a class=\"anchor\" href=\"#进程通信\">#</a> 进程通信</h3>\n<ol>\n<li>\n<p>客户端与服务器的进程</p>\n<p>发起通信的进程被识别为客户，在会话开始时等待联系的进程是服务器</p>\n</li>\n<li>\n<p>进程与计算机网络之间的接口</p>\n<p><strong>套接字</strong>接口，也成为应用程序编程接口，是同一台主机内应用层与运输层直接的接口。</p>\n<p>层间接口必须要携带：</p>\n<ul>\n<li>传什么（要传输的报文）</li>\n<li>谁传的（IP + 端口号）</li>\n<li>传给谁（IP + 端口号）</li>\n</ul>\n</li>\n<li>\n<p>进程寻址</p>\n<ul>\n<li>TCP 四元组（源 IP、源端口号、目标 IP、目标端口号）</li>\n<li>UDP 二元组</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"可供应用程序使用的运输服务\"><a class=\"anchor\" href=\"#可供应用程序使用的运输服务\">#</a> 可供应用程序使用的运输服务</h3>\n<ol>\n<li>可靠的数据传输</li>\n<li>吞吐量</li>\n<li>定时</li>\n<li>安全性</li>\n</ol>\n<h3 id=\"因特网提供的运输服务\"><a class=\"anchor\" href=\"#因特网提供的运输服务\">#</a> 因特网提供的运输服务</h3>\n<h4 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h4>\n<ul>\n<li>面向连接的服务</li>\n<li>可靠的数据传送服务</li>\n<li>拥塞控制</li>\n<li>流量控制</li>\n<li>SSL 加密</li>\n<li>不保证吞吐量和定时</li>\n</ul>\n<h4 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h4>\n<ul>\n<li>可以区分进程，无需建立链接</li>\n<li>不可靠</li>\n<li>没有拥塞、流量控制，不保证吞吐量和定时</li>\n</ul>\n<h2 id=\"web和http\"><a class=\"anchor\" href=\"#web和http\">#</a> Web 和 HTTP</h2>\n<h3 id=\"http概况\"><a class=\"anchor\" href=\"#http概况\">#</a> HTTP 概况</h3>\n<p>HyperText Transfer Protocal, HTTP 超文本传输协议</p>\n<p>HTTP 定义了 Web 客户向 Web 服务器请求 Web 页面的方式，以及服务器向客户传送 Web 页面的方式。</p>\n<p>HTTP 使用 TCP 作为它的支撑运输协议。</p>\n<p>HTTP 是一个无状态协议，因为 HTTP 不保存关于客户的任何信息。</p>\n<h3 id=\"非持续性连接和持续连接\"><a class=\"anchor\" href=\"#非持续性连接和持续连接\">#</a> 非持续性连接和持续连接</h3>\n<ul>\n<li>\n<p>非持续连接：每个请求 / 相应对是经一个单独的 TCP 连接发送，HTTP/1.0 使用非持久连接</p>\n</li>\n<li>\n<p>持续连接：所有的请求及其相应经相同的 TCP 连接发送，HTTP/1.1 默认使用持久连接</p>\n<ul>\n<li>非流水方式的持久 HTTP（客户端在收到前一个请求的相应之后再发出下一个请求）</li>\n<li>流水方式的持久 HTTP</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"http报文格式\"><a class=\"anchor\" href=\"#http报文格式\">#</a> HTTP 报文格式</h3>\n<ol>\n<li>HTTP 请求报文\n<ul>\n<li>请求行</li>\n<li>首部行</li>\n<li>空行</li>\n<li>实体体</li>\n</ul>\n</li>\n<li>HTTP 响应报文\n<ul>\n<li>状态行</li>\n<li>首部行</li>\n<li>空行</li>\n<li>实体体</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h3>\n<p>提高 Web 服务器的性能，希望把内容和用户身份联系起来。</p>\n<p>cookie 的技术有 4 个组件：</p>\n<ol>\n<li>在 HTTP 响应报文中有一个 cookie 首部行</li>\n<li>在 HTTP 请求报文中有一个 cookie 的首部行</li>\n<li>在用户端系统中存有 cookie 组件，并由用户的浏览器进行管理</li>\n<li>位于 Web 站点的一个后端数据库</li>\n</ol>\n<h3 id=\"web缓存\"><a class=\"anchor\" href=\"#web缓存\">#</a> Web 缓存</h3>\n<p>web 缓存器也叫代理服务器</p>\n<h3 id=\"get方法\"><a class=\"anchor\" href=\"#get方法\">#</a> Get 方法</h3>\n<p><strong>缓存是为了性能，清除是为了更新</strong></p>\n<h2 id=\"因特网中的电子邮件\"><a class=\"anchor\" href=\"#因特网中的电子邮件\">#</a> 因特网中的电子邮件</h2>\n<p>SMTP</p>\n<p>POP3 - 本地管理文件夹</p>\n<p>IMAP - 远程管理文件夹</p>\n<h2 id=\"dns因特网的目录服务\"><a class=\"anchor\" href=\"#dns因特网的目录服务\">#</a> DNS：因特网的目录服务</h2>\n<p>DNS - Domain Name System 域名系统</p>\n<p>DNS 协议运行在 UDP 之上，使用 53 号端口。</p>\n<h3 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h3>\n<p>实现域名和 IP 地址的转换</p>\n<p>主机别名</p>\n<p>邮件服务器别名</p>\n<p>负载分配</p>\n<h3 id=\"集中式设计\"><a class=\"anchor\" href=\"#集中式设计\">#</a> 集中式设计</h3>\n<ul>\n<li>单点故障</li>\n<li>通信容量</li>\n<li>远距离的集中式数据库</li>\n<li>维护</li>\n</ul>\n<h3 id=\"分布式-层次数据库\"><a class=\"anchor\" href=\"#分布式-层次数据库\">#</a> 分布式、层次数据库</h3>\n<ul>\n<li>根 DNS 服务器</li>\n<li>顶级域 DNS 服务器</li>\n<li>权威 DNS 服务器</li>\n</ul>\n<p>域与物理划分无关，是逻辑的划分</p>\n<h3 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h3>\n<p>迭代查询</p>\n<p>递归查询</p>\n<h3 id=\"报文\"><a class=\"anchor\" href=\"#报文\">#</a> 报文</h3>\n<p>DNS 查询和响应的报文格式相同</p>\n<h2 id=\"p2p文件分发\"><a class=\"anchor\" href=\"#p2p文件分发\">#</a> P2P 文件分发</h2>\n<p>可扩展性好，随着用户数增加，最短分配时间上升得较慢</p>\n<p>BitTorrent 是一种用于文件分发的流行的 P2P 协议，参与一个特定文件夹分发的所有对等方的集合被称为一个洪流。</p>\n<h3 id=\"最稀缺优先\"><a class=\"anchor\" href=\"#最稀缺优先\">#</a> 最稀缺优先</h3>\n<p>首先请求最稀缺的块</p>\n<h3 id=\"一报还一报\"><a class=\"anchor\" href=\"#一报还一报\">#</a> 一报还一报</h3>\n<p>向给自己提供最大宽带的服务发送块</p>\n<p>每个 30s，随机选择其他 peer 发送块</p>\n<h3 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h3>\n<p>集中</p>\n<p>分散</p>\n<p>半分散</p>\n<h2 id=\"视频流和内容分发网\"><a class=\"anchor\" href=\"#视频流和内容分发网\">#</a> 视频流和内容分发网</h2>\n<h3 id=\"dash\"><a class=\"anchor\" href=\"#dash\">#</a> DASH</h3>\n<p>Dynamic Adaptive Streaming over HTTP 经 HTTP 的动态适应性流</p>\n<p>服务器：将视频文件分割成多个块，每个块独立存储，编码于不同码率，告示文件提供不同块的 URL</p>\n<p>客户端：获取告示文件，测量服务器到客户端的带宽，选择合适的码率的编码块</p>\n<h3 id=\"内容分发网cdn\"><a class=\"anchor\" href=\"#内容分发网cdn\">#</a> 内容分发网 CDN</h3>\n<p>Content Distribution Network CDN</p>\n<p>做一些 copy</p>\n<h2 id=\"套接字编程\"><a class=\"anchor\" href=\"#套接字编程\">#</a> 套接字编程</h2>\n<h3 id=\"tcp编程\"><a class=\"anchor\" href=\"#tcp编程\">#</a> TCP 编程</h3>\n<h3 id=\"udp编程\"><a class=\"anchor\" href=\"#udp编程\">#</a> UDP 编程</h3>\n",
            "tags": [
                "专业书籍",
                "计算机网络自顶向下",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/",
            "url": "https://quas-modo.github.io/2022/09/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture01/",
            "title": "Lecture01",
            "date_published": "2022-09-09T01:54:05.000Z",
            "content_html": "<p>本系列参考中科大郑铨老师网课和《计算机网络：自顶向下》整理。</p>\n<p>因为是听完课很久之后整理的，所以只整理了纲要（趴</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"第一章-概论\"><a class=\"anchor\" href=\"#第一章-概论\">#</a> 第一章 概论</h1>\n<h2 id=\"什么是internet\"><a class=\"anchor\" href=\"#什么是internet\">#</a> 什么是 Internet？</h2>\n<h3 id=\"从构成因特网的基本硬件和软件组件理解\"><a class=\"anchor\" href=\"#从构成因特网的基本硬件和软件组件理解\">#</a> 从构成因特网的基本硬件和软件组件理解</h3>\n<ul>\n<li>\n<p><strong>节点</strong></p>\n<ul>\n<li>主机及其上运行的应用程序</li>\n<li>路由器、交换机等网络交换设备</li>\n</ul>\n</li>\n<li>\n<p><strong>边</strong></p>\n<ul>\n<li>接入网链路：主机连接到互联网的链路</li>\n<li>主干链路：路由器间的链路</li>\n</ul>\n</li>\n<li>\n<p><strong>协议</strong></p>\n</li>\n</ul>\n<h3 id=\"从服务角度-分布式应用提供服务的联网基础设施理解\"><a class=\"anchor\" href=\"#从服务角度-分布式应用提供服务的联网基础设施理解\">#</a> 从服务角度、分布式应用提供服务的联网基础设施理解</h3>\n<ul>\n<li>使用通信设施进行通信的分布式应用</li>\n<li>通信基础设施为 apps 提供编程接口（通信服务）</li>\n</ul>\n<h2 id=\"什么是协议\"><a class=\"anchor\" href=\"#什么是协议\">#</a> 什么是协议？</h2>\n<p>协议定义了在两个或多个通信实体之间交换的报文的<strong>格式和顺序</strong>，以及报文发送和 / 或接收一条报文或其他事件所采取的<strong>动作</strong>。</p>\n<h2 id=\"网络结构\"><a class=\"anchor\" href=\"#网络结构\">#</a> 网络结构</h2>\n<ul>\n<li>\n<p>网络边缘</p>\n<p>端系统</p>\n<ul>\n<li>客户端 / 服务器模式</li>\n<li>对等（peer-peer）模式</li>\n</ul>\n</li>\n<li>\n<p>网络核心</p>\n<ul>\n<li>\n<p>电路交换</p>\n<p>频分复用（FDM，Frequency-Division Multiplexing）和时分复用（TDM, Time-Division Multiplexing）</p>\n<p>独享资源，不共享，用于电话，不适合计算机之间的通信</p>\n</li>\n<li>\n<p>分组交换</p>\n<p>储存和转发、时延（节点处理时延、排队时延、传输时延、传播时延）和分组丢失、转发表和路由选择协议</p>\n<ul>\n<li>数据报网络</li>\n<li>虚电路网络</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>接入网</p>\n<ul>\n<li>家庭接入：DSL（数字用户线）、电缆、FTTH（光纤到户）、拨号和卫星</li>\n<li>企业（和家庭）接入：以太网和 WiFi</li>\n<li>广域无线接入：3G 和 LTE</li>\n</ul>\n</li>\n<li>\n<p>物理媒体</p>\n<ul>\n<li>导引型媒体\n<ul>\n<li>双绞铜线</li>\n<li>同轴电缆</li>\n<li>光纤</li>\n</ul>\n</li>\n<li>非导引型媒体\n<ul>\n<li>陆地无线电信道</li>\n<li>卫星无线电信道</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"internet结构和isp\"><a class=\"anchor\" href=\"#internet结构和isp\">#</a> Internet 结构和 ISP</h2>\n<p>互联网络结构：网络的网络</p>\n<p>端系统通过接入 ISPs（Internet Service Providers）连接到互联网中</p>\n<p>因特网内容服务商（ICP, Internet Content Providers）会构建自己的网络</p>\n<h2 id=\"协议层次及其服务模型\"><a class=\"anchor\" href=\"#协议层次及其服务模型\">#</a> 协议层次及其服务模型</h2>\n<p>上层依赖下层提供的服务，并创造新的服务和功能</p>\n<ol>\n<li>\n<p>应用层</p>\n<p>为人类用户或者其他用户进程提供网络应用服务</p>\n</li>\n<li>\n<p>运输层</p>\n<p>主机和主机的数据传输</p>\n<p>细分网络层的服务，进程到进程（port）</p>\n<p>将不可靠的通信变成可靠的通信</p>\n</li>\n<li>\n<p>网络层</p>\n<p>为数据报从源到目的选择路由</p>\n<p>主机主机之间的通信，端到端通信，不可靠</p>\n</li>\n<li>\n<p>链路层</p>\n<p>point to point 相邻网络节点间的数据传输</p>\n</li>\n<li>\n<p>物理层</p>\n<p>在线路上传送 bit</p>\n</li>\n</ol>\n",
            "tags": [
                "专业书籍",
                "计算机网络自顶向下",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "https://quas-modo.github.io/2022/09/08/COA/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "Lecture01-计算机系统概述",
            "date_published": "2022-09-08T12:30:32.000Z",
            "content_html": "<p>第一讲，以及对于书籍的第一章重点知识点整理</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"课程随笔\"><a class=\"anchor\" href=\"#课程随笔\">#</a> 课程随笔</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p><strong>通用 电子 数字 计算机</strong></p>\n<p>通用</p>\n<p>电子</p>\n<p>数字</p>\n<h3 id=\"组织与结构\"><a class=\"anchor\" href=\"#组织与结构\">#</a> 组织与结构</h3>\n<ol>\n<li>结构 (对于程序员是可见的)\n<ul>\n<li>一个提供乘法算法的计算机和另一个不提供乘法算法的计算机之间的区别</li>\n<li>包括：指令集、各类数据类型的大小</li>\n</ul>\n</li>\n<li>组织 (对于程序员是不可见的)\n<ul>\n<li>一个用乘法器完成乘法的计算机和一个用加法器通过算法完成乘法的计算机之间的不同。</li>\n<li>包括：控制信号、存储技术</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"计算机发展历史\"><a class=\"anchor\" href=\"#计算机发展历史\">#</a> 计算机发展历史</h2>\n<p>真空管</p>\n<p>晶体管</p>\n<p>集成电路（scale 越来越大，SSI-&gt;MSI-&gt;LSI-&gt;VLSI-&gt;ULSI）</p>\n<p>摩尔定律（集成电路芯片上集成的晶体管数将番一番，速度将提高一倍，而价格将降低一半）</p>\n<h2 id=\"冯诺依曼结构的实现与演变\"><a class=\"anchor\" href=\"#冯诺依曼结构的实现与演变\">#</a> 冯诺依曼结构的实现与演变</h2>\n<h3 id=\"cpu-北桥-南桥\"><a class=\"anchor\" href=\"#cpu-北桥-南桥\">#</a> CPU + 北桥 + 南桥</h3>\n<p>芯片近北桥，远离南桥。</p>\n<h4 id=\"南桥\"><a class=\"anchor\" href=\"#南桥\">#</a> 南桥</h4>\n<p>南桥（英语：Southbridge）是基于个人计算机主板芯片组架构中的其中一枚芯片。南桥设计用来处理<strong>低速信号</strong>，通过北桥与中央处理器联系。<br />\n南桥芯片负责 I/O 总线之间的通信，如 PCI 总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。<br />\nPCI、SATA、IDE、USB。</p>\n<h4 id=\"北桥\"><a class=\"anchor\" href=\"#北桥\">#</a> 北桥</h4>\n<p>北桥设计用来处理<strong>高速信号</strong>，通常处理中央处理器、存储器、PCI Express 显卡（早年是 AGP 显卡）、高速 PCI Express X16/X8 的端口，还有与南桥之间的通信。<br />\n芯片组（chipset）的名称就是以北桥芯片的名称来命名的。<br />\n北桥被用来处理高速信号，通常处理 CPU（处理器），RAM（内存），AGP 端口或 PCI Express, 和南桥芯片之间的通信。<br />\nPCIE/AGP、Memory、CPU。</p>\n<h3 id=\"cpu-pch集成显卡-显示部件\"><a class=\"anchor\" href=\"#cpu-pch集成显卡-显示部件\">#</a> CPU + PCH（集成显卡 - 显示部件）</h3>\n<p>PCH 全称为 Platform Controller Hub，是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9pbnRlbCVFNSU4NSVBQyVFNSU4RiVCOA==\"> intel 公司</span>的集成南桥。</p>\n<p>北桥中的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于整个北桥芯片都集成到了 CPU 内部，主板上只剩下南桥。所以 PCH 可以理解成南桥。目前 Intel 的有些 SOC 就是连 PCH 也集成到了 CPU 内部，比如：Intel Xeon D 系列.</p>\n<h2 id=\"计算机性能\"><a class=\"anchor\" href=\"#计算机性能\">#</a> 计算机性能</h2>\n<h3 id=\"cpu性能\"><a class=\"anchor\" href=\"#cpu性能\">#</a> CPU 性能</h3>\n<p>时钟频率 / 时钟周期</p>\n<p>CPI</p>\n<p>MIPS（每秒百万条指令）</p>\n<p>MRLOPS（每秒百万条浮点操作）</p>\n<p>基准程序</p>\n<h3 id=\"性能设计的基本原则\"><a class=\"anchor\" href=\"#性能设计的基本原则\">#</a> 性能设计的基本原则</h3>\n<p>大概率事件优先原则</p>\n<p>阿姆代尔定律 Amdahl 定律</p>\n<h1 id=\"对应书籍整理-计算机系统概述\"><a class=\"anchor\" href=\"#对应书籍整理-计算机系统概述\">#</a> 对应书籍整理 - 计算机系统概述</h1>\n<h2 id=\"计算机结构\"><a class=\"anchor\" href=\"#计算机结构\">#</a> 计算机结构</h2>\n<h3 id=\"硬件\"><a class=\"anchor\" href=\"#硬件\">#</a> 硬件</h3>\n<ol>\n<li>\n<p>CPU</p>\n<ul>\n<li>运算器 —— 各种算数逻辑运算</li>\n<li>控制器 —— 对指令译码并送出操作控制信号</li>\n</ul>\n</li>\n<li>\n<p>存储器 —— 存放指令和数据</p>\n<p>包括 ROM 芯片和 RAM 芯片。</p>\n<ul>\n<li>\n<p>内存储器</p>\n<ul>\n<li>主存</li>\n<li>高速缓存（cache）</li>\n</ul>\n</li>\n<li>\n<p>外存储器</p>\n<p>磁盘、磁带存储器、光盘存储器等</p>\n</li>\n</ul>\n</li>\n<li>\n<p>I/O 设备 —— 计算机和用户之间的信息交换</p>\n</li>\n</ol>\n<h3 id=\"软件\"><a class=\"anchor\" href=\"#软件\">#</a> 软件</h3>\n<ol>\n<li>系统软件 —— 介于计算机硬件和应用软件之间的各种软件\n<ul>\n<li>操作系统软件</li>\n<li>语言处理系统</li>\n<li>数据库管理系统</li>\n<li>各类实用程序</li>\n</ul>\n</li>\n<li>应用软件\n<ul>\n<li>办公自动化软件</li>\n<li>互联网应用软件</li>\n<li>多媒体处理软件</li>\n<li>股票分析软件</li>\n<li>游戏软件</li>\n<li>管理信息系统</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"程序开发和执行过程\"><a class=\"anchor\" href=\"#程序开发和执行过程\">#</a> 程序开发和执行过程</h3>\n<ol>\n<li>高级语言、低级语言（汇编语言）-&gt; 机器语言</li>\n</ol>\n<p>​\t\t其中，汇编语言和机器语言程序员必须对机器的结构和指令系统等细节非常清楚。</p>\n<ol start=\"2\">\n<li>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>对应计算机用户</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用程序</td>\n<td>最终用户</td>\n</tr>\n<tr>\n<td>高级语言虚拟机</td>\n<td>高级语言程序员或者应用程序员</td>\n</tr>\n<tr>\n<td>汇编语言虚拟机</td>\n<td>汇编语言程序员</td>\n</tr>\n<tr>\n<td>操作系统虚拟机</td>\n<td>系统管理员</td>\n</tr>\n<tr>\n<td>机器语言虚拟机</td>\n<td>机器语言程序员</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>源程序</strong>通过<strong>编译程序和汇编程序</strong>得到<strong>目标程序</strong></p>\n</li>\n<li>\n<p>编译程序 vs 解释程序（编译程序生成机器码，解释程序生成后立即执行）</p>\n</li>\n</ol>\n<h3 id=\"cpu性能-2\"><a class=\"anchor\" href=\"#cpu性能-2\">#</a> CPU 性能</h3>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/",
            "url": "https://quas-modo.github.io/2022/09/08/internet-computer/Lecture01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/",
            "title": "Lecture01-计算机网络概述",
            "date_published": "2022-09-08T11:49:55.000Z",
            "content_html": "<p>鉴于 zhy 妈妈的笔记过于全面，此系列笔记仅作一些补充和重点记忆强化。</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"易混的英文单词\"><a class=\"anchor\" href=\"#易混的英文单词\">#</a> 易混的英文单词</h2>\n<table>\n<thead>\n<tr>\n<th>层</th>\n<th>单元英文</th>\n<th>单元中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网络层</td>\n<td>packets</td>\n<td>报文</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>frames</td>\n<td>帧</td>\n</tr>\n<tr>\n<td>运输层</td>\n<td>segments</td>\n<td>段</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"osi-和-tcpip模型对比\"><a class=\"anchor\" href=\"#osi-和-tcpip模型对比\">#</a> OSI 和 TCP/IP 模型对比</h2>\n<table>\n<thead>\n<tr>\n<th>层次</th>\n<th>特点</th>\n<th>关键字</th>\n<th>备注</th>\n<th>对应的层</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>二进制传输</td>\n<td>信号和介质</td>\n<td>属于数据流层</td>\n<td>网络接入层</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>介质访问</td>\n<td>帧和介质访问控制</td>\n<td>属于数据流层</td>\n<td>网络接入层</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>路径选择</td>\n<td>路径选择，最优路径</td>\n<td>属于数据流层</td>\n<td>互联网层</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>终端到终端通信</td>\n<td>可靠性，流控制，错误纠正</td>\n<td>属于数据流层</td>\n<td>传输层</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>进程之间通信如何用户交流</td>\n<td>对话和交流</td>\n<td>属于应用层</td>\n<td>应用层</td>\n</tr>\n<tr>\n<td>展示层</td>\n<td>展示</td>\n<td>标准</td>\n<td>属于应用层</td>\n<td>应用层</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>给用户展示交互接口</td>\n<td>浏览</td>\n<td>属于应用层</td>\n<td>应用层</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网络拓扑topology\"><a class=\"anchor\" href=\"#网络拓扑topology\">#</a> 网络拓扑 Topology</h2>\n<p>分为物理拓扑和逻辑拓扑</p>\n<p>总线 bus</p>\n<p>环型 ring   双环 dual ring</p>\n<p>星型 star</p>\n<p>树型 tree</p>\n<p>渔网型 complete（mesh）</p>\n<p>蜂窝型 cellular 非常低效</p>\n<h2 id=\"网络设备\"><a class=\"anchor\" href=\"#网络设备\">#</a> 网络设备</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>中文</th>\n<th>层级</th>\n<th>应用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>media</td>\n<td>介质</td>\n<td>第一层</td>\n<td>携带信息流</td>\n</tr>\n<tr>\n<td>repeaters</td>\n<td>中继器</td>\n<td>第一层</td>\n<td>延长网络的长度，转发，不做过滤</td>\n</tr>\n<tr>\n<td>hubs</td>\n<td>集线器</td>\n<td>第一层</td>\n<td>不解决冲突，转发，不做过滤</td>\n</tr>\n<tr>\n<td>bridges</td>\n<td>网桥</td>\n<td>第二层</td>\n<td>在 lan 上过滤流量，创建冲突域</td>\n</tr>\n<tr>\n<td>switches</td>\n<td><strong>交换机</strong></td>\n<td>第二层</td>\n<td>结合网桥和交换机</td>\n</tr>\n<tr>\n<td>routers</td>\n<td><strong>路由器</strong></td>\n<td>第三层</td>\n<td>路径选择，ip 逻辑划分，切换到最佳路由</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/07/linear-algebra/Lecture-1-%E8%A1%8C%E5%88%97%E5%BC%8F/",
            "url": "https://quas-modo.github.io/2022/09/07/linear-algebra/Lecture-1-%E8%A1%8C%E5%88%97%E5%BC%8F/",
            "title": "Lecture 1 行列式",
            "date_published": "2022-09-07T08:00:59.000Z",
            "content_html": "<h2 id=\"n阶行列式的性质\"><a class=\"anchor\" href=\"#n阶行列式的性质\">#</a> n 阶行列式的性质</h2>\n<p><span id=\"more\"></span></p>\n<ol>\n<li><strong>行列式与它的转置行列式的值相等</strong>【证明较繁琐】【由此可得，对于行成立的性质，对于列也同样成立】</li>\n<li><strong>对调两行（列）的位置，行列式的值相差一个符号</strong>【证明较繁琐】</li>\n<li>两行（列）相等的行列式的值为 0（由<strong>定理 2</strong> 推导）</li>\n<li>行列式可以按任一行（列）展开（由<strong>定理 2</strong> 推导）</li>\n<li>行列式的任一行（列）元素的公因子可以提到行列式外面</li>\n<li>若行列式某两行（列）对应元素成比例，则行列式的值为 0。<strong>包括 k=0 的情况</strong></li>\n<li>行列式的任意一行（列）乘以数 k 加到另一行（列）上去，行列式的值不便</li>\n<li>行列式任一行（列）的元素与另一行（列）元素的代数余子式对应乘积之和为零。（由<strong>定理 7</strong> 推导）</li>\n<li>n 阶范德蒙德行列式</li>\n<li>块三角行列式（AB 在正对角线上）</li>\n</ol>\n<h2 id=\"n阶行列式解题技巧\"><a class=\"anchor\" href=\"#n阶行列式解题技巧\">#</a> n 阶行列式解题技巧</h2>\n<p>将一行或一列化为大量的 0，然后展开计算</p>\n<p>在转换时，写清楚如何转换，便于后期检查和校对</p>\n<ol>\n<li>奇数阶反对称行列式值为 0</li>\n<li>上三角、下三角、对角行列式 为对角线上的数的乘积</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "线性代数",
                "数学"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/",
            "url": "https://quas-modo.github.io/2022/09/07/thoughts/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/",
            "title": "欢迎来到我的世界",
            "date_published": "2022-09-07T07:18:58.000Z",
            "content_html": "<h1 id=\"欢迎朋友们来到我的世界~\"><a class=\"anchor\" href=\"#欢迎朋友们来到我的世界~\">#</a> 欢迎朋友们来到我的世界～</h1>\n<p><span id=\"more\"></span></p>\n<p>会在这里<s>不定期</s>（希望是定期）更新课程笔记、专业书籍笔记整理、书影音杂感以及一些胡言乱语</p>\n<p>欢迎交流</p>\n<p>欢迎加友链</p>\n<p>（逃</p>\n",
            "tags": [
                "书影音",
                "杂谈",
                "杂谈",
                "书影音"
            ]
        }
    ]
}