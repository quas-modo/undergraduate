{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/05/25/%E6%9F%90%E5%A4%A7%E5%AD%A6-vivo%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95/",
            "url": "https://quas-modo.github.io/2023/05/25/%E6%9F%90%E5%A4%A7%E5%AD%A6-vivo%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95/",
            "title": "某大学-vivo编程马拉松大赛决赛记录",
            "date_published": "2023-05-24T16:04:43.000Z",
            "content_html": "<p>极限开发 24 小时，题目为 “发现世界的美 “。</p>\n<h2 id=\"项目构思\"><a class=\"anchor\" href=\"#项目构思\">#</a> 项目构思</h2>\n<p>我们小组经过一系列头脑风暴，想到过摄影、旅游、文字之美、代码之美等主题，最终选择了音乐之美作为主题。</p>\n<p>我们小组的构想是做一个将音乐具象化的项目，我们有两个主要想法。</p>\n<p>一个是音乐地图，将不同曲风的音乐赋予不同的颜色，根据音乐来源国家的经纬度标记在地图上。形成一幅新的五彩斑斓的地图。用户可以点击地图上的色点播放音乐，访问音乐的相关信息。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233510106.png\" alt=\"image-20230524233510106\" /></p>\n<p>另一个是音乐涂鸦墙，&quot;音乐涂鸦墙&quot; 是一个基于 Web 的互动艺术项目，让用户能够在虚拟的 &quot;墙&quot; 上 &quot;涂鸦&quot;，但不是使用颜色或图像，而是使用音乐。浏览的用户也可以将鼠标移到某个区域，然后会自动播放那个区域的音乐。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233816520.png\" alt=\"image-20230524233816520\" /></p>\n<h2 id=\"项目实现\"><a class=\"anchor\" href=\"#项目实现\">#</a> 项目实现</h2>\n<h3 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h3>\n<h4 id=\"搜索\"><a class=\"anchor\" href=\"#搜索\">#</a> 搜索</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233923408.png\" alt=\"image-20230524233923408\" /></p>\n<h4 id=\"3d地球标注\"><a class=\"anchor\" href=\"#3d地球标注\">#</a> 3D 地球标注</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234134694.png\" alt=\"image-20230524234134694\" /></p>\n<h4 id=\"色点音乐播放\"><a class=\"anchor\" href=\"#色点音乐播放\">#</a> 色点音乐播放</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233959057.png\" alt=\"image-20230524233959057\" /></p>\n<h4 id=\"基于地图的随机类别云图\"><a class=\"anchor\" href=\"#基于地图的随机类别云图\">#</a> 基于地图的随机类别云图</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234029157.png\" alt=\"image-20230524234029157\" /></p>\n<h3 id=\"前端\"><a class=\"anchor\" href=\"#前端\">#</a> 前端</h3>\n<p>本人在尝试了找区域边界经纬度数据集 + konva（JavaScript 2d canvas library）绘制图，调用 Echarts 的好看的地图实现无果，没有 visa 注册 google map， 觉得高德地图 api 不是很好看后，无奈求助队友（给吴神磕一个），最终是调用了 mapbox 的 api 制作 3D 地图和 echarts 制作了云图。</p>\n<h3 id=\"后端\"><a class=\"anchor\" href=\"#后端\">#</a> 后端</h3>\n<p>后端使用自定义 @RateLimit 注解完成对高并发访问量的限制</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234923145.png\" alt=\"image-20230524234923145\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234918177.png\" alt=\"image-20230524234918177\" /></p>\n<p>完成了高覆盖率的单元测试和集成测试</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235000474.png\" alt=\"image-20230524235000474\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235012320.png\" alt=\"image-20230524235012320\" /></p>\n<p>采取 SonarLint 实时代码质量检测</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235026802.png\" alt=\"image-20230524235026802\" /></p>\n<h2 id=\"写在最后\"><a class=\"anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>虽然最后的实现和最初的构想差得比较大，但是很喜欢这次组队，感觉团队氛围很好，以及被吴神和耿佬带飞了对吗。因为赶工，大家晚上基本只睡了两三个小时，实在撑不住了在桌上趴一会。</p>\n<p>感觉极限开发还是很考验平时的积累和功底的，自己以前没有完整地负责过一个具体项目的前端和后端，也没有上千行 / 上万行的开发经验积累，所以这次在黑客松比赛中比较吃力，有些愧疚自己拖了后腿。感觉也只有在真实的开发和负责实现中，才能真实地提高自己，光跟一些教程和官方文档只是杯水车薪。我知道我现在的技术还很弱很弱，不值一提。</p>\n<p>因为最后负责答辩，偷偷跑出去准备了很久 pre，没有心思听其他很多小组的实现，不过就我听的几组来说，有很多很敢说、很有答辩技巧的发言，有很多值得学习的地方。</p>\n<p>一次很独特的通宵体验，说着不想再经历这样的折磨了，不过可能等攒攒实力还是会再参加参加，挑战一下自己的极限吧。</p>\n",
            "tags": [
                "比赛"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture8-Graph/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture8-Graph/",
            "title": "Lecture8-Graph",
            "date_published": "2023-02-26T14:01:29.000Z",
            "content_html": "<h1 id=\"lecture8-图\"><a class=\"anchor\" href=\"#lecture8-图\">#</a> Lecture8 - 图</h1>\n<ul>\n<li>\n<p>考试重点</p>\n</li>\n<li>\n<p>概念：选择填空为主</p>\n</li>\n<li>\n<p>重点是理解</p>\n</li>\n<li>\n<p>连通性、各种性质</p>\n</li>\n<li>\n<p>强连通性、加权图、生成树 概念判断</p>\n</li>\n<li>\n<p><strong>邻接表、邻接矩阵</strong>要求掌握</p>\n</li>\n<li>\n<p>邻接二重表不考</p>\n</li>\n<li>\n<p>遍历要求</p>\n</li>\n<li>\n<p><strong>最小生成树算法</strong> 要求掌握重点</p>\n<ul>\n<li>kruskal</li>\n<li>prim</li>\n</ul>\n</li>\n<li>\n<p><strong>最短路径</strong> 要求掌握重点</p>\n<ul>\n<li>Dijkstra</li>\n<li><strong>BellmanFord</strong></li>\n<li><strong>Floyed</strong></li>\n</ul>\n</li>\n<li>\n<p>证明都不要求</p>\n</li>\n<li>\n<p>算法思想：除了动态规划不要求</p>\n<ul>\n<li>基本就是考考概念</li>\n</ul>\n</li>\n<li>\n<p><strong>BellmanFord 算法</strong>和<strong> Floyed 算法</strong>的算法流程要求</p>\n</li>\n<li>\n<p><strong>活动网络</strong>常考</p>\n<ul>\n<li>\n<p>包括拓扑排序</p>\n</li>\n<li>\n<p>AOV 网络：<strong>概念</strong>多，爱出题</p>\n<p>关键路径算法</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码再仔细看看</strong></p>\n<h1 id=\"图的定义\"><a class=\"anchor\" href=\"#图的定义\">#</a> 图的定义</h1>\n<ol>\n<li>\n<p><strong>Graph = (V, E)</strong></p>\n<ol>\n<li>V: nonempty finite vertice set(<strong>顶点集</strong>)  一个非空确定顶点个数的集合</li>\n<li>E: edge set (边集)</li>\n</ol>\n</li>\n<li>\n<p>Undirected Graph 无向图</p>\n<p>if the tuple denoting an edge is unordered, then (v1, v2) and (v2, v1) are the same edge.</p>\n</li>\n</ol>\n<h2 id=\"有向图\"><a class=\"anchor\" href=\"#有向图\">#</a> 有向图</h2>\n<p>If the tuple (元组) denoting an edge is ordered, then &lt;v1,v2&gt; and &lt;v2,v1&gt; are different edges.</p>\n<p>(如果表示的边的<strong>元组是有序</strong>的，也就是 &lt;v1,v2&gt; 和 &lt; v2,v1 &gt; 是不同的)</p>\n<p>v1: 始点</p>\n<p>v2: 终点</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\" alt=\"img\" /></a></p>\n<p>In a directed graph with n nodes, the number of edges &lt;=n*(n-1).  If “=” is satisfied, then it is called a complete directed  graph*.</p>\n<p>(一个有 n 个节点的有向图，其边的个数 &lt;= <em><em>n</em>(n-1)</em><em>，如果相等，则为是一个</em><em>完全有向图</em> *)</p>\n<p>完全图 (有向完全图): 指有向图中每两个顶点都相互指向。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209141507512.png\" alt=\"image-20221209141507512\" /></p>\n<h2 id=\"无向图\"><a class=\"anchor\" href=\"#无向图\">#</a> 无向图</h2>\n<p>If the tuple denoting an edge is unordered, then (v1,v2) and (v2,v1) are the same edge.</p>\n<p>(如果表示边的<strong>元组是无序</strong>的，则 (v1，v2) 和 (v2，v1) 是相同的边。)</p>\n<p>In an undirected graph with n nodes,  the number of edges &lt;=  n*(n-1)/2. If “=” is satisfied, then it is called a complete undirect  graph.</p>\n<p>(在一个有 n 个顶点的无向图中，边的个数 &lt;= <strong>n(n-1)/2</strong>，如果刚好相等，则被称为完全无向图)</p>\n<p>完全图 (无向完全图): 就是指每两个顶点之间都有一条边。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\" alt=\"img\" /></a></p>\n<h2 id=\"其他图\"><a class=\"anchor\" href=\"#其他图\">#</a> 其他图</h2>\n<p>以下两种图在我们的数据结构中不进行讨论</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\" alt=\"img\" /></a></p>\n<p><strong>不考虑 自环 (ring) 和 多重边</strong> 的多重图。</p>\n<h2 id=\"概念顶点的度数入度和出度\"><a class=\"anchor\" href=\"#概念顶点的度数入度和出度\">#</a> 概念 —— 顶点的度数（入度和出度）</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214131905817.png\" alt=\"image-20230214131905817\" /></p>\n<ol>\n<li>\n<p>对于无向图只有度数，而对于有向图不仅仅有入度，还有出度。</p>\n</li>\n<li>\n<p>degree dv of vertex v, <strong>TD(v)</strong>: is the number of edges incident on vertex v. In a directed graph :</p>\n<p>(顶点 v 的度数为 dv，TD (V) 是顶点 v 的度数，在有向图中)</p>\n<ol>\n<li>\n<p>in-degree of vertex v is the number of edges incident to v, <strong>ID(v)</strong>.</p>\n<p>(顶点 v 的入度是指向顶点 v 的边的个数)</p>\n</li>\n<li>\n<p>out-degree of vertex v is the number of edges incident from the v, <strong>OD(v)</strong>.</p>\n<p>(顶点 v 的出度从 v 出发的边的个数)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>性质：(度数)<strong>TD(v)=ID(v)+OD(v)</strong></p>\n<p>度数可以理解为，这个顶点的边</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\" alt=\"img\" /></a></p>\n<h2 id=\"图的性质\"><a class=\"anchor\" href=\"#图的性质\">#</a> 图的性质</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\" alt=\"img\" /></a></p>\n<p>所有的度数加起来是边的个数的两倍。</p>\n<h2 id=\"子图\"><a class=\"anchor\" href=\"#子图\">#</a> 子图</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132334890.png\" alt=\"image-20230214132334890\" /></p>\n<p>Graph G=(V,E),G’=(V‘,E‘), if V’包含于 V, E’包含于 E, and the vertices  incident on the edges in E’ are in V’, then G’ is the subgraph of G.</p>\n<p>如果图 G 和图 G’，如果 V’包含于 V，E’包含于 E, 并且 E’中顶点的边也在 G’中，那么 G’是 G 的子图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\" alt=\"img\" /></a></p>\n<h2 id=\"路径path\"><a class=\"anchor\" href=\"#路径path\">#</a> 路径 (path)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132326704.png\" alt=\"image-20230214132326704\" /></p>\n<p>A sequence of vertices P=i1,i2,……ik is an i1 to ik path in the graph of graph G=(V,E) iff the edge(ij,ij+1)is in E for every j, 1 &lt;= j &lt; k.</p>\n<p>在图 G=(V，E) 中，如果每 j 的边 (ij，ij+1) 在 E 中，1&lt;= j&lt; k，则顶点序列 P=i1，i2，…,ik 是 i1 到 ik 的路径。</p>\n<h2 id=\"简单路径和环simple-path-and-cycle\"><a class=\"anchor\" href=\"#简单路径和环simple-path-and-cycle\">#</a> 简单路径和环 (Simple path and cycle)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132416033.png\" alt=\"image-20230214132416033\" /></p>\n<ol>\n<li>\n<p>A Simple path is a path in which all vertices except possibly the first and last , are different.</p>\n<p>(简单路径：路径除了第一个和最后一个顶点中<strong>没有出现相同</strong>的顶点)</p>\n</li>\n<li>\n<p>A Simple cycle is a simple path with the same start and end vertex.</p>\n<p>(简单回路：起点和终点相同的时候的简单路径)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132549580.png\" alt=\"image-20230214132549580\" /></p>\n</li>\n</ol>\n<h2 id=\"连通图和连通分量connected-graph-connected-component\"><a class=\"anchor\" href=\"#连通图和连通分量connected-graph-connected-component\">#</a> 连通图和连通分量 (Connected graph &amp; Connected component)</h2>\n<ol>\n<li>\n<p>In a undirected graph, if there is a path from vertex v1 to v2, then v1 and v2 are connected.</p>\n<p>(在无向图中，如果 v1 到 v2 之间<strong>有一条路径</strong>，那么 v1 和 v2 是连通的)</p>\n</li>\n<li>\n<p>In a undirected graph ,if two <strong>arbitrary</strong> vertices are connected, then the graph is a connected graph</p>\n<p>(在无向图中，如果<strong>任意两个顶点是连通的，则该图是连通图</strong>)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\" alt=\"img\" /></a></p>\n<p><strong>极大连通子图</strong>：就是结点个数最多的连通的子图。</p>\n<h2 id=\"强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\"><a class=\"anchor\" href=\"#强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\">#</a> 强联通图和强联通分量 (Strong connected graph and strongly connected component)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132823488.png\" alt=\"image-20230214132823488\" /></p>\n<ol>\n<li>\n<p>强连通图</p>\n<p>有向图 digraph 是强连通的，当它包含从 i 到 j 和从 j 到 i 的有向路径时，对于每对不同的顶点 i 和 j</p>\n<p>简单来说就是既要过的去，也要回得来</p>\n</li>\n<li>\n<p>强连通分量</p>\n<p>The maximum strong connected subgraph (极大强连通子图) of a non-strongly  connected graph is called strongly connected conponent  (强连通分量).</p>\n<p>(一个<strong>非强连通图的最大强连通子图</strong> (South-South-PosialSuth-Posiple  Fug) 称为强连通构 (Suth-Posiple Stand))</p>\n</li>\n</ol>\n<h2 id=\"加权图network\"><a class=\"anchor\" href=\"#加权图network\">#</a> 加权图 (Network)</h2>\n<ol>\n<li>\n<p>When weights and costs are assigned to edges, the resulting data  object is called <strong>weighted graph</strong> and <strong>weighted  digraph.</strong></p>\n<p>(当权值和代价分配给边时，得到的数据对象称为<strong>加权图</strong>和<strong>加权有向图</strong>。)</p>\n</li>\n<li>\n<p>The term <strong>network</strong> refers to weighted  connected graph and weighted connected digraph.</p>\n<p>(<strong>加权图</strong>是用来代指加权连通图和加权连通有向图)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\" alt=\"img\" /></a></p>\n<h2 id=\"生成树spanning-tree\"><a class=\"anchor\" href=\"#生成树spanning-tree\">#</a> 生成树 (Spanning tree)</h2>\n<p>A spanning tree of a connected graph is its minimum connected subgraph(<strong>极小连通子图</strong>).  An n-vertex spanning tree has n-1 edges.</p>\n<p>(连通图的<strong>生成树</strong>是其极小连通子图。n 顶点生成树有 n-1 条边。)</p>\n<p>保持联通的最小边数的图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\" alt=\"img\" /></a></p>\n<h1 id=\"adt-graph-and-digraph\"><a class=\"anchor\" href=\"#adt-graph-and-digraph\">#</a> ADT Graph and Digraph</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209142531480.png\" alt=\"image-20221209142531480\" /></p>\n<h1 id=\"representation-of-graphs-and-diagraphs\"><a class=\"anchor\" href=\"#representation-of-graphs-and-diagraphs\">#</a> Representation of graphs and diagraphs</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214133528703.png\" alt=\"image-20230214133528703\" /></p>\n<h2 id=\"adjacency-matrix-邻接矩阵\"><a class=\"anchor\" href=\"#adjacency-matrix-邻接矩阵\">#</a> Adjacency Matrix 邻接矩阵</h2>\n<p>graph 无向图</p>\n<p>digraph 有向图</p>\n<h3 id=\"无向图-2\"><a class=\"anchor\" href=\"#无向图-2\">#</a> 无向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143030813.png\" alt=\"image-20221209143030813\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143125763.png\" alt=\"image-20221209143125763\" /></p>\n<ol>\n<li>无向图的邻接矩阵是一个<strong>对称矩阵</strong></li>\n<li><strong>无向图的每个顶点的度数等于矩阵中每一行的和</strong>。</li>\n</ol>\n<h3 id=\"有向图-2\"><a class=\"anchor\" href=\"#有向图-2\">#</a> 有向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143144805.png\" alt=\"image-20221209143144805\" /></p>\n<p>出度，一行的和；</p>\n<p>入度，一列的和</p>\n<h3 id=\"加权图\"><a class=\"anchor\" href=\"#加权图\">#</a> 加权图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143821067.png\" alt=\"image-20221209143821067\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143829081.png\" alt=\"image-20221209143829081\" /></p>\n<h2 id=\"代码实现数组\"><a class=\"anchor\" href=\"#代码实现数组\">#</a> 代码实现 —— 数组</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143933283.png\" alt=\"image-20221209143933283\" /></p>\n<p>dist 距离（权）</p>\n<p>template&lt;class NameType, class DistType&gt; 是一种模板，意味着 class 用 NameType 和 DistType 进行定义</p>\n<p>SeqList 是顺序表的意思</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143953116.png\" alt=\"image-20221209143953116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144000077.png\" alt=\"image-20221209144000077\" /></p>\n<h2 id=\"代码实现链表\"><a class=\"anchor\" href=\"#代码实现链表\">#</a> 代码实现 —— 链表</h2>\n<p><strong>邻接表</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144907924.png\" alt=\"image-20221209144907924\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144916071.png\" alt=\"image-20221209144916071\" /></p>\n<h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145022064.png\" alt=\"image-20221209145022064\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145032715.png\" alt=\"image-20221209145032715\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145043254.png\" alt=\"image-20221209145043254\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145423763.png\" alt=\"image-20221209145423763\" /></p>\n<h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145442706.png\" alt=\"image-20221209145442706\" /></p>\n<h3 id=\"找到在顶点表的位置\"><a class=\"anchor\" href=\"#找到在顶点表的位置\">#</a> 找到在顶点表的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145450950.png\" alt=\"image-20221209145450950\" /></p>\n<h3 id=\"给出顶点v的第一个邻接顶点的位置\"><a class=\"anchor\" href=\"#给出顶点v的第一个邻接顶点的位置\">#</a> 给出顶点 V 的第一个邻接顶点的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214134749181.png\" alt=\"image-20230214134749181\" /></p>\n<h3 id=\"找到下一个邻居\"><a class=\"anchor\" href=\"#找到下一个邻居\">#</a> 找到下一个邻居</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145509374.png\" alt=\"image-20221209145509374\" /></p>\n<h2 id=\"不考邻接多重表adjacency-multilist\"><a class=\"anchor\" href=\"#不考邻接多重表adjacency-multilist\">#</a> 【不考】邻接多重表（adjacency multilist）</h2>\n<ol>\n<li>在无向图中，如果边数为 m, 则在邻接表表示中需 2m 个单位来存储。为了克服这一缺点，采用邻接多重表，每条边用一个结点表示.\n<ul>\n<li>其中的两个结点号就是边的两个点。</li>\n<li>path1 指向的就是同样始点 (vertex1)，顺序终点的结果。</li>\n<li>path2 执行的是以 vertex2 为始点顺序向下的。</li>\n</ul>\n</li>\n<li>Eg. 使用正常的邻接表，则右边应该有 10 个点，但是多重表就是只有 5 个表\n<ul>\n<li>默认情况下边的始点的编号要小于终点的编号大小。</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151914910.png\" alt=\"image-20221209151914910\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151930870.png\" alt=\"image-20221209151930870\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\" alt=\"img\" /></a></p>\n<ol>\n<li>邻接表和邻接多重表之间的区别在于有几个顶点，有几个边。</li>\n<li>data 部分只记录 first-in 和 first-out，也就是第一条出边和第一条入边</li>\n</ol>\n<h1 id=\"图的遍历与连通性\"><a class=\"anchor\" href=\"#图的遍历与连通性\">#</a> 图的遍历与连通性</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144224188.png\" alt=\"image-20221209144224188\" /></p>\n<h2 id=\"深度优先搜索depth-first-search\"><a class=\"anchor\" href=\"#深度优先搜索depth-first-search\">#</a> 深度优先搜索 (Depth-first-search)</h2>\n<h3 id=\"算法思想\"><a class=\"anchor\" href=\"#算法思想\">#</a> 算法思想</h3>\n<p>从图中某个顶点 V0 出发，访问它，然后选择一个<strong> V0</strong> 邻接到的<strong>未被访问的一个邻接点 V1</strong> 出发深度优先遍历图，当遇到一个所有邻接于它的结点都被访问过了的结点 U 时，回退到前一次<strong>刚被访问过的拥有未被访问的邻接点 W</strong>, 再从 W 出发深度遍历，…… 直到连通图中的所有顶点都被访问过为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\" alt=\"img\" /></a></p>\n<p>递归方法实现 算法中用一个辅助数组<strong> visited []</strong>:</p>\n<p>0: 未访问</p>\n<p>1: 访问过了</p>\n<p>我们假设图为连通图</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153919037.png\" alt=\"image-20221209153919037\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153931254.png\" alt=\"image-20221209153931254\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"广度优先搜索breadth-search\"><a class=\"anchor\" href=\"#广度优先搜索breadth-search\">#</a> 广度优先搜索 (Breadth search)</h2>\n<h3 id=\"思想\"><a class=\"anchor\" href=\"#思想\">#</a> 思想</h3>\n<p>从图中某顶点 V0 出发，在访问了 V0 之后依次访问 v0 的各个未曾访问过的邻接点，然后分别从这些邻接点出发广度优先遍历图，直至图中所有顶点都被访问到为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\" alt=\"img\" /></a></p>\n<p>算法同样需要一个辅助数组<strong> visited []</strong> 表示顶点是否被访问过。还需要一个队列，记正在访问的这一层和上一层的顶点。算法显然是<strong>非递归</strong>的.</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154815385.png\" alt=\"image-20221209154815385\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154826520.png\" alt=\"image-20221209154826520\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"连通分量\"><a class=\"anchor\" href=\"#连通分量\">#</a> 连通分量</h2>\n<p>连通图：任意两个顶点是连通的。</p>\n<p>以上讨论的是对一个无向的连通图或一个强连通图的有向图进行遍历，得到一棵深度优先或广度优先生成树。但当无向图（以无向图为例）为<strong>非连通图</strong>时，从图的某一顶点出发进行遍历（深度，广度）只能访问到该顶点所在的<strong>最大连通子图</strong>（即连通分量）的所有顶点。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209155103515.png\" alt=\"image-20221209155103515\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209160239621.png\" alt=\"image-20221209160239621\" /></p>\n<p><strong>加一个循环语句即可</strong></p>\n<h1 id=\"最小生成树minimum-cost-spinning-tree-mst\"><a class=\"anchor\" href=\"#最小生成树minimum-cost-spinning-tree-mst\">#</a> 最小生成树 minimum-cost spinning tree MST</h1>\n<h2 id=\"生成树\"><a class=\"anchor\" href=\"#生成树\">#</a> 生成树</h2>\n<h3 id=\"生成树的定义\"><a class=\"anchor\" href=\"#生成树的定义\">#</a> 生成树的定义</h3>\n<ol>\n<li>设<strong> G =(V，E)<strong> 是一个</strong>连通</strong>的无向图 (或是强连通有向图) 从图 G 中的任一顶点出发作遍历图的操作，把遍历走过的边的集合记为 TE (G)，显然 **G‘=(V，TE)** 是 G 之子图， <strong>G‘被称为 G 的生成树 (spanning tree)</strong>，也称为一个连通图.</li>\n<li>n 个结点的生成树有 n-1 条边。</li>\n<li>生成树的代价 (cost)：<strong>TE (G) 上诸边的代价之和</strong></li>\n<li>生成树不唯一</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小代价生成树\"><a class=\"anchor\" href=\"#最小代价生成树\">#</a> 最小代价生成树</h3>\n<p>各边权的<strong>总和</strong>为最小的生成树</p>\n<h2 id=\"贪心grandy求解最小代价生成树\"><a class=\"anchor\" href=\"#贪心grandy求解最小代价生成树\">#</a> 贪心 (Grandy) 求解最小代价生成树</h2>\n<p>6 个城市已固定，现从一个城市发出信息到每一个城市如何选择或铺设通信线路，使花费 (造价) 最低。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\" alt=\"img\" /></a></p>\n<p>两个算法：Prim, Kruskal.</p>\n<p>它们都使用了逐步求解（贪心算法）的策略。</p>\n<h3 id=\"贪心策略的具体内容\"><a class=\"anchor\" href=\"#贪心策略的具体内容\">#</a> 贪心策略的具体内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163354394.png\" alt=\"image-20230214163354394\" /></p>\n<p>Grandy 策略：</p>\n<p>设：连通网络 N={V,E}, V 中有 n 个顶点。</p>\n<ol>\n<li T0,T1,……,Tn-1=\"\">先构造 n 个顶点，0 条边的<strong>森林</strong> F =</li>\n<li>每次向 F 中加入一条边。该边是一端在 F 的某棵树 Ti 上而另一端不在 Ti 上的所有边中具有最小权值的边。 这样使 F 中两棵树合并为一棵，树的棵数 - 1</li>\n<li>重复上述操作 n-1 次</li>\n</ol>\n<p>去掉所有边，每次加入的边是当前最小的边，并且保证这个边不是回边。</p>\n<h3 id=\"最小生成树的类声明\"><a class=\"anchor\" href=\"#最小生成树的类声明\">#</a> 最小生成树的类声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163836664.png\" alt=\"image-20221209163836664\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163925674.png\" alt=\"image-20221209163925674\" /></p>\n<h3 id=\"kruskal算法对边进行排序然后生成\"><a class=\"anchor\" href=\"#kruskal算法对边进行排序然后生成\">#</a> Kruskal 算法 (对边进行排序，然后生成)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163725826.png\" alt=\"image-20230214163725826\" /></p>\n<p>把无向图的所有边排序</p>\n<p>一开始的最小生成树为</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\" alt=\"img\" /></a></p>\n<p>在 E 中选一条代价最小的边 (u,v) 加入 T，一定要满足 (u,v) 不和 TE 中已有的边构成回路</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\" alt=\"img\" /></a></p>\n<p>一直到 TE 中加满 n-1 条边为止。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164108267.png\" alt=\"image-20221209164108267\" /></p>\n<p><strong>邻接矩阵</strong></p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164144977.png\" alt=\"image-20221209164144977\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164151523.png\" alt=\"image-20221209164151523\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164158409.png\" alt=\"image-20221209164158409\" /></p>\n<p>排序：建立最小堆</p>\n<p>出堆操作：找到最小值</p>\n<p>find 操作：？</p>\n<p>union 操作：添加到数集中</p>\n<h3 id=\"prim算法任何起点选可通达的最小权重的边\"><a class=\"anchor\" href=\"#prim算法任何起点选可通达的最小权重的边\">#</a> Prim 算法（任何起点，选可通达的最小权重的边）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214165855967.png\" alt=\"image-20230214165855967\" /></p>\n<p>设：原图的顶点集合 V (有 n 个) 生成树的顶点集合 U (最后也有 n 个)，一开始为空 TE 集合为 {}</p>\n<p>步骤：</p>\n<ol>\n<li>U={1}<strong> 任何起始顶点</strong>，TE={}</li>\n<li>每次生成 (选择) 一条边。这条边是所有边 (u,v) 中代价 (权) 最小的边， u∈U,v∈V-U TE=TE+[(u,v)]; U=U+[v]</li>\n<li>当 U≠V，返回上面一个步骤</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\" alt=\"img\" /></a></p>\n<ol>\n<li>一开始只考虑从 1 号顶点到其他顶点之间的边。\n<ul>\n<li>泛泛而言，考虑 u 和 v 之间的边</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小生成树不唯一\"><a class=\"anchor\" href=\"#最小生成树不唯一\">#</a> 最小生成树不唯一</h3>\n<ol>\n<li>对于一般的图来讲，最小生成树不唯一。</li>\n<li>所以相应的 Prime 算法和 Kruskal 算法也会出现多解的情况</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214170520688.png\" alt=\"image-20230214170520688\" /></p>\n<h3 id=\"prim算法实例\"><a class=\"anchor\" href=\"#prim算法实例\">#</a> prim 算法实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171319803.png\" alt=\"image-20230214171319803\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171407861.png\" alt=\"image-20230214171407861\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171416308.png\" alt=\"image-20230214171416308\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171427973.png\" alt=\"image-20230214171427973\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171433658.png\" alt=\"image-20230214171433658\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171439317.png\" alt=\"image-20230214171439317\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171444611.png\" alt=\"image-20230214171444611\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171452042.png\" alt=\"image-20230214171452042\" /></p>\n<h3 id=\"prim算法实现\"><a class=\"anchor\" href=\"#prim算法实现\">#</a> Prim 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172406455.png\" alt=\"image-20230214172406455\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172414957.png\" alt=\"image-20230214172414957\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172423013.png\" alt=\"image-20230214172423013\" /></p>\n<h1 id=\"最短路径\"><a class=\"anchor\" href=\"#最短路径\">#</a> 最短路径</h1>\n<ol>\n<li>设 G=(V,E) 是一个带权图 (有向，无向)，如果从顶点 v 到顶点 w 的一条路径为 (v,v1,v2,…,w)，其路径长度不大于从 v 到 w 的所有其它路径的长度，则该路径为从 v 到 w 的最短路径。</li>\n<li>背景：在交通网络中，求各城镇间的最短路径。</li>\n<li>三种算法:\n<ol>\n<li>边上权值为非负情况的从一个结点到其它各结点的最短路径 (单源最短路径)(Dijkstra 算法)</li>\n<li>边上权值为任意值的单源最短路径【边上存在负权值，但是没有负环】【不能出现小于零的环（负环），此时最小路径没有意义】</li>\n<li>边上权值为非负情况的所有顶点之间的最短路径</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"含非负权值的单源最短路径dijkstra\"><a class=\"anchor\" href=\"#含非负权值的单源最短路径dijkstra\">#</a> 含非负权值的单源最短路径 (Dijkstra)</h2>\n<p>每次从 「未求出最短路径的点」中 <strong>取出</strong> 距离距离起点 <strong>最小路径的点</strong>，以这个点为桥梁 <strong>刷新</strong>「未求出最短路径的点」的距离</p>\n<ol>\n<li>问题</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\" alt=\"img\" /></a></p>\n<h3 id=\"贪心思想\"><a class=\"anchor\" href=\"#贪心思想\">#</a> 贪心思想</h3>\n<p>起点 V0，首先直接连接，不管是否直接连接。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\" alt=\"img\" /></a></p>\n<p>排好序后，V0-V1 10 已经是最小的了，不可能再找到更短的路径</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\" alt=\"img\" /></a></p>\n<p>接下来，尝试 V0-v2 通过 V1 绕会不会比原来的更短 (考虑 V1-V2 直连)，V0-V4 从 V1 绕会不会比原来更短 (考虑 V2-V3 直连)，如果短则更新，此时 V0-V3 是三者中最小值，所以选择 V0-V3。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\" alt=\"img\" /></a></p>\n<p>尝试绕行 V3，计算直连，更新掉，然后重复</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\" alt=\"img\" /></a></p>\n<p>红色是已经选择好的，绿色是绕行选择。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\" alt=\"img\" /></a></p>\n<p><strong>贪心：当前新产生的一条最短路径能否使已有路径在一步以内变短。</strong></p>\n<p>进一步思考，就是只进行一步，不进行多步。</p>\n<p>总体来讲：不可能走更长的路径，然后回来</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\" alt=\"img\" /></a></p>\n<p>数值更新，路径数组对应位置更新</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\" alt=\"img\" /></a></p>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173554247.png\" alt=\"image-20230214173554247\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173607549.png\" alt=\"image-20230214173607549\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NumVertices <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大于所有边的权重的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> Edge<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> dist<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> path<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//v 为当前节点，dist 数组是表示距离的数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 遍历 n 次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果可达，则用 path 数组记录下路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果不可达，则用 path 数组记录下不可达 (-1)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        s<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 表示访问过当前节点，并且距离为 0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">float</span> min<span class=\"token operator\">=</span>MAXNUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>  j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 如果结点 j 还没有访问过，并且 dist [j] 小于最小值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    u <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    min <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            s<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">//dist [u] 就是起点到 u 的距离，下面是关键条件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//for</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173613313.png\" alt=\"image-20230214173613313\" /></p>\n<h2 id=\"边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\"><a class=\"anchor\" href=\"#边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\">#</a> 边上权值为任意值的单源最短路径（贝尔曼 - 福特）BellemanFord</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174453911.png\" alt=\"image-20230214174453911\" /></p>\n<p>distk 从<strong>源点 v</strong> 开始最多经过<strong>不构成带负长度边回路</strong>的<strong> k</strong> 条边的最短路径长度</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174554207.png\" alt=\"image-20230214174554207\" /></p>\n<p><strong>递推公式</strong></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/49.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/49.png\" alt=\"img\" /></a></p>\n<ol>\n<li>更新的时候都是根据前面结果，遍历计算存储</li>\n<li>所有<strong>第 k 步，只受第 k-1 步的影响</strong></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214175305102.png\" alt=\"image-20230214175305102\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BellmanFord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 动态规划</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 初始化 dist 距离数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 初始化路径数组 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>u <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>u<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\">// 一直算到 n-1 步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        path<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>时间复杂度：O (n3)</li>\n</ol>\n<h2 id=\"所有顶点之间的最短路径floyed\"><a class=\"anchor\" href=\"#所有顶点之间的最短路径floyed\">#</a> 所有顶点之间的最短路径（Floyed）</h2>\n<ol>\n<li>前提：各边权值<strong>均大于 0</strong> 的带权<strong>有向图</strong>。\n<ul>\n<li>每个顶点到自己的代价为 0</li>\n</ul>\n</li>\n<li>方法：\n<ol>\n<li>把有向图的每一个顶点作为源点，重复执行 Dijkstra 算法 n 次，执行时间为 O (n<sup>3</sup>)</li>\n<li>Floyed 方法，算法形式更简单些，但是时间仍然是 O (n<sup>3</sup>)</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/50.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/50.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/51.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/51.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/52.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/52.png\" alt=\"img\" /></a></p>\n<ol>\n<li>简单来说就是：每次都会选择一个<strong>中介点</strong>，然后遍历整个数组，更新相应的需要更新的数组。</li>\n</ol>\n<h3 id=\"floyed算法实现\"><a class=\"anchor\" href=\"#floyed算法实现\">#</a> floyed 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214193445295.png\" alt=\"image-20230214193445295\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Alllength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>j<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 路由表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>path<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>矩阵S中的元素a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>表示顶点<span class=\"token function\">i</span><span class=\"token punctuation\">(</span>第i个顶点<span class=\"token punctuation\">)</span>到顶点<span class=\"token function\">j</span><span class=\"token punctuation\">(</span>第j个顶点<span class=\"token punctuation\">)</span>的距离。矩阵P中的元素b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>，表示顶点i到顶点j经过了b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>记录的值所表示的顶点。</pre></td></tr></table></figure><ol>\n<li>算法复杂度：O (n3)</li>\n<li>参考:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">Floyed 算法</span></li>\n</ol>\n<h2 id=\"64-floyed算法参考\"><a class=\"anchor\" href=\"#64-floyed算法参考\">#</a> 6.4. Floyed 算法参考</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">最短路径问题</span></li>\n</ol>\n<h1 id=\"活动网络-activity-network常考\"><a class=\"anchor\" href=\"#活动网络-activity-network常考\">#</a> 活动网络 Activity Network（常考）</h1>\n<ol>\n<li>用顶点表示活动的网络 (AOV 网络)</li>\n<li>用边表示活动的网络 (AOE 网络)</li>\n<li>用顶点表示活动的网络</li>\n</ol>\n<h2 id=\"71-aov网络activity-on-vertex-network\"><a class=\"anchor\" href=\"#71-aov网络activity-on-vertex-network\">#</a> 7.1. AOV 网络 Activity On Vertex network</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200449558.png\" alt=\"image-20230214200449558\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/53.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/53.png\" alt=\"img\" /></a></p>\n<h3 id=\"aov网络结构\"><a class=\"anchor\" href=\"#aov网络结构\">#</a> AOV 网络结构</h3>\n<ol>\n<li><strong>图中表示课程</strong> (活动)，有向边 (弧) 表示先决条件。 若课程 i 是课程 j 的预修课程，则图中有弧 &lt; i,j&gt;</li>\n<li>AOV 网 (<strong>Activity On Vertex network</strong>)\n<ul>\n<li>用顶点表示活动，用弧表示活动间的优先关系的有向图称为 AOV 网。</li>\n</ul>\n</li>\n<li>直接前驱，直接后继\n<ul>\n<li>&lt;i,j&gt; 是网中一条弧，则 i 是 j 的直接前驱，j 是 i 的直接后继。</li>\n</ul>\n</li>\n<li>前驱，后继\n<ul>\n<li>从顶点 i-&gt; 顶点 j 有一条有向路径，则称 i 是 j 的前驱，j 是 i 的后继。</li>\n</ul>\n</li>\n<li><strong>AOV 网中，不应该出现有向环</strong></li>\n</ol>\n<h3 id=\"aov图的拓扑排序\"><a class=\"anchor\" href=\"#aov图的拓扑排序\">#</a> AOV 图的拓扑排序</h3>\n<ol>\n<li>有向图 G=(V,E),V 里结点的线性序列 (vi1,vi2,…,vin), 如果满足：在 G 中从结点 vi 到 vj 有一条路径，则序列中结点 Vi 必先于结点 vj ，称这样的线性序列为<strong>一拓扑序列</strong>。</li>\n<li>不是任何有向图的结点都可以排成拓扑序列，有环图是显然没有拓扑排序的。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200713804.png\" alt=\"image-20230214200713804\" /></p>\n<h3 id=\"拓扑算法思想\"><a class=\"anchor\" href=\"#拓扑算法思想\">#</a> 拓扑算法思想</h3>\n<ol>\n<li>从图中选择一个<strong>入度为 0</strong> 的结点输出之。(如果一个图中，同时存在多个入度为 0 的结点，则随便输出任意一个结点)</li>\n<li>从图中<strong>删掉此结点及其所有的出边</strong>。</li>\n<li>反复执行以上步骤\n<ol>\n<li>直到所有结点都输出了，则算法结束</li>\n<li><strong>如果图中还有结点，但入度不为 0</strong>，则说明有环路</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"拓扑算法实现\"><a class=\"anchor\" href=\"#拓扑算法实现\">#</a> 拓扑算法实现</h3>\n<ol>\n<li>\n<p>具体实现算法：AOV 网用<strong>邻接表</strong>来实现</p>\n<p>数组<strong> count</strong> 存放各顶点的<strong>入度</strong></p>\n</li>\n<li>\n<p>并且为了避免每次从头到尾查找入度为 0 的顶点，建立<strong>入度为 0 的顶点栈</strong>，栈顶指针为 top，初始化时为 - 1.</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/66.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/66.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/54.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/54.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214202307026.png\" alt=\"image-20230214202307026\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203538043.png\" alt=\"image-20230214203538043\" /></p>\n<p>没看懂，甚至可能是错的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//AOV 网的声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> Edge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> nodeTable <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count <span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放入度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Graph</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> vertices<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">n</span> <span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            NodeTable<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">topologicalorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 拓扑排序</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span> <span class=\"token function\">Topologicalsort</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//top 是当前找到的入度为 0 的点，top==-1 表示找不到入度为 0 的点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 初始化无入度顶点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> top <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            top <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 进行正式排序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 如果 top 变为 - 1，那么显然存在回路</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Network has a cycle\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            top <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            Edge<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> l <span class=\"token operator\">=</span> NodeTable<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>connt<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 如果完成所有节点的删除</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    top <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            l <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc29uZ2xpc29uZ2xpc29uZy9hcnRpY2xlL2RldGFpbHMvNDU1NDM0NTE=\">https://blog.csdn.net/lisonglisonglisong/article/details/45543451</span></p>\n<p>java 实现</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203659497.png\" alt=\"image-20230214203659497\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">topsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CycleFound</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Queue</span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">// 队列或者栈都可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Vertex</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> each vertex v</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        v<span class=\"token punctuation\">.</span>topNum <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span><span class=\"token comment\">//Assign next number </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> each w adjacent <span class=\"token keyword\">to</span> <span class=\"token namespace\">v</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>w<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> counter <span class=\"token operator\">!=</span> <span class=\"token constant\">NUM_VERTICES</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CycleFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h3>\n<ol>\n<li>算法分析：n 个顶点，e 条边</li>\n<li>建立链式栈 O (n)，每个结点输出一次，每条边被检查一次 O (n＋e)，所以为：O (n＋n＋e)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214201617082.png\" alt=\"image-20230214201617082\" /></p>\n<h2 id=\"72-aoe网络-activity-on-edge-network\"><a class=\"anchor\" href=\"#72-aoe网络-activity-on-edge-network\">#</a> 7.2. AOE 网络 Activity On Edge Network</h2>\n<ol>\n<li>用边表示活动的网络 (AOE 网络，Activity On Edge Network) 又称为<strong>事件顶点网络</strong></li>\n<li>顶点：\n<ul>\n<li>表示事件 (event)</li>\n<li>事件 —— 状态。表示它的入边代表的活动已完成，它的出边代表的活动可以开始，如下图 v0 表示整个工程开始，v4 表示 a4，a5 活动已完成 a7，a8 活动可开始。</li>\n</ul>\n</li>\n<li>有向边：表示活动\n<ul>\n<li>边上的权 —— 表示完成一项活动需要的时间</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/55.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/55.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/56.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/56.png\" alt=\"img\" /></a></p>\n<p><strong>有唯一的入度为 0 的开始节点</strong></p>\n<p><strong>有唯一的出度为 0 的完成结点</strong></p>\n<h3 id=\"关键路径\"><a class=\"anchor\" href=\"#关键路径\">#</a> 关键路径</h3>\n<ol>\n<li>目的：利用事件顶点网络，研究完成整个工程需要多少时间 加快那些活动的速度后，可使整个工程提前完成。</li>\n<li>关键路径：具有<strong>从开始顶点 (源点)-&gt; 完成顶点 (汇点) 的最长的路径</strong></li>\n</ol>\n<h3 id=\"一些定义\"><a class=\"anchor\" href=\"#一些定义\">#</a> 一些定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204156511.png\" alt=\"image-20230214204156511\" /></p>\n<ol>\n<li>\n<p>对于事件:</p>\n<ol>\n<li>\n<p>Ve [i]－表示事件 Vi 的可能最早发生时间：定义为从源点 V0-&gt;Vi 的<strong>最长路径长度</strong>，如 Ve [4]=7 天</p>\n</li>\n<li>\n<p>Vl [i]－表示事件 Vi 的允许的最晚发生时间：是在保证汇点 Vn-1 在 Ve [n-1] 时刻 (18) 完成的前提下，事件 Vi 允许发生的最晚时间＝ Ve [n-1]－ Vi-&gt;Vn－1 的最长路径长度。</p>\n<p><strong>是从最后汇点时间长度 - 两者之间最长路径</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/57.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/57.png\" alt=\"img\" /></a></p>\n<ol>\n<li>解释:\n<ol>\n<li>计算到最后汇点的总共最短时间：找到从源点到汇点的最大路径</li>\n<li>最早 12，因为之前不能做。</li>\n<li>最晚 12，是因为如果这时候不开始，最后完成不了。</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204912475.png\" alt=\"image-20230214204912475\" /></p>\n<p>对于活动:</p>\n<ol>\n<li>e [k]－表示活动 ak=&lt;Vi,Vj &gt; 的可能的最早开始时间。 即等于事件 Vi 的可能最早发生时间。 e [k]=Ve [i]</li>\n<li>l [k]－表示活动 ak= &lt;Vi,Vj&gt; 的允许的最迟开始时间 l [k]＝Vl [j]-dur (&lt;i,j&gt;);</li>\n<li>l [k]-e [k]－表示活动 ak 的最早可能开始时间和最迟允许开始时间的时间余量。也称为松弛时间。 (slack  time)</li>\n<li>l [k]==e [k]－表示活动 ak 是没有时间余量的<strong>关键活动</strong></li>\n<li>一开始的例子中\n<ol>\n<li>a8 的最早可能开始时间 e [8]=Ve [4]=7</li>\n<li>最迟允许开始时间 l [8]=Vl [7]-dur (&lt;4,7&gt;) =14-7=7, 所以 a8 是关键路径上的关键活动</li>\n<li>a9 的最早可能开始时间 e [9]=Ve [5]=7</li>\n<li>最迟允许开始时间 l [9]=Vl [7]-dur (&lt;5,7&gt;) =14-4=10</li>\n</ol>\n</li>\n<li>所以 l [9]-e [9]=3, 该活动的时间余量为 3，即推迟 3 天或延迟 3 天完成都不 影响整个工程的完成，它不是关键活动</li>\n</ol>\n<h3 id=\"寻找关键路径的算法\"><a class=\"anchor\" href=\"#寻找关键路径的算法\">#</a> 寻找关键路径的算法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205249995.png\" alt=\"image-20230214205249995\" /></p>\n<ol>\n<li>求各事件的可能最早发生时间 从 Ve [0]=0 开始，向前推进求其它事件的 Ve Ve [i]=max {Ve [j]+dur (&lt; Vj,Vi &gt;)},  &lt;Vj,Vi &gt; 属于 S2, i=1,2,…n－1 j S2 是所有指向顶点 Vi 的有向边 &lt; Vj,Vi  &gt; 的集合</li>\n<li>求各事件的允许最晚发生时间 从 Vl [n-1]=Ve [n-1] 开始，反向递推 Vl [i]=min {Vl [j]-dur  (&lt;Vi,Vj&gt;)},  &lt;Vi,Vj &gt; 属于 S1,  i=n-2,n-3,…0 j  S1 是所有从顶点 Vi 出发的有向边 &lt; Vi,Vj &gt; 的集合</li>\n<li>以上的计算必须在拓扑有序及逆拓扑有序的前提下进行，求 Ve [i] 必须使 Vi 的所有前驱结点的 Ve 都求得求 Vl [i] 必须使 Vi 的所有后继结点最晚发生时间都求得。</li>\n<li>求每条边 (活动) ak= &lt;Vi,Vj&gt; 的 e [k], l [k] e [k]=Ve [i];l [k]=Vl [j]-dur (&lt;Vi,Vj&gt; ),k=1,2,…e</li>\n<li><strong>如果 e [k]==l [k]，则 ak 是关键活动</strong></li>\n<li>AOE 网用邻接表来表示，并且假设顶点序列已按拓扑有序与逆拓扑有序排好。如上例:\n<ul>\n<li>先正向推，然后反向推回来。(分别计算最早时间和最晚时间)</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205442329.png\" alt=\"image-20230214205442329\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/58.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/58.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/59.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/59.png\" alt=\"img\" /></a></p>\n<h3 id=\"算法实现\"><a class=\"anchor\" href=\"#算法实现\">#</a> 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205814211.png\" alt=\"image-20230214205814211\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205823058.png\" alt=\"image-20230214205823058\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205833772.png\" alt=\"image-20230214205833772\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CriticalPath</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> e<span class=\"token punctuation\">,</span> l <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Ve<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Vl<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 初始化 Ve 数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 开始正向拓扑计算</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Edge <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span> cost <span class=\"token operator\">></span> Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 反向 Ve 数组，初始化 Vl 数组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 反向计算事件最迟开始时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            k<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost<span class=\"token operator\">&lt;</span>Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 用来比较最早开始时间和最晚开始时间，确定是否是关键路径</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            k<span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            e<span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            l<span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&lt;\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>k<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\">\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"is critical Activity\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/60.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/60.png\" alt=\"img\" /></a></p>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/internet-computer/%E6%9C%9F%E6%9C%AB%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/",
            "url": "https://quas-modo.github.io/2023/02/26/internet-computer/%E6%9C%9F%E6%9C%AB%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/",
            "title": "计网期末名词解释",
            "date_published": "2023-02-26T08:17:28.000Z",
            "content_html": "<p>计网期末会出一道名词解释的题目，8 个英文缩写，1 分全称，1 分中文，1 分解释。平常可以带着看看，不会考很偏僻的，一般都是协议或者常用的名词。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"互联网计算名词解释\"><a class=\"anchor\" href=\"#互联网计算名词解释\">#</a> 《互联网计算》名词解释</h1>\n<table>\n<thead>\n<tr>\n<th>简写</th>\n<th>全称</th>\n<th>中文</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LAN</td>\n<td>Local Area Networks</td>\n<td>局域网</td>\n<td>是指在某一区域内由多台计算机互联成的计算机组</td>\n</tr>\n<tr>\n<td>WAN</td>\n<td>Wide Area Networks</td>\n<td>广域网</td>\n<td>指一种<strong>跨地区的数据通讯网络</strong>，通常包含一个国家或地区</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td>Internet Service Providers</td>\n<td>互联网服务提供商</td>\n<td>向广大用户综合提供互联网<strong>接入业务</strong>、信息业务、和增值业务的电信运营商</td>\n</tr>\n<tr>\n<td>ICP</td>\n<td>Internet Content Provider</td>\n<td>互联网内容提供商</td>\n<td>向广大用户综合提供互联网信息业务和增值业务的电信运营商</td>\n</tr>\n<tr>\n<td>NAP</td>\n<td>Network Access Point</td>\n<td>网络接入点</td>\n<td>是因特网的路由选择层次体系中的通信交换点</td>\n</tr>\n<tr>\n<td>OSI</td>\n<td>Model <strong>Open System Interconnection</strong></td>\n<td>开放式系统互联</td>\n<td>OSI 将计算机网络体系结构（architecture）划分为以下七层：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</td>\n</tr>\n<tr>\n<td>ISO</td>\n<td><strong>International</strong> Organization for Standardization</td>\n<td>国际标准化组织</td>\n<td>在全世界范围内促进标准化工作的开展</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td><strong>Transmission</strong> Control Protocol</td>\n<td>传输控制协议</td>\n<td>一种面向连接的、可靠的、基于字节流的传输层通信协议，不支持单播和组播</td>\n</tr>\n<tr>\n<td>UDP</td>\n<td>User Datagram Protocol</td>\n<td>用户数据报协议</td>\n<td>是 OSI 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠、无连接、无确认、无流控制的信息传送服务</td>\n</tr>\n<tr>\n<td>IP</td>\n<td>Internet Protocol</td>\n<td>网际互联协议</td>\n<td>由 network ID 与 host ID 组成，0-127 Class A address,128-191 Class B  address,192-223 Class C address,224-239 Class D-Multicast,240-255 Class  E-Research</td>\n</tr>\n<tr>\n<td>FTP</td>\n<td>File Transfer Protocol</td>\n<td>文件传输协议</td>\n<td>用于在网络上进行文件传输的应用层协议，使用 TCP 传输。FTP 是可靠的，面向连接的服务。基于<strong> TCP 20 和 21 端口</strong>（<em>工作流程：首先通过套接字建立控制连接，然后建立数据连接，通过数据连接传输数据</em>）</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>Hypertext Transfer Protocol</td>\n<td>超文本传输协议</td>\n<td>HTTP 是<strong>面向事务</strong>、<strong>无状态</strong>、<strong>无连接</strong>的客户服务器协议。</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>Simple Mail Transfer protocol</td>\n<td>简单邮件<strong>发送</strong>协议</td>\n<td>它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP 协议属于 TCP/IP  协议族，它帮助每台计算机在发送或中转信件时找到下一个目的地。通过 SMTP 协议所指定的服务器，就可以把 E-mail  寄到收信人的服务器上了，整个过程只要几分钟。SMTP 服务器则是遵循 SMTP 协议的发送邮件服务器，用来发送或中转发出的电子邮件。用于：  用户代理把邮件传送到服务器；在邮件服务器之间的传送</td>\n</tr>\n<tr>\n<td>DNS</td>\n<td>Domain Name System</td>\n<td>域名系统</td>\n<td>因特网上作为域名和 IP 地址相互映射的一个分布式数据库，将域名转化为 IP  地址，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的 IP  数串。共分为三级域名、二级域名、顶级域名。因特网采用层次树状结构命名方法，由多个域名服务器共同完成。每个服务器接收到域名后尝试解析，如果不能解析则传给上一层服务器。</td>\n</tr>\n<tr>\n<td>TFTP</td>\n<td><strong>Trivial</strong> File Transfer Protocol</td>\n<td><strong>普通</strong>文件传输协议</td>\n<td>TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，&lt;u&gt; 提供不复杂、开销不大的文件传输服务。无连接的服务。基于 UDP&lt;/u&gt;，小且容易实现</td>\n</tr>\n<tr>\n<td>NIC</td>\n<td>Network Interface Card</td>\n<td>网卡</td>\n<td>是电脑与局域网相互连接的设备，数据链路层</td>\n</tr>\n<tr>\n<td>UTP</td>\n<td>Unshielded Twisted Pair</td>\n<td>无屏蔽双绞线</td>\n<td>由 8 根不同颜色的线分成 4 对绞合在一起，无金属屏蔽材料；线缆不需要接地，因此便于在线缆末端加上连接器；&lt;u&gt; 价格低廉 &lt;/u&gt;；&lt;u &gt; 直径小 &lt;/u&gt;，因此 &lt; u &gt; 安装简单 &lt;/u &gt; 且更适合安装在管道中；和其他铜传输介质具有一样的数据传输速率；使用 RJ 连接器后极大地降低了噪音的影响。</td>\n</tr>\n<tr>\n<td>TDM</td>\n<td>Time Division Multiplexing</td>\n<td>时分复用</td>\n<td>采用同一物理连接的不同时段来传输不同的信号，达到多路传输的目的；或者是时分复用是将时间划分为一段段等长的时分复用（TDM）帧，每个时分复用的用户在每个 TDM 帧中占用固定序号的时隙</td>\n</tr>\n<tr>\n<td>STDM</td>\n<td>Static Division Multiplexing</td>\n<td>统计时分复用</td>\n<td>是一种根据用户实际需要动态分配线路资源的时分复用方法</td>\n</tr>\n<tr>\n<td>FDM</td>\n<td>Frequency Division Multiplexing</td>\n<td>频分复用</td>\n<td>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带</td>\n</tr>\n<tr>\n<td>WDM</td>\n<td>Wavelength（波长） Division Multiplexing</td>\n<td>波分复用</td>\n<td>就是光的频分复用</td>\n</tr>\n<tr>\n<td>CDM</td>\n<td><strong>Code</strong> Division Multiplexing</td>\n<td><strong>码</strong>分复用</td>\n<td>常用的名词是码分多址 CDMA（Code Division Multiple Access）靠不同的编码来区分各路原始信号的一种复用方式</td>\n</tr>\n<tr>\n<td>CDMA</td>\n<td>Code Division Multiple Access</td>\n<td>码分多址</td>\n<td>是一种多路方式，多路信号只占用一条信道</td>\n</tr>\n<tr>\n<td>LLC</td>\n<td>Logical Link Control</td>\n<td>逻辑链路控制</td>\n<td>是局域网中数据链路层的上层部分。用户的数据链路服务通过 LLC 子层为网络层提供统一的接口。逻辑上标志不同的协议类型并且封装起来。处理差错通知，网络拓扑和流控制。</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>Media Access Control</td>\n<td>介质访问控制</td>\n<td>OSI 模型中，数据链接层的子层。MAC 地址是 OSI 模型中对应数据链路层的地址，每个网络位置都有一个唯一的编号。定义了物理线路上怎样传输帧。解决了物理地址问题，定义网络拓扑和流水线</td>\n</tr>\n<tr>\n<td>CSMA/CD</td>\n<td>Carrier Sense Multiple Access with Collision Detection</td>\n<td>带冲突检测的载波侦听多路访问</td>\n<td>带冲突检测的载波侦听多路访问（Carrier Sense Multiple Access with Collision  Detection），“多点接入” 就是说明这是总线型网络，“载波监听” 就是用电子技术检测总线上有没有其他计算机也在发送。“碰撞检测” 也就是 “边发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。</td>\n</tr>\n<tr>\n<td>CSMA/CA</td>\n<td>Carrier Sense Multiple Access with Collision Avoidance</td>\n<td>避免冲突的载波侦听多路访问</td>\n<td></td>\n</tr>\n<tr>\n<td>AP</td>\n<td>Access Point</td>\n<td>接入点</td>\n<td></td>\n</tr>\n<tr>\n<td>SAP</td>\n<td>Service Access Point</td>\n<td>服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>DSAP</td>\n<td>Destination Service Access Point</td>\n<td>目标服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>SSAP</td>\n<td>the Source Service Access Point</td>\n<td>源服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>OUI</td>\n<td>Organizational Unique Identifier</td>\n<td>组织唯一标识符</td>\n<td></td>\n</tr>\n<tr>\n<td>DSSS</td>\n<td>Direct Sequence Spread Spectrum</td>\n<td>直接序列扩频</td>\n<td></td>\n</tr>\n<tr>\n<td>OFDM</td>\n<td>Orthogonal Frequency Division Multiplexing</td>\n<td>正交频分复用技术</td>\n<td></td>\n</tr>\n<tr>\n<td>BSS</td>\n<td>Basic Service Set</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ESS</td>\n<td>Extended Service Set</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>BS</td>\n<td>Base Station</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SSID</td>\n<td>Service Set Identifier</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>WLAN</td>\n<td>Wireless Local Area Network</td>\n<td>无线局域网</td>\n<td>指应用无线通信技术将计算机设备互联起来，构成可以互相通信和实现资源共享的网络体系</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgment</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>NAT</td>\n<td>Network Address Translations</td>\n<td>网络地址转换</td>\n<td>网络地址转换，将网络内部的私有 IP 地址转换为公有 IP 地址以节省 IP 地址的方法。只能一对一映射</td>\n</tr>\n<tr>\n<td>PAT</td>\n<td>Port Address Translation</td>\n<td>端口地址转换</td>\n<td>是对网络地址转换（NAT）的扩展，它允许 &lt;u&gt; 本地网（LAN）上的多个设备映射到一个单一的公共 IP 地址 &lt;/u&gt;</td>\n</tr>\n<tr>\n<td>CIDR</td>\n<td>Classless InterDomain Routing</td>\n<td>无类域间路由</td>\n<td>无类域间路由（Classless Inter-Domain  Routing），是一个在因特网上创建附加地址的方法，这些地址提供给服务提供商（ISP），再由 ISP 分配给客户，（VLSM + CIDR  就形成了如 192.168.1.0/28 子网掩码 255.255.255.240 这样的形式）</td>\n</tr>\n<tr>\n<td>RARP</td>\n<td>Reverse Address Resolution Protocol</td>\n<td>反向地址解析协议</td>\n<td>反向地址解析协议（Reverse Address Resolution Protocol），ARP 为 IP 到 MAC 的转换，而  RARP 为 MAC 到 IP 的转换，向 RARP 服务器请求分配 IP。主要流程：发出要反向解析的物理地址并希望返回其对应的 IP  地址。发送主机发送一个本地的 RARP 广播，在此广播包中，声明自己的 MAC 地址并且请求任何收到此请求的 RARP 服务器分配一个 IP  地址。 本地网段上的 RARP 服务器收到此请求后，检查其 RARP 列列表，查找该 MAC 地址对应的 IP 地址。 如果存在，RARP  服务器器就给源主机发送一个响应数据包并将此 IP 地址提供给对方主机使用；如果不存在，RARP 服务器对此不做任何的响应。 源主机收到从  RARP 服务器的响应信息，就利用得到的 IP 地址进行通讯；如果一直没有收到 RARP 服务器的响应信息，表示初始化失败。</td>\n</tr>\n<tr>\n<td>BOOTP</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DHCP</td>\n<td>Dynamic Host Configuration Protocol</td>\n<td>动态主机配置协议</td>\n<td>是一个局域网的网络协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段</td>\n</tr>\n<tr>\n<td>ARP</td>\n<td>Address Resolution Protocol</td>\n<td>地址解析协议</td>\n<td>把 IP 地址解析为硬件地址，解决了同一个局域网上的主机或者路由器的 IP 地址和硬件地址的映射问题。ARP 的高速缓存可以大大减少网络上的通信量。只针对同一网段</td>\n</tr>\n<tr>\n<td>IGP</td>\n<td>Interior Gateway Protocols</td>\n<td>内部网关协议</td>\n<td></td>\n</tr>\n<tr>\n<td>EGP</td>\n<td>Exterior Gateway Protocols</td>\n<td>外部网关协议</td>\n<td></td>\n</tr>\n<tr>\n<td>DVP</td>\n<td>Distance Vector Protocols</td>\n<td>距离矢量协议</td>\n<td>距离矢量路由算法是动态路由算法。它是这样工作的：每个路由器维护一张矢量表，表中列出了当前已知的到 每个目标的最佳距离，以及所使用的线路。通过在邻居之间相互交换信息，路由器不断地更新它们内部的表。</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td>Link State Protocols</td>\n<td>链路状态协议</td>\n<td>&lt;u&gt; 每个路由器都了解整个网络的拓扑结构，利用算法计算两个路由之间的最短路径 &lt;/u&gt;，更新由事件触发，每次更新都只向周围的路由器传递路由表的更新信息，包括 OSPF 等</td>\n</tr>\n<tr>\n<td>RIP</td>\n<td><strong>Routing Information Protocol</strong></td>\n<td>路由信息协议</td>\n<td>分布式 &lt;u&gt; 基于距离向量的路由选择协议，只适用于小型网络 &lt;/u&gt;。按固定的时间间隔与相邻路由器交换信息。交换的信息是自己当前的路由表，即到达本自治系统中所有网络的（最短）距离，以及到每个网络应经过的下一跳路由器。但是不知道全网的拓扑结构。</td>\n</tr>\n<tr>\n<td>IGRP</td>\n<td>Interior Gateway Route Protocol</td>\n<td>内部网关路由协议</td>\n<td></td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>Enhanced Interior Gateway Routing Protocol</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SPF</td>\n<td>Shortest Path First</td>\n<td>最短路径优先算法</td>\n<td>最短路径算法，这个算法其实就是 Dijkstra 算法，是 LSP 中计算路径的一种方式</td>\n</tr>\n<tr>\n<td>OSPF</td>\n<td>Open Shortest Path First</td>\n<td>最短路径优先协议</td>\n<td>基于分布式的链路状态协议，适用于大型互联网。OSPF 只在链路状态发生变化时，才用向本自治系统内的所有路由器，用洪泛法发送与本路由器相邻的所有路由器的链路状态信息，最终了解全网的拓扑结构图。</td>\n</tr>\n<tr>\n<td>VLSM</td>\n<td>Variable Length Subnet Mask</td>\n<td>可变长度子网掩码</td>\n<td>规定了一个网络在划分子网时的不同部分使用不同的子网掩码，更有效的使用 IP 地址；使用路由汇总的能力更强</td>\n</tr>\n<tr>\n<td>ICMP</td>\n<td>Internet Control Message Protocol</td>\n<td>因特网控制报文协议</td>\n<td>因特网控制报文协议（Internet Control Message Protocol），是为了提高 IP 数据报交付成功的机会，允许主机或路由器报告差错情况和提供有关异常情况报告的协议，运行在 IP 层。</td>\n</tr>\n<tr>\n<td>IGMP</td>\n<td>Internet Group Management Protoco</td>\n<td>网络组管理协议</td>\n<td></td>\n</tr>\n<tr>\n<td>PING</td>\n<td>Packet InterNet Groper</td>\n<td>因特网包探测器</td>\n<td>用于测试网络连接量的程序。使用了 ICMP 回送请求和回送回答报文，是应用程序直接使用网络层 ICMP 的例子，没有通过 TCP/UDP</td>\n</tr>\n<tr>\n<td>MSS</td>\n<td>Maximum Segment Size</td>\n<td>最大报文段长度</td>\n<td></td>\n</tr>\n<tr>\n<td>MTU</td>\n<td>Maximal Transfer Unit</td>\n<td>最大传输单位</td>\n<td></td>\n</tr>\n<tr>\n<td>EBCDIC</td>\n<td>Extended Binary Coded Decimal Interchange Code</td>\n<td>扩展二进制编码的十进制交换码</td>\n<td></td>\n</tr>\n<tr>\n<td>ASCII</td>\n<td>American Strandard Code for Information Interchange</td>\n<td>美国信息交换标准码</td>\n<td></td>\n</tr>\n<tr>\n<td>JPEG</td>\n<td>Joint Photographic Experts Group</td>\n<td>联合图像专家组</td>\n<td></td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>Graphic Interchange Format</td>\n<td>图像互换格式</td>\n<td></td>\n</tr>\n<tr>\n<td>URL</td>\n<td>Uniform Resource Locator</td>\n<td>统一资源定位符</td>\n<td>是因特网的万维网服务程序上用于指定信息位置的表示方法，&lt;协议&gt;：//&lt; 主机域名或者 ip 地址 &gt;：&lt; 端口号 &gt;/&lt; 路径 &gt;</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>HyperText Markup Language</td>\n<td>超文本标记语言</td>\n<td>定义了许多用于排版的命令 (标签) 是一种可以用任何文本编辑器创建的 ASCII 码文件</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>Post Office Protocol version 3</td>\n<td><strong>邮局协议</strong>版本 3</td>\n<td>用于从服务器读取邮件。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件</td>\n</tr>\n<tr>\n<td>MIME</td>\n<td>Multipurpose Internet Mail Extensions</td>\n<td>因特网协议扩充</td>\n<td></td>\n</tr>\n<tr>\n<td>SNMP</td>\n<td>the Simple Network Management Protocol</td>\n<td>简单网络管理协定</td>\n<td>使用 UDP 的应用层协议</td>\n</tr>\n<tr>\n<td>TLD</td>\n<td>Top Level Domain</td>\n<td>顶级域</td>\n<td>国家 TLD: <code>.cn .us .uk</code> , 通用 TLD: <code>.com .net .org .edu</code></td>\n</tr>\n<tr>\n<td>DHCP</td>\n<td>Dynamic Host Configuration Protocol</td>\n<td>动态主机配置协议</td>\n<td></td>\n</tr>\n<tr>\n<td>IS-IS</td>\n<td>Intermediate System-to-Intermediate System</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>Enhanced Interior Gateway Routing Protocol</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>STP</td>\n<td>the Spanning-Tree Protocol</td>\n<td>生成树协议</td>\n<td>该协议可应用于在网络中建立树形拓扑，消除网络中的环路，并且可以通过一定的方法实现路径冗余，但不是一定可以实现路径冗余</td>\n</tr>\n<tr>\n<td>STP</td>\n<td>Shielded Twisted Pair</td>\n<td>屏蔽双绞线</td>\n<td>是一种广泛用于数据传输的铜质双绞线</td>\n</tr>\n<tr>\n<td>BPDU</td>\n<td>bridge protocol data units</td>\n<td>桥接数据单元</td>\n<td>用于在 STP 中传递拓扑信息、选举等</td>\n</tr>\n<tr>\n<td>CSU</td>\n<td>Channel Service Units</td>\n<td>通道服务单元</td>\n<td></td>\n</tr>\n<tr>\n<td>DSU</td>\n<td>Digital Service Units</td>\n<td>数字服务单元</td>\n<td></td>\n</tr>\n<tr>\n<td>PPP</td>\n<td>Point-to-Point Protocol</td>\n<td>点对点协议</td>\n<td>是为在同等单元之间传输数据包这样的简单链路设计的数据链路层协议，是数据链路层使用最多的一种协议。这种链路提供全双工操作，并按照顺序传递数据包。特点为：简单；只检测差错而不纠正差错，不进行流量控制；支持多种网络层协议。</td>\n</tr>\n<tr>\n<td>HDLC</td>\n<td>High-Level Data Link Control</td>\n<td>高级数据链路控制</td>\n<td>是一个在同步网上传输 数据、面向比特的数据链路层协议</td>\n</tr>\n<tr>\n<td>LAPB</td>\n<td>Link Access Procedure, Balanced</td>\n<td>平衡的链路访问程序</td>\n<td></td>\n</tr>\n<tr>\n<td>ISDN</td>\n<td>Integrated Services Digital Networks</td>\n<td>综合数字服务网络</td>\n<td>以电话综合数字网为基础发展成的通信网，能提供端到端的数字连接，用来承载包括话音和非话音在内的多种电信业务。</td>\n</tr>\n<tr>\n<td>ADSL</td>\n<td>Asymmetric Digitla Subscriber Line</td>\n<td>非对称数字用户线路</td>\n<td>非对称数字用户线路（Aysmmetric Digital Subscriber Line），用数字技术对现有的模拟电话用户线进行改造，使它能承载宽带数字业务。ADSL 下行带宽远远大于上行带宽，因此得名 “非对称”。</td>\n</tr>\n<tr>\n<td>HFC</td>\n<td>Synchronous Optical Network</td>\n<td>同步光纤网</td>\n<td></td>\n</tr>\n<tr>\n<td>SONET</td>\n<td>Synchronous Optical Network</td>\n<td>同步光纤网</td>\n<td></td>\n</tr>\n<tr>\n<td>CHAP</td>\n<td>Challenge Handshake Authentication  Protocol</td>\n<td>挑战握手认证协议</td>\n<td>挑战握手认证协议（Challenge Handshake Authentication  Protocol），链路建立阶段结束之后，认证者向对端点发送 “challenge” 消息；对端点用经过单向哈希函数计算出来的值做应答；认证者根据它自己计算的哈希值来检查应答，如果值匹配，认证得到承认，否则连接应该终止；经过一定的随机间隔，认证者发送一个新 challenge 给端点，重复上述步骤</td>\n</tr>\n<tr>\n<td><strong>PAP</strong></td>\n<td>Password Authentication Protocol</td>\n<td>密码认证协议</td>\n<td>远程节点不停的在链路上反复发送用户名 / 密码，直到验证通过或者连接终止。不健壮的身份认证协议，使用明文发送密码。连接建立前只有一次认证。</td>\n</tr>\n<tr>\n<td>IEEE MAC Sub-layer</td>\n<td>Institute of Electrica and Electronics Engineers MAC Sub_layer</td>\n<td>电气与电子工程师学会的 MAC 子层划分</td>\n<td>IEEE 将数据链路层分成 LLC（Logical Link Control，逻辑链路控制）和  MAC（Media Access Control，介质访问控制）两个子层。MAC 控制各个 host 对 media 的使用权。MAC  子层定义了 frame 如何在物理线上运输，处理物理地址，定义网络拓扑和网线使用规则。</td>\n</tr>\n<tr>\n<td>Split Horizon</td>\n<td></td>\n<td>水平分割</td>\n<td>是一种避免路由环路的出现和加快路由汇聚的技术。水平分割法的规则和原理是路由器从某个接口接收到的更新信息不允许再从这个接口发回去。</td>\n</tr>\n<tr>\n<td>Flow Control</td>\n<td></td>\n<td>流量控制</td>\n<td>让发送方的发送速率不要太快，要让接收方来得及接收。</td>\n</tr>\n<tr>\n<td>ACL</td>\n<td>Access Control Lists</td>\n<td>访问控制列表</td>\n<td>是路由器和交换机接口的指令列表，用来控制端口进出的数据包</td>\n</tr>\n<tr>\n<td>ARQ</td>\n<td>Automatic Repeat-reQuest</td>\n<td>自动重传请求</td>\n<td>是 OSI 模型中<strong>数据链路层</strong>的错误纠正协议之一</td>\n</tr>\n<tr>\n<td>B Channel</td>\n<td>Barrier Channel</td>\n<td>B 信道</td>\n<td>用于电路交换（circuit-switch）的数据，通过 PPP 或 HDLC，B 信道工作在 64 kbps 的速率下，用于传输数据和语音流量</td>\n</tr>\n<tr>\n<td>BRI</td>\n<td>Basic Rate Interface</td>\n<td>基本速率接口</td>\n<td>BRI = 2B + D</td>\n</tr>\n<tr>\n<td>CRC</td>\n<td>Cyclic Redundancy Check</td>\n<td>循环冗余校验</td>\n<td></td>\n</tr>\n<tr>\n<td>D Channel</td>\n<td>Delta Channel</td>\n<td>D 信道</td>\n<td>信号信息（signaling information），通过 LAPD（Link Access Procedure of D-Channel，D 信道链路规程），D 信道工作在 16 kbps 的速率下，用于告诉公用交换电话网络如何处理 B 信道</td>\n</tr>\n<tr>\n<td>DOS</td>\n<td>Disk Operation System</td>\n<td>磁盘操作系统</td>\n<td>是个人计算机上的一类操作系统</td>\n</tr>\n<tr>\n<td>DR</td>\n<td>Designated Router</td>\n<td>指定路由器</td>\n<td>指定路由器，在 OSPF 多路访问网络中，在同一个区域内被选举出来代表所有路由的路由。为了减少在同一个网段中几个邻居互相交换信息的数量</td>\n</tr>\n<tr>\n<td>Internet</td>\n<td>Internet</td>\n<td>互联网</td>\n<td>互联网；指当前全球最大的、最开放的由众多网络相互连接而成的特定互连网，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET</td>\n</tr>\n<tr>\n<td>internet</td>\n<td>internet</td>\n<td>互连网</td>\n<td>泛指多个计算机网络互连而成的计算机网络</td>\n</tr>\n<tr>\n<td>NRZ</td>\n<td>Non-Return to Zero</td>\n<td>不归零制码</td>\n<td>信号电平的一次反转代表 1，电平不变化表示 0，并且在表示完一个码元后，电压不需回到 0</td>\n</tr>\n<tr>\n<td>NVRAM</td>\n<td><strong>Non-volatile</strong> Random Access Memory</td>\n<td>非易失随机存取存储器</td>\n<td>非易失性 RAM，用来存储存储备份或启动配置文件，关机或重启后信息不会丢失</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>Power On Self Test</td>\n<td>开机自检</td>\n<td></td>\n</tr>\n<tr>\n<td>RAM</td>\n<td>Random Access Memory</td>\n<td>随机存取存储器</td>\n<td></td>\n</tr>\n<tr>\n<td>ROM</td>\n<td>Read-only Memory</td>\n<td>只读存储器</td>\n<td></td>\n</tr>\n<tr>\n<td>RZ</td>\n<td>Return to Zero</td>\n<td>归零制码</td>\n<td>是信号电平在一个码元之内都要恢复到零的编码方式</td>\n</tr>\n<tr>\n<td>TTL</td>\n<td>Time to Live</td>\n<td>生存时间</td>\n<td></td>\n</tr>\n<tr>\n<td>VLAN</td>\n<td>Virtual Local Area Network</td>\n<td>虚拟局域网</td>\n<td>是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样，由此得名虚拟局域网。用于划分逻辑子网。工作在第二层和第三层。<strong>可以分割广播域</strong></td>\n</tr>\n<tr>\n<td>VPN</td>\n<td>Virtual Private Network</td>\n<td>虚拟专用网络</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>Frame Relay；帧中继；是一种用于连接计算机系统的面向分组的通信方法。它主要用在公共或专用网上的局域网互联以及广域网连接。大多数公共电信局都提供帧中继服务，把它作为建立高性能的虚拟广域连接的一种途径。</li>\n<li>Data；数据；数据是二进制序列的表示。</li>\n<li>Protocol；协议；协议定义消息传输和传递的详细方式。</li>\n<li>Data Packets；数据分组；为了传输方， 计算机数据通常被分解成小的、易传输的单元，称为数据分组。</li>\n<li>Symmetric Switching： 对称交换。交换机上所有端口带宽一样</li>\n<li>Asymmetric Switching： 非对称交换。不同端口带宽不同</li>\n<li>Store-and-Forward： <strong>储存转发式交换</strong>。交换机收到帧后，先校验 CRC 再转发</li>\n<li>Cut-through： <strong>直通式交换</strong>。<strong>不校验</strong>就转发</li>\n<li>Fast forward Switching： <strong>快速转发交换</strong>。<strong>只查看目的 MAC</strong> 地址后就转发。</li>\n<li>Fragment Free： 免碎片。转发前查看帧前 64 字节以减少线路上噪声造成的错误。</li>\n<li>L2 Switching： Layer 2 Switching，二层交换</li>\n<li>L3 Switching： Layer 3 Switching，三层交换</li>\n<li>L4 Switching： Layer 4 Switching，四层交换</li>\n<li>Multilayer Switching： 多层交换</li>\n<li>backbone： 主干。用于 VLAN 间的通信。</li>\n<li>Frame Filtering： 帧过滤。阻止不符合条件的帧。</li>\n<li>Frame Tagging： 帧标记。在每个要被在主干线路上转发的帧的头部加上一个独特的标签，用来标识它来自哪一个 VLAN。离开主干线路时被去除。</li>\n<li>Static VLAN： 静态 VLAN。直接指派端口所属的 VLAN。</li>\n<li>Dynamic VLAN： 动态 VLAN。当有新的节点插入端口时，交换机查表来动态配置这个端口所属的 VLAN</li>\n<li>Port-Centric VLAN： 以端口为中心的 VLAN。同一 VLAN 下的所有节点接入到同一个路由器接口上，或者反过来说，接入同一个路由器端口的节点被划分到同一个 VLAN 下。</li>\n<li>Access Link： 接入链路。其上只有一个 VLAN 的链路。这个 VLAN 被称为这个链路对应的端口的本地 VLAN。</li>\n<li>Trunk Link： Trunk 链路（就这么叫吧，硬要叫的话是主干链路）。<strong>其上有多个 VLAN  的链路</strong>。用于连接交换机与交换机或路由器。（总之其实就是一根线上多个 VLAN 的帧在跑，所以这些帧得打上标签标识它来自于哪一个  VLAN，不然就搞混了。到达对面的交换机之后再根据标签把这些帧转发到对应的 VLAN 里面去。Trunk  链路最大的好处只是省端口和方便配置，以牺牲一点性能为代价。）</li>\n<li>Trunk 链路也可以有本地 VLAN，即在 trunk 链路因为一些原因失败的时候使用的 VLAN。</li>\n<li>Routing Between VLANs： VLAN 间路由</li>\n<li>Infrastructure Mode：基础建设模式</li>\n<li>Toll Network ：长途通信网</li>\n<li>CO Switch ：中心局交换机</li>\n<li>流量控制 Flow Control：让发送方的发送速率不要太快，要让接收方来得及接收。</li>\n<li>拥塞控制 Congestion Control：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</li>\n<li>Socket：TCP 连接的端点，表示为（IP address：port）。一个连接表示为（socket_sourse，socket_des）</li>\n<li>Computer virus 病毒：编制者在计算机程序中插入的破坏计算机功能或者数据的代码，能影响计算机使用，能自我复制的一组计算机指令或者程序代码</li>\n<li>simplex transmission：单工。只能有一个方向的通信，没有反方方向的交互。</li>\n<li>half-duplex transmission：半双工。信号可双向传输，但不能同时发送或同时接收。</li>\n<li>full-duplex transmission：全双工。通信的双方可同时发送和接收消息，信号可同时双向传输。</li>\n<li>Split horizon：水平分割是一种避免路由环路的出现和加快路由汇聚的技术。水平分割法的规则和原理是路由器从某个接口接收到的更新信息不允许再从这个接口发回去。</li>\n<li>冲突域（物理分段）：连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。</li>\n<li>广播域：接收同样广播消息的节点的集合。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-Sorting/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-Sorting/",
            "title": "Lecture07-Sorting",
            "date_published": "2023-02-26T08:13:10.000Z",
            "content_html": "<h1 id=\"lecture07-sorting\"><a class=\"anchor\" href=\"#lecture07-sorting\">#</a> Lecture07-Sorting</h1>\n<ul>\n<li>所有算法都要求掌握并理解算法过程\n<ul>\n<li>最后有张表格\n<ul>\n<li>哪些稳定哪些不稳定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>折半插入排序很少考</li>\n<li>希尔排序考的概率比较低、就算考到也很少写代码\n<ul>\n<li>性质：不要求证明、但是要求结论 n^1.3</li>\n</ul>\n</li>\n<li><strong>冒泡排序</strong>和<strong>快速排序</strong>非常重要</li>\n<li>锦标赛排序考的不多</li>\n<li><strong>归并排序</strong>要求</li>\n<li>证明都不要求</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/asynccode\" alt=\"img\" /></p>\n<p>关键表格</p>\n<p>KCN 关键码比较次数</p>\n<p>RMN 记录移动次数</p>\n<h1 id=\"1-概述\"><a class=\"anchor\" href=\"#1-概述\">#</a> 1. 概述</h1>\n<ol>\n<li>排序：n 个对象的序列 R [0],R [1],R [2],…R [n-1] 按其关键码的大小，进行由小到大 (非递减) 或由大到小 (非递增) 的次序重新排序的。</li>\n<li>关键码 (key)：进行排序的根据</li>\n<li>两大类：\n<ol>\n<li>内排序：对内存中的 n 个对象进行排序。</li>\n<li>外排序：内存放不下，还要使用外存的排序。(在本节中暂不考虑)</li>\n</ol>\n</li>\n<li>排序算法的<strong>稳定性</strong>：如果待排序的对象序列中，含有多个关键码值相等的对象，用某种方法排序后，<strong>这些对象的相对次序不变的，则是稳定的</strong>，否则为不稳定的。例： 35 81 20 15 82 28 81 82 15 20 28 35 稳定的</li>\n<li>排序种类\n<ol>\n<li>内排序\n<ul>\n<li>插入排序，交换排序，选择排序，归并排序，基数排序</li>\n</ul>\n</li>\n<li>外排序：本章暂不讨论外排序</li>\n</ol>\n</li>\n<li>排序的算法分析\n<ol>\n<li>时间开销 — <strong>比较次数，移动次数</strong></li>\n<li>所需的附加空间 - 空间开销</li>\n</ol>\n</li>\n<li>下面是静态排序过程中所用到的数据表类定义：</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a></p>\n<h2 id=\"11-排序算法类定义\"><a class=\"anchor\" href=\"#11-排序算法类定义\">#</a> 1.1. 排序算法类定义</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DefaultSize<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">datalist</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        Type key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        field otherdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Type <span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">||</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">||</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span>  <span class=\"token keyword\">this</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">datalist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">datalist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MaxSz<span class=\"token operator\">=</span>DefaultSize<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">MaxSize</span><span class=\"token punctuation\">(</span>MaxSz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">CurrentSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            vector<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>MaxSz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span>Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> temp<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span> x<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span> y<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">*</span> vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> MaxSize<span class=\"token punctuation\">;</span> CurrentSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2-插入排序\"><a class=\"anchor\" href=\"#2-插入排序\">#</a> 2. 插入排序</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216090626227.png\" alt=\"image-20230216090626227\" /></p>\n<h2 id=\"21-直接插入排序\"><a class=\"anchor\" href=\"#21-直接插入排序\">#</a> 2.1. 直接插入排序</h2>\n<h3 id=\"211-直接插入排序源码\"><a class=\"anchor\" href=\"#211-直接插入排序源码\">#</a> 2.1.1. 直接插入排序源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091123029.png\" alt=\"image-20230216091123029\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091237179.png\" alt=\"image-20230216091237179\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091440800.png\" alt=\"image-20230216091440800\" /></p>\n<h3 id=\"212-算法复杂度分析\"><a class=\"anchor\" href=\"#212-算法复杂度分析\">#</a> 2.1.2. 算法复杂度分析</h3>\n<ol>\n<li>额外的两次移动来自于 a [i] 的取出和放回，除此以外在最坏的情况下会每一次比较都会进行比较。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/3.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/5.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5.png\" alt=\"img\" /></a></p>\n<h3 id=\"213-算法稳定性\"><a class=\"anchor\" href=\"#213-算法稳定性\">#</a> 2.1.3. 算法稳定性</h3>\n<p><strong>稳定的</strong></p>\n<h2 id=\"22-折半插入排序binary-insert-sort\"><a class=\"anchor\" href=\"#22-折半插入排序binary-insert-sort\">#</a> 2.2. 折半插入排序 (Binary Insert Sort)</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/6.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6.png\" alt=\"img\" /></a></p>\n<h3 id=\"221-源码\"><a class=\"anchor\" href=\"#221-源码\">#</a> 2.2.1. 源码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span> Comparable <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> Comparable x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> low <span class=\"token operator\">&lt;=</span> high <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 计算出中点是哪一个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 调整两端的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            high <span class=\"token operator\">=</span> mid – <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span>  <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"NOT-FOUND\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//C++// 可以使用递归，也可以不使用递归 template &lt;class Type> void BinaryInsertSort (datalist&lt;Type> &amp;list) &#123;    for (int i=1;i&lt;list.currentSize;i++)         BinaryInsert (list, i);&#125;                                         template &lt;class Type> void BinaryInsert ( datalist&lt;Type> &amp;list, int i) &#123;    int left=0, Right=i-1;     Element&lt;Type>temp = list.Vector [i];     while (left&lt;=Right) &#123;        // 调整区间        int middle=(left+Right)/2;        if (temp.getkey ()&lt;list.Vector [middle].getkey ())            Right=middle-1;        else            left=middle+1;    &#125;    for (int k=i-1;k>=left;k--)        list.Vector [k+1]=list.Vector [k];    list.Vector [left]=temp;&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216093520079.png\" alt=\"image-20230216093520079\" /></p>\n<p><strong>left</strong> 的地方是 temp 要放的位置</p>\n<h3 id=\"222-时间复杂度\"><a class=\"anchor\" href=\"#222-时间复杂度\">#</a> 2.2.2. 时间复杂度</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/7.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/7.png\" alt=\"img\" /></a></p>\n<p><strong>折半查找所需比较次数与初始排序无关，仅依赖于对象个数</strong></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/8.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/8.png\" alt=\"img\" /></a></p>\n<h3 id=\"223-折半插入排序稳定性\"><a class=\"anchor\" href=\"#223-折半插入排序稳定性\">#</a> 2.2.3. 折半插入排序稳定性</h3>\n<p>算法是<strong>稳定的</strong></p>\n<h2 id=\"23-希尔排序shell-sort\"><a class=\"anchor\" href=\"#23-希尔排序shell-sort\">#</a> 2.3. 希尔排序 (Shell Sort)</h2>\n<ol>\n<li>又称缩小增量排序 (diminishing - increament sort)</li>\n<li>方法:\n<ol>\n<li>取一增量 (间隔 gap &lt; n)，按增量分组，对每组使用 直接插入排序或其他方法进行排序。</li>\n<li>减少增量 (分的组减少，但每组记录增多)。直至增量为 1，即为一个组时。</li>\n</ol>\n</li>\n<li>例子:</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/9.png\" alt=\"img\" /></a></p>\n<ol>\n<li>每次完成排序后，gap 每次都取一半。</li>\n</ol>\n<h3 id=\"231-希尔排序的代码实现\"><a class=\"anchor\" href=\"#231-希尔排序的代码实现\">#</a> 2.3.1. 希尔排序的代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095023830.png\" alt=\"image-20230216095023830\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095032024.png\" alt=\"image-20230216095032024\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shellsort</span><span class=\"token punctuation\">(</span> datalist <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> gap<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>CurrentSize<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">ShellInsert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        gap<span class=\"token operator\">=</span>gap<span class=\"token operator\">=</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>gap<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShellInsert</span><span class=\"token punctuation\">(</span> datalist<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>gap<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>CurrentSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span>temp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>gap<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            j<span class=\"token operator\">-=</span>gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>         </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//javapublic static void shellsort (Comparable [] a ) &#123;    for (int gap = a.length/2 ; gap>0 ; gap/=2 )        for (int i = gap; i &lt; a.length; i++) &#123;            // 遍历一遍            Comparable tmp = a [i];            int j = i;            for (;j >= gap &amp;&amp; tmp.compareTo ( a [j-gap] )&lt; 0;j -= gap )                // 完成一遍下滤                a [j] = a [j – gap];            a [j] = tmp;    &#125;&#125;</span></pre></td></tr></table></figure><h3 id=\"232-希尔排序的稳定性\"><a class=\"anchor\" href=\"#232-希尔排序的稳定性\">#</a> 2.3.2. 希尔排序的稳定性</h3>\n<p><strong>不稳定</strong>的</p>\n<h3 id=\"233-希尔排序算法分析\"><a class=\"anchor\" href=\"#233-希尔排序算法分析\">#</a> 2.3.3. 希尔排序算法分析</h3>\n<ol>\n<li>与选择的缩小增量有关，但到目前还不知如何选择最好结果的缩小增量序列。</li>\n<li>平均比较次数与移动次数大约 n1.3 左右</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095012176.png\" alt=\"image-20230216095012176\" /></p>\n<h1 id=\"3-交换排序一类排序算法\"><a class=\"anchor\" href=\"#3-交换排序一类排序算法\">#</a> 3. 交换排序 (一类排序算法)</h1>\n<ol>\n<li>方法的本质：不断的交换反序的对偶，直到不再有反序的对偶为止。</li>\n<li>两种方法：\n<ol>\n<li>冒泡排序 (Bubble sort)</li>\n<li>快速排序 (Quick sort)</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"31-冒泡排序注意是优化过的\"><a class=\"anchor\" href=\"#31-冒泡排序注意是优化过的\">#</a> 3.1. 冒泡排序（注意是优化过的）</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216100539527.png\" alt=\"image-20230216100539527\" /></p>\n<h3 id=\"311-源码\"><a class=\"anchor\" href=\"#311-源码\">#</a> 3.1.1. 源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216100532018.png\" alt=\"image-20230216100532018\" /></p>\n<pre><code>//java\npublic static void Bubble( int [ ] a , int n) &#123;\n    //Bubble largest element in a[0:n-1] to right \n    for(int i=0; i&lt;n-1; i++) \n        if(a[i] &gt; a[i+1])\n            swap(a[i],a[i+1]);\n    &#125;\npublic static void BubbleSort( int [ ] a, int n) &#123;  \n    //Sort a[0:n-1] using a bubble sort \n    for(int i=n ;i&gt;1; i--) \n        Bubble(a,i); \n&#125;\n\n//C++template&lt;class Type&gt; void  BubbleSort( datalist&lt;Type&gt; &amp; list) &#123;    int pass=1;    int exchange=1;    while (pass&lt;list.CurrentSize &amp;&amp;exchange) &#123;        BubbleExchange(list, pass, exchange);        pass++;    &#125;&#125;template&lt;class Type&gt;  void  BubbleExchange(datalist&lt;Type&gt; &amp;list, const int i, int &amp; exchange) &#123;    exchange=0;    for (int j=list.CurrentSize-1; j&gt;=i; j--)        if (list.Vector[j-1].getkey()&gt;list.Vector[j].getkey()) &#123;            swap(list.Vector[j-1],  list.Vector[j]);            exchange=1;        &#125;&#125;\n</code></pre>\n<h3 id=\"312-冒泡排序算法分析\"><a class=\"anchor\" href=\"#312-冒泡排序算法分析\">#</a> 3.1.2. 冒泡排序算法分析</h3>\n<ol>\n<li>进行几次元素之间的比较？\n<ul>\n<li>从 n-1 开始往下比较</li>\n</ul>\n</li>\n<li>进行了几次元素之间的交换\n<ul>\n<li>不确定</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"313-冒泡排序算法的稳定性\"><a class=\"anchor\" href=\"#313-冒泡排序算法的稳定性\">#</a> 3.1.3. 冒泡排序算法的稳定性</h3>\n<p><strong>稳定的</strong></p>\n<h3 id=\"314-冒泡排序算法复杂度分析\"><a class=\"anchor\" href=\"#314-冒泡排序算法复杂度分析\">#</a> 3.1.4. 冒泡排序算法复杂度分析</h3>\n<ol>\n<li>最小比较次数\n<ul>\n<li>有序：n-1 次比较，移动次数为 0</li>\n</ul>\n</li>\n<li>最大比较次数\n<ul>\n<li>逆序：(n-1)+(n-2)+…+1=n (n-1)/2 约等于 O (n2) (比较次数)<br />\n 移动次数 = 3*(1+2+3+…+n)=(3/2) n (n-1) i=1 (移动次数)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"32-快速排序\"><a class=\"anchor\" href=\"#32-快速排序\">#</a> 3.2. 快速排序</h2>\n<h3 id=\"321-算法内容\"><a class=\"anchor\" href=\"#321-算法内容\">#</a> 3.2.1. 算法内容</h3>\n<ol>\n<li>在 n 个对象中，取一个对象 (如第一个对象 —— 基准 pivot)，按该对象的关键码\n<ol>\n<li>把所有<strong>小于等于</strong>该关键码的对象分划在它的左边。</li>\n<li><strong>大于</strong>该关键码的对象分划在它的右边。</li>\n</ol>\n</li>\n<li>对左边和右边 (子序列) 分别再用快速排序。</li>\n</ol>\n<h3 id=\"322-例子\"><a class=\"anchor\" href=\"#322-例子\">#</a> 3.2.2. 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/10.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/10.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/11.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/11.png\" alt=\"img\" /></a></p>\n<h3 id=\"323-算法实现\"><a class=\"anchor\" href=\"#323-算法实现\">#</a> 3.2.3. 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216103633667.png\" alt=\"image-20230216103633667\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216103641450.png\" alt=\"image-20230216103641450\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span> datalist <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> pivotpos <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> pivotpos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> pivotpos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//partition</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>datalist<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>low<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>high<span class=\"token punctuation\">;</span>  Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span>pivot<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>pivot<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>pivot<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>java 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>length – <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">median3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> left <span class=\"token operator\">+</span> right <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>left <span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> right <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>left <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>right <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> center <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 调整了到最后一个位置上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> right – <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span> right – <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> left <span class=\"token operator\">+</span> <span class=\"token constant\">CUTOFF</span> <span class=\"token operator\">&lt;=</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Comparable</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">median3</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> right – <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparaTo</span><span class=\"token punctuation\">(</span> pivot  <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>right – <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i – <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"324-快速排序算法的稳定性\"><a class=\"anchor\" href=\"#324-快速排序算法的稳定性\">#</a> 3.2.4. 快速排序算法的稳定性</h3>\n<p><strong>不稳定</strong>的排序方法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIyL2FydGljbGUvZGV0YWlscy85NDM5NjAxMA==\">https://blog.csdn.net/qq_40941722/article/details/94396010</span></p>\n<h3 id=\"325-快速排序的时间复杂度\"><a class=\"anchor\" href=\"#325-快速排序的时间复杂度\">#</a> 3.2.5. 快速排序的时间复杂度</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105027925.png\" alt=\"image-20230216105027925\" /></p>\n<ol>\n<li>最差的情况 (当选第一个对象为分划对象时) 如果原对象已按关键码排好序，此时为 O (n2)</li>\n</ol>\n<pre><code>K1[       ]\n  K2[     ]\n    K3[   ]\n       ...\n</code></pre>\n<ol>\n<li>最理想的情况：每次分划第一个对象定位在中间</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/12.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/12.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105057713.png\" alt=\"image-20230216105057713\" /></p>\n<h3 id=\"326-空间复杂度\"><a class=\"anchor\" href=\"#326-空间复杂度\">#</a> 3.2.6. 空间复杂度</h3>\n<ol>\n<li>以上讨论的是递归算法，也可用非递归算法来实现。 不管是递归 (由编译程序来实现) 还是非递归。第一次分划后，左部、右部要分别处理。</li>\n<li>优先使用左侧小端部分，之后就可以释放</li>\n<li>存放什么：左部或右部的上、下界的下标。</li>\n<li>栈要多大：<strong>O(log2n)- O(n)</strong>(有序情况)</li>\n</ol>\n<h3 id=\"327-快速排序避免有序情况\"><a class=\"anchor\" href=\"#327-快速排序避免有序情况\">#</a> 3.2.7. 快速排序避免有序情况</h3>\n<ol>\n<li>选取 pivot (枢纽元) 用第一个元素作 pivot 是不太好的。</li>\n<li>方法 1：随机选取 pivot, 但随机数的生成一般是昂贵的。</li>\n<li>方法 2：三数中值分割法 (Median-of-Three partitioning) N 个数，最好选第 (N/2)(向上取整) 个最大数，这是最好的中值，但这是很困难的。一般选左端、右端和中心位置上的三个元素的中值作为枢纽元。\n<ul>\n<li>8, 1, 4, 9, 6, 3, 5, 2, 7, 0 (8,  6,  0)</li>\n<li>具体实现时：将 8，6，0 先排序，即 0, 1, 4, 9, 6, 3, 5, 2 , 7, 8, 得到中值 pivot 为 6</li>\n</ul>\n</li>\n<li>分割策略:\n<ol>\n<li>将 pivot 与最后倒数第二个元素交换，使得 pivot 离开要被分割的数据段。然后，i 指向第一个元素，j 指向倒数第二个元素。\n<ul>\n<li>0, 1, 4, 9, 7, 3, 5, 2,  6,  8</li>\n</ul>\n</li>\n<li>然后进行分划</li>\n</ol>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbmd4aWFvL3AvNjI2MjIwOC5odG1s\">三数中值分隔法</span></li>\n</ol>\n<h3 id=\"328-参考\"><a class=\"anchor\" href=\"#328-参考\">#</a> 3.2.8. 参考</h3>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbmd4aWFvL3AvNjI2MjIwOC5odG1s\">图解排序算法 (五) 之快速排序 —— 三数取中法</span></li>\n</ol>\n<h1 id=\"4-选择排序\"><a class=\"anchor\" href=\"#4-选择排序\">#</a> 4. 选择排序</h1>\n<ol>\n<li>每次找到数组中的最小值找到然后放到前面，进行重复递归。</li>\n<li>也可以将最大的数字找出来然后当放到后面。</li>\n</ol>\n<h2 id=\"41-直接选择排序\"><a class=\"anchor\" href=\"#41-直接选择排序\">#</a> 4.1. 直接选择排序</h2>\n<ol>\n<li>思想：首先在 n 个记录中选出关键码最小 (最大) 的 记录，然后与第一个记录 (最后第 n 个记录) 交换位置，再在其余的 n-1 个记录中选关键码 最小 (最大) 的记录，然后与第二个记录 (第 n-1 个记录) 交换位置，直至选择了 n－1 个记录。</li>\n</ol>\n<h3 id=\"411-源码\"><a class=\"anchor\" href=\"#411-源码\">#</a> 4.1.1. 源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105457530.png\" alt=\"image-20230216105457530\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105506689.png\" alt=\"image-20230216105506689\" /></p>\n<pre><code>//java\npublic static void SelectionSort(int [] a, int n) &#123;\n    //sort the n number in a[0:n-1].\n    //找到大数字放置到后面\n    for(int size = n; size&gt;1; size--)&#123;\n        //n-1\n        int j = Max(a,size);\n        //n-1+n-2+...+1\n        swap(a[j],a[size-1]);\n    &#125;\n&#125; \n//c++template &lt;class Type&gt; void SelectSort(datalist&lt;Type&gt; &amp;list) &#123;    for ( int i=0; i&lt;list.CurrentSize-1; i++)        SelectExchange(list, i);&#125;template &lt;class Type&gt; void SelectExchange( datalist&lt;Type&gt; &amp; list, const int i) &#123;    int k=i;    for ( int j=i+1; j&lt;list.CurrentSize; j++)        if (list.Vector[j].getkey( )&lt;list.Vector[k].getkey( ))            k=j;    if ( k!=i)        Swap(list.Vactor[i], list.Vector[k]);&#125;](https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img\\cpt2\\im2.14.png)\n</code></pre>\n<h3 id=\"414-直接排序稳定性\"><a class=\"anchor\" href=\"#414-直接排序稳定性\">#</a> 4.1.4. 直接排序稳定性</h3>\n<p>不稳定的</p>\n<h2 id=\"42-锦标赛排序树形选择排序\"><a class=\"anchor\" href=\"#42-锦标赛排序树形选择排序\">#</a> 4.2. 锦标赛排序（树形选择排序）</h2>\n<ol>\n<li>直接选择排序存在重复做比较的情况，锦标赛 排序克服了这一缺点。</li>\n<li>具体方法:\n<ol>\n<li>n 个对象的关键码两两比较得到 (n/2)(向上取整) 个 比较的优胜 者 (关键码小者) 保留下来，再对这 (n/2)(向上取整) 个对象再进行关键码的两两比较，…… 直至选出一个最小的关键码为止。如果 n 不是 2 的 K 次幂，则让叶结点数补足到满足 2k &lt; n &lt;= 2k 个。</li>\n<li>输出最小关键码。再进行调整：即把叶子结点上，该最小关键码改为最大值后，再进行 由底向上的比较，直至找到一个最小的关键码 (即次小关 键码) 为止。重复 2，直至把关键码排好序。</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/13.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/13.png\" alt=\"img\" /></a></p>\n<h3 id=\"421-锦标赛排序的算法分析\"><a class=\"anchor\" href=\"#421-锦标赛排序的算法分析\">#</a> 4.2.1. 锦标赛排序的算法分析</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/15.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/15.png\" alt=\"img\" /></a></p>\n<h2 id=\"43-堆排序\"><a class=\"anchor\" href=\"#43-堆排序\">#</a> 4.3. 堆排序</h2>\n<ol>\n<li>参考 heap 部分</li>\n<li>是固定的算法，从小到大排序，所以一开始建立最大堆，最后调整为最小堆</li>\n<li>不稳定的</li>\n</ol>\n<h3 id=\"431-算法思想\"><a class=\"anchor\" href=\"#431-算法思想\">#</a> 4.3.1. 算法思想</h3>\n<ol>\n<li>第一步，建堆，根据初始输入数据，利用 堆的调整算法 FilterDown ()，形成初始堆。(形成最大堆)</li>\n<li>第二步，一系列的对象交换和重新调整堆</li>\n</ol>\n<h3 id=\"432-示例\"><a class=\"anchor\" href=\"#432-示例\">#</a> 4.3.2. 示例</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/16.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/16.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/17.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/17.png\" alt=\"img\" /></a></p>\n<h3 id=\"433-代码实现\"><a class=\"anchor\" href=\"#433-代码实现\">#</a> 4.3.3. 代码实现</h3>\n<pre><code>//c++\nTemplate&lt;class  Type&gt;void HeapSort(datalist&lt;Type&gt;&amp;list) &#123;\n    for(int i=(list.currentsize-1)/2;i&gt;=0;i--)\n        FilterDown(i,list.currentsize-1);\n    for(i=list.currentsize-1;i&gt;=1;i--)&#123;\n        Swap(list.Vector[0],list.vector[i]);\n        FilterDown(0,i-1);\n    &#125;\n&#125;\n</code></pre>\n<ol>\n<li>FilterDown () 就是第 6 章中的，但要改一下：那里是 建最小堆，这里是建最大堆。</li>\n</ol>\n<pre><code>//java program\npublic static void heapsort( Comparable []a) &#123;\n    for( int i = a.length / 2; i &gt;= 0; i-- )\n        percDown( a, i, a.length );\n    for( int i = a.length – 1; i &gt; 0; i-- ) &#123;\n        swapReferences( a, 0, i );\n        percDown( a, 0, i);\n    &#125;\n&#125;\nprivate static int leftChild( int i ) &#123;   \n    return 2 * i + 1;\n&#125;\nprivate static void percDown( Comparable [ ] a, int  i,  int n ) &#123;\n    int child;\n    Comparable tmp;\n    for( tmp = a[i];leftChild(i) &lt; n ; i = child ) &#123;\n        child = leftchild( i );\n        if( child!=n – 1&amp;&amp; a[child].compareTo( a[ child + 1 ] ) &lt; 0 )\n            child ++;\n        if( tmp . compareTo( a[ child ] &lt; 0 )\n            a[ i ] = a[ child ];\n        else\n            break;\n    &#125;\n    a[i] = tmp;\n&#125;\n</code></pre>\n<h3 id=\"434-堆排序算法复杂度分析\"><a class=\"anchor\" href=\"#434-堆排序算法复杂度分析\">#</a> 4.3.4. 堆排序算法复杂度分析</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/18.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/18.png\" alt=\"img\" /></a></p>\n<h1 id=\"7-归并排序\"><a class=\"anchor\" href=\"#7-归并排序\">#</a> 7. 归并排序</h1>\n<ol>\n<li>归并：两个 (多个) 有序的文件组合成一个有序文件 方法：每次取出两个序列中的小的元素输出之；当一序列完，则输出另一序列的剩余部分</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/14.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/14.png\" alt=\"img\" /></a></p>\n<ol>\n<li>算法思想：分而治之 (分治思想)</li>\n</ol>\n<h2 id=\"71-代码实现\"><a class=\"anchor\" href=\"#71-代码实现\">#</a> 7.1. 代码实现</h2>\n<pre><code>//c++\ntemplate&lt;class Type&gt; void merge(datalist&lt;Type&gt; &amp; initList, datalist&lt;Type&gt;&amp; mergedList, const int l, const int m, const int n) &#123;\n    int i=l, j=m+1, k= l;\n    while ( i&lt;=m &amp;&amp; j&lt;=n ) if (initList.Vector[i].getkey( )&lt;initList.Vector[j].getkey( )) &#123;\n        mergedList.Vector[k]=initList.Vector[i];\n        i++;\n        k++;\n    &#125;\n    else&#123;\n        mergedList.Vector[k]=initList.Vector[j];\n        j++;\n        k++;\n    &#125;\n    if (i&lt;=m)\n        for (int n1=k, n2=i; n1&lt;=n &amp;&amp; n2&lt;=m;  n1++, n2++)\n            mergedList.Vector[n1]=initList.Vector[n2];\n    else\n        for(int n1=k, n2=j; n1&lt;=n &amp;&amp; n2&lt;=n; n1++, n2++)\n            mergedList.Vector[n1]=initList.Vector[n2];\n&#125;\n</code></pre>\n<h2 id=\"72-归并排序\"><a class=\"anchor\" href=\"#72-归并排序\">#</a> 7.2. 归并排序</h2>\n<ol>\n<li>方法\n<ul>\n<li>n 个长为 1 的对象两两合并，得 n/2 个长为 2 的文件</li>\n<li>n/2 个长为 2…………………. 得 n/4 个长为 4 的文件…</li>\n<li>2 个长为 n/2 的对象两两合并，得 1 个长为 n 的文件</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"721-例子\"><a class=\"anchor\" href=\"#721-例子\">#</a> 7.2.1. 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/19.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/19.png\" alt=\"img\" /></a></p>\n<h3 id=\"722-非递归算法c代码实现\"><a class=\"anchor\" href=\"#722-非递归算法c代码实现\">#</a> 7.2.2. 非递归算法 c++ 代码实现</h3>\n<pre><code>//c++\ntemplate &lt;class Type&gt; void MergeSort(datalist &lt;Type&gt; &amp; list) &#123;\n    datalist &lt;Type&gt; tempList(list.MaxSize); \n    int len=1;\n    while (len&lt;list.CurrentSize) &#123;\n        MergePass(list, tempList, len); len *=2 ;\n        if (len &gt;= list.CurrentSize) &#123;\n            for (int i=0;i&lt; list.CurrentSize; i++)\n                list.Vector[i]=tempList.Vector[i];\n        &#125;else&#123;\n            MergePass(tempList, list, len); len*=2;\n        &#125;\n    &#125;\n    delete[]tempList;\n&#125;\n</code></pre>\n<ol>\n<li>当两段均满 len 长时调用 merge</li>\n<li>当一长一短时也调用 merge (但第二段的参数不同)</li>\n<li>当只有一段时，则复抄</li>\n<li>块合并算法实现</li>\n</ol>\n<pre><code>//c++\ntemplate &lt;class Type&gt; void MergePass( datalist&lt;Type&gt; &amp; initList, datalist &lt;Type&gt; &amp; mergedList, const int len) &#123;\n    int i=0;\n    while (i+2*len&lt;=initList.CurrentSize-1) &#123;\n        merge( initList, mergedList, i, i+len-1, i+2*len-1);\n        i+=2*len;\n    &#125;\n    if(i+len &lt;= initList.CurrentSize-1)\n        merge(initList, mergedList, i, i+len-1,initList.CurrentSize-1);//因为有可能有块长度为余数，并不满足结果的，所以要额外处理\n    else\n        for( int j=i ; j&lt;= initList.CurrentSize; j++)\n            mergedList.Vector[j]=initList.Vector[j];\n&#125;\n</code></pre>\n<ol>\n<li>算法分析：合并趟数 log2n, 每趟比较 n 次，所以为 O (nlog2n)</li>\n<li>稳定性：稳定。</li>\n</ol>\n<h3 id=\"723-递归算法java实现\"><a class=\"anchor\" href=\"#723-递归算法java实现\">#</a> 7.2.3. 递归算法 java 实现</h3>\n<pre><code>//java\npublic static void mergeSort( Comparable [ ] a ) &#123;\n    Comparable [ ] tmpArray = new Comparable[a.length];\n    mergeSort( a, tmpArray, 0, a.length – 1 );\n&#125;                            \nprivate static void mergeSort( Comparable [ ] a, Comparable [] tmpArray, int left, int right ) &#123;\n    if( left &lt; right ) &#123;\n        int center = ( left + right ) / 2;\n        mergeSort(a, tmparray, left, center );\n        mergeSort(a, tmpArray, center + 1, right );\n        merge( a, tmpArray, left, center + 1, right );\n    &#125;\n&#125;\nprivate static void merge( Comparable [ ] a, Comparable [] tmpArray, int leftPos, int rightPos, int rightEnd ) &#123;\n    int leftEnd = rightPos – 1;\n    int tmpPos = leftPos;\n    int numElements = rightEnd – leftPos + 1;\n    while( leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd )\n        if( a[ leftPos ].compareTo( a[ rightPos ] ) &lt;= 0 )\n            tmpArray[ tmpPos++ ] = a[ leftPos++ ];\n        else\n            tmpArray[ tmpPos++ ] = a[ rightPos++ ];\n    while( leftPos &lt;= leftEnd )\n        tmpArray[ tmpPos++ ] = a[ leftPos++ ];\n    while( rightpos &lt;= rightEnd)\n        tmpArray[ tmpPos++] = a[ rightpos++ ];\n    for( int i = 0; i &lt; numElements; i++, rightEnd-- )\n        a[ rightEnd ] = tmpArray[ rightEnd ];\n&#125;     \n</code></pre>\n<h3 id=\"724-算法分析\"><a class=\"anchor\" href=\"#724-算法分析\">#</a> 7.2.4. 算法分析</h3>\n<ol>\n<li>合并趟数 log2n, 每趟比较 n 次，所以为 O (nlog2n)</li>\n</ol>\n<h3 id=\"725-算法稳定性\"><a class=\"anchor\" href=\"#725-算法稳定性\">#</a> 7.2.5. 算法稳定性</h3>\n<ol>\n<li>稳定性：稳定。</li>\n</ol>\n<h2 id=\"73-递归的表归并排序\"><a class=\"anchor\" href=\"#73-递归的表归并排序\">#</a> 7.3. 递归的表归并排序</h2>\n<ol>\n<li>使用静态链表的方法来实现</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/20.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20.png\" alt=\"img\" /></a></p>\n<h3 id=\"731-算法实现\"><a class=\"anchor\" href=\"#731-算法实现\">#</a> 7.3.1. 算法实现</h3>\n<ol>\n<li>主程序 mergesort (L)</li>\n<li>子程序 divide (L,L1)，将 L 划分成两个子表 3. 合并两有序序列 merge (L,L1)</li>\n</ol>\n<pre><code>void MergeSort (List &lt;Type&gt; &amp;L) &#123;\n    List &lt;Type&gt; L1;\n    if (L.first!=NULL)\n        if (L.first-&gt;link != NULL)//至少有两个结点\n        &#123;\n            divide (L, L1);\n            MergeSort(L);\n            MergeSort(L1);\n            L=merge( L, L1);\n        &#125;\n&#125;\n</code></pre>\n<h3 id=\"732-有序链表的merge算法\"><a class=\"anchor\" href=\"#732-有序链表的merge算法\">#</a> 7.3.2. 有序链表的 merge 算法</h3>\n<pre><code>//c++\nList&lt;Type&gt; &amp; merge (List&lt;Type&gt; &amp;L1, List&lt;Type&gt; &amp; L2) &#123;\n    ListNode&lt;Type&gt;*p=L1.first,*q=L2.first,  *r ;\n    List&lt;Type&gt; temp;\n    if ((p= =NULL) or (q= =NULL)) &#123;\n        if (p!=NULL)&#123;\n            temp.first=p;\n            temp.last=L1.last;\n        &#125;else&#123;\n            temp.first=q;\n            temp.last=L2.last;\n        &#125;\n    &#125;else&#123;\n        if (p-&gt;data&lt;=q-&gt;data) &#123;\n            r = p;\n            p = p-&gt;link;\n        &#125;else&#123;\n            r = q;\n            q = q-&gt;link;\n        &#125;\n        temp.first = r ;\n        while((p!=NULL) &amp;&amp; (q!=NULL)) &#123;\n            if (p-&gt;data&lt;=q-&gt;data) &#123;\n                r-&gt;link=p;\n                r=p;\n                p=p-&gt;link;\n            &#125;else&#123;\n                r-&gt;link=q;\n                r=q;\n                q=q-&gt;link;\n            &#125;\n        &#125;\n        if (p= =NULL)&#123;\n            r-&gt;link=q;\n            temp.last=L2.last;\n        &#125;else &#123;\n            r-&gt;link=p;\n            temp.last=L1.last;\n        &#125;\n    &#125;\n    return temp;\n&#125;\n</code></pre>\n<h3 id=\"733-下面讨论dividelistl1listl2\"><a class=\"anchor\" href=\"#733-下面讨论dividelistl1listl2\">#</a> 7.3.3. 下面讨论 divide (List&amp;L1,ListL2)</h3>\n<ol>\n<li>将 L1 表分为两个长度几乎相等的表，L1.first 指向前半部分，L2.first 指向后半部分，要求被划分的表至少含有两个结点。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/23.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/23.png\" alt=\"img\" /></a></p>\n<ol>\n<li>方法：设两个流动指针 p,q 指向表的结点 一般来讲让 p 前进一步，q 前进二步，最后当 q= NULL 时，这时 p 恰好指向前半张表的最后一个结点。</li>\n<li>Eg. 如果有 10 个结点，p 走 5 次，q 走 10 次正好走到表末尾</li>\n</ol>\n<pre><code>void divide(List&lt;Type&gt; &amp; L1, List &lt;Type&gt; &amp; L2) &#123;\n    ListNode &lt;Type&gt; *p, *q;\n    L2.last=L1.last;\n    p=L1.first;\n    q=p-&gt;link;\n    q=q-&gt;link;\n    while (q!=NULL) &#123;\n        p=p-&gt;link;\n        q=q-&gt;link;\n        if (q!=NULL)\n            q=q-&gt;link;\n    &#125;\n    q=p-&gt;link;\n    p-&gt;link=NULL;\n    L1.last=p;\n    L2.first=q;\n&#125;\n</code></pre>\n<h1 id=\"8-总结\"><a class=\"anchor\" href=\"#8-总结\">#</a> 8. 总结</h1>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/21.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/21.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/22.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/22.png\" alt=\"img\" /></a></p>\n<p>插入排序 1*n 移动次数最小不是 0 吗</p>\n<h1 id=\"9-例题\"><a class=\"anchor\" href=\"#9-例题\">#</a> 9. 例题</h1>\n<ol>\n<li>若数据元素序列 11, 12, 13, 7, 8, 9, 23, 4, 5 是采用下列排序方法之一得到的第二趟排序后的结果，则该排序算法只能是 A. 起泡排序 B. 插入排序 C. 选择排序 D. 二路归并排序</li>\n<li>首先不是冒泡排序：最大最小值上下，选择排序也是选择最大最小，答案是 B</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-1-DisjointSet/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-1-DisjointSet/",
            "title": "Lecture07.1-DisjointSet",
            "date_published": "2023-02-26T08:13:00.000Z",
            "content_html": "<h1 id=\"lecture071-disjointseet\"><a class=\"anchor\" href=\"#lecture071-disjointseet\">#</a> Lecture07.1-DisjointSEet</h1>\n<ul>\n<li>有很多时候是不考的</li>\n<li>一般就是图里的<strong>最小生成树算法</strong>会考到</li>\n<li>但是两个核心操作 <strong>find union</strong> 要清晰</li>\n<li>考的概率很低</li>\n<li>性能提升考吗？</li>\n</ul>\n<h2 id=\"the-disjoint-set-adt不相交集并查集\"><a class=\"anchor\" href=\"#the-disjoint-set-adt不相交集并查集\">#</a> The Disjoint Set ADT (不相交集，并查集)</h2>\n<ol>\n<li>使用来表示离散中的等价类和等价关系的表示。</li>\n</ol>\n<h1 id=\"1-等价类equivalence-class\"><a class=\"anchor\" href=\"#1-等价类equivalence-class\">#</a> 1. 等价类 (Equivalence Class)</h1>\n<ol>\n<li><strong>等价类</strong>的定义：Suppose we have a set U={1,2,…,n} of n elements and a set  R={(i1,j1), (i2,j2)…(ir,jr)} of r relations. The relation R is an  equivalence relation iff the following conditions are true (symbol ’≡’  represent the equivalence relation on sets, x,y,z are elements in  set):(假设我们有一个 n 个元素组成的集合 U = {1,2,…,n}, 一个有 r 个关系的集合 R. 当切仅当以下条件成立的时候，R 才是一个等价类)\n<ol>\n<li>Reflexive x ≡ x.(<strong>自反性</strong>)</li>\n<li>Symmetric x ≡ y,y ≡ x(<strong>对称性</strong>)</li>\n<li>Transitive x ≡ y and y ≡ z,then x ≡ z(<strong>传递性</strong>)</li>\n</ol>\n</li>\n<li>Eg.</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/2.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/2.png\" alt=\"img\" /></a></p>\n<h1 id=\"2-并查集提供的功能\"><a class=\"anchor\" href=\"#2-并查集提供的功能\">#</a> 2. 并查集提供的功能</h1>\n<ol>\n<li><strong>Combine</strong>(a,b):combine the equivalence classes that contains elements a and b into a single class(Combine(a,b):<strong> 合并</strong>包含元素 a 和 b 的两个等价类为一个等价类)</li>\n<li><strong>Find</strong>(e):determine the class that currently contains element e.(Find(e):<strong> 找到</strong>包含元素 e 的等价类)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216001228684.png\" alt=\"image-20230216001228684\" /></p>\n<h2 id=\"21-combineab合并\"><a class=\"anchor\" href=\"#21-combineab合并\">#</a> 2.1. Combine (a,b) 合并</h2>\n<ol>\n<li>Combine(a,b) is equivalent to i=Find(a); j=Find(b); if(i!=j) Union(i,j);</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a></p>\n<h1 id=\"3-并查集的物理实现\"><a class=\"anchor\" href=\"#3-并查集的物理实现\">#</a> 3. 并查集的物理实现</h1>\n<ol>\n<li>并查集的物理实现是通过森林来表示。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/3.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png\" alt=\"img\" /></a></p>\n<ol>\n<li><strong>parent</strong> 数组中存储的<strong>值为 0</strong> 的时候，这个结点表示为<strong>根结点</strong></li>\n<li>所以这个更快速的支持<strong>从下向上</strong>查询</li>\n</ol>\n<p><strong>树的结构</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//simple tree solution to union-find problem </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用简单的树结构解决并集的查找问题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parent<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>e<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>e<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 向上找到其根结点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> e<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 合并两个结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"31-union的实现\"><a class=\"anchor\" href=\"#31-union的实现\">#</a> 3.1. Union 的实现</h2>\n<ol>\n<li>实例:<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DisjSets</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DisjSets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> numElements <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x <span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 并查集的构造方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DisjSets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> numElements <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>numElements<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一个根结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 并查集的合并</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 并查集的查找，使用递归完成</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 这里是 - 1 表示根节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/5.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5.png\" alt=\"img\" /></a></p>\n<h2 id=\"32-性能估计\"><a class=\"anchor\" href=\"#32-性能估计\">#</a> 3.2. 性能估计</h2>\n<ol>\n<li>Time complexity:(算法复杂度)\n<ul>\n<li>Find-- <strong>O(h)</strong>, h 是指树高</li>\n<li>Union-- <strong>θ(1)</strong></li>\n</ul>\n</li>\n<li>Assume that u times unions and f times finds are to be performed,  f&gt;u, in the worst case a tree with m elements can have a height of m:  Union (2,1),Union (3,2),Union (4,3),Union (5,4)…(假设我们进行 u 次组合操作和 f 次查找操作，f&gt;u，最坏情况下的一颗有 m 个元素的树可以有高度 m)\n<ul>\n<li>严重不平衡的树，会影响到查找的时间复杂度</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/6.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6.png\" alt=\"img\" /></a></p>\n<h2 id=\"33-性能提升\"><a class=\"anchor\" href=\"#33-性能提升\">#</a> 3.3. 性能提升</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216002110321.png\" alt=\"image-20230216002110321\" /></p>\n<h3 id=\"331-方法一\"><a class=\"anchor\" href=\"#331-方法一\">#</a> 3.3.1. 方法一</h3>\n<ol>\n<li><strong>Weight rule</strong>: if the number of nodes in tree i is less than the  number in tree j, then make j the parent of i; otherwise,make i the  parent of j.(点数原则：如果 i 树的点数小于 j 树的点数，那么我们让 j 成为 i 的 parent，反之亦然)</li>\n<li><strong>结点数少的树挂到结点多的树下面</strong></li>\n</ol>\n<h3 id=\"332-高度问题的实现\"><a class=\"anchor\" href=\"#332-高度问题的实现\">#</a> 3.3.2. 高度问题的实现</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/7.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/7.png\" alt=\"img\" /></a></p>\n<ol>\n<li>为了实现我们新建一个<strong> bool 类型数组</strong>来记录<strong>是否是根节点</strong>。</li>\n<li>Besides the parent field, each node has a boolean field root .The  root field is true iff the node is presently a root node.The parent  field of each root node is used to keep a count of the total number of  nodes in the  tree.(除了父字段外，每个节点都有一个布尔字段根。如果当前节点是根节点，则根字段为真。每个根节点的<strong>父字段</strong>用于统计树中的<strong>节点总数</strong>。)\n<ul>\n<li>也就是单独使用了一个布尔数组来实现是否为根。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Union with the weight rule</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    root<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parent<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>e<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>e<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        root<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        e<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//i becomes subtree of j</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        root<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>如何省略去标记根的数组？\n<ul>\n<li><strong>使用负数来记录树高</strong></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 注意到负数会都反过来</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/8.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/8.png\" alt=\"img\" /></a></p>\n<ol>\n<li>例子如下</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/9.png\" alt=\"img\" /></a></p>\n<h3 id=\"333-方法二\"><a class=\"anchor\" href=\"#333-方法二\">#</a> 3.3.3. 方法二</h3>\n<ol>\n<li>Height rule: if the height of tree i is less than that of tree j,  then make j the parent of i; otherwise,make i the parent of j.(如果树 i  的高度小于树 j 的高度，则使 j 成为 i 的父；否则，使 i 成为 j 的父节点)</li>\n<li>总而言之:<strong> 高度低的树挂到高度高的树的下面</strong></li>\n<li>When processing a equivalence pair, we need to operate Find twice,  WeightUnion once. Example of  improvement:(在处理等价对的时候，我们需要 Find 操作两次，WeightUnion 一次。)</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/10.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/10.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 存在疑问？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* C++ */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        j<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">!=</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> pf <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        f <span class=\"token operator\">=</span> pf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//java 是用来记录树高 public int find (int x) &#123;    if ( s [x] &lt; 0 )        return x;    else        return s [x] = find (s [x]);&#125;</span></pre></td></tr></table></figure><h2 id=\"34-性能增强\"><a class=\"anchor\" href=\"#34-性能增强\">#</a> 3.4. 性能增强</h2>\n<ol>\n<li>improve Union in order to decrease the time each find take, so that  the height of tree will not increase  linearly.(改进并查集以减少每次查找所需的时间，从而使树的高度不会线性增加)</li>\n<li>Improvement of Find –path compression (查找路径压缩的改进)</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture17-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture17-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "title": "Lecture17-输入输出",
            "date_published": "2023-02-10T02:30:00.000Z",
            "content_html": "<h1 id=\"lecture17-输入输出\"><a class=\"anchor\" href=\"#lecture17-输入输出\">#</a> Lecture17 - 输入输出</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162138827.png\" alt=\"image-20221215162138827\" /></p>\n<h2 id=\"外围设备外设-peripheral-device\"><a class=\"anchor\" href=\"#外围设备外设-peripheral-device\">#</a> 外围设备（外设） peripheral device</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162246908.png\" alt=\"image-20221215162246908\" /></p>\n<h3 id=\"为什么不能把外设连接到系统总线上\"><a class=\"anchor\" href=\"#为什么不能把外设连接到系统总线上\">#</a> 为什么不能把外设连接到系统总线上</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162410451.png\" alt=\"image-20221215162410451\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162421591.png\" alt=\"image-20221215162421591\" /></p>\n<p>外设的传送速度过快和过慢都会造成问题</p>\n<h2 id=\"io模块\"><a class=\"anchor\" href=\"#io模块\">#</a> IO 模块</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162600197.png\" alt=\"image-20221215162600197\" /></p>\n<p>中间商 IO 模块连接外设和系统总线</p>\n<p>IO 模块属于计算机内部系统</p>\n<p>外设不属于计算机内部系统</p>\n<h2 id=\"外围设备的接口\"><a class=\"anchor\" href=\"#外围设备的接口\">#</a> 外围设备的接口</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162822444.png\" alt=\"image-20221215162822444\" /></p>\n<p>控制逻辑 —— 是外围设备的大脑，控制外围设备的操作</p>\n<p>缓冲器 —— 用于缓存</p>\n<p>转换器 —— 将 01 数据转换成如音频等数据</p>\n<h2 id=\"io模块的功能\"><a class=\"anchor\" href=\"#io模块的功能\">#</a> IO 模块的功能</h2>\n<h3 id=\"处理器-设备通信\"><a class=\"anchor\" href=\"#处理器-设备通信\">#</a> 处理器、设备通信</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163514224.png\" alt=\"image-20221215163514224\" /></p>\n<p>中间商 IO 模块需要和处理器进行通信</p>\n<p>也需要和设备进行通信</p>\n<h3 id=\"数据缓冲\"><a class=\"anchor\" href=\"#数据缓冲\">#</a> 数据缓冲</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163722989.png\" alt=\"image-20221215163722989\" /></p>\n<p>处理器的速度和外设的速度不是完全匹配的</p>\n<p>所以需要在两者之间做一个缓冲</p>\n<h3 id=\"控制和定时\"><a class=\"anchor\" href=\"#控制和定时\">#</a> 控制和定时</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163924983.png\" alt=\"image-20221215163924983\" /></p>\n<h3 id=\"检错\"><a class=\"anchor\" href=\"#检错\">#</a> 检错</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164007590.png\" alt=\"image-20221215164007590\" /></p>\n<h2 id=\"io模块的结构\"><a class=\"anchor\" href=\"#io模块的结构\">#</a> IO 模块的结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164039061.png\" alt=\"image-20221215164039061\" /></p>\n<p>下面的图做了 90 度的旋转</p>\n<p>CPU 对外部设备的命令：数据线 —— 状态 / 控制寄存器</p>\n<p>外设获得的状态和数据也通过数据线的状态控制寄存器返回</p>\n<p>CPU 对 IO 模块的控制：控制线</p>\n<h2 id=\"外部接口\"><a class=\"anchor\" href=\"#外部接口\">#</a> 外部接口</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164455676.png\" alt=\"image-20221215164455676\" /></p>\n<p>哪种用的更多？现在主要用的是串行接口</p>\n<p>当使用并行的时候，需要保持信息同步，比较困难。如何防止？一、不要走太远，线的长度不太长；二、两个操作之间的时间间隔长一点，频率不要太高</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164900238.png\" alt=\"image-20221215164900238\" /></p>\n<h2 id=\"io操作技术\"><a class=\"anchor\" href=\"#io操作技术\">#</a> IO 操作技术</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165000866.png\" alt=\"image-20221215165000866\" /></p>\n<ul>\n<li>编程式 IO：通过程序处理</li>\n<li>中断驱动式 IO：根据 IO 发起的中断</li>\n<li>直接存储器读取：不需要处理器</li>\n</ul>\n<p>编程式 IO 不需要中断，其他需要</p>\n<p>DMA 不需要处理器干涉，其他需要</p>\n<h3 id=\"编程式io\"><a class=\"anchor\" href=\"#编程式io\">#</a> 编程式 IO</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165329903.png\" alt=\"image-20221215165329903\" /></p>\n<p>CPU 始终参与 IO，不能分身干别的事情。参与率为 100%。不断读取状态信息，不断读进字，并且写入存储器。</p>\n<h4 id=\"io命令\"><a class=\"anchor\" href=\"#io命令\">#</a> IO 命令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165626309.png\" alt=\"image-20221215165626309\" /></p>\n<p>命令：IO 控制外设</p>\n<h4 id=\"io指令\"><a class=\"anchor\" href=\"#io指令\">#</a> IO 指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165838054.png\" alt=\"image-20221215165838054\" /></p>\n<p>指令：IO 自己的指令？</p>\n<p>编址方式：</p>\n<ol>\n<li>存储器映射式：缺点是会占用一些存储单元</li>\n<li>分离式</li>\n</ol>\n<h3 id=\"中断驱动式io\"><a class=\"anchor\" href=\"#中断驱动式io\">#</a> 中断驱动式 IO</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170021274.png\" alt=\"image-20221215170021274\" /></p>\n<p>和编程式 IO 的区别在于：可以去处理其他工作</p>\n<p>IO 模块等到消息之后，再告诉 CPU 去处理</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170215789.png\" alt=\"image-20221215170215789\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170316581.png\" alt=\"image-20221215170316581\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170351320.png\" alt=\"image-20221215170351320\" /></p>\n<p>为什么会有中断允许和中断禁止？能够一下子保存完现场吗？不能，搬家的时候不能被打断，此时禁止中断，搬回来恢复现场的时候，也需要禁止中断。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215171211567.png\" alt=\"image-20221215171211567\" /></p>\n<p>响应优先级 —— 更快地抢到位置，小伙子</p>\n<p>处理优先级 —— 最后能够获得这个位置，老太太</p>\n<p>响应和处理优先级都很高，说明是个腿脚麻利的老太太</p>\n<p>中断只会识别比自己<strong>处理优先级</strong>更高的中断，小伙子要给老太太让座</p>\n<p>有好多中断，先筛选出处理优先级比自己高的，优先响应响应优先级最高的，最后拿到的是处理优先级最高的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215171758513.png\" alt=\"image-20221215171758513\" /></p>\n<p>掩码字表示谁可以屏蔽谁，表格中，行能否屏蔽列的（根据处理优先级）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172349168.png\" alt=\"image-20221215172349168\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172430080.png\" alt=\"image-20221215172430080\" /></p>\n<h3 id=\"直接存储器存取dma\"><a class=\"anchor\" href=\"#直接存储器存取dma\">#</a> 直接存储器存取 DMA</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172458552.png\" alt=\"image-20221215172458552\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172714445.png\" alt=\"image-20221215172714445\" /></p>\n<p>CPU 和 DMA 都需要访问内存，DMA 比 CPU 优先，DMA 一般连接的是高速外设，如果不写入存储，会被冲突掉。</p>\n<h4 id=\"cpu停止法\"><a class=\"anchor\" href=\"#cpu停止法\">#</a> CPU 停止法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173043201.png\" alt=\"image-20221215173043201\" /></p>\n<p>高速 IO 设备一般不会持续传入数据，DMA 占用期间，内存没有被有效利用</p>\n<h4 id=\"周期窃取\"><a class=\"anchor\" href=\"#周期窃取\">#</a> 周期窃取</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173247844.png\" alt=\"image-20221215173247844\" /></p>\n<h4 id=\"交替分时访问\"><a class=\"anchor\" href=\"#交替分时访问\">#</a> 交替分时访问</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173407670.png\" alt=\"image-20221215173407670\" /></p>\n<p>周期的固定时间给 CPU，周期的后半段给 DMA</p>\n<h4 id=\"dma配置机制单总线分离dma\"><a class=\"anchor\" href=\"#dma配置机制单总线分离dma\">#</a> DMA 配置机制：单总线分离 DMA</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173502792.png\" alt=\"image-20221215173502792\" /></p>\n<h4 id=\"dma配置机制单总线集合的dma-io\"><a class=\"anchor\" href=\"#dma配置机制单总线集合的dma-io\">#</a> DMA 配置机制：单总线集合的 DMA-IO</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173553642.png\" alt=\"image-20221215173553642\" /></p>\n<h4 id=\"dma配置机制io总线\"><a class=\"anchor\" href=\"#dma配置机制io总线\">#</a> DMA 配置机制：IO 总线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173648304.png\" alt=\"image-20221215173648304\" /></p>\n<h4 id=\"dma示例硬盘存取\"><a class=\"anchor\" href=\"#dma示例硬盘存取\">#</a> DMA 示例：硬盘存取</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173739716.png\" alt=\"image-20221215173739716\" /></p>\n<p>CPU 仍然有比较高的参与度</p>\n<h2 id=\"io模块的演变\"><a class=\"anchor\" href=\"#io模块的演变\">#</a> IO 模块的演变</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215174200623.png\" alt=\"image-20221215174200623\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture16-%E6%8E%A7%E5%88%B6%E5%99%A8/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture16-%E6%8E%A7%E5%88%B6%E5%99%A8/",
            "title": "Lecture16-控制器",
            "date_published": "2023-02-10T02:29:47.000Z",
            "content_html": "<h1 id=\"lecture16-控制器\"><a class=\"anchor\" href=\"#lecture16-控制器\">#</a> Lecture16 - 控制器</h1>\n<h2 id=\"处理器结构\"><a class=\"anchor\" href=\"#处理器结构\">#</a> 处理器结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082920259.png\" alt=\"image-20221214082920259\" /></p>\n<h2 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082928649.png\" alt=\"image-20221214082928649\" /></p>\n<p>用户可见寄存器允许编程人员访问，用户是指编程人员</p>\n<p>控制和状态寄存器大多数是用户不可见的</p>\n<p>两者的界限并不分明</p>\n<h3 id=\"用户可见寄存器\"><a class=\"anchor\" href=\"#用户可见寄存器\">#</a> 用户可见寄存器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082938186.png\" alt=\"image-20221214082938186\" /></p>\n<p>条件码寄存器是至少部分用户可见，但同时构成了控制器。</p>\n<p>条件码寄存器不是必须的，优点是有些指令会变得简单，缺点是硬件复杂度会变高。</p>\n<h4 id=\"设计出发点\"><a class=\"anchor\" href=\"#设计出发点\">#</a> 设计出发点</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082953212.png\" alt=\"image-20221214082953212\" /></p>\n<ol>\n<li>特定还是通用：影响指令集的设计，比如，算数指令指定将结果存放在特定寄存器中，可以减少操作数；三操作数会更加的灵活</li>\n<li>太少，寄存器不够用；太多，效率未必提高，成本上升</li>\n<li>越长，成本越高</li>\n</ol>\n<h4 id=\"保存和恢复\"><a class=\"anchor\" href=\"#保存和恢复\">#</a> 保存和恢复</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083002741.png\" alt=\"image-20221214083002741\" /></p>\n<h3 id=\"控制和状态寄存器\"><a class=\"anchor\" href=\"#控制和状态寄存器\">#</a> 控制和状态寄存器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083013320.png\" alt=\"image-20221214083013320\" /></p>\n<ul>\n<li>PC + 1 或者重新加载</li>\n<li>IR</li>\n<li>MAR</li>\n<li>MBR</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083019626.png\" alt=\"image-20221214083019626\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083026843.png\" alt=\"image-20221214083026843\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083033886.png\" alt=\"image-20221214083033886\" /></p>\n<p>更多的寄存器，更少的访问主存 or 更多的信息放在主存中，更少地访问寄存器</p>\n<h2 id=\"微操作\"><a class=\"anchor\" href=\"#微操作\">#</a> 微操作</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083042489.png\" alt=\"image-20221214083042489\" /></p>\n<h3 id=\"取指周期\"><a class=\"anchor\" href=\"#取指周期\">#</a> 取指周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083049177.png\" alt=\"image-20221214083049177\" /></p>\n<p>左边是微操作，右边是示意图。</p>\n<ol>\n<li>a - b : PC 的地址 copy 到 MAR，MAR 和 PC 中的内容一样</li>\n<li>b - c : PC 加 1，将存储器中的数据中放入 MBR</li>\n<li>c - d  : 将 MBR 的内容让如 IR（指令寄存器）</li>\n</ol>\n<p>PC + 1 可以放到第三个指令周期吗？ 可以，微操作是不唯一的</p>\n<h3 id=\"微操作分组原则\"><a class=\"anchor\" href=\"#微操作分组原则\">#</a> 微操作分组原则</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083058428.png\" alt=\"image-20221214083058428\" /></p>\n<p>避免冲突 —— 不能在一个周期里对同一个寄存器进行读和写的操作</p>\n<p>可以把 PC+1 另外开一个周期吗？不可以，这样太耗时了</p>\n<h3 id=\"间址周期\"><a class=\"anchor\" href=\"#间址周期\">#</a> 间址周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083108027.png\" alt=\"image-20221214083108027\" /></p>\n<h3 id=\"执行周期\"><a class=\"anchor\" href=\"#执行周期\">#</a> 执行周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083119118.png\" alt=\"image-20221214083119118\" /></p>\n<h3 id=\"中断周期\"><a class=\"anchor\" href=\"#中断周期\">#</a> 中断周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083127732.png\" alt=\"image-20221214083127732\" /></p>\n<h3 id=\"指令周期代码icc\"><a class=\"anchor\" href=\"#指令周期代码icc\">#</a> 指令周期代码 ICC</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083136481.png\" alt=\"image-20221214083136481\" /></p>\n<h4 id=\"取指周期-2\"><a class=\"anchor\" href=\"#取指周期-2\">#</a> 取指周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085356591.png\" alt=\"image-20221214085356591\" /></p>\n<p>最后一根线都是朝右的</p>\n<h4 id=\"间址周期-2\"><a class=\"anchor\" href=\"#间址周期-2\">#</a> 间址周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085405497.png\" alt=\"image-20221214085405497\" /></p>\n<h4 id=\"执行周期-2\"><a class=\"anchor\" href=\"#执行周期-2\">#</a> 执行周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085424926.png\" alt=\"image-20221214085424926\" /></p>\n<p>判断操作码，决定执行的指令</p>\n<p>允许中断，进入中断；不允许则继续</p>\n<h4 id=\"中断周期-2\"><a class=\"anchor\" href=\"#中断周期-2\">#</a> 中断周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085436183.png\" alt=\"image-20221214085436183\" /></p>\n<h2 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085448340.png\" alt=\"image-20221214085448340\" /></p>\n<p>箭头所指即为总线和寄存器之间的门</p>\n<p>MBR 和 AC 中的东西并不能同时放到总线上，因此需要将 MBR 的内容放到 Y 当中，此时可以同时获得两个数据。</p>\n<h3 id=\"控制cpu的功能需求\"><a class=\"anchor\" href=\"#控制cpu的功能需求\">#</a> 控制 CPU 的功能需求</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085459702.png\" alt=\"image-20221214085459702\" /></p>\n<h3 id=\"控制器输入\"><a class=\"anchor\" href=\"#控制器输入\">#</a> 控制器输入</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085522166.png\" alt=\"image-20221214085522166\" /></p>\n<p>指令寄存器：寻址方式（是否有间址周期），不同的操作码决定了不同的微操作顺序</p>\n<p>标志：</p>\n<p>时钟：</p>\n<p>来自控制总线的控制信号：特例 —— 中断请求</p>\n<h3 id=\"控制器的输出\"><a class=\"anchor\" href=\"#控制器的输出\">#</a> 控制器的输出</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085535205.png\" alt=\"image-20221214085535205\" /></p>\n<p>二进制输入量 —— 所有的控制信号都是 0 或者 1</p>\n<h3 id=\"取指周期-3\"><a class=\"anchor\" href=\"#取指周期-3\">#</a> 取指周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085545069.png\" alt=\"image-20221214085545069\" /></p>\n<ol>\n<li>红色的线</li>\n<li>绿色的线</li>\n<li>黄色的线</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103826817.png\" alt=\"image-20221214103826817\" /></p>\n<h3 id=\"控制器的最小特性\"><a class=\"anchor\" href=\"#控制器的最小特性\">#</a> 控制器的最小特性</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103837622.png\" alt=\"image-20221214103837622\" /></p>\n<p>“少量的”</p>\n<h2 id=\"控制器实现\"><a class=\"anchor\" href=\"#控制器实现\">#</a> 控制器实现</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103846854.png\" alt=\"image-20221214103846854\" /></p>\n<h3 id=\"硬布线\"><a class=\"anchor\" href=\"#硬布线\">#</a> 硬布线</h3>\n<h4 id=\"硬布线控制器输入\"><a class=\"anchor\" href=\"#硬布线控制器输入\">#</a> 硬布线：控制器输入</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103947835.png\" alt=\"image-20221214103947835\" /></p>\n<p>左边 I1-I4 输入</p>\n<p>右边 O1-O16 输出</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104031247.png\" alt=\"image-20221214104031247\" /></p>\n<h4 id=\"硬布线控制器逻辑\"><a class=\"anchor\" href=\"#硬布线控制器逻辑\">#</a> 硬布线：控制器逻辑</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104049524.png\" alt=\"image-20221214104049524\" /></p>\n<p>PQ 的非表示 00，表取指周期</p>\n<p>非 P Q 表示 01，表间址周期</p>\n<p>P 非 Q 表示 10，表执行周期，某些操作需要用到 C5</p>\n<p>缺点：指令表示会越来越复杂，硬件结构变复杂，集成度降低</p>\n<h3 id=\"微程序实现\"><a class=\"anchor\" href=\"#微程序实现\">#</a> 微程序实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104058952.png\" alt=\"image-20221214104058952\" /></p>\n<p>固件</p>\n<p>每个周期产生一组控制信号（二进制数字），然后将这些二进制子串串在一起，得到微操作序列</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104108689.png\" alt=\"image-20221214104108689\" /></p>\n<p>每个时钟周期，将 CPU 内部控制信号和系统总线控制信号取出，放到控制线上，发出控制信号，各门判断是否执行。</p>\n<p>分支条件判断是否跳转。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104120970.png\" alt=\"image-20221214104120970\" /></p>\n<p>对于相同的操作码，有相同的微程序序列</p>\n<h4 id=\"微程序控制器任务\"><a class=\"anchor\" href=\"#微程序控制器任务\">#</a> 微程序控制器：任务</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104131939.png\" alt=\"image-20221214104131939\" /></p>\n<p>主要任务为定序和执行</p>\n<h4 id=\"微程序控制器定序\"><a class=\"anchor\" href=\"#微程序控制器定序\">#</a> 微程序控制器：定序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104140191.png\" alt=\"image-20221214104140191\" /></p>\n<h4 id=\"微程序控制器构成\"><a class=\"anchor\" href=\"#微程序控制器构成\">#</a> 微程序控制器：构成</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104148310.png\" alt=\"image-20221214104148310\" /></p>\n<h4 id=\"微程序控制器工作流程\"><a class=\"anchor\" href=\"#微程序控制器工作流程\">#</a> 微程序控制器：工作流程</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104157493.png\" alt=\"image-20221214104157493\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104207337.png\" alt=\"image-20221214104207337\" /></p>\n<p>上一张 ppt，最后一步生成地址有三种选择</p>\n<p>在微指令进行编码，缩短微指令，在译码器中进行译码</p>\n<h4 id=\"微程序实现优点与缺点\"><a class=\"anchor\" href=\"#微程序实现优点与缺点\">#</a> 微程序实现：优点与缺点</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104216464.png\" alt=\"image-20221214104216464\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104225289.png\" alt=\"image-20221214104225289\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture15-%E5%91%A8%E6%9C%9F/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture15-%E5%91%A8%E6%9C%9F/",
            "title": "Lecture15-周期",
            "date_published": "2023-02-10T02:28:23.000Z",
            "content_html": "<h1 id=\"lecture15-指令周期\"><a class=\"anchor\" href=\"#lecture15-指令周期\">#</a> Lecture15 - 指令周期</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202123948768.png\" alt=\"image-20221202123948768\" /></p>\n<h2 id=\"指令周期状态图\"><a class=\"anchor\" href=\"#指令周期状态图\">#</a> 指令周期：状态图</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124110716.png\" alt=\"image-20221202124110716\" /></p>\n<p>取址周期：取指令</p>\n<p>执行周期：其他都是执行指令</p>\n<p>“返回字符串或向量数据” —— 不断地取出字符串的东西进行操作 ？</p>\n<h2 id=\"带中断的指令周期\"><a class=\"anchor\" href=\"#带中断的指令周期\">#</a> 带中断的指令周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124730176.png\" alt=\"image-20221202124730176\" /></p>\n<p>在每次周期内检查一次中断</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124830201.png\" alt=\"image-20221202124830201\" /></p>\n<h2 id=\"间址周期\"><a class=\"anchor\" href=\"#间址周期\">#</a> 间址周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124918105.png\" alt=\"image-20221202124918105\" /></p>\n<p>” 间接地址的读取 “看做一个子周期</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125050866.png\" alt=\"image-20221202125050866\" /></p>\n<h2 id=\"cpu的任务\"><a class=\"anchor\" href=\"#cpu的任务\">#</a> CPU 的任务</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125225380.png\" alt=\"image-20221202125225380\" /></p>\n<h2 id=\"cpu需求寄存器\"><a class=\"anchor\" href=\"#cpu需求寄存器\">#</a> CPU 需求：寄存器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125354584.png\" alt=\"image-20221202125354584\" /></p>\n<p>MAR 地址寄存器 Memory Address Register</p>\n<p>MBR 缓冲寄存器 Memory Buffer Register</p>\n<p>MDR 数据寄存器 Memory Data Register</p>\n<p>PC 程序计数器 Program Counter</p>\n<p>IR 指令寄存器 Instruction Register</p>\n<h2 id=\"数据流取指周期\"><a class=\"anchor\" href=\"#数据流取指周期\">#</a> 数据流：取指周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125623143.png\" alt=\"image-20221202125623143\" /></p>\n<p>红线：PC 通过 MAR 将地址放到地址总线上</p>\n<p>绿线：控制器告诉存储器地址已经准备好了</p>\n<p>黄线：存储器从地址总线读取地址</p>\n<p>数据准备好之后：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125900089.png\" alt=\"image-20221202125900089\" /></p>\n<p>存储器将数据放在数据总线上，进而放在 MBR，然后放到 IR 中</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125945117.png\" alt=\"image-20221202125945117\" /></p>\n<p>控制器取下一条指令</p>\n<p>控制器取完下一条指令之后，告诉 PC 加 1</p>\n<h2 id=\"数据流间址周期\"><a class=\"anchor\" href=\"#数据流间址周期\">#</a> 数据流：间址周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130122928.png\" alt=\"image-20221202130122928\" /></p>\n<p>MBR 中存取的是间接地址，与之前类似，地址类源于 MBR 而不是 PC</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130246666.png\" alt=\"image-20221202130246666\" /></p>\n<p>取出来的不是操作数，而是<strong>有效地址</strong></p>\n<h2 id=\"数据流中断周期\"><a class=\"anchor\" href=\"#数据流中断周期\">#</a> 数据流：中断周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130353561.png\" alt=\"image-20221202130353561\" /></p>\n<p>在进行写操作</p>\n<p>保存 PC 中的内容，需要知道返回到哪里</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130713833.png\" alt=\"image-20221202130713833\" /></p>\n<p>控制器告诉 MAR 返回地址存在哪里（可能是一个栈的指针）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130757927.png\" alt=\"image-20221202130757927\" /></p>\n<p>控制器通知存储器写入返回地址</p>\n<h2 id=\"指令流水线\"><a class=\"anchor\" href=\"#指令流水线\">#</a> 指令流水线</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164145096.png\" alt=\"image-20221208164145096\" /></p>\n<h3 id=\"两阶段方法\"><a class=\"anchor\" href=\"#两阶段方法\">#</a> 两阶段方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164300599.png\" alt=\"image-20221208164300599\" /></p>\n<p>时间分配不均匀，取指令太闲，执行执行太忙。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164316928.png\" alt=\"image-20221208164316928\" /></p>\n<p>取指令和执行指令都需要访问内存、取地址，所以会造成访问冲突。</p>\n<p>等待：条件分支指令导致地址可能取的不对，前面取的地址作废。</p>\n<h3 id=\"六阶段方法\"><a class=\"anchor\" href=\"#六阶段方法\">#</a> 六阶段方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164340282.png\" alt=\"image-20221208164340282\" /></p>\n<p>后面五个是把执行指令拆成了五个去完成。</p>\n<p>解决了两个阶段处理时间分配严重不平衡。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164408405.png\" alt=\"image-20221208164408405\" /></p>\n<p>好处：大大缩减了时间单位。</p>\n<h4 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164414492.png\" alt=\"image-20221208164414492\" /></p>\n<ol>\n<li>LOAD 不需要 WO 写操作数。</li>\n</ol>\n<p>​\t\t不需要给特殊的指令设计特殊的流水线，从硬件设计的角度来说，不划算。没有这个阶段就不执行。</p>\n<ol start=\"2\">\n<li>不是所有阶段都可以并行完成</li>\n<li>虽然不像两个阶段的差异那么大，但是六个阶段的时间还是有差异的，以每个流水阶段的最长的为基础</li>\n</ol>\n<h4 id=\"限制条件转移指令\"><a class=\"anchor\" href=\"#限制条件转移指令\">#</a> 限制：条件转移指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164421148.png\" alt=\"image-20221208164421148\" /></p>\n<p>红框框出的指令执行无效。</p>\n<h4 id=\"限制中断\"><a class=\"anchor\" href=\"#限制中断\">#</a> 限制：中断</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164429518.png\" alt=\"image-20221208164429518\" /></p>\n<p>操作：排空流水线</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164441209.png\" alt=\"image-20221208164441209\" /></p>\n<p>只能在时钟上升沿进行操作，可以有效避免噪声</p>\n<h3 id=\"流水线性能\"><a class=\"anchor\" href=\"#流水线性能\">#</a> 流水线性能</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164501181.png\" alt=\"image-20221208164501181\" /></p>\n<p>锁存延时：锁数据，先放入寄存器，再从寄存器中取出来</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208165818734.png\" alt=\"image-20221208165818734\" /></p>\n<p>对应理想情况下的阶梯。</p>\n<p>第一条指令需要 k 个 t，后面（n-1）条每条时间长度多一个 t。</p>\n<p>加速比：评价流水线性能好坏的标准。用没有使用流水线的时间除以使用了流水线的时间。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170539117.png\" alt=\"image-20221208170539117\" /></p>\n<p>（误解）指令越多，k 越大，加速因子越大。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170745357.png\" alt=\"image-20221208170745357\" /></p>\n<ol>\n<li>\n<p>d 锁存延时会累计。</p>\n</li>\n<li>\n<p>冲突会累计</p>\n</li>\n</ol>\n<h2 id=\"冒险hazard\"><a class=\"anchor\" href=\"#冒险hazard\">#</a> 冒险 Hazard</h2>\n<p>阻塞或停顿</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170755086.png\" alt=\"image-20221208170755086\" /></p>\n<h3 id=\"结构冒险\"><a class=\"anchor\" href=\"#结构冒险\">#</a> 结构冒险</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170821493.png\" alt=\"image-20221208170821493\" /></p>\n<p>红色：使用不同的硬件资源（数据和地址使用不同的寄存器、使用了 cache）</p>\n<p>蓝色：分时复用，一个在上升沿使用，一个在下降沿使用。本身阶段所需时间就比较短，可以一起操作。</p>\n<h3 id=\"数据冒险\"><a class=\"anchor\" href=\"#数据冒险\">#</a> 数据冒险.</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170931423.png\" alt=\"image-20221208170931423\" /></p>\n<p>r1 在第一条是结果，但是在下面的指令中是操作数</p>\n<h4 id=\"插入nop指令\"><a class=\"anchor\" href=\"#插入nop指令\">#</a> 插入 nop 指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171343426.png\" alt=\"image-20221208171343426\" /></p>\n<p>等待</p>\n<h4 id=\"插入bubble\"><a class=\"anchor\" href=\"#插入bubble\">#</a> 插入 bubble</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171353814.png\" alt=\"image-20221208171353814\" /></p>\n<p>有时间开销</p>\n<h4 id=\"转发-旁路\"><a class=\"anchor\" href=\"#转发-旁路\">#</a> 转发 旁路</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171404416.png\" alt=\"image-20221208171404416\" /></p>\n<p>重点</p>\n<p>其实 ALU 已经算出来结果了，不需要等待 WB 写回。</p>\n<p>用到 R1 的时候，可以从别的地方拿过来，不需要等待。</p>\n<h4 id=\"交换指令顺序\"><a class=\"anchor\" href=\"#交换指令顺序\">#</a> 交换指令顺序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171410311.png\" alt=\"image-20221208171410311\" /></p>\n<p>旁路什么时候有效？后面的数据是算出来的。</p>\n<p>但是 load 拿出来的数据，是要等到 WB 的，此时旁路失效。</p>\n<p>把一个跟前面没有关系的指令提前执行。</p>\n<h3 id=\"控制冒险\"><a class=\"anchor\" href=\"#控制冒险\">#</a> 控制冒险</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171422760.png\" alt=\"image-20221208171422760\" /></p>\n<p>取错指令了</p>\n<h4 id=\"取多条指令枚举\"><a class=\"anchor\" href=\"#取多条指令枚举\">#</a> 取多条指令（枚举？）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171750679.png\" alt=\"image-20221208171750679\" /></p>\n<p>有限的，分支太多就数量爆炸了</p>\n<p>循环缓冲器：缓存一个数量</p>\n<h4 id=\"分支预测猜得更对一点\"><a class=\"anchor\" href=\"#分支预测猜得更对一点\">#</a> 分支预测（猜得更对一点）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171757176.png\" alt=\"image-20221208171757176\" /></p>\n<ol>\n<li>静态预测：与历史指令无关，简单但是效果不好</li>\n<li>动态预测：</li>\n</ol>\n<h5 id=\"动态预测\"><a class=\"anchor\" href=\"#动态预测\">#</a> 动态预测</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171802869.png\" alt=\"image-20221208171802869\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171809307.png\" alt=\"image-20221208171809307\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171817588.png\" alt=\"image-20221208171817588\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "title": "Lecture11-网络安全",
            "date_published": "2023-02-08T09:53:41.000Z",
            "content_html": "<h1 id=\"lecture11-网络安全\"><a class=\"anchor\" href=\"#lecture11-网络安全\">#</a> Lecture11 - 网络安全</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第11讲：网络安全_页面_01\" /></p>\n<h2 id=\"网络安全问题概述\"><a class=\"anchor\" href=\"#网络安全问题概述\">#</a> 网络安全问题概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第11讲：网络安全_页面_02\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第11讲：网络安全_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第11讲：网络安全_页面_04\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第11讲：网络安全_页面_05\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第11讲：网络安全_页面_06\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第11讲：网络安全_页面_07\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第11讲：网络安全_页面_08\" /></p>\n<h2 id=\"一般的数据加密模型\"><a class=\"anchor\" href=\"#一般的数据加密模型\">#</a> 一般的数据加密模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第11讲：网络安全_页面_09\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第11讲：网络安全_页面_10\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第11讲：网络安全_页面_11\" /></p>\n<h2 id=\"对称密钥和公钥密码体制\"><a class=\"anchor\" href=\"#对称密钥和公钥密码体制\">#</a> 对称密钥和公钥密码体制</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第11讲：网络安全_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第11讲：网络安全_页面_13\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第11讲：网络安全_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第11讲：网络安全_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第11讲：网络安全_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第11讲：网络安全_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第11讲：网络安全_页面_18\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第11讲：网络安全_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第11讲：网络安全_页面_20\" /></p>\n<h2 id=\"数字签名\"><a class=\"anchor\" href=\"#数字签名\">#</a> 数字签名</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第11讲：网络安全_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第11讲：网络安全_页面_22\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第11讲：网络安全_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第11讲：网络安全_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第11讲：网络安全_页面_25\" /></p>\n<h2 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第11讲：网络安全_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第11讲：网络安全_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第11讲：网络安全_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第11讲：网络安全_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第11讲：网络安全_页面_30\" /></p>\n<h2 id=\"acl\"><a class=\"anchor\" href=\"#acl\">#</a> ACL</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第11讲：网络安全_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第11讲：网络安全_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第11讲：网络安全_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第11讲：网络安全_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第11讲：网络安全_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第11讲：网络安全_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第11讲：网络安全_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第11讲：网络安全_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第11讲：网络安全_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第11讲：网络安全_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第11讲：网络安全_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第11讲：网络安全_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第11讲：网络安全_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第11讲：网络安全_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第11讲：网络安全_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第11讲：网络安全_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第11讲：网络安全_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第11讲：网络安全_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第11讲：网络安全_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第11讲：网络安全_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第11讲：网络安全_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第11讲：网络安全_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第11讲：网络安全_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第11讲：网络安全_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第11讲：网络安全_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第11讲：网络安全_页面_56\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "title": "Lecture10-广域网",
            "date_published": "2023-02-08T09:53:29.000Z",
            "content_html": "<h1 id=\"lecture10-wan广域网\"><a class=\"anchor\" href=\"#lecture10-wan广域网\">#</a> Lecture10-WAN 广域网</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第10讲：广域网(wan)_页面_01\" /></p>\n<h2 id=\"广域网技术和设备\"><a class=\"anchor\" href=\"#广域网技术和设备\">#</a> 广域网技术和设备</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第10讲：广域网(wan)_页面_02\" /></p>\n<h3 id=\"广域网服务\"><a class=\"anchor\" href=\"#广域网服务\">#</a> 广域网服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第10讲：广域网(wan)_页面_03\" /></p>\n<p>定义：WAN 是通过 WAN 服务提供商连接 LAN 的通信网络</p>\n<p>WAN 在 OSI 的前三层运行，但<strong>主要集中在物理和数据链路层</strong>。</p>\n<p>广域网和局域网相比相对低效</p>\n<h3 id=\"公司的发展\"><a class=\"anchor\" href=\"#公司的发展\">#</a> 公司的发展</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第10讲：广域网(wan)_页面_04\" /></p>\n<ul>\n<li>广域网的最小单位是公司</li>\n<li>随着公司逐渐的发展才发展 (公司的发展是需求)</li>\n<li>最上角：公司刚成立的时候，小的局域网就可以搞定了 (几台主机)，对外提供服务少，局域网协同办公。</li>\n<li>右上角：随着公司的发展，一家发展到几十家，需要将不同的项目分开，每一个项目都有对应的项目经理和开发人员，多个局域网组成一个 AS (自治系统)。还是一个出口，ASP 要求高，VLAN 隔离和防火墙</li>\n<li>左下角：再次发展，有多个分支机构，区域办事处等，物理上隔离的很远，这时候建立一个数据中心 (存放全部业务数据)，保证团队可以在任何位置访问，公司向 ISP 请求租用一个广域网链路。</li>\n<li>右下角：最后进一步发展，覆盖全球：公司规模足够大，考虑成本，需要部署站点到站点之间的 VPN，保证效率更高。</li>\n</ul>\n<h3 id=\"广域网物理结构\"><a class=\"anchor\" href=\"#广域网物理结构\">#</a> 广域网物理结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第10讲：广域网(wan)_页面_05\" /></p>\n<p>通过 NetWork 远程接入，通过 WSP 提供的 CO Swtich 来连接到中心局</p>\n<p>CPE: 位于公司本地的设备 (主要是接入设备)，可以向 ISP 购买或者租用，购买上网服务 (猫)</p>\n<h3 id=\"广域网虚拟电路\"><a class=\"anchor\" href=\"#广域网虚拟电路\">#</a> 广域网虚拟电路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第10讲：广域网(wan)_页面_06\" /></p>\n<p>交换虚拟电路 (SVC，Switched Virtual Circuits) 是到目的地的 WAN 路径，可根据需要建立 (established) 和终止 (terminated)</p>\n<p>广域网虚拟电路的三个阶段 (phases)</p>\n<ol>\n<li>电路建立–创建虚拟电路 (逻辑确定)</li>\n<li>数据传输–发送和接收用户数据 (含有虚电路号等)</li>\n<li>电路中断–拆除虚拟电路</li>\n</ol>\n<p>永久 (Permanent) 虚拟电路 (PVC) 是采用以下一种模式的永久建立的电路：数据传输</p>\n<ol>\n<li>X.25 和帧中继使用 PVC</li>\n<li>减少带宽使用，但增加成本</li>\n</ol>\n<p><img data-src=\"C:/Users/QUAS/AppData/Roaming/Typora/typora-user-images/image-20230110112813672.png\" alt=\"image-20230110112813672\" /></p>\n<h3 id=\"链接类型和带宽\"><a class=\"anchor\" href=\"#链接类型和带宽\">#</a> 链接类型和带宽</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230110112856731.png\" alt=\"image-20230110112856731\" /></p>\n<ol>\n<li>T：美国标准</li>\n<li>E：欧洲标准</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第10讲：广域网(wan)_页面_07\" /></p>\n<h3 id=\"交换电路连接\"><a class=\"anchor\" href=\"#交换电路连接\">#</a> 交换电路连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第10讲：广域网(wan)_页面_08\" /></p>\n<p>ISDN: 多个 B 信道和 P 信道组合</p>\n<ul>\n<li>BRI:2 个 B 和一个 D</li>\n<li>PRI:T1:23B + D 和 E1:30B + D</li>\n</ul>\n<h3 id=\"网络连接\"><a class=\"anchor\" href=\"#网络连接\">#</a> 网络连接</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\" alt=\"img\" /></a></p>\n<ul>\n<li>直接连接到运营商，DSL 接入 (以太网转换成 DSL 信号)</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\" alt=\"img\" /></a></p>\n<ul>\n<li>永久在线连接，用于有线电视传输等，共享电缆开关等</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\" alt=\"img\" /></a></p>\n<ul>\n<li>无线\n<ul>\n<li>地面无线信道</li>\n<li>无线信道</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第10讲：广域网(wan)_页面_09\" /></p>\n<h3 id=\"广域网设备\"><a class=\"anchor\" href=\"#广域网设备\">#</a> 广域网设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第10讲：广域网(wan)_页面_10\" /></p>\n<p>为了连接到专线 (leased line)，客户必须具备以下条件：</p>\n<ol>\n<li>访问服务提供商的电路</li>\n<li>可用的适当路由器端口</li>\n<li>CSU/DSU，调制解调器，ISDN 终端适配器等。</li>\n</ol>\n<h4 id=\"调制解调器\"><a class=\"anchor\" href=\"#调制解调器\">#</a> 调制解调器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第10讲：广域网(wan)_页面_11\" /></p>\n<ol>\n<li>通道服务单元 CSU,Channel Service Units / 数字服务单元 DSU,Digital Service Units</li>\n<li>与语音级 (voice-grade) 连接接口，以便将模拟信号转换为数字信号。</li>\n</ol>\n<h2 id=\"广域网和osi模型\"><a class=\"anchor\" href=\"#广域网和osi模型\">#</a> 广域网和 OSI 模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第10讲：广域网(wan)_页面_12\" /></p>\n<h3 id=\"广域网标准\"><a class=\"anchor\" href=\"#广域网标准\">#</a> 广域网标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第10讲：广域网(wan)_页面_13\" /></p>\n<p>WAN 标准主要描述 OSI 模型的哪些层？<strong>物理层和数据链路层</strong>，物理层提供电器标准，数据链路层封装到远程的部分：帧标准</p>\n<h3 id=\"wan物理层\"><a class=\"anchor\" href=\"#wan物理层\">#</a> wan 物理层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第10讲：广域网(wan)_页面_14\" /></p>\n<ol>\n<li>描述如何为 WAN 服务提供电气，机械，操作和功能连接的协议。</li>\n<li>这些服务通常是从 WAN 服务提供商，备用运营商，电话后和电报 (PTT) 机构获得的。</li>\n<li>描述数据终端设备 (DTE, Data Terminal Equipment) 和数据电路终端设备 (DCE. Data Circuit-terminating Equipment) 之间的接口。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第10讲：广域网(wan)_页面_15\" /></p>\n<ol>\n<li>通常，DCE 是服务提供商，而 DTE 是连接的设备。</li>\n<li>在此模型中，通过调制解调器或 CSU / DSU 提供给 DTE 的服务。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第10讲：广域网(wan)_页面_16\" /></p>\n<p>指定 DTE 和 DCE 之间此接口的几种物理层标准是…</p>\n<ol>\n<li>EIA/TIA-232 (RS-232): 计算机常用</li>\n<li>EIA/TIA-449</li>\n<li>V.24</li>\n<li>V.35</li>\n<li>X.21</li>\n<li>G.703</li>\n<li>EIA-530</li>\n</ol>\n<h3 id=\"wan数据链路层\"><a class=\"anchor\" href=\"#wan数据链路层\">#</a> wan 数据链路层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第10讲：广域网(wan)_页面_17\" /></p>\n<ol>\n<li>WAN 数据链路协议描述了如何在单个数据链路上的系统之间承载帧。</li>\n<li>它们包括旨在在专用 (dedicated) 点对点，多点和多址交换服务上运行的协议。</li>\n<li>WAN 标准由许多公认的机构定义和管理，包括以下机构：ITU-T，ISO，IETF 和 EIA</li>\n<li>不是那么可靠，帧结构和以太网帧不同，协议是点对点，点对多点，多链路交换机切换</li>\n<li>为了确保正确：需要为每一个串口指定一个方式组成帧</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第10讲：广域网(wan)_页面_18\" /></p>\n<p>WAN 数据链路层定义了如何封装数据以传输到远程站点</p>\n<ol>\n<li><strong>点对点协议 (PPP,Point-to-Point Protocol)</strong>: 由 IETF 开发。PPP 包含用于识别网络层协议的协议字段 (包含一个协议单元，指定网络协议)</li>\n<li><strong>高级数据链路控制 (HDLC, High-Level Data Link Control)</strong>:ISO 标准，不同供应商之间不兼容的 HDLC，因为每个供应商都选择了实现方式。HDLC 支持点对点 / 多点配置 (抽象规范和约束，各个厂商不同)</li>\n<li><strong>帧中继 (Frame Relay)</strong>：使用简化的封装，对高质量的数字设备不进行纠错。(比较高速)</li>\n<li><strong>ISDN</strong>：通过现有电话线传输语音和数据的一组数字服务。</li>\n<li><strong>平衡的链路访问程序 (LAPB, Link Access Procedure, Balanced)</strong>：用于在 X.25 堆栈的第 2 层封装数据包的数据包交换网络。 提供点对点的可靠性和流量控制。</li>\n</ol>\n<h2 id=\"广域网访问方法\"><a class=\"anchor\" href=\"#广域网访问方法\">#</a> 广域网访问方法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第10讲：广域网(wan)_页面_19\" /></p>\n<h3 id=\"ppp-hdlc-ppp重要考试考\"><a class=\"anchor\" href=\"#ppp-hdlc-ppp重要考试考\">#</a> PPP/ HDLC PPP（重要考试考）</h3>\n<p>点对点的标准</p>\n<p>以思科厂商为标准</p>\n<p>工作在串行链路上的</p>\n<p>如果都是同一个厂商的可以用 HDLC，不然使用 PPP</p>\n<h4 id=\"串行线框字段\"><a class=\"anchor\" href=\"#串行线框字段\">#</a> 串行线框字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第10讲：广域网(wan)_页面_20\" /></p>\n<ol>\n<li>两种最常见的点对点 WAN 封装是 HDLC (High-level Data Protocol) 和 PPP (Point to Poing Protocol)</li>\n<li>所有串行线封装共享一个通用的帧格式，该格式具有以下字段</li>\n<li>封装协议的选择取决于 WAN 技术和通信设备</li>\n</ol>\n<h4 id=\"ppp-and-hdlc\"><a class=\"anchor\" href=\"#ppp-and-hdlc\">#</a> PPP and HDLC</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第10讲：广域网(wan)_页面_21\" /></p>\n<ol>\n<li>\n<p>PPP 是一种标准的</p>\n<p>串行线路</p>\n<p>封装方法</p>\n<ol>\n<li>由 IETF (The Internet Engineering Task) 开发；取代 SLIP (Serial Line Internet Protocol)</li>\n<li>包含标识网络层协议的字段</li>\n<li>PPP 可以在建立连接期间检查链接质量</li>\n<li>通过密码认证协议 (PAP) 和质询握手认证协议 (CHAP) 提供认证。</li>\n</ol>\n</li>\n<li>\n<p>HDLC 是 Cisco 串行线的默认封装</p>\n<ol>\n<li>没有窗口或流量控制</li>\n<li>框架中插入了专有类型 (所有权) 代码，这意味着 HDLC 帧不能与其他供应商的设备互操作。</li>\n<li>当专用线路连接的两端是运行 Cisco IOS 的路由器时使用</li>\n<li>不做出窗口控制和流控制</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ppp\"><a class=\"anchor\" href=\"#ppp\">#</a> ppp</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第10讲：广域网(wan)_页面_22\" /></p>\n<ol>\n<li>串行链路上使用最广泛的第 2 层协议</li>\n<li>从 SLIP 开发，\n<ol>\n<li>仅支持 IP 协议</li>\n<li>不支持动态 IP 分配</li>\n<li>不支持身份验证</li>\n<li>不支持压缩</li>\n<li>不支持错误检测</li>\n</ol>\n</li>\n<li>PPP 提供以下功能\n<ol>\n<li>网络协议多路复用</li>\n<li>动态分配 IP 地址</li>\n<li>验证：PAP，CHAP</li>\n<li>压缩</li>\n<li>错误检测</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"ppp组件\"><a class=\"anchor\" href=\"#ppp组件\">#</a> PPP 组件</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第10讲：广域网(wan)_页面_23\" /></p>\n<p>使用 HDLC (ISO HDLC，而非 Cisco HDLC) 作为封装第 3 层数据报的基础</p>\n<p>实现 LCP (链接控制协议) 以：</p>\n<ol>\n<li>建立连接</li>\n<li>连接配置选项</li>\n<li>链接质量测试</li>\n</ol>\n<p>实施 NCP (网络控制协议，Network Control Protocol) 以选择和配置第 3 层协议</p>\n<h4 id=\"ppp帧格式\"><a class=\"anchor\" href=\"#ppp帧格式\">#</a> PPP 帧格式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第10讲：广域网(wan)_页面_24\" /></p>\n<ol>\n<li>Flag: 01111110 标记：帧的开头或结尾，01111110，一位可能会连续接受到多个帧</li>\n<li>Address：11111111，广播地址</li>\n<li>Control：00000011，用户数据作为无序帧传输</li>\n<li>Protocol: 数据字段中的协议类型</li>\n<li>Data: 数据报，最大默认值为 1500 字节</li>\n<li>FCS: 2 或者 4 字节</li>\n</ol>\n<h4 id=\"ppp会话建立终止\"><a class=\"anchor\" href=\"#ppp会话建立终止\">#</a> PPP 会话建立 / 终止</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第10讲：广域网(wan)_页面_25\" /></p>\n<ol>\n<li>为了通过点对点链路建立通信，PPP 经历四个不同的阶段：\n<ol>\n<li>步骤一：链接建立和配置协商 (negotiation)(LCP)。</li>\n<li>步骤二：链接质量测试。</li>\n<li>步骤三：网络层协议配置 (NCP)。</li>\n<li>步骤四：链接终止。</li>\n</ol>\n</li>\n<li>图示如下</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第10讲：广域网(wan)_页面_26\" /></p>\n<h5 id=\"连接建立\"><a class=\"anchor\" href=\"#连接建立\">#</a> 连接建立</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第10讲：广域网(wan)_页面_27\" /></p>\n<ol>\n<li>建立链接是交换任何网络层数据报之前的第一阶段\n<ol>\n<li>每个 PPP 设备发送 LCP 来打开连接</li>\n<li>LCP 数据包包含一个配置选项字段，该字段允许设备协商选项的使用，例如<strong>压缩和身份验证协议</strong>等。</li>\n<li>如果 LCP 数据包中未包含配置选项，则采用该配置选项的<strong>默认值</strong>。</li>\n<li>当已发送和接收配置<strong>确认</strong>帧时，此阶段完成。</li>\n</ol>\n</li>\n<li>在完成这个步骤前不会传输具体数据帧的。</li>\n</ol>\n<h5 id=\"链路质量确定\"><a class=\"anchor\" href=\"#链路质量确定\">#</a> 链路质量确定</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第10讲：广域网(wan)_页面_28\" /></p>\n<ol>\n<li>发送和接收 LCP 数据包以测量链路上的错误率 (如果已配置)</li>\n<li>身份验证 (如果使用) 在网络层协议配置阶段开始之前进行。(可选)</li>\n<li>LCP 可以延迟网络层协议信息的传输，直到完成此阶段。</li>\n<li>在这之前不能传输网络帧。</li>\n</ol>\n<h5 id=\"网络层协议配置\"><a class=\"anchor\" href=\"#网络层协议配置\">#</a> 网络层协议配置</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第10讲：广域网(wan)_页面_29\" /></p>\n<ol>\n<li>在此阶段，PPP 设备发送 NCP 数据包以选择和配置一个或多个网络层协议 (例如 IP)。</li>\n<li>配置了每个选定的网络层协议后，可以通过链接发送来自每个网络层协议的数据报。</li>\n</ol>\n<h5 id=\"连接终止\"><a class=\"anchor\" href=\"#连接终止\">#</a> 连接终止</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第10讲：广域网(wan)_页面_30\" /></p>\n<p>CP 可以随时终止链接：</p>\n<ol>\n<li>应用户要求；(一方请求终止)</li>\n<li>链接质量</li>\n<li>超时</li>\n</ol>\n<p>当 LCP 关闭链接时，它将通知网络层协议，以便它们可以采取适当的措施</p>\n<h4 id=\"pap\"><a class=\"anchor\" href=\"#pap\">#</a> PAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第10讲：广域网(wan)_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第10讲：广域网(wan)_页面_32\" /></p>\n<ol>\n<li>链接的发起方 (Calling Side) 输入身份验证信息，以帮助确保用户具有网络管理员的许可来进行连接。</li>\n<li>远程节点使用双向握手 PAP 建立其身份。</li>\n<li>远程节点<strong>重复</strong>发送用户名 / 密码对，直到确认身份验证或连接终止</li>\n<li>密码以明文形式通过链接发送。</li>\n<li>在建立连接阶段之后，仅对远程节点进行一次身份验证。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第10讲：广域网(wan)_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第10讲：广域网(wan)_页面_34\" /></p>\n<h4 id=\"chap\"><a class=\"anchor\" href=\"#chap\">#</a> CHAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第10讲：广域网(wan)_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第10讲：广域网(wan)_页面_36\" /></p>\n<ol>\n<li>被叫方使用三向握手 CHAP 协议定期验证主叫方。</li>\n<li>CHAP 不允许呼叫者在没有 Challenge (随机数) 的情况下尝试进行身份验证。(Challenge-&gt; 随机数)</li>\n<li>主机 (称为参与者) 将质询消息发送到远程节点。</li>\n<li>远程节点以一个值 (加密的值，包括：接收到的质询，其用户名和密码) 进行响应:value 是 challenge 和密钥生成的</li>\n<li>主机根据自己的价值检查响应\n<ol>\n<li>如果值匹配，则确认身份验证</li>\n<li>否则，连接终止</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第10讲：广域网(wan)_页面_37\" /></p>\n<ul>\n<li>RTB 请求连接 RTA</li>\n<li>他们都存储一个用户名密码，但是用户名不同，密码相同</li>\n<li>RTB 发送一个连接请求</li>\n<li>RTA 找一个时间来发起挑战</li>\n<li>挑战中内容:\n<ul>\n<li>编号</li>\n<li>id 是第几次挑战</li>\n<li>random: 生成的随机数</li>\n<li>RTA: 谁发起的挑战</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第10讲：广域网(wan)_页面_38\" /></p>\n<ul>\n<li>RTB 进行应答，</li>\n<li>RTB 操作:pass + random 使用 MD5 算法 -&gt; 哈希值</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第10讲：广域网(wan)_页面_39\" /></p>\n<p>RTA 收到 RTB 的回复，然后比较是否相同</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第10讲：广域网(wan)_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第10讲：广域网(wan)_页面_41\" /></p>\n<h3 id=\"isdn\"><a class=\"anchor\" href=\"#isdn\">#</a> ISDN</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第10讲：广域网(wan)_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第10讲：广域网(wan)_页面_43\" /></p>\n<ol>\n<li>集成服务数字网络允许通过现有电话线传输数字信号：提供远程站点的连接</li>\n<li>ISDN 具有以下优点：\n<ol>\n<li>可以携带语音，视频和数据</li>\n<li>使用带外 D (或 Delta) 信道比调制解调器 (有时 &lt; 1s) 更快的呼叫建立</li>\n<li>使用 B (或屏障) 通道以 64kps 提供更快的数据传输</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"bribasic-rate-interface-and-priprimary-rate-interface\"><a class=\"anchor\" href=\"#bribasic-rate-interface-and-priprimary-rate-interface\">#</a> BRI(Basic Rate Interface) and PRI(Primary Rate Interface)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第10讲：广域网(wan)_页面_44\" /></p>\n<ol>\n<li>ISDN 服务有两种：\n<ol>\n<li>BRI (基本速率接口，Basic Rate Interface), 用户虚拟电路数据传，HDLC,PPP</li>\n<li>PRI (主速率接口，Primary Rate Interface)，发送控制信息，LAPD</li>\n</ol>\n</li>\n<li>ISDN BRI 服务提供两个 B 通道和一个 D 通道。</li>\n<li>ISDN BRI 将 144kbps (2B + D = 144kps) 线路的总带宽传送到三个单独的通道中。</li>\n<li>BRI B 信道服务以 64 kbps 的速率运行，旨在承载用户数据和语音流量。</li>\n<li>第三个通道，D 通道，是一个 16 kbps 信令通道，用于承载指令，这些指令告诉电话网络如何处理每个 B 通道。</li>\n<li>BRI 和 DRI 都是基于电话信道的</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第10讲：广域网(wan)_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第10讲：广域网(wan)_页面_46\" /></p>\n<ol>\n<li>ISDN 利用一套 (suit) ITU-T 标准套件，涵盖 OSI 参考模型的物理，数据链路和网络层。</li>\n<li>有几种封装选择。两种最常见的封装是 PPP 和 HDLC。</li>\n<li>ISDN 默认为 HDLC。但是，PPP 更为健壮，因为它为兼容链接和协议配置的身份验证和协商提供了出色的机制。</li>\n<li>ISDN 接口仅允许使用一种封装类型，不允许混合使用封装。</li>\n</ol>\n<h4 id=\"非对称数字用户线路adslasymmetric-digital-subscriber-line\"><a class=\"anchor\" href=\"#非对称数字用户线路adslasymmetric-digital-subscriber-line\">#</a> 非对称数字用户线路 (ADSL,Asymmetric Digital Subscriber Line)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第10讲：广域网(wan)_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第10讲：广域网(wan)_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第10讲：广域网(wan)_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第10讲：广域网(wan)_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第10讲：广域网(wan)_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第10讲：广域网(wan)_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第10讲：广域网(wan)_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第10讲：广域网(wan)_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第10讲：广域网(wan)_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第10讲：广域网(wan)_页面_56\" /></p>\n<h3 id=\"sonet\"><a class=\"anchor\" href=\"#sonet\">#</a> SONET</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第10讲：广域网(wan)_页面_57\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第10讲：广域网(wan)_页面_58\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第10讲：广域网(wan)_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第10讲：广域网(wan)_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第10讲：广域网(wan)_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第10讲：广域网(wan)_页面_62\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第10讲：广域网(wan)_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第10讲：广域网(wan)_页面_64\" /></p>\n<h3 id=\"hfc\"><a class=\"anchor\" href=\"#hfc\">#</a> HFC</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第10讲：广域网(wan)_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第10讲：广域网(wan)_页面_66\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第10讲：广域网(wan)_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第10讲：广域网(wan)_页面_68\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第10讲：广域网(wan)_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第10讲：广域网(wan)_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第10讲：广域网(wan)_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第10讲：广域网(wan)_页面_72\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_73.jpg\" alt=\"第10讲：广域网(wan)_页面_73\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_74.jpg\" alt=\"第10讲：广域网(wan)_页面_74\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "title": "Lecture09-局域网交换和vlan",
            "date_published": "2023-02-08T09:53:17.000Z",
            "content_html": "<h1 id=\"lecture9-局域网交换与vlan\"><a class=\"anchor\" href=\"#lecture9-局域网交换与vlan\">#</a> Lecture9- 局域网交换与 VLAN</h1>\n<h2 id=\"交换机\"><a class=\"anchor\" href=\"#交换机\">#</a> 交换机</h2>\n<h3 id=\"交换机基本功能\"><a class=\"anchor\" href=\"#交换机基本功能\">#</a> 交换机基本功能</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第9讲：局域网交换与vlan_页面_03\" /></p>\n<ol>\n<li>根据 MAC 地址建立和维护<strong>交换表</strong> (类似于网桥表)</li>\n<li>将帧切换出接口到目标</li>\n</ol>\n<h3 id=\"对称交换\"><a class=\"anchor\" href=\"#对称交换\">#</a> 对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第9讲：局域网交换与vlan_页面_04\" /></p>\n<ol>\n<li>对称交换可在具有相同带宽 (10/10 Mbps 或 100/100 Mbps) 的端口之间提供交换连接</li>\n<li>用户尝试访问其他网段上的服务器时，可能会导致瓶颈 (对称交换可能会导致带宽不足)</li>\n</ol>\n<h3 id=\"不对称交换\"><a class=\"anchor\" href=\"#不对称交换\">#</a> 不对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第9讲：局域网交换与vlan_页面_05\" /></p>\n<ol>\n<li>通过将带有服务器的网段连接到<strong>更高带宽的端口 (100 Mbps)</strong>，非对称交换 (asymmetric switching) 减少了服务器上潜在瓶颈的可能性</li>\n<li>非对称交换需要在交换器中进行内存缓冲</li>\n<li>非对称交换端口解决对称交换端口中的对称阻塞问题 (进一步保证了服务器的稳定实现)</li>\n</ol>\n<h3 id=\"内存缓存\"><a class=\"anchor\" href=\"#内存缓存\">#</a> 内存缓存</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第9讲：局域网交换与vlan_页面_06\" /></p>\n<ol>\n<li>交换机中存储目标和传输数据的内存区域，直到可以将其切换出正确的端口为止。\n<ol>\n<li>基于端口 (Port) 的内存缓冲\n<ol>\n<li>数据包存储在每个端口的队列中</li>\n<li>由于目标端口繁忙，一个数据包可能会延迟其他数据包的传输</li>\n<li>其他端口存在不均衡的问题。</li>\n</ol>\n</li>\n<li>共享 (Shared) 内存缓冲\n<ol>\n<li>所有端口共享的公用内存缓冲</li>\n<li>允许将数据包在一个端口上接收并在另一个端口上发送出去，而无需将其更改为其他队列。</li>\n<li>需要自己记录端口的信息</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>发生阻塞的时候，根据情况按照端口或者内存将包缓存下来</li>\n</ol>\n<h3 id=\"交换方式\"><a class=\"anchor\" href=\"#交换方式\">#</a> 交换方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第9讲：局域网交换与vlan_页面_07\" /></p>\n<p>储存转发 (Store-and-Forward，网桥、路由器等通过软件的设备)</p>\n<ol>\n<li>交换机<strong>接收整个帧</strong>，最后将其计算为 CRC，然后再将其发送到目的地</li>\n<li>接收后，校验，正确再发送</li>\n</ol>\n<p>Cut-through 直通</p>\n<ol>\n<li>转发会增加延迟：通过使用直通切换方法可以减少它</li>\n<li>快速转发切换：仅在立即转发帧之前检查目标 MAC (只看到<strong>帧的目的地址</strong>就转发)</li>\n<li>碎片释放：读取前 64 个字节去减少碰撞和帧碎片，在转发帧之前</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第9讲：局域网交换与vlan_页面_08\" /></p>\n<p>三种查看方式</p>\n<h3 id=\"第二层交换机\"><a class=\"anchor\" href=\"#第二层交换机\">#</a> 第二层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第9讲：局域网交换与vlan_页面_09\" /></p>\n<ol>\n<li>大规模集成电路，保证链路效率，低时延，低成本</li>\n<li>有一个 MAC 地址</li>\n</ol>\n<h3 id=\"第三层交换机\"><a class=\"anchor\" href=\"#第三层交换机\">#</a> 第三层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第9讲：局域网交换与vlan_页面_10\" /></p>\n<p>基于硬件的帧转发机制，较高的帧转发性能，低时延</p>\n<p>较高速的计算</p>\n<p>每一个端口的代价低</p>\n<p>流控制</p>\n<p>安全性更高</p>\n<p>对数据流进行路由，生成 MAC 和 IP 的映射，直接经过第二层（？，智能性较差</p>\n<h3 id=\"第四层交换机\"><a class=\"anchor\" href=\"#第四层交换机\">#</a> 第四层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第9讲：局域网交换与vlan_页面_11\" /></p>\n<h3 id=\"多层交换机协议\"><a class=\"anchor\" href=\"#多层交换机协议\">#</a> 多层交换机协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第9讲：局域网交换与vlan_页面_12\" /></p>\n<h2 id=\"stp-the-spanning-tree-protocol-生成树协议\"><a class=\"anchor\" href=\"#stp-the-spanning-tree-protocol-生成树协议\">#</a> STP the Spanning-Tree Protocol 生成树协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第9讲：局域网交换与vlan_页面_13\" /></p>\n<h3 id=\"桥回路\"><a class=\"anchor\" href=\"#桥回路\">#</a> 桥回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第9讲：局域网交换与vlan_页面_14\" /></p>\n<ol>\n<li>出于各种原因，网络中可能会出现环路。\n<ol>\n<li>通常，网络中的环路是<strong>故意提供冗余</strong>的结果。</li>\n<li>也可能由于配置错误而发生：在桥接网络中，环路可能是绝对灾难性的两个主要原因：\n<ol>\n<li>广播回路 (广播风暴)，没有 TTL</li>\n<li>路由表的错误</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"冗余造成了路由回路\"><a class=\"anchor\" href=\"#冗余造成了路由回路\">#</a> 冗余造成了路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第9讲：局域网交换与vlan_页面_15\" /></p>\n<h3 id=\"第二层路由回路\"><a class=\"anchor\" href=\"#第二层路由回路\">#</a> 第二层路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第9讲：局域网交换与vlan_页面_16\" /></p>\n<ol>\n<li>广播和第 2 层回路可能是危险的组合。</li>\n<li>以太网帧没有 TTL 字段</li>\n<li>以太网帧开始循环后，它可能会继续下去，直到有人关闭其中一台交换机或断开链路为止 (外部条件)</li>\n<li>交换机将抖动 (flip flop) 主机 A 的桥接表条目 (创建极高的 CPU 利用率)。</li>\n<li>消耗 CPU 和内存</li>\n</ol>\n<h4 id=\"泛洪单播帧\"><a class=\"anchor\" href=\"#泛洪单播帧\">#</a> 泛洪单播帧</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第9讲：局域网交换与vlan_页面_17\" /></p>\n<ul>\n<li>过一段时间 CAT-1 和 CAT-2 没有收到 Host-B 的信息，删除表中的对应记录</li>\n<li>在这之后，Host A 发送给 Host B 信息，然后在 CAT-1 和 CAT-2 之间进行循环</li>\n</ul>\n<h3 id=\"生成树概述\"><a class=\"anchor\" href=\"#生成树概述\">#</a> 生成树概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第9讲：局域网交换与vlan_页面_18\" /></p>\n<ol>\n<li>生成树协议的元素\n<ol>\n<li>主要功能：在<strong>交换 / 桥接网络</strong>中允许<strong>冗余路径</strong>，而不会因环路的影响而引起延迟。</li>\n<li>STP 通过计算<strong>稳定的生成树</strong>网络拓扑来防止环路</li>\n<li><strong>生成树帧</strong> (称为桥协议数据单元 - BPDU) 用于确定生成树拓扑</li>\n</ol>\n</li>\n<li>在正常情况下禁用一些端口来防止出现冗余</li>\n</ol>\n<h4 id=\"决策顺序\"><a class=\"anchor\" href=\"#决策顺序\">#</a> 决策顺序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第9讲：局域网交换与vlan_页面_19\" /></p>\n<p>生成树始终使用相同的四步决策序列：</p>\n<ol>\n<li>在拓扑里面最低的 root BID (网桥标识)【找到 root 路由器】</li>\n<li>找到 Root bridgh 的最低路径成本</li>\n<li>每个路径都会选择一个最低 BID 的 sender 这个是针对一个链路的，详见例子</li>\n<li>每个路径再指定一个最低的 ID 端口</li>\n</ol>\n<h4 id=\"bpdu-bridge-protocol-data-unit\"><a class=\"anchor\" href=\"#bpdu-bridge-protocol-data-unit\">#</a> BPDU Bridge Protocol Data Unit</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第9讲：局域网交换与vlan_页面_20\" /></p>\n<p>STP 建立一个称为<strong>根网桥的根节点</strong></p>\n<p>生成的树源自根桥。</p>\n<p>不属于最短路径树的冗余连接将被阻止。(block 端口，不转发，但是接收)（只会有一条路最短）</p>\n<p>在阻塞的链接上收到的数据帧将被丢弃。</p>\n<p>交换机发送的允许形成无环逻辑拓扑的消息是 BPDU</p>\n<h4 id=\"stp-bpdu\"><a class=\"anchor\" href=\"#stp-bpdu\">#</a> stp bpdu</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第9讲：局域网交换与vlan_页面_21\" /></p>\n<h4 id=\"bridge-identificationbid\"><a class=\"anchor\" href=\"#bridge-identificationbid\">#</a> Bridge Identification/BID</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第9讲：局域网交换与vlan_页面_22\" /></p>\n<ol>\n<li>网桥 ID (BID)：8 个字节 (2 + 6)\n<ol>\n<li>高阶 BID 子字段 (2 个字节)：网桥优先级\n<ol>\n<li>216 个可能的值：0-65,535 (默认值：32,768)</li>\n<li>通常以十进制格式表示</li>\n</ol>\n</li>\n<li>低阶子字段 (6 个字节)：分配给交换机的 MAC 地址，以十六进制格式表示</li>\n</ol>\n</li>\n<li>STP 成本值：成本越低越好。</li>\n</ol>\n<h4 id=\"选举根路由器\"><a class=\"anchor\" href=\"#选举根路由器\">#</a> 选举根路由器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第9讲：局域网交换与vlan_页面_23\" /></p>\n<ol>\n<li>交换机通过查找具有<strong>最低 BID</strong> 的交换机 (通常称为根战争) 来选择单个根交换机。</li>\n<li>如果所有交换机都使用默认的网桥优先级 32768，则最低的 MAC 地址将作为平局。</li>\n<li>配置优先级来调整根桥</li>\n</ol>\n<h3 id=\"路径代价cost\"><a class=\"anchor\" href=\"#路径代价cost\">#</a> 路径代价 cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第9讲：局域网交换与vlan_页面_24\" /></p>\n<h3 id=\"5个stp的状态\"><a class=\"anchor\" href=\"#5个stp的状态\">#</a> 5 个 STP 的状态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第9讲：局域网交换与vlan_页面_25\" /></p>\n<ol>\n<li>通过根据策略配置每个端口来建立状态</li>\n<li>然后，STP 根据流量模式 (traffic Patterns) 和潜在环路 (Protential Loops) 修改状态</li>\n<li>STP 状态的默认顺序为：\n<ol>\n<li>阻塞：没有转发帧，听到了 BPDU</li>\n<li>监听：不转发任何帧，监听数据帧 (确定自己可以参加的交换)，也会发送一些数据帧表示自己状态变了</li>\n<li>学习：不转发帧，学习地址</li>\n<li>转发：转发帧，学习地址</li>\n<li>禁用：没有转发帧，没有听到 BPDU</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113837280.png\" alt=\"image-20230109113837280\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113900889.png\" alt=\"image-20230109113900889\" /></p>\n<h3 id=\"初始stp收敛\"><a class=\"anchor\" href=\"#初始stp收敛\">#</a> 初始 STP 收敛</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第9讲：局域网交换与vlan_页面_26\" /></p>\n<ol>\n<li>当网络首次启动时，所有网桥都会混合使用 BPDU 信息来泛洪网络。(开始泛洪 BPDU 信息)</li>\n<li>立即，他们应用决策序列，允许他们 BPDU 进行 PK，然后选择出来 ROOT，从而形成整个网络的单个生成树。</li>\n</ol>\n<pre><code>(Step 1) 根交换机决定：选择一个根桥作为该网络的中心点\n(Step 2) 选择根端口：所有剩余的网桥都会计算出一组根端口\n(Step 3) 选择指定端口：其余所有网桥计算一组指定端口\n</code></pre>\n<h4 id=\"步骤1-根交换机决定\"><a class=\"anchor\" href=\"#步骤1-根交换机决定\">#</a> 步骤 1 根交换机决定</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第9讲：局域网交换与vlan_页面_27\" /></p>\n<ol>\n<li>（所有路由器都）宣布自己为根</li>\n<li>检查端口上收到的所有 BPDU 以及将在该端口上发送的 BPDU</li>\n<li>对于每个到达的 BPDU，如果其值小于为端口保存的现有 BPDU</li>\n<li>旧值被替换（由于 cat-A 的 BID 最小，所有 BC 均替换）</li>\n<li>BPDU 的发送者被接受为新的根</li>\n</ol>\n<h4 id=\"步骤2选择根端口\"><a class=\"anchor\" href=\"#步骤2选择根端口\">#</a> 步骤 2：选择根端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第9讲：局域网交换与vlan_页面_28\" /></p>\n<ol>\n<li>每个非根桥必须选择一个根端口。\n<ol>\n<li>桥的根端口是最接近根桥的端口。</li>\n<li>根路径成本是到根网桥的所有链接的累积 (cumulative) 成本。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"步骤3选择网段的指定端口\"><a class=\"anchor\" href=\"#步骤3选择网段的指定端口\">#</a> 步骤 3：选择网段的指定端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第9讲：局域网交换与vlan_页面_29\" /></p>\n<ol>\n<li>每个网段都有一个指定的端口：充当单个网桥 / 交换机端口，该端口既向该网段又向根网桥发送流量，也从该网段和根网桥接收流量。</li>\n<li>包含给定网段的指定端口的网桥 / 交换机称为该网段的指定网桥。</li>\n<li>所有网桥 / 交换机将阻止它们上未指定的端口，根网桥上的每个活动端口都将成为指定端口</li>\n<li>每个链路只有一个指定端口，一旦选定其他就 block 了</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第9讲：局域网交换与vlan_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第9讲：局域网交换与vlan_页面_31\" /></p>\n<h2 id=\"vlan\"><a class=\"anchor\" href=\"#vlan\">#</a> Vlan</h2>\n<h3 id=\"vlan介绍\"><a class=\"anchor\" href=\"#vlan介绍\">#</a> vlan 介绍</h3>\n<h4 id=\"现有的共享局域网配置\"><a class=\"anchor\" href=\"#现有的共享局域网配置\">#</a> 现有的共享局域网配置</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第9讲：局域网交换与vlan_页面_33\" /></p>\n<ol>\n<li>在典型的共享局域网中…\n<ol>\n<li>根据用户所插入 (plug) 的集线器对用户进行物理分组</li>\n<li>路由器分割局域网并提供广播防火墙</li>\n</ol>\n</li>\n<li>在虚拟局域网中\n<ol>\n<li>您可以按使用的功能，部门或应用程序对用户进行逻辑分组</li>\n<li>通过专有软件进行配置</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"lan和vlan之间的差异\"><a class=\"anchor\" href=\"#lan和vlan之间的差异\">#</a> LAN 和 VLAN 之间的差异</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第9讲：局域网交换与vlan_页面_34\" /></p>\n<p>虚拟局域网</p>\n<ol>\n<li>在第 2 层和第 3 层工作</li>\n<li>控制网络广播</li>\n<li>允许用户由网络管理员分配。</li>\n<li>提供更严格的网络安全性。</li>\n</ol>\n<h4 id=\"vlan标准\"><a class=\"anchor\" href=\"#vlan标准\">#</a> vlan 标准</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第9讲：局域网交换与vlan_页面_35\" /></p>\n<p>特点</p>\n<ol>\n<li>不限于物理交换机网段的网络设备或用户的<strong>逻辑分组</strong>。</li>\n<li>VLAN 中的设备或用户可以按功能，部门，应用程序等进行分组，而<strong>不管其物理网段的位置</strong>如何。</li>\n<li>VLAN<strong> 创建一个不限于物理网段</strong>的单个广播域，并且将其视为子网。</li>\n<li>VLAN 设置是由网络管理员使用供应商的软件在交换机中完成的。</li>\n</ol>\n<h4 id=\"分组用户\"><a class=\"anchor\" href=\"#分组用户\">#</a> 分组用户</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第9讲：局域网交换与vlan_页面_36\" /></p>\n<ol>\n<li>VLAN 可以从逻辑上将用户划分为不同的子网 (广播域)</li>\n<li>广播帧仅在具有相同 VLAN ID 的一个或多个交换机的端口之间切换。(VLAN ID 属于端口)</li>\n<li>可以通过基于以下内容的软件对用户进行逻辑分组：\n<ol>\n<li>端口号</li>\n<li>MAC 地址</li>\n<li>使用的协议</li>\n<li>使用的应用</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"有无vlan的网络广播\"><a class=\"anchor\" href=\"#有无vlan的网络广播\">#</a> 有无 vlan 的网络广播</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第9讲：局域网交换与vlan_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第9讲：局域网交换与vlan_页面_38\" /></p>\n<p>faculty studeng 分别在自己的 vlan 中传输</p>\n<h4 id=\"vlan间通信\"><a class=\"anchor\" href=\"#vlan间通信\">#</a> vlan 间通信</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第9讲：局域网交换与vlan_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第9讲：局域网交换与vlan_页面_40\" /></p>\n<h3 id=\"vlan结构\"><a class=\"anchor\" href=\"#vlan结构\">#</a> vlan 结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第9讲：局域网交换与vlan_页面_41\" /></p>\n<h4 id=\"backbone\"><a class=\"anchor\" href=\"#backbone\">#</a> backbone</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第9讲：局域网交换与vlan_页面_42\" /></p>\n<ol>\n<li>VLAN 配置需要支持互连的路由器和交换机之间的骨干数据传输。</li>\n<li>骨干网是用于 VLAN 间通信的区域</li>\n<li>骨干网应该是高速链路，通常为 100Mbps 或更高</li>\n<li>BackBone 可以跑多个 VLAN，是骨干网</li>\n</ol>\n<h4 id=\"vlan中路由器的作用\"><a class=\"anchor\" href=\"#vlan中路由器的作用\">#</a> vlan 中路由器的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第9讲：局域网交换与vlan_页面_43\" /></p>\n<ol>\n<li>路由器提供不同 VLAN 之间的连接</li>\n<li>例如，您有 VLAN1 和 VLAN2。\n<ol>\n<li>在交换机内，位于不同 VLAN 上的用户无法相互通信 (VLAN 的好处！)</li>\n<li>但是，VLAN1 上的用户可以向 VLAN2 上的用户发送电子邮件，但他们需要路由器才能执行此操作。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"在vlan中帧的作用\"><a class=\"anchor\" href=\"#在vlan中帧的作用\">#</a> 在 vlan 中帧的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第9讲：局域网交换与vlan_页面_44\" /></p>\n<ol>\n<li>交换机根据帧中的数据做出过滤和转发决策。</li>\n<li>使用了两种技术\n<ol>\n<li>帧过滤：检查有关每个帧的特定信息 (MAC 地址或第 3 层协议类型), 特定的 VLAN 记录或者映射</li>\n<li>帧标记：在整个网络骨干网中转发时，在每个帧的标题中放置一个唯一的标识符。</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"帧过滤\"><a class=\"anchor\" href=\"#帧过滤\">#</a> 帧过滤</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第9讲：局域网交换与vlan_页面_45\" /></p>\n<h5 id=\"帧标记\"><a class=\"anchor\" href=\"#帧标记\">#</a> 帧标记</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第9讲：局域网交换与vlan_页面_46\" /></p>\n<ol>\n<li>帧标记实施过程：\n<ol>\n<li>在整个网络骨干网中转发时，在每个帧的标题中放置一个 VLAN 标识符。</li>\n<li>每个开关都可以理解和检查标识符。</li>\n<li>当帧离开网络骨干网时，交换机会在帧发送到目标终端站之前删除标识符。只和端口绑定，而不影响主机</li>\n</ol>\n</li>\n<li>帧标记在第 2 层起作用</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第9讲：局域网交换与vlan_页面_47\" /></p>\n<p><strong>主机并不知道 vlan 的存在</strong></p>\n<h5 id=\"帧标签标准\"><a class=\"anchor\" href=\"#帧标签标准\">#</a> 帧标签标准</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第9讲：局域网交换与vlan_页面_48\" /></p>\n<p>IEEE802.1Q:IEEE 标准，在标头中插入 VLAN 的标签以标识所属的 VLAN。(帧标记)。</p>\n<p>ISL (Inter-Switch Link)：思科专有。ISL 在数据帧的前面添加一个 26 字节的标头，并在末尾附加一个 CRC (4 字节)。</p>\n<h3 id=\"vlan实现\"><a class=\"anchor\" href=\"#vlan实现\">#</a> vlan 实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第9讲：局域网交换与vlan_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第9讲：局域网交换与vlan_页面_50\" /></p>\n<p>实现 VLAN 的两种方法</p>\n<ol>\n<li>静态的</li>\n<li>动态的</li>\n</ol>\n<p>每一个端口绑定给一个 VLAN</p>\n<ol>\n<li>确保不共享同一 VLAN 的端口不共享广播。</li>\n<li>确保共享相同 VLAN 的端口将共享广播</li>\n</ol>\n<p>实现途径:</p>\n<ol>\n<li>基于端口的虚拟局域网</li>\n<li>基于 MAC 地址的虚拟局域网</li>\n<li>基于 IP 地址的虚拟局域网</li>\n<li>基于上层协议的虚拟局域网</li>\n</ol>\n<h4 id=\"静态vlan\"><a class=\"anchor\" href=\"#静态vlan\">#</a> 静态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第9讲：局域网交换与vlan_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第9讲：局域网交换与vlan_页面_52\" /></p>\n<p>定义：静态 VLAN 是指将交换机上的<strong>端口</strong>管理性地分配给 VLAN 的时间</p>\n<p>优点：</p>\n<ol>\n<li>安全，易于配置和监控</li>\n<li>在控制移动的网络中效果很好</li>\n</ol>\n<h4 id=\"动态vlan\"><a class=\"anchor\" href=\"#动态vlan\">#</a> 动态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第9讲：局域网交换与vlan_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第9讲：局域网交换与vlan_页面_54\" /></p>\n<ol>\n<li>当工作站最初连接到未分配的端口时，交换机会检查表中的条目，并使用正确的 VLAN 动态配置端口</li>\n<li>优点\n<ol>\n<li>添加或移动用户时减少管理 (更多前期工作)</li>\n<li>集中通知未授权用户</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"以端口为中心的vlan\"><a class=\"anchor\" href=\"#以端口为中心的vlan\">#</a> 以端口为中心的 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第9讲：局域网交换与vlan_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第9讲：局域网交换与vlan_页面_56\" /></p>\n<ol>\n<li>同一 VLAN 中的所有节点都连接到同一路由器接口</li>\n<li>使管理更容易，因为…\n<ol>\n<li>通过路由器端口分配用户</li>\n<li>VLAN 易于管理。</li>\n<li>提供更高的安全性</li>\n<li>数据包不会 &quot;泄漏&quot; 到其他域</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"access-and-trunk-links\"><a class=\"anchor\" href=\"#access-and-trunk-links\">#</a> access and trunk links</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第9讲：局域网交换与vlan_页面_57\" /></p>\n<p>分为两类:</p>\n<ol>\n<li>接入链路：通过一个 VLAN 报文</li>\n<li>骨干链路：通过多个 VLAN 报文</li>\n</ol>\n<h5 id=\"access\"><a class=\"anchor\" href=\"#access\">#</a> access</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第9讲：局域网交换与vlan_页面_58\" /></p>\n<ol>\n<li>访问连接是仅作为一个 VLAN 成员的交换机上的连接。</li>\n<li>此 VLAN 被称为端口的本机 VLAN，连接到端口的任何设备都完全不知道 VLAN 存在。</li>\n</ol>\n<h5 id=\"trunk-links\"><a class=\"anchor\" href=\"#trunk-links\">#</a> trunk links</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第9讲：局域网交换与vlan_页面_59\" /></p>\n<ol>\n<li>主干链路能够支持多个 VLAN。</li>\n<li>主干链路通常用于将交换机连接到其他交换机或路由器。</li>\n<li>交换机在快速以太网和千兆位以太网端口上都支持骨干链路。</li>\n<li>也存在访问和骨干链接</li>\n<li>一般 Trunk 就是 BackBone</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第9讲：局域网交换与vlan_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第9讲：局域网交换与vlan_页面_61\" /></p>\n<p>骨干链路不属于特定的 VLAN：充当交换机和路由器之间 VLAN 的通道。</p>\n<p>可以将骨干链路配置为传输所有 VLAN 或有限数量的 VLAN。</p>\n<p>但是，骨干链路可能具有本地 VLAN。</p>\n<p>如果骨干线链路由于任何原因失败，则骨干线的本地 VLAN 是该骨干线使用的 VLAN。</p>\n<h4 id=\"配置vlan\"><a class=\"anchor\" href=\"#配置vlan\">#</a> 配置 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第9讲：局域网交换与vlan_页面_62\" /></p>\n<p>在 Cisco 29xx 交换机上配置 VLAN 时，必须遵循以下准则：</p>\n<ol>\n<li>VLAN 的最大数量取决于交换机本身。</li>\n<li>VLAN 1 是出厂默认 VLAN 之一。(native VLAN 往往是 VLAN1，以及广播也是)</li>\n<li>VLAN 1 是默认的以太网 VLAN。</li>\n<li>思科发现协议 (CDP) 和 VLAN 骨干协议 (VTP) 通告在 VLAN 1 上发送。</li>\n<li>默认情况下，Catalyst 29xx IP 地址在 VLAN 1 广播域中。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第9讲：局域网交换与vlan_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第9讲：局域网交换与vlan_页面_64\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第9讲：局域网交换与vlan_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第9讲：局域网交换与vlan_页面_66\" /></p>\n<h3 id=\"vlan间中的路由\"><a class=\"anchor\" href=\"#vlan间中的路由\">#</a> vlan 间中的路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第9讲：局域网交换与vlan_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第9讲：局域网交换与vlan_页面_68\" /></p>\n<ol>\n<li>每个端口连接一个 VLAN，每个 IP 和一个 VLAN 连接</li>\n<li>如下图，我们使用串口线，物理上是一个一个接口，划分成多个 IP 和子接口</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109125803577.png\" alt=\"image-20230109125803577\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第9讲：局域网交换与vlan_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第9讲：局域网交换与vlan_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第9讲：局域网交换与vlan_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第9讲：局域网交换与vlan_页面_72\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "title": "Lecture08-路由协议RIPOSPF",
            "date_published": "2023-02-08T09:53:03.000Z",
            "content_html": "<h1 id=\"lecture08-路由协议rip-ospf\"><a class=\"anchor\" href=\"#lecture08-路由协议rip-ospf\">#</a> Lecture08 - 路由协议 RIP、OSPF</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_01\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_02\" /></p>\n<h2 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h2>\n<h3 id=\"rip历史\"><a class=\"anchor\" href=\"#rip历史\">#</a> RIP 历史</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_03\" /></p>\n<p>RIP v1 被认为是一种<strong>内部网关协议</strong>。</p>\n<ol>\n<li>RIP v1 是一种距离向量协议，它以预定间隔将其整个路由表广播到每个邻居路由器。默认间隔为<strong> 30 秒</strong>。</li>\n<li>RIP 使用<strong>跳数</strong>作为度量标准，最大跳数为<strong> 15</strong>，达到 16 跳的报文自动抛弃。</li>\n</ol>\n<p>RIP v1 能够在多达六个等价路径上进行<strong>负载平衡 (Load Balancing)</strong>，默认情况下为四个路径，最多 6 个，跳数相同才能完成负载均衡，跳数不同不满足条件</p>\n<p>RIP 最初是在 RFC 1058 中指定的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_04\" /></p>\n<p>RIP v1 具有以下限制：</p>\n<ol>\n<li>它不会在其更新中发送子网掩码信息：意味着必须用同样的子网掩码，不支持 VLSM 或无类域间路由 (CIDR，Classless Interdomain Routing)。</li>\n<li>它以 255.255.255.255 的广播形式发送更新：只能发给邻居，不能通过路由器转发。</li>\n<li>它不支持身份验证 (authentication): 只要启动 RIP 就可以接受到信息，也就意味着只要接入网络并且启动 RIP 进程，就可以了解到整个网络拓扑</li>\n</ol>\n<h3 id=\"rip配置\"><a class=\"anchor\" href=\"#rip配置\">#</a> RIP 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_05\" /></p>\n<p><code>router rip</code>  命令选择 RIP 作为路由协议。</p>\n<p>network 命令分配基于 NIC 的网络地址，路由器将直接连接到该网络地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_06\" /></p>\n<p>routerA 启用端口，可以简化为 <code>1.0.0.0</code>   <code>2.0.0.0</code></p>\n<h3 id=\"rip-v2\"><a class=\"anchor\" href=\"#rip-v2\">#</a> RIP v2</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_07\" /></p>\n<p>RIP v2 是 RIP v1 的改进版本，并且新增了以下的功能：</p>\n<ol>\n<li>这是一种使用<strong>跳数指标</strong>的距离矢量协议。</li>\n<li>它使用<strong>抑制计时器</strong>来防止路由循环 - 默认值为<strong> 180 秒</strong>，6 倍于交换时间</li>\n<li>它使用水平分割 (Split Horizon) 来防止路由循环 (Routing Loops)。</li>\n<li>它使用 16 跳作为<strong>无限距离的度量</strong>。(15 跳及以内可达)</li>\n</ol>\n<h3 id=\"ripv1-与-ripv2的比较\"><a class=\"anchor\" href=\"#ripv1-与-ripv2的比较\">#</a> RIPv1 与 RIPv2 的比较</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_08\" /></p>\n<p>V2 和 V1 不同的特点:</p>\n<ol>\n<li>支持有类路由：可以携带子网掩码</li>\n<li>使用主播地址 <code>244.0.0.9</code>  进行发送广播：特定给 RIP 接受，避免了接受后发现没有启动 RIP 进程耽误时间</li>\n<li>需要身份认证才确定是否继续进行接收。</li>\n</ol>\n<h3 id=\"ripv2-配置\"><a class=\"anchor\" href=\"#ripv2-配置\">#</a> RIPv2 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_09\" /></p>\n<p>network 命令导致实现以下三个功能：</p>\n<ol>\n<li>路由更新从接口多播。</li>\n<li>如果路由更新进入相同的界面，则将对其进行处理。</li>\n<li>广播直接连接到该接口的子网。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_10\" /></p>\n<p>需要设置 version2</p>\n<h3 id=\"验证和故障排除\"><a class=\"anchor\" href=\"#验证和故障排除\">#</a> 验证和故障排除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_11\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_13\" /></p>\n<ol>\n<li>The debug ip ripcommand displays RIP routing updates as they are  sent and received. In this example, the update is sent by 183.8.128.130. debug ip rip 命令显示 RIP 路由更新的发送和接收。 在本示例中，更新是通过 183.8.128.130 发送的。</li>\n<li>It reported on three routers, one of which is inaccessible because  its hop count is greater than 15. Updates were then broadcast through  183.8.128.2. 它报告了三台路由器，其中一台无法访问，因为其跳数大于 15。然后通过 183.8.128.2 广播了更新。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_14\" /></p>\n<p>120/1：表示 1 跳到达，120/2：表示 2 跳到达</p>\n<h2 id=\"ospf-open-shortest-path-first\"><a class=\"anchor\" href=\"#ospf-open-shortest-path-first\">#</a> OSPF Open Shortest Path First</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_16\" /></p>\n<p>开放最短路径优先 (OSPF，Open Shortest Path First) 是基于开放标准的链路状态路由协议。</p>\n<p>It is described in several standards of the Internet Engineering  Task Force (IETF) Internet 网络工程任务组 (IETF，Internet Engineering Task  Force) 的多个标准中对此进行了描述：The most recent description is RFC 2328. 最新的描述是 RFC  2328。(已经不是最新的了)</p>\n<p>与 RIP v1 和 RIP v2 相比，OSPF 正在成为首选的 IGP 协议，因为它具有可伸缩性。</p>\n<p>和 RIP 相比优势比较大，很多网络公司在研究 OSPF 的优化。</p>\n<h3 id=\"路由信息\"><a class=\"anchor\" href=\"#路由信息\">#</a> 路由信息</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_17\" /></p>\n<ol>\n<li>链接的状态是对接口及其与其相邻路由器的关系的描述。</li>\n<li>链接状态的集合形成一个<strong>链接状态数据库</strong>，有时也称为<strong>拓扑数据库</strong>。</li>\n<li>路由器应用<strong> Dijkstra 最短路径优先</strong> (SPF) 算法来构建以自己为根的 SPF 树。</li>\n<li>路由器通过 SPF 树计算最佳路径，然后选择最佳路径并将其放置在<strong>路由表</strong>中。</li>\n</ol>\n<h3 id=\"ospf-vs-rip\"><a class=\"anchor\" href=\"#ospf-vs-rip\">#</a> OSPF vs RIP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_18\" /></p>\n<p>用于大型网络，基于带宽，可以分层 (将网络划分成 2 层)，收敛更快，支持多路负载均衡</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_19\" /></p>\n<ul>\n<li>上面带宽大，2 跳达到，下面带宽小，1 跳到达。</li>\n<li>OSPF 从上面走，RIP 从下面走，但是上面会快一些</li>\n</ul>\n<h3 id=\"ospf-特征\"><a class=\"anchor\" href=\"#ospf-特征\">#</a> OSPF 特征</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_20\" /></p>\n<ol>\n<li>OSPF 的特征克服了这些限制\n<ol>\n<li>更健壮</li>\n<li>更具可扩展性</li>\n</ol>\n</li>\n<li>大型 OSPF 网络使用分层设计。\n<ol>\n<li>将大的网络分成多个 area，每一个 area 只和 area 0 相连，保证 area 没有回路</li>\n<li>层次最多只有 2 个，一个 area 就是 area 0。</li>\n<li>层次维持树的关系</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf术语\"><a class=\"anchor\" href=\"#ospf术语\">#</a> OSPF 术语</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_21\" /></p>\n<p>Link: 两个设备之间的物理链路</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_22\" /></p>\n<ul>\n<li>Neighbors: 相邻的路由器</li>\n<li>Link-State: 物理链路的信息：路由器连接关系、通过什么接口、链路带宽、网络类型 (点对点、多路复用) 等</li>\n<li>不同网络类型处理代价不同</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_23\" /></p>\n<p>Cost: 不同网络链路处理的时候的代价，和链路带宽相关，成反比关系，一般是固定值除以带宽</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_24\" /></p>\n<p>Area: 一个有很多路由器的端口都属于的区域 (相同)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_25\" /></p>\n<p>Autonomous System: 多个 Area 形成一个自治系统</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_28\" /></p>\n<ul>\n<li>Neighbours 必须在一个 Area 中才算是，Neighbour 之间交换 Topology Databases</li>\n<li>一个 Area 中获得全部 LS (Link State) 后计算 Tree，生成表</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_29\" /></p>\n<ul>\n<li>DR: 指定路由器，只有在多路复用的情况下使用</li>\n<li>BDR: 如果 DR 坏了，再次选举会出现问题，如果 DR 损坏，BDR 立即成为 DR</li>\n</ul>\n<h3 id=\"opsf域\"><a class=\"anchor\" href=\"#opsf域\">#</a> OPSF 域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_30\" /></p>\n<ol>\n<li>区域用 32 位数字标识\n<ol>\n<li>可以是 IP 格式，也可以是一个十进制值</li>\n<li>区域 0 或区域 0.0.0.0</li>\n</ol>\n</li>\n<li>区域 0：区域编号为 0 的单个区域</li>\n<li>OSPF 使用 2 级分层模型：逻辑上必须是 2 层结构，而物理实现上可能有一定的差异，如果更多需要进行逻辑配置。</li>\n<li>在多区域 OSPF 网络中，要求所有区域都连接到区域 0 (主干)</li>\n<li>Example:Area 是和端口相关 (注意端口)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_31\" /></p>\n<h3 id=\"ospf行为\"><a class=\"anchor\" href=\"#ospf行为\">#</a> OSPF 行为</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_32\" /></p>\n<ol>\n<li>OSPF 使用邻居的邻接关系 (Adjacencies) 来全面了解网络。</li>\n<li>OSPF 操作包括五个步骤：\n<ol>\n<li>步骤 1：建立邻接关系</li>\n<li>步骤 2：选择 DR 和 BDR (如果需要): 多路复用的时候才需要</li>\n<li>步骤 3：发现路线</li>\n<li>步骤 4：选择适当的路线</li>\n<li>步骤 5：维护路线信息</li>\n</ol>\n</li>\n<li>OSPF 具有七个状态。简而言之，它们是：\n<ol>\n<li>Init, 2Way, Ex Start, Exchange, Loading, Full</li>\n<li>初始化，双向操作，预先启动，交换，加载，完成</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_33\" /></p>\n<h3 id=\"选择dr和bdr\"><a class=\"anchor\" href=\"#选择dr和bdr\">#</a> 选择 DR 和 BDR</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_34\" /></p>\n<p>OSPF 网络类型</p>\n<ol>\n<li>广播多路复用网络，例如以太网</li>\n<li>点对点网络</li>\n<li>非广播多路复用网络 (NBMA, Nonbroadcasr multi-access)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_35\" /></p>\n<p>只有多路复用才需要选择 DR 和 BDR</p>\n<p>原先，每一个都要建立 10 (5 * 4/2) 个链接，如果有了 DR 就只需要 4 个连接</p>\n<p>对于所有 OSPF 路由器，DR 使用 224.0.0.5 (自己的 IP) 的<strong>主播地址</strong>向该网段上的所有其他路由器发送链接状态信息。</p>\n<p>为确保 DR/BDR 看到所有路由器在网段上发送的链接状态，使用了所有 DR/BDR 的多播地址 224.0.0.6。(DR 和 BDR 之间）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_36\" /></p>\n<h3 id=\"ospf报文\"><a class=\"anchor\" href=\"#ospf报文\">#</a> OSPF 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_38\" /></p>\n<p>包，并继续以固定的时间间隔 (intervals) 发送 hello。</p>\n<p>控制 (govern) OSPF hello 数据包交换的规则称为 Hello 协议。</p>\n<p>Hello 数据包的地址为 224.0.0.5。</p>\n<p>默认情况下，广播多路访问和点对点网络上<strong>每 10 秒</strong>发送一次 Hello 报文。</p>\n<p>在连接到 NBMA 网络的接口 (例如帧中继) 上，默认时间是 30 秒。</p>\n<p>保持心跳，确定还活着。Hello 几乎是空报文，给所有跑 OSPF 的路由器发送</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_40\" /></p>\n<h3 id=\"哪个路由器将成为dr\"><a class=\"anchor\" href=\"#哪个路由器将成为dr\">#</a> 哪个路由器将成为 DR？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_41\" /></p>\n<ol>\n<li>优先级 + 路由器 ID，最大的是 DR，第二大的是 BDR。</li>\n<li>优先级：1-255，默认值：1</li>\n<li>路由器 ID\n<ol>\n<li>环回 IP 地址 (逻辑端口)，避免端口宕机出现问题。</li>\n<li>如果没有环回 IP 地址，则接口 IP 为最高值地址 (Active 的端口上的 IP 作为参考)</li>\n<li>如果接口出现故障，则路由器必须重新建立邻接关系并重新转换 (readvertising) LSA</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf机制\"><a class=\"anchor\" href=\"#ospf机制\">#</a> OSPF 机制</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_43\" /></p>\n<ul>\n<li>准备交换数据库 (Exstart Starts)</li>\n<li>首先确认主方 (发送方)、从方 (接受方)，保证数据有序，简单就是谁的 Router ID 高</li>\n<li>Router ID 高的 (主方) 发送自己 DBD 报文，从方对主方发送的 DBD 接受处理并发送</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_44\" /></p>\n<p>交换完成后，各自检查自己是不是有全部的信息</p>\n<ul>\n<li>如果有完整的信息，则发送 LSAck</li>\n<li>如果发现有没有的，则发送 LSR，等待 LSU (整个链路的详细信息，不是 LSA) 来进行学习，之后收到完成后发送 LSAck</li>\n</ul>\n<h3 id=\"ospf操作\"><a class=\"anchor\" href=\"#ospf操作\">#</a> OSPF 操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_45\" /></p>\n<h4 id=\"建立邻接关系\"><a class=\"anchor\" href=\"#建立邻接关系\">#</a> 建立邻接关系</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_46\" /></p>\n<p>路由器每隔一段时间发送一次 hello 数据包，Hello 报文的 TTL 是 1，表明不会跨路由传播。</p>\n<p>如果邻居被发现了：将邻居添加到邻居数据库</p>\n<p>发现网络类型</p>\n<ol>\n<li>如果是多路复用网络，进入 DR/BDR 选举过程，然后进入步骤 2。</li>\n<li>如果是点对点或点对多点网络，则不会举行 DR/BDR 选举过程，并跳过步骤 2。</li>\n<li>如果 hello 数据包标头中的 DR/BDR 字段已被占用 (即 DR / BDR 对已经存在)，则不会进行 DR/BDR 选举，并跳过步骤 2。</li>\n</ol>\n<p>如果对方的 DP/BDP 优于我的 DP/BDP，则接受对方的</p>\n<h4 id=\"选举dr和bdr\"><a class=\"anchor\" href=\"#选举dr和bdr\">#</a> 选举 DR 和 BDR</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_47\" /></p>\n<ol>\n<li>如果没有其他路由器联机，则该路由器将成为 DR。下一个要 &quot;启动&quot; 的路由器将是 BDR。</li>\n<li>如果多个路由器 (两个或更多) 同时联机，则\n<ol>\n<li>优先级最高的路由器成为 DR：优先级为零表示 &quot;从不 DR&quot;</li>\n<li>如果存在平局，则具有最高路由器 ID 的路由器将成为 DR：路由器 ID 是最高的环回或接口 IP 地址</li>\n<li>具有第二高优先级或路由器 ID 的路由器成为 BDR</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_48\" /></p>\n<ol>\n<li>如果 DR 无效，则 BDR 变为 DR。</li>\n<li>然而\n<ol>\n<li>如果新的 OSPF 路由器以更高的优先级或路由器 ID 加入网络，则当前的 DR 和 BDR<strong> 不会更改</strong>。</li>\n<li>仅当当前 DR 失败时，它才成为新的 BDR；或者仅当当前 DR 和 BDR 失败时，才成为新的 DR。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"发现路线\"><a class=\"anchor\" href=\"#发现路线\">#</a> 发现路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_49\" /></p>\n<ol>\n<li>这一步从 Ex Start 状态转换到完整状态</li>\n<li>路由器确定 &quot;主 / 从 (master/slave)&quot; 关系</li>\n<li>多路复用网络中的 DR/BDR 交换 LSA，并且所有其他 DR 将其 Type 2 DBD 发送给 DR/BDR。</li>\n<li>如有必要，路由器可以通过发送请求更多信息的 LSR 进入负载状态：所有路由器必须在 &quot;加载状态&quot; 中等待，直到完全更新请求的路由器。</li>\n<li>路由器现在进入完整状态</li>\n</ol>\n<h4 id=\"选择适当的路线\"><a class=\"anchor\" href=\"#选择适当的路线\">#</a> 选择适当的路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_50\" /></p>\n<p>现在，将与网络上的所有其他路由器并行地计算 SPF 算法。</p>\n<ol>\n<li>切记：在发生这种情况之前，所有路由器必须具有相同的链接状态数据库。</li>\n<li>SPF 使用 Cost 作为指标</li>\n<li>SPF 将从其自身到目的地的每条路径的成本相加，并以路由器为根来构建树</li>\n<li>OSPF 然后在路由表中安装成本最低的路径：最多将安装 4 条等价路径以进行负载共享</li>\n</ol>\n<h4 id=\"维护路由信息\"><a class=\"anchor\" href=\"#维护路由信息\">#</a> 维护路由信息</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_51\" /></p>\n<ol>\n<li>常规的 Hello 交换是 OSPF 用于检测新邻居或故障 (downed) 邻居的机制。</li>\n<li>根据网络的类型，Hello 数据包以不同的默认间隔发送。(确定对方是不是还好)\n<ol>\n<li>对于速度为 T1 (1.544 Mbps) 或更高的链接，每 10 秒：广播多路访问和点对点链接</li>\n<li>对于小于 T1 的链接，每 30 秒：非广播多路访问链接</li>\n<li>&quot;死间隔&quot; 是问候间隔的四倍。(如果在这样子对方还没有成功则对方死了)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"链路状态出现变化\"><a class=\"anchor\" href=\"#链路状态出现变化\">#</a> 链路状态出现变化</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_52\" /></p>\n<ul>\n<li>Router A tells all OSPF DRs on 224.0.0.6</li>\n<li>Event 触发交换：比如 A 连接的网段断掉了</li>\n<li>A 使用 LSU 告知<strong> DR</strong></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_53\" /></p>\n<ul>\n<li>DR tells others on 224.0.0.5</li>\n<li>DR 通过 LSU 告知所有的路由器</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_54\" /></p>\n<p>如果 B 连接了别的 Area，则继续进行交换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_55\" /></p>\n<p>所有的路由信息交换完毕后，同时更新路由表</p>\n<h3 id=\"基本的ospf配置\"><a class=\"anchor\" href=\"#基本的ospf配置\">#</a> 基本的 OSPF 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_56\" /></p>\n<ol>\n<li>在路由器上启动 OSPF\n<ol>\n<li><code>Router (config)# router ospf process-id</code></li>\n<li>进程号:process-id\n<ol>\n<li>取值: 1 ~ 65535</li>\n<li>在一台路由器上识别多个 OSPF 进程</li>\n<li>通常在整个 AS (自治系统) 中保持相同的进程 ID</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>在路由器上识别 IP 网络\n<ol>\n<li><code>Router (config-router) # network address wildcardmask area area-id</code></li>\n<li>网络地址可以是整个网络，子网或接口的地址。</li>\n<li>address:IP 地址</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_57\" /></p>\n<ul>\n<li>只有一个 Area，则为 0</li>\n<li><strong>Wild-card Mask 和子网掩码相反</strong>：子网掩码是 255.255.255.0，则 Wild-card Address 就是 0.0.0.255</li>\n<li>写 IP 和写网段最后都是一样的</li>\n</ul>\n<h3 id=\"配置回路地址\"><a class=\"anchor\" href=\"#配置回路地址\">#</a> 配置回路地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_58\" /></p>\n<p>为 OSPF 路由器 ID 添加稳定性</p>\n<ol>\n<li>必须在 OSPF 进程开始之<strong>前</strong>配置回环接口：会涉及到主从关系确定和 DR 的选举</li>\n<li>配置环回地址时，请使用 / 32 掩码以避免潜在的路由问题</li>\n<li>I 建议您在基于 OSPF 的网络中的所有关键路由器上使用环回地址 (专用或公用地址)。</li>\n<li>一旦配置立刻生效，不需要 no shutdown 的命令即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_60\" /></p>\n<p>操纵 DR/BDR 选举</p>\n<ol>\n<li><code>Router (config-if) # ip ospf priority number</code></li>\n<li>优先级：越大越高\n<ol>\n<li>值：0-255, 默认为 1</li>\n<li>优先级 0 表示接口不能被选为 DR 或 BDR</li>\n</ol>\n</li>\n</ol>\n<p>操作 OSPF 的端口的优先级： <code>Router # show ip ospf [interface type number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_61\" /></p>\n<h3 id=\"osof成本-标准\"><a class=\"anchor\" href=\"#osof成本-标准\">#</a> OSOF 成本 = 标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_62\" /></p>\n<ol>\n<li>Cost 适用于所有路由器连接路径</li>\n<li>16 位数字 (1 – 65,535)</li>\n<li>较低的 Cost-&gt; 更理想</li>\n<li>路径决定是基于路径的总成本。</li>\n<li>指标受到带宽的影响</li>\n<li>用一个很大的数字去除以当前的带宽得到代价，计算方法如下</li>\n</ol>\n<h3 id=\"ospf-path-cost\"><a class=\"anchor\" href=\"#ospf-path-cost\">#</a> OSPF Path Cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_64\" /></p>\n<ol>\n<li>需要更改成本的常见情况是在多供应商 (multi-vendor) 路由环境中。成本更改将确保一个供应商的成本值与另一供应商的成本值匹配。</li>\n<li>另一种情况是使用千兆以太网。默认成本将最低成本值 1 分配给 100 Mbps 链路。</li>\n</ol>\n<h3 id=\"设置ospf计时器\"><a class=\"anchor\" href=\"#设置ospf计时器\">#</a> 设置 OSPF 计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_65\" /></p>\n<p>OSPF 区域中的所有路由器必须在相同的 hello 间隔和相同的死间隔上达成一致，默认情况下：</p>\n<ol>\n<li>T1 或更高链接 (广播) 为 10 秒</li>\n<li>慢于 T1 的链接为 30 秒 (非广播)</li>\n<li>死亡间隔 = <strong>4</strong> * 问候间隔</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_66\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "title": "Lecture07-路由器",
            "date_published": "2023-02-08T09:52:47.000Z",
            "content_html": "<h1 id=\"lecture07-routing-and-routers路由器和网络\"><a class=\"anchor\" href=\"#lecture07-routing-and-routers路由器和网络\">#</a> Lecture07-Routing and Routers 路由器和网络</h1>\n<h2 id=\"路由器基础\"><a class=\"anchor\" href=\"#路由器基础\">#</a> 路由器基础</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第7讲：路由与路由器_页面_03\" /></p>\n<h3 id=\"路由器内部组件\"><a class=\"anchor\" href=\"#路由器内部组件\">#</a> 路由器内部组件</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第7讲：路由与路由器_页面_04\" /></p>\n<h3 id=\"ram-random-access-memory-随机存取存储器\"><a class=\"anchor\" href=\"#ram-random-access-memory-随机存取存储器\">#</a> RAM Random Access Memory 随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第7讲：路由与路由器_页面_05\" /></p>\n<p>路由器配置文件的临时存储，一般做为内存使用</p>\n<p>断电或重新启动时 RAM 内容丢失</p>\n<p>存储:</p>\n<ol>\n<li>路由表</li>\n<li>ARP 缓存</li>\n<li>快速切换缓存</li>\n<li>报文缓存：可能前面有正在处理的，需要等待</li>\n<li>数据包保留队列</li>\n</ol>\n<h3 id=\"nvram-non-volatile-ram-非易失随机存取存储器\"><a class=\"anchor\" href=\"#nvram-non-volatile-ram-非易失随机存取存储器\">#</a> NVRAM Non-volatile RAM 非易失随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第7讲：路由与路由器_页面_06\" /></p>\n<p>存储备份 (backup)/ 启动 (startup) 配置文件</p>\n<p>路由器掉电或重启时内容不会丢失</p>\n<h3 id=\"flash\"><a class=\"anchor\" href=\"#flash\">#</a> Flash</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第7讲：路由与路由器_页面_07\" /></p>\n<ol>\n<li>电子可擦可编程只读存储器 (EEPROM, Electronically Erasable Programmable Read-Only Memory)</li>\n<li>存储了 Cisco IOS (互联网操作系统)</li>\n<li>允许更新软件而无需更换闪存芯片</li>\n<li>可以存储多个版本的 IOS</li>\n<li>断电保持</li>\n</ol>\n<h3 id=\"rom-read-only-memory\"><a class=\"anchor\" href=\"#rom-read-only-memory\">#</a> ROM Read-Only Memory</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第7讲：路由与路由器_页面_08\" /></p>\n<ol>\n<li>包含 POST (开机自检):PC 也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li>\n<li>引导程序 (加载 Cisco IOS)</li>\n<li>作系统软件\n<ol>\n<li>IOS 的备份，精简 (trimmed down) 版本</li>\n<li>升级需要安装新的芯片组</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第7讲：路由与路由器_页面_09\" /></p>\n<p>数据包通过其进入和离开路由器的网络连接口</p>\n<p>附在主板 (motherboard) 上或作为单独的模块。</p>\n<h2 id=\"路由器启动程序\"><a class=\"anchor\" href=\"#路由器启动程序\">#</a> 路由器启动程序</h2>\n<h3 id=\"系统启动程序\"><a class=\"anchor\" href=\"#系统启动程序\">#</a> 系统启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第7讲：路由与路由器_页面_11\" /></p>\n<ol>\n<li>执行开机自检 (POST)：在此自检期间，路由器从所有硬件模块上的 ROM 执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li>\n<li>验证 CPU，内存和网络接口端口的基本操作。</li>\n<li>软件初始化。</li>\n</ol>\n<h3 id=\"软件启动程序\"><a class=\"anchor\" href=\"#软件启动程序\">#</a> 软件启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第7讲：路由与路由器_页面_12\" /></p>\n<ol>\n<li>步骤 1:ROM 中的通用引导加载程序 (bootstrap) 在 CPU 卡上执行。</li>\n<li>步骤 2: 可以在以下几个位置之一找到操作系统 (Cisco IOS)。该位置在配置寄存器的引导字段中公开。</li>\n<li>步骤 3: 加载操作系统映像。\n<ol>\n<li>先从 Flash 找，也就只有一个 image 文件，将 image 导入内存</li>\n<li>如果 image 找不到，则到 TFTP Server，如果能找到则下载下拉一个 image</li>\n<li>如果 TFTP 也没有配置，则去 ROM 中导出 IOS</li>\n</ol>\n</li>\n<li>步骤 4: 将保存在 NVRAM 中的配置文件加载到主存储器中，并一次执行一行。\n<ol>\n<li>先看 NVRAM 中有没有配置 (start.config)</li>\n<li>然后看 TFTP Server 有没有配置，如果有则下载一个</li>\n<li>如果都没有，用 console 进行配置</li>\n</ol>\n</li>\n<li>步骤 5 - 如果 NVRAM 中<strong>没有</strong>有效的配置文件，则执行问题驱动 (question-driven) 的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</li>\n</ol>\n<h3 id=\"路由器初始化过程\"><a class=\"anchor\" href=\"#路由器初始化过程\">#</a> 路由器初始化过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230107174143705.png\" alt=\"image-20230107174143705\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第7讲：路由与路由器_页面_13\" /></p>\n<h3 id=\"基本的路由器配置\"><a class=\"anchor\" href=\"#基本的路由器配置\">#</a> 基本的路由器配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第7讲：路由与路由器_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第7讲：路由与路由器_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第7讲：路由与路由器_页面_16\" /></p>\n<h2 id=\"路由和配置\"><a class=\"anchor\" href=\"#路由和配置\">#</a> 路由和配置</h2>\n<h3 id=\"使用网络寻址进行路由\"><a class=\"anchor\" href=\"#使用网络寻址进行路由\">#</a> 使用网络寻址进行路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第7讲：路由与路由器_页面_18\" /></p>\n<p>路由器通常使用两个基本功能 (路径确定功能和交换功能) 将数据包从一条数据链路中继 (relay) 到另一条数据链路。</p>\n<ol>\n<li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li>\n<li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li>\n</ol>\n<p>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</p>\n<p>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机</p>\n<h3 id=\"静态路由\"><a class=\"anchor\" href=\"#静态路由\">#</a> 静态路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第7讲：路由与路由器_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第7讲：路由与路由器_页面_20\" /></p>\n<p>尽管 (whereas) 动态路由倾向于显示 (reveal) 有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</p>\n<p>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将 B 所有不知道位置的全部交给 A，由 A 去进行访问)</p>\n<p>这种分区称为末节网络 (Stub Network）</p>\n<h3 id=\"静态路由配置\"><a class=\"anchor\" href=\"#静态路由配置\">#</a> 静态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第7讲：路由与路由器_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第7讲：路由与路由器_页面_22\" /></p>\n<ol>\n<li>** 管理距离 (administrative distance)** 是路由信息源的可信赖性的等级，表示为从 0 到 255 的数值。(管理距离)</li>\n<li>数字越大，可信度 (trustworthiness) 越低。</li>\n<li>因此静态路由的管理距离通常很短 (默认值为 1)</li>\n<li>管理距离是 0 的路由是什么情况？直连网段是最可信的，比静态路由还高</li>\n</ol>\n<h3 id=\"动态路由配置\"><a class=\"anchor\" href=\"#动态路由配置\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第7讲：路由与路由器_页面_23\" /></p>\n<p>动态路由协议还可以重定向网络中不同路径之间的流量 (或负载分担 (loadshare))</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第7讲：路由与路由器_页面_24\" /></p>\n<ol>\n<li>动态路由依赖于路由协议在路由器之间共享知识。</li>\n<li>动态路由取决于两个基本路由器功能：\n<ol>\n<li>维护 (maintance) 路由表 (动态维持的)</li>\n<li>向其他路由器分发 (distribution) 路由信息</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"收敛时间\"><a class=\"anchor\" href=\"#收敛时间\">#</a> 收敛时间</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第7讲：路由与路由器_页面_25\" /></p>\n<ul>\n<li>收敛发生在所有路由用了相对稳定的网络拓扑</li>\n<li>当拓扑变化的时候，路由器必须重新计算路由</li>\n<li>路由器重新发生收敛的进程和时间根据不同的路由协议有所区别</li>\n</ul>\n<h3 id=\"动态路由协议分类\"><a class=\"anchor\" href=\"#动态路由协议分类\">#</a> 动态路由协议分类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第7讲：路由与路由器_页面_26\" /></p>\n<h4 id=\"距离矢量协议\"><a class=\"anchor\" href=\"#距离矢量协议\">#</a> 距离矢量协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第7讲：路由与路由器_页面_27\" /></p>\n<ol>\n<li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li>\n<li>基于距离矢量的路由算法 (也称为 Bellman-Ford 算法) 在路由器之间传递路由表的周期性副本。\n<ol>\n<li>大家交换 Routing Table</li>\n<li>只知道可达，但是不知道怎么可达 (知道 where, 但是不知道 how)，不知道整个网路的具体拓扑</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"问题路由环路\"><a class=\"anchor\" href=\"#问题路由环路\">#</a> 问题：路由环路</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第7讲：路由与路由器_页面_28\" /></p>\n<p><strong>稳定之后</strong>，如果 NetWork1 不可到达</p>\n<p>B 发现不可达，但是告知 C 的时候比较晚，C 已经将信息告诉了 D，这样子就可能循环下去，然后不收敛。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第7讲：路由与路由器_页面_29\" /></p>\n<p>网络 1 的无效更新将继续循环，直到其他进程停止循环为止。</p>\n<p>尽管有一个基本事实，即目标网络 (网络 1) 已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</p>\n<p>当路由器计数到无穷远时，无效信息将允许存在路由环路</p>\n<h5 id=\"解决方案设置最大值\"><a class=\"anchor\" href=\"#解决方案设置最大值\">#</a> 解决方案 —— 设置最大值</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第7讲：路由与路由器_页面_30\" /></p>\n<p>设置最大跳数，比如最多转发 15 跳，16 跳以上为不可达</p>\n<h5 id=\"结局方案路由中毒\"><a class=\"anchor\" href=\"#结局方案路由中毒\">#</a> 结局方案 —— 路由中毒</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第7讲：路由与路由器_页面_31\" /></p>\n<ol>\n<li>当网络 5 发生故障时，路由器 E 通过将网络 5 的表条目设置为<strong> 16 或不可访问</strong>来启动路由中毒。(而不是删除条目)</li>\n<li>、当路由器 C 从路由器 E 接收到路由中毒时，它会将更新 (称为毒性逆转，poison reverse) 发送回路由器 E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li>\n<li>最终所有的路由器都知道不可达</li>\n<li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值 (metric) 设为无穷大 16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li>\n</ol>\n<h5 id=\"解决方案水平分割\"><a class=\"anchor\" href=\"#解决方案水平分割\">#</a> 解决方案 —— 水平分割</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第7讲：路由与路由器_页面_32\" /></p>\n<ol>\n<li>从某个端口收到的报文信息，不能再从端口发送回去</li>\n<li>比如 A 发送给 B 和 D，之后 B 和 D 又把之后的报文还给 A，这时候就不接受 B 和 D 的。也即使 A 只接受 B 的</li>\n<li>如果 B 和 D 接收到一个到达目的网段 1 的更好的路径，A 是会接收的</li>\n<li><strong>有名词解释题目</strong></li>\n</ol>\n<h5 id=\"解决方案计时器\"><a class=\"anchor\" href=\"#解决方案计时器\">#</a> 解决方案 —— 计时器</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第7讲：路由与路由器_页面_33\" /></p>\n<ol>\n<li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时 (这个信息包含请计时信息)</li>\n<li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li>\n<li>计时器结束后，删除掉对应的条目，避免出现问题</li>\n<li>每一条路由表的记录都有<strong>有效时间</strong></li>\n</ol>\n<h5 id=\"阻止发送路由更新\"><a class=\"anchor\" href=\"#阻止发送路由更新\">#</a> 阻止发送路由更新</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第7讲：路由与路由器_页面_34\" /></p>\n<ol>\n<li>为了防止接口发出任何路由更新信息，请使用以下命令： <code>Router(config-router)#Passive-interface f0/0</code></li>\n<li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li>\n<li><strong>接受路由表的更新，但是不发送报文出去</strong></li>\n</ol>\n<h4 id=\"链接状态协议lsp-link-state-protocol\"><a class=\"anchor\" href=\"#链接状态协议lsp-link-state-protocol\">#</a> 链接状态协议 (LSP, Link-state Protocol)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第7讲：路由与路由器_页面_35\" /></p>\n<ol>\n<li>基于链接状态的路由算法也称为 SPF (最短路径优先) 算法，维护复杂的拓扑信息数据库：对树处理路由表，没有环路问题</li>\n<li>链接状态路由使用：\n<ol>\n<li>链接状态广告 (LSAs): 告诉你我有这个链路 (每一个网段都是相同性质链路，链路上有唯一的 NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行 LSA，告知对方主 Key，如果再需要的话，再给具体信息)</li>\n<li>拓扑数据库 (有 LSA 组成，每个结点都持有)</li>\n<li>根据 SPF (shortest path first) 算法生成的 SPF 树 (Tree 会不一样，因为每一个路由都是以自己为根的)</li>\n<li>每个网络的路径和端口的路由表</li>\n</ol>\n</li>\n<li>RFC 1583 包含对 OSPF 链路状态概念和操作的描述。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第7讲：路由与路由器_页面_36\" /></p>\n<ol>\n<li>路由器之间<strong>交换 LSA</strong>，每个路由器都以直接连接的网络开头</li>\n<li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有 LSA。</li>\n<li><strong>SPF 算法计算网络可达性</strong>：路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先 (SPF) 排序。</li>\n<li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第7讲：路由与路由器_页面_37\" /></p>\n<ol>\n<li>处理和存储要求\n<ul>\n<li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要 CPU 进行计算</li>\n</ul>\n</li>\n<li>带宽要求\n<ol>\n<li>在初始链路状态数据包泛洪 (flooding) 期间，所有使用链路状态路由协议的路由器会将 LSA 数据包发送到所有其他路由器。 随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li>\n<li>一开始的时候报文会比较频繁多 (所以告知 LSA 而不是 LS，减小压力)</li>\n<li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第7讲：路由与路由器_页面_38\" /></p>\n<p>链路状态路由必须确保所有路由器都获得所有必要的 LSA 数据包。</p>\n<p>具有不同 LSA 集的路由器根据不同的拓扑数据计算路由</p>\n<p>如果有一个链路的状态发生变化 (恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大 (SPF 算法)。</p>\n<h4 id=\"ls和dv的比较\"><a class=\"anchor\" href=\"#ls和dv的比较\">#</a> LS 和 DV 的比较</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第7讲：路由与路由器_页面_39\" /></p>\n<ol>\n<li>DV: 距离矢量\n<ol>\n<li>视野窄，代价小</li>\n<li>基于跳数</li>\n<li>定期交换路由表，收敛慢</li>\n<li>交换路由表</li>\n</ol>\n</li>\n<li>LS: 链路状态\n<ol>\n<li>视野宽，有一定代价</li>\n<li>基于带宽</li>\n<li>初期充分交换，收敛快</li>\n<li>交换 Linked State 的数据库</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"混合协议\"><a class=\"anchor\" href=\"#混合协议\">#</a> 混合协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第7讲：路由与路由器_页面_40\" /></p>\n<p>混合协议的示例：</p>\n<ol>\n<li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li>\n<li>Cisco’s EIGRP (Enhanced Interior Gateway Routing Protocol). 基于负载和带宽评判，定时交换路由表</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第7讲：路由与路由器_页面_41\" /></p>\n<table>\n<thead>\n<tr>\n<th>英文缩写</th>\n<th>英文解释</th>\n<th>中文解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RIP</td>\n<td>a distance-vector routing protocol</td>\n<td>距离矢量协议</td>\n<td>DV</td>\n</tr>\n<tr>\n<td>IGRP</td>\n<td>Cisco’s distance-vector routing protocol IGRP</td>\n<td>思科的距离矢量路由协议</td>\n<td>DV，基本启用</td>\n</tr>\n<tr>\n<td>OSPF</td>\n<td>Open Shortest Path First</td>\n<td>开放式最短路径优先</td>\n<td>LSP</td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>-</td>\n<td>平衡的混合路由协议</td>\n<td>杂合</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"路由协议的主要目标\"><a class=\"anchor\" href=\"#路由协议的主要目标\">#</a> 路由协议的主要目标</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第7讲：路由与路由器_页面_42\" /></p>\n<ol>\n<li>最佳 (Optimal) 路线：选择最佳路线</li>\n<li>效率 (Efficiency): 最少使用带宽和路由器处理器资源</li>\n<li>快速收敛 (Rapid Convergence): 越快越好。有些比其他人收敛更快。</li>\n<li>灵活性 (Flexibility): 可以处理各种情况，例如高使用率和失败的路由</li>\n</ol>\n<h3 id=\"动态路由配置-2\"><a class=\"anchor\" href=\"#动态路由配置-2\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第7讲：路由与路由器_页面_43\" /></p>\n<h3 id=\"设置默认路由\"><a class=\"anchor\" href=\"#设置默认路由\">#</a> 设置默认路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第7讲：路由与路由器_页面_44\" /></p>\n<ol>\n<li>默认路由使路由表更短。(很多路由被省略)</li>\n<li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第7讲：路由与路由器_页面_45\" /></p>\n<p>使用动态路由协议定义默认路由: <code>Router(config)# ip default-network [network-number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第7讲：路由与路由器_页面_46\" /></p>\n<ol>\n<li>将默认路由定义为静态路由： <code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li>\n<li>配置默认路由后，使用 show ip route 将显示：(172.16.1.2 是默认的下一跳地址)\n<ol>\n<li>不得已的网关是到网络 0.0.0.0 的 172.16.1.2</li>\n<li>所有不知道转发给谁的都给 172.16.1.2</li>\n</ol>\n</li>\n</ol>\n<p>RAM</p>\n<p>报文缓存 —— 缓存区</p>\n<p>hold queues——</p>\n<p>路由器的启动过程（考试要求）</p>\n<p>阻止发送路由更新</p>\n<p>手动配置</p>\n<p>Why do we need split horizon? Because distance vector protocols, such as Routing Information Protocol (RIP), are susceptible to routing loops, which occur when a data <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3BhY2tldA==\">packet</span> is caught in an endless circle and continuously routed through the same <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3JvdXRlcg==\">routers</span>. To avoid these loops, the protocols often rely on split horizon. Other types of protocols, such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL09TUEYtT3Blbi1TaG9ydGVzdC1QYXRoLUZpcnN0\">Open Shortest Path First</span>, use different mechanisms to deter packet looping.</p>\n<p>When enabled, split horizon prevents a router from advertising a route back to the router from which it learned a route. In other words, if a router receives routing information from another router, the first router will not broadcast that information back to the second router, thus preventing routing loops from occurring.</p>\n<p>RIP</p>\n<p>SPF</p>\n<p>DR BDR</p>\n<p>A 类地址 0 1-126</p>\n<p>B 类地址 10 128-191</p>\n<p>C 类地址 110 128+64=192 192-223</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "Lecture06-会话、表示、应用层",
            "date_published": "2023-02-08T09:52:36.000Z",
            "content_html": "<h1 id=\"lecture6-会话层-展示层应用层\"><a class=\"anchor\" href=\"#lecture6-会话层-展示层应用层\">#</a> Lecture6 - 会话层、展示层应用层</h1>\n<h1 id=\"会话层\"><a class=\"anchor\" href=\"#会话层\">#</a> 会话层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6讲：会话、表示、应用层_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6讲：会话、表示、应用层_页面_04\" /></p>\n<ol>\n<li>双向同步通讯？\n<ol>\n<li>全双工通信</li>\n<li>半双工通信</li>\n<li>单工通信</li>\n</ol>\n</li>\n<li>双向交替控制？\n<ol>\n<li>会话连接、活动开始、数据校验 (同步)</li>\n<li>令牌转换等</li>\n</ol>\n</li>\n<li>是否同步了您的会话的主题？</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6讲：会话、表示、应用层_页面_05\" /></p>\n<p>** 同步点 (CheckPoint)** 用于分隔会话的各个部分，以前称为对话 (dialogues)</p>\n<ol>\n<li>同步点：发送一定数据后设置同步点</li>\n<li>次同步点：作为同步点的一个子集，进行数据校验</li>\n<li>主同步点：按照主同步点进行校验确认</li>\n<li>如果错误，恢复到上次都已经同步的主同步点</li>\n</ol>\n<p>对话分离 (Seperation) 是通信的有序启动，终止和管理</p>\n<p>尽量保证了通话的效率和可靠性</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6讲：会话、表示、应用层_页面_06\" /></p>\n<h1 id=\"展示层\"><a class=\"anchor\" href=\"#展示层\">#</a> 展示层</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6讲：会话、表示、应用层_页面_08\" /></p>\n<p>表示层负责以接收<strong>设备可以理解</strong>的形式表示数据。</p>\n<ol>\n<li>传送语法协商</li>\n<li>接受语法协商</li>\n</ol>\n<p>表示层具有 3 个主要功能：</p>\n<ol>\n<li>数据格式 (format)</li>\n<li>数据压缩 (compression): 早期网络比较慢，倾向于先压缩在发送</li>\n<li>数据加密 (encryption)</li>\n</ol>\n<h2 id=\"数据格式\"><a class=\"anchor\" href=\"#数据格式\">#</a> 数据格式</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6讲：会话、表示、应用层_页面_09\" /></p>\n<ol>\n<li>想象两个不同 (dissimilar) 的系统。\n<ol>\n<li>一种使用扩展二进制编码的十进制交换码 (EBCDIC,Extended Binary Coded Decimal Interchange Code) 格式化文本</li>\n<li>另一种使用 ** 美国信息交换标准码 (ASCII)** 格式化文本</li>\n<li>选择大家都能识别的编码形式传输，保证大家都能理解</li>\n</ol>\n</li>\n<li>第 6 层提供了这两种不同类型的代码之间的转换</li>\n</ol>\n<h3 id=\"图形文件格式\"><a class=\"anchor\" href=\"#图形文件格式\">#</a> 图形文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6讲：会话、表示、应用层_页面_10\" /></p>\n<ol>\n<li>互联网通常使用两种二进制文件格式来显示图像：\n<ol>\n<li>图形交换格式 (GIF，Graphic Interchange Format)</li>\n<li>联合图像专家组 (JPEG，Joint Photographic Experts Group)。</li>\n</ol>\n</li>\n<li>任何具有读取器的 GIF 和 JPEG 文件格式的计算机都可以读取这些文件类型，而与计算机的类型无关。</li>\n</ol>\n<h3 id=\"多媒体文件格式\"><a class=\"anchor\" href=\"#多媒体文件格式\">#</a> 多媒体文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6讲：会话、表示、应用层_页面_11\" /></p>\n<p>多媒体文件格式是另一种二进制文件，它存储声音，音乐和视频。</p>\n<ol>\n<li>这些文件可以完全下载，然后播放，也可以在播放时下载。</li>\n<li>后一种方法称为流音频。</li>\n</ol>\n<h2 id=\"数据加密和压缩\"><a class=\"anchor\" href=\"#数据加密和压缩\">#</a> 数据加密和压缩</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6讲：会话、表示、应用层_页面_12\" /></p>\n<ol>\n<li>第 6 层负责数据加密：数据加密可在信息传输过程中保护信息。</li>\n<li>表示层还负责文件的压缩。</li>\n</ol>\n<h1 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6讲：会话、表示、应用层_页面_14\" /></p>\n<p>第七层对应的是应用界面</p>\n<h2 id=\"应用层概述\"><a class=\"anchor\" href=\"#应用层概述\">#</a> 应用层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6讲：会话、表示、应用层_页面_15\" /></p>\n<p>应用层（最接近用户）支持一个应用的交流模块</p>\n<p>应用层：</p>\n<ul>\n<li>确定并建立预期的通信合作伙伴的可用性</li>\n<li>同步合作的应用程序</li>\n<li>建立有关错误恢复程序的协议</li>\n<li>控制数据完整性</li>\n</ul>\n<h2 id=\"http-hypertext-transfrer-protocol超文本传输协议\"><a class=\"anchor\" href=\"#http-hypertext-transfrer-protocol超文本传输协议\">#</a> HTTP HyperText Transfrer Protocol 超文本传输协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6讲：会话、表示、应用层_页面_16\" /></p>\n<h3 id=\"url统一资源定位符\"><a class=\"anchor\" href=\"#url统一资源定位符\">#</a> URL 统一资源定位符</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6讲：会话、表示、应用层_页面_17\" /></p>\n<pre><code>&lt;URL的访问方式&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\n</code></pre>\n<ol>\n<li>访问方式：协议 HTTPS 或者 HTTP</li>\n<li>主机：域名的方式</li>\n<li>端口对应进程</li>\n<li>路径对应具体的文件</li>\n</ol>\n<h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6讲：会话、表示、应用层_页面_18\" /></p>\n<p>无状态的</p>\n<h2 id=\"http报文结构\"><a class=\"anchor\" href=\"#http报文结构\">#</a> HTTP 报文结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第6讲：会话、表示、应用层_页面_19\" /></p>\n<p>应答码：</p>\n<ol>\n<li>2xx: 成功</li>\n<li>3xx: 重定向</li>\n<li>4xx: 错误</li>\n<li>5xx: 服务器内部错误</li>\n</ol>\n<h3 id=\"http请求报文的一些方法\"><a class=\"anchor\" href=\"#http请求报文的一些方法\">#</a> HTTP 请求报文的一些方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第6讲：会话、表示、应用层_页面_20\" /></p>\n<h3 id=\"html超文本标记语言\"><a class=\"anchor\" href=\"#html超文本标记语言\">#</a> html 超文本标记语言</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第6讲：会话、表示、应用层_页面_21\" /></p>\n<h2 id=\"ftp-和-tftp\"><a class=\"anchor\" href=\"#ftp-和-tftp\">#</a> FTP 和 TFTP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第6讲：会话、表示、应用层_页面_22\" /></p>\n<p>FTP 是一种可靠的，<strong>面向连接</strong>的服务，它使用 TCP 传输文件。</p>\n<ol>\n<li>FTP 首先在客户端和服务器 (端口 21) 之间建立<strong>控制连接</strong></li>\n<li>然后，建立第二个连接，这是计算机之间通过其传输数据的链接。(端口 20)</li>\n</ol>\n<p>TFTP 是使用 UDP 的<strong>无连接</strong>服务 (简化的 FTP)</p>\n<ol>\n<li>体积小，易于实施。更加方便</li>\n<li>例如。 TFTP 在路由器上用于传输配置文件和 Cisco IOS 映像</li>\n<li>不支持交互，没有目录浏览功能</li>\n</ol>\n<p>互联网早期的时候，文件传输量是很大的。</p>\n<h3 id=\"主进程工作步骤\"><a class=\"anchor\" href=\"#主进程工作步骤\">#</a> 主进程工作步骤</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第6讲：会话、表示、应用层_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第6讲：会话、表示、应用层_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第6讲：会话、表示、应用层_页面_25\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第6讲：会话、表示、应用层_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第6讲：会话、表示、应用层_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第6讲：会话、表示、应用层_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第6讲：会话、表示、应用层_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第6讲：会话、表示、应用层_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第6讲：会话、表示、应用层_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第6讲：会话、表示、应用层_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第6讲：会话、表示、应用层_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第6讲：会话、表示、应用层_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第6讲：会话、表示、应用层_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第6讲：会话、表示、应用层_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第6讲：会话、表示、应用层_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第6讲：会话、表示、应用层_页面_38\" /></p>\n<h2 id=\"telnet\"><a class=\"anchor\" href=\"#telnet\">#</a> Telnet</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第6讲：会话、表示、应用层_页面_39\" /></p>\n<p>Telnet 客户端软件提供了登录到运行 Telnet 服务器应用程序的远程 Internet 主机，然后从命令行执行命令的功能。</p>\n<h2 id=\"smtp-pop\"><a class=\"anchor\" href=\"#smtp-pop\">#</a> SMTP POP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第6讲：会话、表示、应用层_页面_40\" /></p>\n<p>电子邮件服务器使用 SMTP 发送和 POP 接收邮件相互通信。</p>\n<ol>\n<li>SMTP (Simple Mail Transfer Protocol) SMTP (简单邮件传输协议) 邮件发送，登录发送等操作</li>\n<li>POP3 (Post Office Protocol version 3) 邮件接收，邮件到达邮件服务端，由客户端和服务端联系接收邮件。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第6讲：会话、表示、应用层_页面_41\" /></p>\n<p>发送者先登录到服务器，通过服务器根据 SMTP 传输到对应的服务器，然后用户登录后通过 POP3 协议收邮件到本地</p>\n<h3 id=\"mime-multipurpose-internet-mail-extensions-因特网协议扩充\"><a class=\"anchor\" href=\"#mime-multipurpose-internet-mail-extensions-因特网协议扩充\">#</a> MIME Multipurpose Internet Mail Extensions 因特网协议扩充</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第6讲：会话、表示、应用层_页面_42\" /></p>\n<p>将非 ASCII 码的文件转换成 ASCII 文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第6讲：会话、表示、应用层_页面_43\" /></p>\n<h2 id=\"snmp-simple-network-management-protocol-简单网络管理协议\"><a class=\"anchor\" href=\"#snmp-simple-network-management-protocol-简单网络管理协议\">#</a> SNMP Simple Network Management Protocol 简单网络管理协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第6讲：会话、表示、应用层_页面_44\" /></p>\n<p>一种促进管理信息交换的应用层协议</p>\n<p>网管，通过下发请求对上网的所有的主机关于流量等等信息进行管理 (监控)</p>\n<h2 id=\"dns-domain-name-system域名系统\"><a class=\"anchor\" href=\"#dns-domain-name-system域名系统\">#</a> DNS Domain Name System 域名系统</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第6讲：会话、表示、应用层_页面_45\" /></p>\n<p>域名系统 (DNS) 是网络上的服务，该服务管理域名并响应客户端将域名转换为关联 IP 地址的请求。</p>\n<ol>\n<li>早期是用 IP 地址以及 Host 文件来进行访问</li>\n</ol>\n<h3 id=\"domain-name-域名\"><a class=\"anchor\" href=\"#domain-name-域名\">#</a> Domain Name 域名</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第6讲：会话、表示、应用层_页面_46\" /></p>\n<h3 id=\"tld-top-level-domain-顶级域\"><a class=\"anchor\" href=\"#tld-top-level-domain-顶级域\">#</a> TLD Top Level Domain 顶级域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第6讲：会话、表示、应用层_页面_47\" /></p>\n<p>国家 TLD (nTLD)</p>\n<ol>\n<li>.cn (CHINA) 中国</li>\n<li>.us (United States) 美国</li>\n<li>.uk (United kingdom), etc. 英国等等</li>\n</ol>\n<p>通用 TLD (gTLD)，最早的域包括：</p>\n<ol>\n<li>.com Enterprises and companies 企业和公司</li>\n<li>.net Network services providers 网络服务提供者</li>\n<li>.org Nonprofit organizations 非盈利组织</li>\n<li>.edu Educational facilities 教育机构</li>\n<li>.gov Governments (only for U.S.A) 政府 (美国)</li>\n<li>.mil Military facilities (only for U.S.A) 军方 (美军)</li>\n<li>.int International organizations 国际组织</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第6讲：会话、表示、应用层_页面_48\" /></p>\n<p>Infrastructure domain 基础设施领域</p>\n<ol>\n<li>Only one: arpa, for resolving domain names reversely 仅一个：arpa，用于反向解析域名</li>\n</ol>\n<p>Recently, new TLD domain added:</p>\n<ol>\n<li>.aero (航空运输企业)</li>\n<li>.biz (公司和企业)</li>\n<li>.cat (加泰隆人的语言和文化团体)</li>\n<li>.coop (合作团体)</li>\n<li>.info (各种资讯)</li>\n<li>.jobs (人力资源管理者)</li>\n<li>.mobi (移动产品与服务的用户和提供者)</li>\n<li>.museum (博物馆)</li>\n<li>.name   (个人)</li>\n<li>.pro (经过认证的专业人员)</li>\n<li>.travel  (旅游业)</li>\n</ol>\n<h3 id=\"域名服务器\"><a class=\"anchor\" href=\"#域名服务器\">#</a> 域名服务器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第6讲：会话、表示、应用层_页面_49\" /></p>\n<ul>\n<li>顶级域名底下的域名就是由顶级域名下面进行管理</li>\n<li>根域名服务器存储位置，所以子服务器知道根服务器的地址即可</li>\n</ul>\n<h3 id=\"结合域名服务器查找ip地址\"><a class=\"anchor\" href=\"#结合域名服务器查找ip地址\">#</a> 结合域名服务器查找 IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第6讲：会话、表示、应用层_页面_50\" /></p>\n<ol>\n<li>DNS 系统以层次 (hierarchy) 结构设置，该层次结构创建不同级别的 DNS 服务器。</li>\n<li>此级别的 DNS 服务器判断其自身是否能够将域名转换为关联的 IP 地址：\n<ol>\n<li>如果可以，则将结果返回给客户端</li>\n<li>如果没有，它将请求发送到更高级别。(向上级请求)</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第6讲：会话、表示、应用层_页面_51\" /></p>\n<ul>\n<li>请求分为两种:\n<ul>\n<li>能够应答</li>\n<li>不能够应答</li>\n</ul>\n</li>\n<li>递归地进行查找：具体过程在上图</li>\n<li>下面递归，上面迭代</li>\n</ul>\n<h3 id=\"应用层通讯方式\"><a class=\"anchor\" href=\"#应用层通讯方式\">#</a> 应用层：通讯方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第6讲：会话、表示、应用层_页面_52\" /></p>\n<ol>\n<li>通信处理发生的一种方式：(无上下文，请求后就断开)\n<ol>\n<li>当浏览器打开时，它将连接到默认页面，并且该页面的文件将传输到客户端。</li>\n<li>处理完成后，连接断开</li>\n</ol>\n</li>\n<li>第二种方式：(有上下文)\n<ol>\n<li>作为 Telnet 和 FTP，建立与服务器的连接并保持该连接，直到执行所有处理。</li>\n<li>当用户确定他 / 她已完成时，客户端将终止连接。</li>\n</ol>\n</li>\n<li>所有的交流活动都属于这两类之一。</li>\n</ol>\n<h2 id=\"dhcp-dynamic-host-configuration-protocol-动态主机配置协议\"><a class=\"anchor\" href=\"#dhcp-dynamic-host-configuration-protocol-动态主机配置协议\">#</a> DHCP Dynamic Host Configuration Protocol 动态主机配置协议</h2>\n<h2 id=\"dhcp工作原理\"><a class=\"anchor\" href=\"#dhcp工作原理\">#</a> DHCP 工作原理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6.1讲：dhcp_页面_03\" /></p>\n<h3 id=\"dhcp过程\"><a class=\"anchor\" href=\"#dhcp过程\">#</a> DHCP 过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6.1讲：dhcp_页面_04\" /></p>\n<p>AB 是两个 Server</p>\n<p>Client 先 Discover 去搜索</p>\n<p>Server 返回一个 Offer 报文</p>\n<p>Client 选择优先返回的 Offer 来优先服务</p>\n<p>Client 进行广播，告知到底服务了谁</p>\n<p>然后 B 返回一个 Ack 报文</p>\n<p>到了时间之后，选择 release 或者续租</p>\n<h3 id=\"发现阶段\"><a class=\"anchor\" href=\"#发现阶段\">#</a> 发现阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6.1讲：dhcp_页面_05\" /></p>\n<h3 id=\"响应阶段\"><a class=\"anchor\" href=\"#响应阶段\">#</a> 响应阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6.1讲：dhcp_页面_06\" /></p>\n<h3 id=\"选择问题\"><a class=\"anchor\" href=\"#选择问题\">#</a> 选择问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第6.1讲：dhcp_页面_07\" /></p>\n<h3 id=\"租约确认问题\"><a class=\"anchor\" href=\"#租约确认问题\">#</a> 租约确认问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6.1讲：dhcp_页面_08\" /></p>\n<h3 id=\"租期续约\"><a class=\"anchor\" href=\"#租期续约\">#</a> 租期续约</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6.1讲：dhcp_页面_09\" /></p>\n<h3 id=\"租期释放\"><a class=\"anchor\" href=\"#租期释放\">#</a> 租期释放</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6.1讲：dhcp_页面_10\" /></p>\n<h3 id=\"dhcp报文结构\"><a class=\"anchor\" href=\"#dhcp报文结构\">#</a> DHCP 报文结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6.1讲：dhcp_页面_11\" /></p>\n<ol>\n<li>op: 报文类型，1 请求，2 应答</li>\n<li>HTYPE: 硬件地址类型，1 表示 10M 以太网地址</li>\n<li>HLEN: 以太网地址长度，10M 为 6</li>\n<li>Hops: 是否使用代理服务器进行处理</li>\n</ol>\n<h3 id=\"报文类型\"><a class=\"anchor\" href=\"#报文类型\">#</a> 报文类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6.1讲：dhcp_页面_12\" /></p>\n<ol>\n<li>DHCP Discover：发现</li>\n<li>DHCP Offer：提供</li>\n<li>DHCP Request：告知决定</li>\n<li>DHCP ACK：租约确认</li>\n<li>DHCP NAK：租约不确认</li>\n<li>DHCP Release：释放租约</li>\n<li>DHCP Decline: 收到 Ack 后，Client 告诉服务器不接受</li>\n<li>DHCP Inform: 客户端向服务器端请求详细信息</li>\n</ol>\n<h2 id=\"dhcp-欺骗与防范\"><a class=\"anchor\" href=\"#dhcp-欺骗与防范\">#</a> DHCP 欺骗与防范</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6.1讲：dhcp_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6.1讲：dhcp_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6.1讲：dhcp_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6.1讲：dhcp_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6.1讲：dhcp_页面_18\" /></p>\n<p>ARP ip-&gt;mac</p>\n<p>RARP mac-&gt;ip</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "title": "Lecture05-传输层",
            "date_published": "2023-02-08T09:52:20.000Z",
            "content_html": "<h1 id=\"lecture05-第四层传输层\"><a class=\"anchor\" href=\"#lecture05-第四层传输层\">#</a> Lecture05 - 第四层传输层</h1>\n<p>第四层运输层主要是实现了主机之间的通信。数据通信是服务于主机上的<strong>进程</strong> (Session)。</p>\n<h2 id=\"第四层概述\"><a class=\"anchor\" href=\"#第四层概述\">#</a> 第四层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第5讲：传输层原理与技术_页面_03\" /></p>\n<ol>\n<li>\n<p>分割上层应用程序数据 (新的数据单元 - 数据段)</p>\n</li>\n<li>\n<p>建立端到端 (end to end) 的通讯</p>\n</li>\n<li>\n<p>从一个终端主机向另一个终端主机发送<strong>段 segment</strong></p>\n<p>(第三层和第二层不进行可靠性检验，第四层完成可靠性检验，接受方认为数据错误，在第四层进行要求重传)</p>\n</li>\n<li>\n<p>流量控制和可靠性</p>\n<ol>\n<li>可以比喻为与外国人交谈：通常，您会要求外国人重复他 / 她的话 (可靠性) 并慢声说话 (流量控制)</li>\n<li>双方主机的网络的处理能力不同，缓存能力不同</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第5讲：传输层原理与技术_页面_04\" /></p>\n<ol>\n<li>传输控制协议 (TCP, Transmission Control Protocol)</li>\n<li>用户数据报协议 (UDP, User Datagram Protocol)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第5讲：传输层原理与技术_页面_05\" /></p>\n<p>将传出邮件分成多个部分</p>\n<p>在目标站重新组合消息</p>\n<p>TCP: 可靠 (效率比较低，早期网络应用少，需要可靠性)</p>\n<ol>\n<li>面向连接</li>\n<li>软件检查段 segment</li>\n<li>重新发送丢失或错误的任何内容</li>\n<li>使用确认机制</li>\n<li>提供流量控制</li>\n</ol>\n<p>UDP: 不可靠</p>\n<ol>\n<li>无连接</li>\n<li>不提供段的软件检查</li>\n<li>不使用确认</li>\n<li>不进行流量控制</li>\n<li>直接丢弃错误的报文，而不进行其他操作。</li>\n</ol>\n<h3 id=\"服务模型\"><a class=\"anchor\" href=\"#服务模型\">#</a> 服务模型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第5讲：传输层原理与技术_页面_06\" /></p>\n<ol>\n<li>\n<p>TCP 和 UDP 都使用<strong>端口</strong>来跟踪 (track) 同时穿越网络的不同会话</p>\n</li>\n<li>\n<p>应用软件开发人员已同意使用 RFC1700 中定义的知名端口号</p>\n</li>\n<li>\n<p>低于 255 的端口号 (0-255) 保留给 TCP 和 UDP 公共应用程序使用。</p>\n<p>0-1023 是知名端口，有分发的规范，不应当被随意使用</p>\n<p>1024-49151 的端口号进行登记使用，有的是应用程序已经的使用端口号，避免冲突</p>\n</li>\n</ol>\n<h3 id=\"套接字\"><a class=\"anchor\" href=\"#套接字\">#</a> 套接字</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第5讲：传输层原理与技术_页面_07\" /></p>\n<ol>\n<li>套接字表示为 (IP 地址，端口)</li>\n<li>每个连接都表示为 (socket  source ，socket  destination)，这是一个点对点全双工通道</li>\n<li><strong>TCP 不支持多播和广播</strong></li>\n</ol>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第5讲：传输层原理与技术_页面_09\" /></p>\n<ol>\n<li>可靠传输</li>\n<li>流控制\n<ol>\n<li>滑动窗口 (窗口进行通信，一次数据传输是有上限发的，缓存问题，拥塞问题)</li>\n<li>避免拥塞</li>\n</ol>\n</li>\n<li>连接控制\n<ol>\n<li>建立连接 ——<strong> 三次</strong>握手</li>\n<li>断开连接 ——<strong> 四次</strong>握手</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"tcp数据段格式\"><a class=\"anchor\" href=\"#tcp数据段格式\">#</a> TCP 数据段格式</h3>\n<h4 id=\"源端口-目的端口\"><a class=\"anchor\" href=\"#源端口-目的端口\">#</a> 源端口 目的端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第5讲：传输层原理与技术_页面_10\" /></p>\n<p>socket</p>\n<h4 id=\"序号\"><a class=\"anchor\" href=\"#序号\">#</a> 序号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第5讲：传输层原理与技术_页面_11\" /></p>\n<p>我们从小向大进行使用，如果使用到最大之后，我们会从小再次重新开始分配。</p>\n<h4 id=\"确认号\"><a class=\"anchor\" href=\"#确认号\">#</a> 确认号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第5讲：传输层原理与技术_页面_12\" /></p>\n<p>发数据的同时，对对方上一次的传输做确认</p>\n<h4 id=\"数据偏移\"><a class=\"anchor\" href=\"#数据偏移\">#</a> 数据偏移</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第5讲：传输层原理与技术_页面_13\" /></p>\n<h4 id=\"保留\"><a class=\"anchor\" href=\"#保留\">#</a> 保留</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第5讲：传输层原理与技术_页面_14\" /></p>\n<h4 id=\"标记位urg\"><a class=\"anchor\" href=\"#标记位urg\">#</a> 标记位 ——URG</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第5讲：传输层原理与技术_页面_15\" /></p>\n<p>比如说按 Ctrl+C 终止程序的信息可能会将 URG 置为 1</p>\n<h4 id=\"标记位ack\"><a class=\"anchor\" href=\"#标记位ack\">#</a> 标记位 ——ACK</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第5讲：传输层原理与技术_页面_16\" /></p>\n<h4 id=\"标记位psh\"><a class=\"anchor\" href=\"#标记位psh\">#</a> 标记位 ——PSH</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第5讲：传输层原理与技术_页面_17\" /></p>\n<p>根据网络条件调整，正常情况下缓存满了才会传输</p>\n<h4 id=\"标记位rst\"><a class=\"anchor\" href=\"#标记位rst\">#</a> 标记位 ——RST</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第5讲：传输层原理与技术_页面_18\" /></p>\n<p>连接失败</p>\n<h4 id=\"标记位syn\"><a class=\"anchor\" href=\"#标记位syn\">#</a> 标记位 ——SYN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第5讲：传输层原理与技术_页面_19\" /></p>\n<h4 id=\"标记位fin\"><a class=\"anchor\" href=\"#标记位fin\">#</a> 标记位 ——FIN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第5讲：传输层原理与技术_页面_20\" /></p>\n<h4 id=\"窗口\"><a class=\"anchor\" href=\"#窗口\">#</a> 窗口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第5讲：传输层原理与技术_页面_21\" /></p>\n<h4 id=\"检验和\"><a class=\"anchor\" href=\"#检验和\">#</a> 检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第5讲：传输层原理与技术_页面_22\" /></p>\n<h4 id=\"紧急指针\"><a class=\"anchor\" href=\"#紧急指针\">#</a> 紧急指针</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第5讲：传输层原理与技术_页面_23\" /></p>\n<h4 id=\"可选部分\"><a class=\"anchor\" href=\"#可选部分\">#</a> 可选部分</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第5讲：传输层原理与技术_页面_24\" /></p>\n<p>MSS Maximum Segment Size 最大报文段长度</p>\n<h4 id=\"填充\"><a class=\"anchor\" href=\"#填充\">#</a> 填充</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第5讲：传输层原理与技术_页面_25\" /></p>\n<h3 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第5讲：传输层原理与技术_页面_26\" /></p>\n<p>主机使用网段 (TPDU) 交换数据</p>\n<p>每个段都有：</p>\n<ol>\n<li>首部为 20 个字节 (可选部分除外)</li>\n<li>0 或更多数据字节 (请求连接的时候)</li>\n</ol>\n<p>段的大小必须与 IP 数据包匹配，并且还必须满足底层的需求</p>\n<ol>\n<li>例如，以太网的 MTU (最大传输单位) 为 1500 字节</li>\n<li>是面向字节的传输。</li>\n</ol>\n<p>每个字节都有一个 32 位序号</p>\n<h3 id=\"可靠连接两军问题\"><a class=\"anchor\" href=\"#可靠连接两军问题\">#</a> 可靠连接 —— 两军问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第5讲：传输层原理与技术_页面_27\" /></p>\n<p>蓝军必须一起攻打才能打败白军</p>\n<p>蓝军信息可能被白军篡改或者阻碍</p>\n<p>结论：无论通信多少次，都不能有一个完全可信的消息（进入死循环）</p>\n<h3 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h3>\n<h4 id=\"第一次握手\"><a class=\"anchor\" href=\"#第一次握手\">#</a> 第一次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第5讲：传输层原理与技术_页面_28\" /></p>\n<ol>\n<li>服务器：执行 LISTEN 和 ACCEPT 原语，并进行被动监视</li>\n<li>客户端：执行 CONNECT 原语，生成 SYN = 1 和 ACK = 0 的 TCP 段，代表连接请求</li>\n</ol>\n<h4 id=\"第二次握手\"><a class=\"anchor\" href=\"#第二次握手\">#</a> 第二次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第5讲：传输层原理与技术_页面_29\" /></p>\n<p>服务器检查是否存在监视端口的服务进程</p>\n<ol>\n<li>如果没有任何进程，请使用 RST = 1 回答一个 TCP 段</li>\n<li>如果存在进程，则决定拒绝或接受请求</li>\n<li>如果接受连接请求，则发送 SYN = 1 和 ACK = 1 的网段</li>\n</ol>\n<h4 id=\"第三次握手\"><a class=\"anchor\" href=\"#第三次握手\">#</a> 第三次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第5讲：传输层原理与技术_页面_30\" /></p>\n<p>客户端发送一个 SYN = 0 和 ACK = 1 的段以确认连接</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第5讲：传输层原理与技术_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第5讲：传输层原理与技术_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第5讲：传输层原理与技术_页面_33\" /></p>\n<h3 id=\"传输控制\"><a class=\"anchor\" href=\"#传输控制\">#</a> 传输控制</h3>\n<p>数据传输 —— 停止等待协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第5讲：传输层原理与技术_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第5讲：传输层原理与技术_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第5讲：传输层原理与技术_页面_36\" /></p>\n<h3 id=\"可靠通信arq\"><a class=\"anchor\" href=\"#可靠通信arq\">#</a> 可靠通信 ARQ</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第5讲：传输层原理与技术_页面_37\" /></p>\n<p>ARQ (Automatic Repeat reQuest) 自动重传请求：这表示 &quot;重新发送请求&quot; 为自动发送并且接收方无需请求发送方重新发送错误段</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第5讲：传输层原理与技术_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第5讲：传输层原理与技术_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第5讲：传输层原理与技术_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第5讲：传输层原理与技术_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第5讲：传输层原理与技术_页面_42\" /></p>\n<h3 id=\"tcp-释放连接\"><a class=\"anchor\" href=\"#tcp-释放连接\">#</a> TCP 释放连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第5讲：传输层原理与技术_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第5讲：传输层原理与技术_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第5讲：传输层原理与技术_页面_45\" /></p>\n<p>server 持续发完数据</p>\n<p>FIN = 1，表示数据处理完成</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第5讲：传输层原理与技术_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第5讲：传输层原理与技术_页面_47\" /></p>\n<h3 id=\"为什么必须等待2msl\"><a class=\"anchor\" href=\"#为什么必须等待2msl\">#</a> 为什么必须等待 2MSL</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第5讲：传输层原理与技术_页面_48\" /></p>\n<ol>\n<li>\n<p>为了确保 A 发送的最后一个 ACK 可以到达 B</p>\n</li>\n<li>\n<p>防止出现任何无效的连接请求段</p>\n<p>等待 2 MSL 之后，我们可以确保连接上的所有段均已消失</p>\n</li>\n</ol>\n<h3 id=\"tcp中的计时器\"><a class=\"anchor\" href=\"#tcp中的计时器\">#</a> Tcp 中的计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第5讲：传输层原理与技术_页面_49\" /></p>\n<ol>\n<li>\n<p>重传计时器：多长时间进行重传</p>\n</li>\n<li>\n<p>坚持计时器：避免死锁 (WIN = 0 的时候修改 WIN 但是没有办法发送过去)：收到 WIN = 0 的时候，开始进行计时，到时间主动询问</p>\n</li>\n<li>\n<p>保持计时器:</p>\n<ol>\n<li>发送数据段后，刷新</li>\n<li>如果到达一定的时间，则再次询问是不是还要保持连接。</li>\n<li>长期没有数据，和对方协商是否可以终止</li>\n</ol>\n</li>\n<li>\n<p>时间等待计时器</p>\n</li>\n</ol>\n<h3 id=\"tcp的有限状态机\"><a class=\"anchor\" href=\"#tcp的有限状态机\">#</a> TCP 的有限状态机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第5讲：传输层原理与技术_页面_50\" /></p>\n<ol>\n<li>粗线：正常的服务器端</li>\n<li>虚线：正常客户端</li>\n<li>细线：异常状态的问题</li>\n</ol>\n<h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第5讲：传输层原理与技术_页面_52\" /></p>\n<p>为什么我们需要 UDP？</p>\n<ol>\n<li>没有建立连接 (避免延时)</li>\n<li>简单：发送方，接收方无连接状态</li>\n<li>小段 header</li>\n<li>没有拥塞控制：UDP 可以按照期望的速度传输</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第5讲：传输层原理与技术_页面_53\" /></p>\n<p>无连接：没有复杂控制，头部简单</p>\n<ol>\n<li>UDP 发送方，接收方之间没有握手 (HandShake，包含进程等信息的)</li>\n<li>每个 UDP 段都独立处理</li>\n</ol>\n<p>常用于流媒体 (Stream) 多媒体 (multimedia) 应用</p>\n<ol>\n<li>容忍损失：无非就是降低帧率</li>\n<li>这类应用是<strong>速率敏感</strong>的应用，而不一定是质量敏感的应用。</li>\n</ol>\n<p>UDP 用于：</p>\n<ol>\n<li>RIP: 定期发送路由信息 (periodically)</li>\n<li>DNS: 避免延迟建立 TCP 连接 (DNS 需要快速找到)</li>\n<li>SNMP:SNMP：拥塞时 (congestion)，SNMP 必须仍然可运行。在没有拥塞和可靠性控制机制的情况下，UDP 在这种情况下的性能要优于 TCP。(主播和多播，大量信息传输)</li>\n<li>其他协议包括 TFTP，DHCP</li>\n</ol>\n<h3 id=\"udp帧结构\"><a class=\"anchor\" href=\"#udp帧结构\">#</a> UDP 帧结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第5讲：传输层原理与技术_页面_54\" /></p>\n<ol>\n<li>UDP 的数据段很简单</li>\n<li>UDP 只有 8 个字节的首部</li>\n<li>源端口、目的端口、长度、校验 (data)、Data</li>\n<li>校验也要对 data 一并校验，如果出现错误，直接丢弃。</li>\n<li>应用层进行数据切片，决定如何进行发送，UDP 直接发送</li>\n</ol>\n<h2 id=\"应用nat和pat\"><a class=\"anchor\" href=\"#应用nat和pat\">#</a> 应用：NAT 和 PAT</h2>\n<h3 id=\"什么是nat\"><a class=\"anchor\" href=\"#什么是nat\">#</a> 什么是 NAT？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第5讲：传输层原理与技术_页面_56\" /></p>\n<ol>\n<li>NAT，是在 IP 数据包头中将一个地址交换为另一个地址的过程\n<ol>\n<li>网络地址转换</li>\n<li>是网络地址即将用完的解决方案</li>\n</ol>\n</li>\n<li>实际上，NAT 用于允许私下寻址的主机访问 Internet。</li>\n<li>IP 地址耗尽的解决方案之一\n<ol>\n<li>保留注册 (合法) 地址</li>\n<li>连接到 Internet 时增加灵活性</li>\n</ol>\n</li>\n<li>RFC 1631 - Network Address Translator (NAT)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第5讲：传输层原理与技术_页面_57\" /></p>\n<h3 id=\"nat类型\"><a class=\"anchor\" href=\"#nat类型\">#</a> NAT 类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第5讲：传输层原理与技术_页面_58\" /></p>\n<h3 id=\"nat地址类型\"><a class=\"anchor\" href=\"#nat地址类型\">#</a> NAT 地址类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第5讲：传输层原理与技术_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第5讲：传输层原理与技术_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第5讲：传输层原理与技术_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第5讲：传输层原理与技术_页面_62\" /></p>\n<h3 id=\"nat优缺点\"><a class=\"anchor\" href=\"#nat优缺点\">#</a> NAT 优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第5讲：传输层原理与技术_页面_63\" /></p>\n<ol>\n<li>优点：由于并非每个内部主机都需要同时进行外部访问，因此您可以使用少量的全局唯一地址池来服务相对大量的私有寻址主机。</li>\n<li>缺点：一一映射，并没有从根本上解决地址短缺的问题。</li>\n<li>也就是说，如果专用地址空间为 / 8，但公用地址为 / 24，则一次只能有 254 个主机可以访问 Internet，主要内网不是同时有很多主机上网，就可以如上操作，进一步降低地址压力 (类似并行和穿行的区别)</li>\n</ol>\n<p>TCP 不支持多播和广播</p>\n<p>**</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "title": "Lecture04-网络层",
            "date_published": "2023-02-08T09:52:09.000Z",
            "content_html": "<h1 id=\"lecture04-网络层\"><a class=\"anchor\" href=\"#lecture04-网络层\">#</a> Lecture04 - 网络层</h1>\n<h2 id=\"网络层概述\"><a class=\"anchor\" href=\"#网络层概述\">#</a> 网络层概述</h2>\n<h3 id=\"网络层职责\"><a class=\"anchor\" href=\"#网络层职责\">#</a> 网络层职责</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_003.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_003\" /></p>\n<ol>\n<li>通过网络移动数据：不同网段之间的通信，不同的广播域，两个广播域之间的进行了划分，互不干扰</li>\n<li>使用分层寻址方案 (与 MAC 寻址相反，后者没有层次)</li>\n<li>细分网络并控制流量</li>\n<li>减少交通拥堵，基于 IP 做分段和传达，用来减少拥塞</li>\n<li>与其他网络通讯</li>\n</ol>\n<h3 id=\"网络层设备\"><a class=\"anchor\" href=\"#网络层设备\">#</a> 网络层设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_004.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_004\" /></p>\n<ol>\n<li>路由器\n<ol>\n<li>互连网段或网络 (不同网段的分割)</li>\n<li>根据 IP 地址做出合理的决定</li>\n<li>确定最佳路径，根据路由表。</li>\n<li>将数据包从入站端口切换到出站端口</li>\n</ol>\n</li>\n<li>如果 A 网段的设备向路由器发送了一个 B 网段的广播地址，那么路由器会进行转发，然而如果 A 网段设备发送的是本网段的广播地址，路由器则不会进行转发。(广播域划分)</li>\n</ol>\n<h2 id=\"ip地址和子网划分\"><a class=\"anchor\" href=\"#ip地址和子网划分\">#</a> IP 地址和子网划分</h2>\n<h3 id=\"第三层数据报格式\"><a class=\"anchor\" href=\"#第三层数据报格式\">#</a> 第三层数据报格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_006.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_006\" /></p>\n<h3 id=\"报文详解\"><a class=\"anchor\" href=\"#报文详解\">#</a> 报文详解</h3>\n<h4 id=\"首部\"><a class=\"anchor\" href=\"#首部\">#</a> 首部</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_007.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_007\" /></p>\n<h4 id=\"首部部分\"><a class=\"anchor\" href=\"#首部部分\">#</a> 首部部分</h4>\n<p>上面蓝框部分的整体是首部部分，包括固定部分和可变部分</p>\n<h4 id=\"版本号\"><a class=\"anchor\" href=\"#版本号\">#</a> 版本号</h4>\n<p>占 4 bit，指 IP 协议的版本。</p>\n<p>目前的 IP 协议版本号为 4 (即 IPv4)(6 也就对应 IPv6)</p>\n<h4 id=\"首部长度\"><a class=\"anchor\" href=\"#首部长度\">#</a> 首部长度</h4>\n<p>占 4 bit，可表示的最大数值是 15 个单位 (一个单位为 4 字节) 因此 IP 的首部长度的最大值是 60 字节。</p>\n<p>一行是 5 个字节，固定部分有 20 个字节，可变部分最多有 40 个字节。</p>\n<h4 id=\"服务类型\"><a class=\"anchor\" href=\"#服务类型\">#</a> 服务类型</h4>\n<p>占 8bit，用来获得更好的服务，这个字段以前一直没有被人们使用。</p>\n<h4 id=\"总长度\"><a class=\"anchor\" href=\"#总长度\">#</a> 总长度</h4>\n<p>占 16 bit，指<strong>首部和数据</strong>之和的长度，单位为字节，因此数据报的最大长度为 65535 字节 (由于放到帧里面，所以大多数不比 1500 字节长)。总长度必须不超过最大传送单元 MTU。</p>\n<h4 id=\"标识\"><a class=\"anchor\" href=\"#标识\">#</a> 标识</h4>\n<p>标识 (identification)：占 16 bit，它是一个计数器，用来产生数据报的标识。</p>\n<p>解决<strong>报文分片</strong>的问题。相同的标识可以合并成一个大报文。</p>\n<h4 id=\"标志\"><a class=\"anchor\" href=\"#标志\">#</a> 标志</h4>\n<p>标志占 3 bit，最高位为 0</p>\n<ol>\n<li>让发送方对报文进行控制，让中间路由器对其进行控制</li>\n<li>DF (Don’t fragment)：是否允许做分片，0 允许做分片，1 不允许做分片</li>\n<li>MF (More Fragment)：MF 为 0 表示最后一个分片，1 是指后面还有分片</li>\n</ol>\n<h4 id=\"片偏移\"><a class=\"anchor\" href=\"#片偏移\">#</a> 片偏移</h4>\n<p>片偏移 (13 bit) 指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以<strong> 8 个字节</strong>为偏移单位。</p>\n<ol>\n<li>相同标识号，然后根据片偏移进行重排</li>\n<li>因为 16-3 = 13，2^3 = 8 (因为单位是字节，所以用 13 位就可以补齐)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102115026718.png\" alt=\"image-20230102115026718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_017.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_017\" /></p>\n<h4 id=\"生存时间\"><a class=\"anchor\" href=\"#生存时间\">#</a> 生存时间</h4>\n<p>生存时间 (8 bit) 记为 TTL (Time To Live) 数据报在网络中可通过的<strong>路由器数</strong>的最大值。</p>\n<p>是通过计数的方式来进行统计，最大值是<strong> 255</strong> (最多经过 255 个路由器)，路由器每转发一次，就会对生存时间 - 1，减小为 0 后，就会丢弃掉，并且通知给发送方我已经丢弃掉这个报文。</p>\n<p>防止在环上进行传输，避免由于回路问题，造成过大的网络资源浪费</p>\n<h4 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h4>\n<p>协议 (8 bit) 字段指出此数据报携带的数据使用何种协议以便目的主机的 IP 层将数据部分上交给哪个处理过程</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_020.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_020\" /></p>\n<p>有的协议是上层的，有的协议是第三层协议，具体协议的情况如上</p>\n<h4 id=\"首部检验和\"><a class=\"anchor\" href=\"#首部检验和\">#</a> 首部检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_022.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_022\" /></p>\n<p>首部检验和 (16 bit) 字段：只检验数据报的首部，不包括数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p>\n<p>一般不用，一是只检验首部，不检验数据；二是消耗性能</p>\n<h4 id=\"源地址和目的地址\"><a class=\"anchor\" href=\"#源地址和目的地址\">#</a> 源地址和目的地址</h4>\n<p>各占 4 个字节</p>\n<h3 id=\"网络层地址\"><a class=\"anchor\" href=\"#网络层地址\">#</a> 网络层地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_024.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_024\" /></p>\n<ol>\n<li>\n<p>IP 地址为 32 位长 (Ipv4 中)</p>\n</li>\n<li>\n<p>它们以点分十进制格式表示为四个八位字节：133.14.17.0</p>\n</li>\n<li>\n<p>IP 地址包含两个组成部分：</p>\n<ul>\n<li>\n<p>网络 ID</p>\n</li>\n<li>\n<p>主机 ID</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_025.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_025\" /></p>\n<h4 id=\"网络地址用来标识网段\"><a class=\"anchor\" href=\"#网络地址用来标识网段\">#</a> 网络地址：用来标识网段</h4>\n<p>一个网络中，共享一个网络地址</p>\n<ol>\n<li>原来由 ARIN (美国互联网号码注册机构，<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hcmluLm5ldA==\">www.arin.net</span>) 分配，现在已经更换</li>\n<li>标识设备所连接 (attached) 的网络</li>\n<li>可以由前三个八位位组 (octets) 中的一个，两个或三个来标识</li>\n</ol>\n<h4 id=\"主机idip地址后面占据1-3个字节\"><a class=\"anchor\" href=\"#主机idip地址后面占据1-3个字节\">#</a> 主机 ID：IP 地址后面占据 1-3 个字节</h4>\n<ol>\n<li>由网络管理员分配</li>\n<li>识别该网络上的特定设备</li>\n<li>可以由最后三个八位位组中的一个，两个或三个来标识</li>\n</ol>\n<h3 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_026.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_026\" /></p>\n<p>不同的类地址为地址的网络部分和主机部分保留不同数量的位</p>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_027.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_027\" /></p>\n<p><strong>A 类第一位必为 0，B 开头为 10，C 为 110</strong></p>\n<p>根据第一个地址的数值确定是哪类地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_028.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_028\" /></p>\n<ol>\n<li>\n<p>每个类别的最大主机数量各不相同。(不包含网络号)</p>\n<ul>\n<li>\n<p>A 类拥有 16,777,214 个可用主机 (2<sup>24</sup> – 2)</p>\n</li>\n<li>\n<p>Class B has 65,534 available hosts (2<sup>16</sup> – 2) B 类具有 65,534 个可用主机 (2<sup>16</sup> – 2)</p>\n</li>\n<li>\n<p>Class C has 254 available hosts (2<sup>8</sup> – 2) C 类具有 254 个可用主机 (2<sup>8</sup> –2)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>为什么每一类地址中都要减去 2？</p>\n<ul>\n<li>\n<p>每个网络中的第一个地址都保留用于该网络地址</p>\n</li>\n<li>\n<p>最后一个地址是为广播地址保留的。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"保留地址\"><a class=\"anchor\" href=\"#保留地址\">#</a> 保留地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_029.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_029\" /></p>\n<p>网络地址：在地址的主机部分中以二进制 0 结尾的 IP 地址</p>\n<ol>\n<li>A 类网络地址示例：113.0.0.0</li>\n<li>网络上的主机只有具有相同网络 ID 的其他主机才能直接通信。(用来确定是不是在一个网段里面)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_030.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_030\" /></p>\n<p>广播地址：用于将数据发送到网络上的所有设备。(一般是一个网段之间的)</p>\n<ol>\n<li>广播 IP 地址在地址的主机部分中以二进制 1 结尾。</li>\n<li>B 类地址的广播地址的示例：176.10.255.255 (decimal 255 = binary 11111111)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_031.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_031\" /></p>\n<p>例子</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_032.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_032\" /></p>\n<p>用于局域网内部使用</p>\n<p>IP 地址耗尽（IP address delpetion）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102123731364.png\" alt=\"image-20230102123731364\" /></p>\n<h3 id=\"子网划分\"><a class=\"anchor\" href=\"#子网划分\">#</a> 子网划分</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_033.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_033\" /></p>\n<p>网络管理员有时需要将网络划分为较小的网络，称为<strong>子网</strong>，以提供<strong>额外的灵活性</strong>.</p>\n<p>从主机字段借来的位被指定为子网字段 (Subnet Fields)</p>\n<h4 id=\"子网的基本概念\"><a class=\"anchor\" href=\"#子网的基本概念\">#</a> 子网的基本概念</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_034.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_034\" /></p>\n<ol>\n<li>子网是网络的较小部分\n<ul>\n<li>提供寻址灵活性</li>\n</ul>\n</li>\n<li>子网地址通常由网络管理员在本地分配</li>\n<li>子网减少了广播域：使得广播域变小，提高网络利用率，避免接受到大量的无用的广播，广播只能在对应子网中进行广播。</li>\n</ol>\n<h4 id=\"我们可以借多少位\"><a class=\"anchor\" href=\"#我们可以借多少位\">#</a> 我们可以借多少位？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_035.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_035\" /></p>\n<p>最少借 2 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_036.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_036\" /></p>\n<ol>\n<li>\n<p>借用的最小位数是 2，为什么？</p>\n<p>I 如果只借用 1 位以创建一个子网，那么您将只有一个网络号 -.0 网络 - 和广播号 -.1 网络，没有可以使用的专用网络。</p>\n<p>两位的时候，01 和 10 给 Host，00 给网络 ID，11 位广播地址</p>\n</li>\n<li>\n<p>可以借用的最大位数可以是保留至少 2 位主机号的任何数字 (给 Host 至少保留 2 位，因为 1 位的话，要么一个是 NET 无法使用，要么一个是广播地址)</p>\n</li>\n</ol>\n<h4 id=\"副作用浪费地址\"><a class=\"anchor\" href=\"#副作用浪费地址\">#</a> 副作用：浪费地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_037.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_037\" /></p>\n<p>我们必须在所需的子网数，每个子网可接受的主机以及地址的浪费之间取得平衡 (strike a balance)。</p>\n<h4 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_038.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_038\" /></p>\n<p>别名：扩展网络前缀</p>\n<p>定义我们用来构建网络的位数，以及描述主机地址的位数</p>\n<h4 id=\"计算一个子网\"><a class=\"anchor\" href=\"#计算一个子网\">#</a> 计算一个子网</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_039.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_039\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_040.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_040\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_041.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_041\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_042.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_042\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_043.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_043\" /><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_044.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_045.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_046.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_046\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_047.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_047\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_048.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_048\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_049.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_049\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_050.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_050\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_051.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_051\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_052.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_052\" /></p>\n<p>路由器需要做一个与运算，交换机不用</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_053.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_053\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_054.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_054\" /></p>\n<h2 id=\"第三层设备路由器\"><a class=\"anchor\" href=\"#第三层设备路由器\">#</a> 第三层设备 —— 路由器</h2>\n<h3 id=\"路径选择\"><a class=\"anchor\" href=\"#路径选择\">#</a> 路径选择</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_056.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_056\" /></p>\n<p>路由器选择下一路径，根据带宽、跳数、延迟等</p>\n<h3 id=\"ip地址-2\"><a class=\"anchor\" href=\"#ip地址-2\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_057.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_057\" /></p>\n<ol>\n<li>IP 地址是用软件实现的，是指设备所在的网络。</li>\n<li>路由器连接网络，每个网络必须具有<strong>唯一的网络号</strong>才能成功进行寻找路径。</li>\n<li>唯一的网络号包含在分配 (incorporated) 给该网络上每个设备的 IP 地址中</li>\n<li>IP 地址是逻辑的，是我们配置的。(不同于 MAC 地址)</li>\n<li>IP 地址是有层次，做转发的依据是网段而不是具体的 IP，同一网段设备都有相同的 IP 地址，也就是我们只要到达网段即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_058.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_058\" /></p>\n<p>路由器每个端口需要配一个地址，和所连接的网段是同一个信息的</p>\n<h3 id=\"路由器转发实例\"><a class=\"anchor\" href=\"#路由器转发实例\">#</a> 路由器转发实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_059.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_059\" /></p>\n<p>A5 发到 B5</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_060.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_060\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_061.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_061\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_062.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_062\" /></p>\n<p>查询路由表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_063.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_063\" /></p>\n<p>形成一个新的帧，MAC 地址是 B1 的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_064.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_064\" /></p>\n<ol>\n<li>\n<p>接口是路由器连接到网络的附加装置，在 IP 路由中也可以称为端口。这个 IP 地址往往被作为这个网络的网关</p>\n</li>\n<li>\n<p>每个接口必须具有一个单独的唯一网络地址。</p>\n<p>比如上图中 S1 和 S2 不能是相同的 IP 地址，否则会发生歧义，S0 不知道转发给谁，路由器的连接的网段一定要是不同的</p>\n</li>\n</ol>\n<h3 id=\"ip地址分配\"><a class=\"anchor\" href=\"#ip地址分配\">#</a> IP 地址分配</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_065.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_065\" /></p>\n<ol>\n<li>\n<p>静态地址分配 (Static addressing)</p>\n<ol>\n<li>为每个单独的设备配置一个 IP 地址</li>\n<li>您应该保留非常细致的记录，因为如果使用重复的 IP 地址，可能会出现问题。</li>\n</ol>\n</li>\n<li>\n<p>动态地址分配 (Dynamic addressing)</p>\n<p>有几种不同的方法可用于动态分配 IP 地址：</p>\n<ul>\n<li>RARP: Reverse Address Resolution Protocol. RARP：反向地址解析协议。发起请求</li>\n<li>BOOTP: BOOTstrap Protocol. BOOTP：BOOTstrap 协议。用于工作栈</li>\n<li>DHCP: Dynamic Host Configuration Protocol. (<strong>比较多用</strong>) DHCP：动态主机配置协议</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"arp-协议\"><a class=\"anchor\" href=\"#arp-协议\">#</a> ARP 协议</h2>\n<p>Address Resolution Protocol 地址解析协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_067.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_067\" /></p>\n<ol>\n<li>为了使设备进行通信，发送设备需要目标设备的<strong> IP 地址和 MAC 地址</strong>。</li>\n<li>ARP 使计算机能够查找与 IP 地址关联的计算机的 MAC 地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_068.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_068\" /></p>\n<ol>\n<li>目的方 IP 地址 -&gt; 目的方 MAC 地址</li>\n<li>需要知道对方的 MAC 地址，来形成数据地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_069.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_069\" /></p>\n<p>ARP Table</p>\n<p>ARP 缓存</p>\n<h3 id=\"arp操作mac地址解析\"><a class=\"anchor\" href=\"#arp操作mac地址解析\">#</a> ARP 操作，MAC 地址解析</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_070.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_070\" /></p>\n<p>此时目的地 MAC 地址不知道</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_071.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_071\" /></p>\n<p>向目的地地址请求，发出广播</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_072.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_072\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_073.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_073\" /></p>\n<p>C 回应</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_074.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_074\" /></p>\n<p>写入 ARP 缓存，发送正常的帧</p>\n<h3 id=\"目的地本地\"><a class=\"anchor\" href=\"#目的地本地\">#</a> 目的地本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_075.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_075\" /></p>\n<h3 id=\"网络交流\"><a class=\"anchor\" href=\"#网络交流\">#</a> 网络交流</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_076.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_076\" /></p>\n<h4 id=\"默认网关\"><a class=\"anchor\" href=\"#默认网关\">#</a> 默认网关</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_077.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_077\" /></p>\n<ol>\n<li>为了使设备与另一网络上的另一设备通信，您必须为其<strong>提供默认网关</strong>。</li>\n<li><strong>默认网关是路由器上连接到源主机所在网段的接口的 IP 地址。</strong></li>\n<li>为了使设备将数据发送到另一个网段上的设备的地址，源设备将数据<strong>发送到默认网关</strong>。</li>\n</ol>\n<h4 id=\"代理\"><a class=\"anchor\" href=\"#代理\">#</a> 代理</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_078.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_078\" /></p>\n<p>无法设置默认网关的情况</p>\n<ol>\n<li>代理 ARP 是 ARP 的一种变体 (variation)。</li>\n<li>如果源主机未配置默认网关。</li>\n</ol>\n<h3 id=\"目的地址不是本地\"><a class=\"anchor\" href=\"#目的地址不是本地\">#</a> 目的地址不是本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_079.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_079\" /></p>\n<p>路由器把自己的 MAC 地址给 Host Y</p>\n<h3 id=\"arp流程图\"><a class=\"anchor\" href=\"#arp流程图\">#</a> ARP 流程图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_080.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_080\" /></p>\n<h2 id=\"网络层服务\"><a class=\"anchor\" href=\"#网络层服务\">#</a> 网络层服务</h2>\n<h3 id=\"面向连接的网络服务\"><a class=\"anchor\" href=\"#面向连接的网络服务\">#</a> 面向连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_082.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_082\" /></p>\n<ol>\n<li>\n<p>面向连接的网络服务 —— 在数据传输之前，在传输方和接收方之间建立连接</p>\n<ul>\n<li>\n<p>就是任何发送数据的行为之前，先要建立好连接，协商好参数才会开始传输，所有数据进行有序传输</p>\n</li>\n<li>\n<p>网络情况导致数据出现问题，需要接受方进行一定处理来保证数据正确</p>\n</li>\n</ul>\n</li>\n<li>\n<p>传输过程中要保持连接距离，只有完成传输后才能断开连接。</p>\n</li>\n<li>\n<p>传输比较可靠，代价高。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_083.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_083\" /></p>\n<ol>\n<li>\n<p>（虚）电路交换 vs 面向连接的网络服务</p>\n<p>但是，两个名词并不一样。</p>\n</li>\n<li>\n<p>面向连接：在数据传输之前，与接收方建立一个连接</p>\n</li>\n<li>\n<p>所有 packet（报文）在同一条道路上依次传输，更普遍的，是在同一条虚电路上</p>\n</li>\n</ol>\n<p>虚电路要强于面向连接的，传输更加可靠，保证<strong>传输先后关系</strong>。</p>\n<h3 id=\"无连接的网络服务\"><a class=\"anchor\" href=\"#无连接的网络服务\">#</a> 无连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_084.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_084\" /></p>\n<p>他们分别对待每个数据包。</p>\n<p>IP 是<strong>无连接系统</strong>。</p>\n<h3 id=\"报文交换\"><a class=\"anchor\" href=\"#报文交换\">#</a> 报文交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_085.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_085\" /></p>\n<ol>\n<li>无连接网络与数据包交换：这两个词都不一样</li>\n<li>当数据包从源传递到目标时，它们可以：\n<ol>\n<li>切换到其他路径。(每一报文有各自的发送方和接收方，可以根据当前的网络情况，进行路由选择)</li>\n<li>乱序到达。</li>\n</ol>\n</li>\n<li>设备根据<strong>各种标准</strong>为每个数据包<strong>进行路径选择</strong>。不同的报文可能有不同的标准。</li>\n</ol>\n<p>大部分的 Connetionless network 都是基于 packet switched 进行实现，控制网络拥塞。</p>\n<h2 id=\"路由协议\"><a class=\"anchor\" href=\"#路由协议\">#</a> 路由协议</h2>\n<h3 id=\"网络协议操作\"><a class=\"anchor\" href=\"#网络协议操作\">#</a> 网络协议操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_087.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_087\" /></p>\n<p>ABC 之间都是通过帧进行计算的，直到第三层。</p>\n<h3 id=\"被动路由协议\"><a class=\"anchor\" href=\"#被动路由协议\">#</a> 被动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_088.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_088\" /></p>\n<ol>\n<li>为网络层提供支持的协议称为路由协议或可路由协议。</li>\n<li>IP 是网络层协议，因此，它可以通过互联网络进行路由。</li>\n</ol>\n<h3 id=\"不可路由协议\"><a class=\"anchor\" href=\"#不可路由协议\">#</a> 不可路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_089.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_089\" /></p>\n<ol>\n<li>\n<p>不可路由协议是不支持第 3 层的协议。</p>\n</li>\n<li>\n<p>这些不可路由协议中最常见的是 NetBEUI。</p>\n<ul>\n<li>\n<p>直接根据目的方的地址在局域网中进行生成定位</p>\n</li>\n<li>\n<p>这个协议不支持第三层，也就是跨局域网是不可以的。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NetBEUI 是一种小型，快速且高效的协议，仅限于在一个网段上运行</p>\n</li>\n</ol>\n<h3 id=\"可路由协议的寻址\"><a class=\"anchor\" href=\"#可路由协议的寻址\">#</a> 可路由协议的寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_090.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_090\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_091.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_091\" /></p>\n<h3 id=\"分类1静态vs动态\"><a class=\"anchor\" href=\"#分类1静态vs动态\">#</a> 分类 1：静态 vs 动态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_092.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_092\" /></p>\n<ol>\n<li>\n<p>静态路由：网络管理员在路由器中手动输入路由信息。</p>\n</li>\n<li>\n<p>动态路由</p>\n<ul>\n<li>\n<p>路由器可以在运行过程中互相学习信息。</p>\n</li>\n<li>\n<p>使用路由协议更新路由信息。</p>\n</li>\n<li>\n<p>RIP, IGRP, EIGRP, OSPF …</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_093.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_093\" /></p>\n<ol>\n<li>\n<p>静态路由</p>\n<ol>\n<li>\n<p>用于<strong>隐藏</strong>部分网络。</p>\n<p>安全 (不必进行路由表的交换)</p>\n</li>\n<li>\n<p>测试网络中的特定链接。</p>\n</li>\n<li>\n<p>在到达目标网络的路径只有一条通路时，维护路由表。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>动态路由</p>\n<ol>\n<li>维护路由表。</li>\n<li>以路由更新的形式及时分发信息。</li>\n<li>依靠路由协议共享知识。</li>\n<li>路由器可以调整以适应不断变化的网络状况。</li>\n<li>打开后会启动<strong>进程</strong>，按照不同的协议，和网上的不同设备学习信息，然后根据<strong>算法</strong>生成路由表</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"主动路由协议\"><a class=\"anchor\" href=\"#主动路由协议\">#</a> 主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_094.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_094\" /></p>\n<h3 id=\"被动路由协议和主动路由协议\"><a class=\"anchor\" href=\"#被动路由协议和主动路由协议\">#</a> 被动路由协议和主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_095.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_095\" /></p>\n<ol>\n<li>Routed Portocol 用于路由器之间，用来保证路由器之间连通 (完成转发)。</li>\n<li>Routing Protocol 用于做各自的路由表的生成：路由器彼此交换信息。</li>\n<li>Routing Protocol 决定 Routed Protocals</li>\n</ol>\n<h3 id=\"分类2igp-vs-egp\"><a class=\"anchor\" href=\"#分类2igp-vs-egp\">#</a> 分类 2：IGP VS EGP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_096.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_096\" /></p>\n<ol>\n<li>\n<p>动态路由</p>\n</li>\n<li>\n<p>内部网关协议 Interior Gateway  Protocols</p>\n<p>RIP，IGRP，EIGRP，OSPF</p>\n<p>可在自治系统 (autonomous  system，大的单位或者管理方) 中使用，该系统是一个主管部门下的路由器网络，例如公司 (corporate) 网络，学区的网络或政府机构的网络。</p>\n</li>\n<li>\n<p>外部网关协议 Exterior Gateway Protocols</p>\n<p>EGP，BGP</p>\n<p>用于在自治系统之间路由数据包。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_097.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_097\" /></p>\n<p>自治系统是<strong>逻辑</strong>的划分，而未必是物理层次的划分。</p>\n<h3 id=\"分类3igp分为两类dvp-vs-lsp\"><a class=\"anchor\" href=\"#分类3igp分为两类dvp-vs-lsp\">#</a> 分类 3：IGP 分为两类：DVP VS LSP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_098.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_098\" /></p>\n<p><strong>DVP</strong></p>\n<p>距离矢量协议 Distance-Vector Protocols</p>\n<p>RIP, IGRP</p>\n<ol>\n<li>从<strong>邻居</strong>的角度查看网络拓扑。(注意不基于全局)</li>\n<li>在路由器之间添加距离向量。(根据跳数来决定，经过一个路由器 + 1 一次)</li>\n<li>经常定期 (periodic) 更新。（<strong>定时</strong>）</li>\n<li>将路由表的<strong>副本</strong>传递到邻居路由器。</li>\n</ol>\n<p><strong>LVP</strong></p>\n<p>链路状态协议 Link State Protocols</p>\n<p>OSPF</p>\n<ol>\n<li>获取<strong>全局</strong>网络拓扑的通用视图。</li>\n<li>计算到其他路由器的<strong>最短路径</strong>。(基于带宽计算出来的 cost，形成 cost 拓扑图，然后计算出对应的路径代价作为评判依据)</li>\n<li><strong>事件</strong>触发的更新。</li>\n<li>将链接状态路由更新传递给其他路由器</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_099.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_100.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_100\" /></p>\n<p>Link State</p>\n<p>用 SPF 算法</p>\n<h3 id=\"rip路由信息协议dvp\"><a class=\"anchor\" href=\"#rip路由信息协议dvp\">#</a> RIP 路由信息协议（DVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_101.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_101\" /></p>\n<ol>\n<li>很受欢迎</li>\n<li>内部网关协议</li>\n<li>距离矢量协议</li>\n<li>基于跳数</li>\n<li>最远可达跳数 15</li>\n<li>每 30 秒更新</li>\n<li>不选择最快路径（选择跳数最短的路径）</li>\n<li>产生很多网络流量（network traffic)</li>\n<li>v2 是 v1 的一个进阶版本</li>\n</ol>\n<h3 id=\"igrp-vs-eigrpdvp\"><a class=\"anchor\" href=\"#igrp-vs-eigrpdvp\">#</a> IGRP vs EIGRP(DVP)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_102.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_102\" /></p>\n<ol>\n<li>思科知识产权的。</li>\n<li>内部网关协议。</li>\n<li>距离矢量协议</li>\n<li>指标由 ** 带宽 (bandwidth)，负载 (load)，延迟 (delay) 和可靠性 (reliability)** 组成。加权进行运算。</li>\n<li>IGRP 最大跳数为 255。</li>\n<li>每 90 秒更新一次。</li>\n<li>EIGRP 是 IGRP 的高级版本，它是<strong>混合</strong>路由协议 (不全是根据跳数来计算)。</li>\n</ol>\n<p>比 RIP 性能好很多</p>\n<h3 id=\"ospflvp\"><a class=\"anchor\" href=\"#ospflvp\">#</a> OSPF（LVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_103.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_103\" /></p>\n<ol>\n<li>最短路径优先协议</li>\n<li>内部网关协议</li>\n<li>链路状态协议，消耗内存和 CPU</li>\n<li>指标由带宽，速度，流量，可靠性和安全性组成，本科阶段只考虑带宽的。</li>\n<li>事件触发的更新。</li>\n<li>最快和什么有关？(最快指的是带宽)\n<ol>\n<li>和实时各条链路上的通信冗余有关，也和管理方案有关，简单来说是和带宽有关</li>\n<li>带宽表示为代价，带宽和代价成<strong>反比</strong>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"vlsmvariable-length-subnet-mask-可变长度子网掩码\"><a class=\"anchor\" href=\"#vlsmvariable-length-subnet-mask-可变长度子网掩码\">#</a> VLSM (Variable Length Subnet Mask) 可变长度子网掩码</h2>\n<h3 id=\"经典路由和可变长度子网掩码\"><a class=\"anchor\" href=\"#经典路由和可变长度子网掩码\">#</a> 经典路由和可变长度子网掩码</h3>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_105.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_105\" /></p>\n<ul>\n<li>\n<p>有类路由</p>\n<p>有类的路由协议要求单个网络使用相同的子网掩码。</p>\n<p>例如：网络 192.168.187.0 必须仅使用一个子网掩码，例如 255.255.255.0。</p>\n</li>\n<li>\n<p>可变长度子网掩码</p>\n<p>VLSM 只是一个特征，它允许单个自治系统的网络具有不同的子网掩码。</p>\n<p>可有效解决网络号浪费的问题</p>\n</li>\n</ul>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_106.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_106\" /></p>\n<ol>\n<li>使用 VLSM，网络管理员可以在主机少的网络上使用长掩码，而在主机多的子网上使用短掩码。(提供了很高的灵活性)</li>\n<li>如果路由协议允许 VLSM\n<ol>\n<li>在路由网络连接上使用 30 位子网掩码 255.255.255.252（两个路由器相连）</li>\n<li>用户网络的 24 位掩码 255.255.255.0</li>\n<li>或者，对于最多 1000 个用户的网络，甚至是 22 位掩码 255.255.252.0。(保留 10 位)</li>\n</ol>\n</li>\n<li>在 CIDR 的基础上发展的，报文中包含有子网掩码。</li>\n</ol>\n<h3 id=\"为什么使用vlsm\"><a class=\"anchor\" href=\"#为什么使用vlsm\">#</a> 为什么使用 VLSM</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_107.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_107\" /></p>\n<ol>\n<li>VLSM 允许组织在同一网络地址空间内使用多个子网掩码。</li>\n<li>实施 VLSM 通常被称为 &quot;子网划分&quot;，可用于最大化寻址效率。</li>\n<li>VLSM 是有助于缩小 IPv4 和 IPv6 之间差距的修改 (modifications) 之一。</li>\n</ol>\n<h3 id=\"vlsm的优缺点\"><a class=\"anchor\" href=\"#vlsm的优缺点\">#</a> VLSM 的优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_108.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_108\" /></p>\n<ol>\n<li>高效使用 IP 地址</li>\n<li>更好的路由聚合 (aggregation): 构建超网</li>\n</ol>\n<p>很多协议都支持 VLSM 协议，只有 RIP v1 不支持</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_109.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_109\" /></p>\n<p>会导致地址空间的浪费：广播地址和网络号都无法被使用。</p>\n<ol>\n<li>过去，建议不要使用第一个和最后一个子网。但是我们可以使用 Cisco IOS ver12.0 中的子网 0。</li>\n<li>从 IOS ver12.0 起，Cisco 路由器默认使用零子网。</li>\n<li>如果想要禁止零子网，使用该指令: <code>router(config)#no ip subnet-zero()</code></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_110.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_110\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_111.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_111\" /></p>\n<p>路由器之间不需要那么多地址，可以进行优化</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_112.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_113.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_113\" /></p>\n<p>为了计算 VLSM 子网，各个主机首先从地址范围分配最大的需求。需求级别应从<strong>最大到最小</strong>列出。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_114.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_114\" /></p>\n<p>Octet 八位字节</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_115.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_115\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_116.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_117.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_117\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_118.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_118\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_119.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_119\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_120.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_120\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_121.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_121\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_122.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_122\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_123.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_123\" /></p>\n<p>没被用过的子网才能进一步划分</p>\n<h3 id=\"路由聚集\"><a class=\"anchor\" href=\"#路由聚集\">#</a> 路由聚集</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_124.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_124\" /></p>\n<p>Classless InterDomain Routing (CIDR) 无类域间路由</p>\n<p>将 3 个 / 24 的子网合并成一个 / 16 的网络</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_125.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_125\" /></p>\n<p>多层聚集</p>\n<h4 id=\"如何计算路由聚集\"><a class=\"anchor\" href=\"#如何计算路由聚集\">#</a> 如何计算路由聚集</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_126.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_126\" /></p>\n<p>提取尽可能多的相同的位作为 net 位，其他作为 host 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_127.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_127\" /></p>\n<ul>\n<li>\n<p>减少路由表条目的数量。</p>\n</li>\n<li>\n<p>可用于隔离拓扑更改</p>\n</li>\n</ul>\n<h2 id=\"icmp\"><a class=\"anchor\" href=\"#icmp\">#</a> ICMP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_129.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_129\" /></p>\n<p>Internet Control Message Protocol 因特网控制报文协议</p>\n<h3 id=\"icmp报文格式\"><a class=\"anchor\" href=\"#icmp报文格式\">#</a> ICMP 报文格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_130.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_130\" /></p>\n<h3 id=\"两种icmp报文\"><a class=\"anchor\" href=\"#两种icmp报文\">#</a> 两种 ICMP 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_131.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_131\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_132.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_132\" /></p>\n<h3 id=\"icmp差错报告报文的数据字段的内容\"><a class=\"anchor\" href=\"#icmp差错报告报文的数据字段的内容\">#</a> ICMP 差错报告报文的数据字段的内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_133.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_133\" /></p>\n<h3 id=\"不应发送icmp差错报告报文的几种情况\"><a class=\"anchor\" href=\"#不应发送icmp差错报告报文的几种情况\">#</a> 不应发送 ICMP 差错报告报文的几种情况</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_134.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_134\" /></p>\n<h3 id=\"ping\"><a class=\"anchor\" href=\"#ping\">#</a> PING</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_135.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_135\" /></p>\n<p>PING Packet InterNet Groper</p>\n<h2 id=\"一些其他\"><a class=\"anchor\" href=\"#一些其他\">#</a> 一些其他</h2>\n<p>基于 IP 地址，而不是 MAC 地址。</p>\n<p>【IP 地址和 MAC 地址的区别】IP 地址是一个框架，有逻辑和层次。MAC 地址较为平坦（谁生产的商品）</p>\n<p>G 0/0/0 模块 板子 接口</p>\n<p>s 0/1/0 模块 板子 接口</p>\n<p>802.3</p>\n<p>The maximum size of the L-PDU for a 10Mbps network is 1500 bytes. Because 8 bytes are used within the L-PDU for the LLC header, this means that the maximum size of the data field is <strong>1492 bytes</strong>.</p>\n<p>802.11</p>\n<p>The frame body of the 802.11 packet can range from 0-<strong>2312 bytes</strong>.</p>\n<p>Routed protocol</p>\n<p>被动路由协议</p>\n<p>基于路由表</p>\n<p>Non-routable protobal</p>\n<p>不基于路由表</p>\n<p>多播地址</p>\n<p>D 类地址，开头为 1110</p>\n<p>多播地址范围为 224.0.0.0～239.255.255.255</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture03-%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture03-%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "Lecture03-链路层",
            "date_published": "2023-02-08T09:51:59.000Z",
            "content_html": "<h1 id=\"链路层\"><a class=\"anchor\" href=\"#链路层\">#</a> 链路层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_02\" /></p>\n<h2 id=\"数据链路层概述\"><a class=\"anchor\" href=\"#数据链路层概述\">#</a> 数据链路层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_03\" /></p>\n<p>数据链路层 data link layer 提供了：</p>\n<ul>\n<li>访问网络媒体</li>\n<li>跨媒体的物理传输</li>\n</ul>\n<p>第二层协议 procedure =  protocol 定义了：</p>\n<ul>\n<li>数据传输格式</li>\n<li>节点行为规范</li>\n</ul>\n<h3 id=\"局域网和数据链路层\"><a class=\"anchor\" href=\"#局域网和数据链路层\">#</a> 局域网和数据链路层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_04\" /></p>\n<p>主要工作</p>\n<ul>\n<li>错误识别 (notification)</li>\n<li>网络拓扑 (Network topology)</li>\n<li>流控制 (Flow control)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>第一层</th>\n<th>第二层</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无法与上层通信</td>\n<td>通过 LLC 与上层通信</td>\n</tr>\n<tr>\n<td>无法确定哪台主机将会传输或接受二进制数据</td>\n<td>通过 MAC 确定</td>\n</tr>\n<tr>\n<td>无法命名或标识主机</td>\n<td>通过寻址或命名过程来实现</td>\n</tr>\n<tr>\n<td>仅仅能描述比特流</td>\n<td>通过帧来组织 / 分组比特</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"提供的服务\"><a class=\"anchor\" href=\"#提供的服务\">#</a> 提供的服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_05\" /></p>\n<ol>\n<li>\n<p>(最弱，最不靠谱的) 没有确认 (acknowledgement) 的无连接 (Connectionless) 服务</p>\n<p>发送取出就行，不用等收到确认</p>\n<p>一般用于：</p>\n<ul>\n<li>可靠 (Reliable) 的链接 (上层以确保数据正确性)</li>\n<li>实时任务，比较高效</li>\n<li>适用于<strong>大多数局域网</strong>（局域网比较可靠，一般为本地链接）</li>\n</ul>\n</li>\n<li>\n<p>带有确认的无连接服务：</p>\n<p>不可靠的链接，例如无线网络：需要保证一定的通信质量 (比如无线网络的传输)，同时会损失一定的性能。</p>\n</li>\n<li>\n<p>带有确认的连接服务</p>\n<ul>\n<li>比如蓝牙：需要先确定绑定关系才能进行通信</li>\n<li>手机和手机之间的蓝牙连接需要确定一些信息</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"建立在mac上的常见局域网\"><a class=\"anchor\" href=\"#建立在mac上的常见局域网\">#</a> 建立在 MAC 上的常见局域网</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_06\" /></p>\n<ol>\n<li>\n<p>以太网 (Ethernet)</p>\n<p>逻辑上，总线拓扑 (信息流在线性总线上)</p>\n<p>物理上，星形或扩展星形</p>\n</li>\n<li>\n<p>令牌环 (Token Ring)</p>\n<p>逻辑上，环拓扑 (信息流在一个环中)</p>\n<p>物理上，星形拓扑</p>\n</li>\n<li>\n<p>FDDI (光纤分布式数据接口)</p>\n<p>光纤作为传输介质，后被以太网取代</p>\n<p>逻辑上，环拓扑 (信息流在一个环中)</p>\n<p>物理上，双环拓扑</p>\n</li>\n</ol>\n<h3 id=\"mac访问方法\"><a class=\"anchor\" href=\"#mac访问方法\">#</a> MAC 访问方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_07\" /></p>\n<p>确定性轮流 Deterministic</p>\n<p>​\t轮流式的 taking turns</p>\n<p>​\tToken Ring and FDDI (Fiber Distributed Data Interface，光纤分布式数据接口)</p>\n<p>​\t类似军棋，需要拿到令牌才能出棋</p>\n<p>争用式 Non-deterministic (probabilistic)</p>\n<p>​\t非确定性、概率性 —— 先到先得 first come, first sesrved</p>\n<p>​\tEthernet/802.3</p>\n<h4 id=\"确定式mac协议\"><a class=\"anchor\" href=\"#确定式mac协议\">#</a> 确定式 MAC 协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_08\" /></p>\n<ol>\n<li>特殊数据令牌在环中循环 (circulates)。</li>\n<li>当主机收到令牌时，它可以传输数据而不是令牌。这称为夺取 (seizing) 令牌。</li>\n<li>当发送的帧返回到发送器时，站点将发送新令牌，帧从环上去除或脱落 (stripped)。</li>\n</ol>\n<h4 id=\"非确定性mac协议\"><a class=\"anchor\" href=\"#非确定性mac协议\">#</a> 非确定性 MAC 协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_09\" /></p>\n<ol>\n<li>\n<p>此 MAC 协议称为<strong>带冲突检测的载波侦听多路访问 (CSMA/CD，Carrier Sense Multiple Access with Collision Detection)</strong></p>\n</li>\n<li>\n<p>为了使用这种共享介质技术，以太网允许网络设备为传输权进行仲裁 (arbitrate)。</p>\n</li>\n<li>\n<p>以太网是一种局域网，是<strong>无确认的无连接服务</strong>。</p>\n<p><strong>CSMA/CD Carrier Sense Multiple Access with Collision Detection 带冲突检测的载波侦听多路访问</strong><br />\n载波侦听，确保正确。</p>\n</li>\n</ol>\n<h3 id=\"局域网传输方法\"><a class=\"anchor\" href=\"#局域网传输方法\">#</a> 局域网传输方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_10\" /></p>\n<ul>\n<li>\n<p>单播</p>\n<p>将单个数据包从源发送到网络上的单个目标</p>\n</li>\n<li>\n<p>多播</p>\n<p>由发送到网络上特定节点子集的单个数据包组成</p>\n<p>这些节点都有同样的进程进行响应</p>\n</li>\n<li>\n<p>广播</p>\n<p>由单个数据包组成，该数据包传输到网络上的所有节点。</p>\n<p>广播的目的地址是 0x11111111</p>\n</li>\n</ul>\n<h2 id=\"以太网和csmacd\"><a class=\"anchor\" href=\"#以太网和csmacd\">#</a> 以太网和 CSMA/CD</h2>\n<h3 id=\"局域网标准\"><a class=\"anchor\" href=\"#局域网标准\">#</a> 局域网标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_12\" /></p>\n<ol>\n<li>定义物理层介质和接入设备</li>\n<li>在数据链路层定义设备的通信方式</li>\n<li>数据链路层定义了如何在物理介质上传输数据。</li>\n<li>数据链路层还定义了如何封装特定于协议的流量，以使去往不同上层协议的流量在到达堆栈时可以使用相同的通道。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_13\" /></p>\n<blockquote>\n<p>IEEE 802.2 对应 LLC，IEEE802.3 对应物理层和 MAC，以太网则覆盖物理层和链路层</p>\n</blockquote>\n<ol>\n<li>IEEE 将数据链路层分为两部分：\n<ol>\n<li>介质访问控制 (MAC)(转换到介质)</li>\n<li>逻辑链路控制 (LLC)(过渡到网络层)</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_14\" /></p>\n<ol>\n<li>乍一看，IEEE 标准的两种方式都违反了 OSI 模型。\n<ol>\n<li>首先，它定义自己的层 (LLC)，包括其接口等。</li>\n<li>其次，看来 MAC 层标准 802.3 和 802.5 跨越了第 2 层 / 第 1 层接口。\n<ul>\n<li>802.5 令牌环网</li>\n<li>802.3 覆盖了物理层和第二层下半层</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>但是，802.3 和 802.5 定义了用于构建特定技术的命名，框架和介质访问控制规则，都规范了对应的方案，不同方案不同解决标准</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_15\" /></p>\n<ol>\n<li>MAC 子层 (802.3)\n<ul>\n<li>定义如何在物理线路上传输帧 (frames)</li>\n<li>处理物理寻址</li>\n<li>定义网络拓扑</li>\n<li>定义线路规程</li>\n</ul>\n</li>\n<li>LLC 子层 (802.2)\n<ul>\n<li>逻辑上标识不同的协议类型，然后将其封装，兼容不同介质的访问</li>\n<li>使用<strong> SAP</strong> 标识符执行逻辑标识，用来做发送的位置的标识</li>\n<li>LLC 帧的类型取决于上层协议期望的标识符，对于上层服务进行支持</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"mac-子层\"><a class=\"anchor\" href=\"#mac-子层\">#</a> MAC 子层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_16\" /></p>\n<p>注意是字节不是字</p>\n<h4 id=\"前导码preamble\"><a class=\"anchor\" href=\"#前导码preamble\">#</a> 前导码 preamble</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_17\" /></p>\n<p>前同步码告诉接收站一帧即将到来，前面 7 个字节是 0x10101010，最后一个是 0x10101011 (用于进行时钟同步)。</p>\n<p>使用曼彻斯特编码，0 电平的时候无电压。</p>\n<h4 id=\"目的地址-源地址\"><a class=\"anchor\" href=\"#目的地址-源地址\">#</a> 目的地址、源地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_18\" /></p>\n<p>先看目的地址的好处：交换机等看到目的地址就可以进行判断，提高效率</p>\n<h4 id=\"长度字段\"><a class=\"anchor\" href=\"#长度字段\">#</a> 长度字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_19\" /></p>\n<p>早期这里是长度字段，以太网二用类型取代长度字段。不需要长度参数也可以算出帧的长度。</p>\n<h4 id=\"数据字段\"><a class=\"anchor\" href=\"#数据字段\">#</a> 数据字段</h4>\n<p>最小的<strong> 46</strong> 字节，最多 1500 字节。</p>\n<p><strong>4 个 64 字节大小帧同时发送才能保证占据全部的链路</strong>，100m 链路，用 512us，就是 512bit，也就是 64 字节。64-（6+6+2+4）=46 。【前引导码不算帧长度】</p>\n<p>如果没有 46，则补零。</p>\n<h4 id=\"fcs字段\"><a class=\"anchor\" href=\"#fcs字段\">#</a> FCS 字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_20\" /></p>\n<p>循环冗余校验 (cyclic redundancy check) 值 —— 自己补充</p>\n<p>固定 4 字节</p>\n<h3 id=\"llc子层\"><a class=\"anchor\" href=\"#llc子层\">#</a> LLC 子层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_21\" /></p>\n<ol>\n<li>\n<p>逻辑链路控制 (LLC) 子层管理单个链路管理设备之间的通信</p>\n</li>\n<li>\n<p>LLC 在 IEEE 802.2 规范中定义，并且同时支持<strong>无连接和面向连接</strong>的服务。</p>\n<p><strong>可以服务于总线、令牌环</strong></p>\n</li>\n<li>\n<p>LLC 子层允许部分数据链接层独立于现有技术运行，单个 LLC 子层可以与不同的 MAC 子层兼容 (compatible)。</p>\n</li>\n</ol>\n<h4 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_22\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_23\" /></p>\n<ol>\n<li>\n<p>LLC 获取网络协议数据 (数据包，packet)，并添加更多控制信息以帮助将数据包传递到其目的地。</p>\n</li>\n<li>\n<p>它添加了 802.2 规范的两个寻址组件，以在每一端标识上层协议：</p>\n<ul>\n<li>目标服务访问点 (DSAP)</li>\n<li>源服务访问点 (SSAP)</li>\n</ul>\n<p>基于 SAP 规范进行地址和分配。</p>\n</li>\n<li>\n<p>然后，此重新打包的数据将传输到 MAC 以进一步封装数据。</p>\n</li>\n</ol>\n<h3 id=\"介质访问控制\"><a class=\"anchor\" href=\"#介质访问控制\">#</a> 介质访问控制</h3>\n<h4 id=\"mac地址\"><a class=\"anchor\" href=\"#mac地址\">#</a> MAC 地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_25\" /></p>\n<ol>\n<li>MAC 地址为<strong> 48 位</strong>，始终表示为<strong> 12 个十六进制数字</strong>。</li>\n<li>IEEE 管理的前 6 个十六进制数字 (从左到右) 标识制造商或销售商 (供应商)，并包括<strong>组织唯一标识符 (OUI)</strong>。\n<ul>\n<li>OUI 是生产的厂商，比如 0060CF 就是 Cisco 的，然后可以使用后面 24 个 bit 进行自己的编码</li>\n<li>一个厂商是可以买多个 OUI 的，也可以几个单位买一个 OUI</li>\n<li>第一个 bit 取 0 表示这个地址是一个单播地址，取 1 则是表示是一个多播地址。</li>\n<li>第二个 bit 取 0 表示这个地址是全球唯一地址，取 1 则表示是本地唯一地址</li>\n</ul>\n</li>\n<li>其余的 6 位十六进制数字包括接口序列号，由特定供应商管理。</li>\n</ol>\n<h4 id=\"ethernet-8023-广播\"><a class=\"anchor\" href=\"#ethernet-8023-广播\">#</a> Ethernet 802.3 广播</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_26\" /></p>\n<ol>\n<li>广播\n<ul>\n<li>目标 MAC：全 1 (FFFF.FFFF.FFFF)</li>\n<li>保证所有的设备都能收到这个地址</li>\n<li>会导致非目的主机进行地址解析</li>\n</ul>\n</li>\n<li>广播会不必要地打断基站，从而严重影响基站的性能</li>\n<li>因此，仅在以下情况下才应使用广播：\n<ul>\n<li>目的地的 MAC 地址未知</li>\n<li>目的地是所有主机</li>\n</ul>\n</li>\n<li>非必要情况下我们不希望有很多广播，有可能会导致广播风暴，需要严格限制广播的使用</li>\n</ol>\n<h4 id=\"以太网操作\"><a class=\"anchor\" href=\"#以太网操作\">#</a> 以太网操作</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_27\" /></p>\n<p>上图中 1 是总线拓扑，1 发送的数据帧会传达给所有在这个总线上的设备，非目的主机检查目的地址和本机 MAC 地址不同，则会将该帧丢弃。</p>\n<ol>\n<li>以太网是广播网络，也就是说，每个站都可以看到所有帧，而不管它们是否是目的地</li>\n<li>通过 MAC 地址判断站点是否为目的地</li>\n<li>目标站在 OSI 层上发送数据。其他节点丢弃帧</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_28\" /></p>\n<ol>\n<li>听然后传送</li>\n<li>广播 jam 信号\n<ul>\n<li>是一个 32bit 的全 1 的数据帧表示出现了冲突</li>\n<li>标准思科认为是所有侦听的设备都会发送</li>\n</ul>\n</li>\n<li>发生碰撞 (Collision)\n<ul>\n<li>两个设备同时使用链路发送电信号，则会出错。</li>\n<li>如果有冲突，则会一直侦听总线，等到空闲则可以组织数据帧发送</li>\n<li>仍然存在问题 —— 多台主机同时进行组织数据帧进行发送</li>\n<li>因为同时还在侦听总线，如果出现冲突，则会发出 jam 信号，只要有 0 或者 1 传输，有电平则会表示使用</li>\n</ul>\n</li>\n<li>设备退回 (back off) 适当的时间，然后重新传输 (retransmit), 发生冲突的设备，根据特定的回退算法</li>\n</ol>\n<p>帧至少为 64 字节，数据部分至少为 46 字节。</p>\n<h2 id=\"以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd\"><a class=\"anchor\" href=\"#以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd\">#</a> 以太网 和 带冲突检测的载波侦听多路访问 Ethernet and CSMA/CD</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_29\" /></p>\n<ol>\n<li>首先设备要发送数据</li>\n<li>开始侦听链路是非忙，如果忙，则过一阵来再看看</li>\n<li>如果不忙，则开始准备发送\n<ul>\n<li>如果有错误，则到 9，表示有冲突发送，广播一个 jam sighnal，把自己尝试的次数 + 1 (重发有一定限度)</li>\n<li>尝试次数过多，会像上层协议传输网络不可用</li>\n<li>尝试次数还可，则到 13 计算一个回退时间，来再次尝试，回退时间单位，会保证 A 和 D 的时间差能保证第一个人已经用完电路来避免冲突。</li>\n</ul>\n</li>\n<li>如果没有错误，则一直传输到结束为止</li>\n</ol>\n<p>什么介质决定用什么网卡</p>\n<p>曼彻斯特编码，从低到高或从高到低为 0，选取一个方案不冲突即可。</p>\n<p>网络接入层<br />\n Internet access layer</p>\n<h3 id=\"pdu协议数据单元\"><a class=\"anchor\" href=\"#pdu协议数据单元\">#</a> PDU 协议数据单元</h3>\n<p>Protocol Data Unit</p>\n<p>在 OSI 模型系统里，PDU 和最底下四层相关。</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclODklQTklRTclOTAlODYlRTUlQjElODI=\">物理层</span>（一层）PDU 指<strong>数据位</strong>（<strong>Bit</strong>）。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTYlOTUlQjAlRTYlOEQlQUUlRTklOTMlQkUlRTglQjclQUYlRTUlQjElODI=\">数据链路层</span>（二层）PDU 指<strong>数据帧</strong>（<strong>Frame</strong>）。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTclQkQlOTElRTclQkIlOUMlRTUlQjElODI=\">网络层</span>（三层）PDU 指<strong>数据包</strong> [<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvemgtaGFucy8lRTUlOEQlOEYlRTglQUUlQUUlRTYlOTUlQjAlRTYlOEQlQUUlRTUlOEQlOTUlRTUlODUlODMjY2l0ZV9ub3RlLTE=\">注 1]</span>（<strong>Packet</strong>）或<strong>数据报</strong>（<strong>Datagram</strong>）[<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvemgtaGFucy8lRTUlOEQlOEYlRTglQUUlQUUlRTYlOTUlQjAlRTYlOEQlQUUlRTUlOEQlOTUlRTUlODUlODMjY2l0ZV9ub3RlLWNmLXBhY2tldC0y\">1]</span>。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTQlQkMlQTAlRTglQkUlOTMlRTUlQjElODI=\">传输层</span>（四层）PDU 指<strong>数据段</strong>（<strong>Segment</strong>）。</li>\n</ol>\n<p>第五层或以上为<strong>数据</strong>（<strong>data</strong>）。</p>\n<h2 id=\"无线局域网与csmaca\"><a class=\"anchor\" href=\"#无线局域网与csmaca\">#</a> 无线局域网与 CSMA/CA</h2>\n<h3 id=\"无线局域网\"><a class=\"anchor\" href=\"#无线局域网\">#</a> 无线局域网</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_31\" /></p>\n<p>无线局域网</p>\n<ul>\n<li>基于单元的通信</li>\n<li>基站发送的信号只能被附近的基站接收</li>\n<li>短距离传输</li>\n</ul>\n<p>无线局域网标准</p>\n<ul>\n<li>IEEE 802.11</li>\n<li>IEEE 802.11b</li>\n<li>IEEE 802.11a</li>\n<li>IEEE 802.11g</li>\n<li>IEEE 802.11n</li>\n</ul>\n<p>无线局域网分为两类</p>\n<ol>\n<li>有基础设施拓扑网络 (Infrastructure mode)</li>\n<li>无基础设施拓扑网络 (ad-hoc mode)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_32\" /></p>\n<p>IEEE 802.11</p>\n<ul>\n<li>一项关键技术：<strong>直接序列扩频 (DSSS，Direct Sequence Spread Spectrum)</strong></li>\n<li>DSSS 适用于在 1 到 2 Mbps 范围内运行的无线设备，上面的这个速率在实际生活场景中要除以 2，因为无线通信都是有确认的，所以一般我们认为信道一来一回才有一次通信。</li>\n<li>DSSS 可以高达 11 Mbps 的速度运行，但在 2 Mbps 以上时将不被视为兼容</li>\n<li>也称为 Wi-Fi™，无线保证度，是星型拓扑，基站作为中心</li>\n</ul>\n<p>IEEE 802.11b(Wi-Fi)</p>\n<ul>\n<li>传输能力提高到 11 Mbps（采用高速直连技术，将传输能力提高好几倍）</li>\n<li>所有 802.11b 系统都向后兼容 (backward compliant)，因为它们还仅针对 DSSS 支持 1 和 2 Mbps 数据速率的 802.11。</li>\n<li>通过使用与 802.11 不同的编码技术来实现 (Achieves) 更高的数据吞吐率</li>\n<li>在 2.4 GHz 内运行，解决了 802.11 中出现的部分问题</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_33\" /></p>\n<p>IEEE 802.11a</p>\n<ul>\n<li>涵盖在 5 GHz 传输频带中运行的 WLAN 设备</li>\n<li>运行在 5GHz 上</li>\n<li>802.11a 能够提供 54 Mbps 的数据吞吐量，并且采用称为 &quot;速率加倍&quot; 的专有技术已达到 108 Mbps。</li>\n<li>实际上，更标准的等级是 20-26 Mbps。</li>\n<li>传播距离相比 802.11 和 802.11b 短，信号衰减厉害，但是对于多用户上网的支持更好了。</li>\n<li>使用<strong>正交频分复用</strong>技术。</li>\n</ul>\n<p>proprietary 所有的，专利的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_34\" />IEEE 802.11g</p>\n<ul>\n<li>可以提供与 802.11a (54Mbps) 相同的功能，但具有 802.11b 的向后兼容性</li>\n<li>使用 ** 正交频分复用 (OFDM，Orthogonal Frequency Division Multiplexing)** 技术。</li>\n</ul>\n<p>IEEE 802.11n: 下一代的 WLAN</p>\n<ul>\n<li>提供的带宽是 802.11g 的两倍，即 108Mbps，理论上可达 500-600Mbps。实际上是 100M 左右</li>\n<li>目前使用比较多的方案。</li>\n</ul>\n<h3 id=\"无线局域网拓扑\"><a class=\"anchor\" href=\"#无线局域网拓扑\">#</a> 无线局域网拓扑</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_35\" /></p>\n<p>分为 infrastructure mode 和 ad-hoc mode</p>\n<p>AP 形成星型拓扑，基站之间不相互连接，只与 AP 相连，形成基本服务集 BSS</p>\n<p>多个 AP 形成扩展的服务集 ESS</p>\n<h4 id=\"infrastructure-mode\"><a class=\"anchor\" href=\"#infrastructure-mode\">#</a> Infrastructure Mode</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_36\" /></p>\n<ol>\n<li>\n<p>基本服务集 (BSS) 包括一个基站 (BS) 和几个无线主机</p>\n<ul>\n<li>所有主机都可以在本地 BSS 中直接相互通信</li>\n<li>基站中两个主机之间是不直接互相通信的。</li>\n<li>同一个 BSS 中的主机间直接通信</li>\n</ul>\n</li>\n<li>\n<p>接入点 (AP) 充当基础架构模式的基站 (BS)</p>\n<ul>\n<li>AP 硬连线到有线 (cabled) 局域网，以提供 Internet 访问和与有线网络的连接</li>\n<li>安装 AP 后，将分配服务集标识符 (SSID) 和通道</li>\n<li>单元格的范围是 91.44 至 152.4 米 (300 至 500 英尺)</li>\n<li>速率一般约为百兆，覆盖大概 100m 左右</li>\n</ul>\n</li>\n<li>\n<p>一个 BSS 可以通过分发系统 (DS) 连接到另一个 BSS，并构造一个扩展服务集 (ESS)。</p>\n<p>家里的路由器既有 AP 的功能又有路由器功能，但是理论上只应该是 AP 的功能，一般我们认为家用路由器是一个 AP</p>\n</li>\n</ol>\n<h3 id=\"accessing-procedure访问过程\"><a class=\"anchor\" href=\"#accessing-procedure访问过程\">#</a> Accessing Procedure 访问过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_37\" /></p>\n<ol>\n<li>在 WLAN 中激活客户端时，它将开始 &quot;侦听&quot; 与之 &quot;关联&quot; 的兼容设备</li>\n<li>这被称为 &quot;扫描&quot;\n<ul>\n<li>主动扫描</li>\n<li>被动扫描</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"主动扫描\"><a class=\"anchor\" href=\"#主动扫描\">#</a> 主动扫描</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_38\" /></p>\n<ol>\n<li>希望加入网络的无线节点发送探测 (probe) 请求。</li>\n<li>探测请求将包含它希望加入的网络的服务集标识符 (SSID)</li>\n<li>当找到具有相同 SSID 的 AP 时，该 AP 将发出探测响应</li>\n<li>身份验证（authentication）和关联步骤已完成</li>\n<li>移动端发出请求帧，但是 AP 不发送自己的信息，AP 比较安全。不用发送出自己的 SSID</li>\n</ol>\n<h4 id=\"被动扫描\"><a class=\"anchor\" href=\"#被动扫描\">#</a> 被动扫描</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_39\" /></p>\n<ol>\n<li>侦听由 AP（有基础设施拓扑网络）或对等节点 (无基础设施拓扑网络) 传输的信标管理帧 (beacon management frames)，包含自己的 SSID 信息</li>\n<li>当节点接收到包含要尝试加入的网络的 SSID 的信标时，将尝试加入该网络。</li>\n<li>被动扫描是一个连续的过程，并且随着信号强度的变化，节点可能会与 AP 关联或分离，也是因为强度变化，所以连接状态需要维持。</li>\n</ol>\n<h3 id=\"无线局域网的帧结构\"><a class=\"anchor\" href=\"#无线局域网的帧结构\">#</a> 无线局域网的帧结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_40\" /></p>\n<ol>\n<li>\n<p>WLAN 不使用标准的 802.3 帧。</p>\n</li>\n<li>\n<p>框架有三种类型</p>\n<ul>\n<li>控制帧 (Control Frames)</li>\n<li>管理帧 (Management frames)</li>\n<li>数据帧 (仅数据帧类似于 802.3 帧)</li>\n</ul>\n</li>\n<li>\n<p>无线数据帧和 802.3 帧的有效载荷 (payload) 为 1500 字节</p>\n<ul>\n<li>\n<p>但是，以太帧不能超过 1518 字节，而无线帧则可能高达<strong> 2346 字节</strong>。</p>\n<p>是因为在无线情况下使用的是有确认的信息，增加无线帧有效数据大小，来对冲确认的信息的损耗。</p>\n</li>\n<li>\n<p>通常，WLAN 帧大小将被限制为 1518 字节，因为它最常连接到有线以太网。（有线以太网属于有线局域网，以太帧限制在 1518 字节）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数据帧结构80211-wlan无线局域网\"><a class=\"anchor\" href=\"#数据帧结构80211-wlan无线局域网\">#</a> 数据帧结构（802.11 WLAN 无线局域网）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_41\" /></p>\n<p>WEP 规格，Wired Equivalent Privacy</p>\n<p>有基础设施网络拓扑用地址 1、2、3</p>\n<p>无基础设施网络拓扑用地址 4</p>\n<h4 id=\"数据帧中的地址\"><a class=\"anchor\" href=\"#数据帧中的地址\">#</a> 数据帧中的地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_42\" /></p>\n<p>扩展星型拓扑</p>\n<p>A 发往 AP，AP 发往 B</p>\n<h3 id=\"csmaca\"><a class=\"anchor\" href=\"#csmaca\">#</a> CSMA/CA</h3>\n<h4 id=\"为什么我们需要csmaca\"><a class=\"anchor\" href=\"#为什么我们需要csmaca\">#</a> 为什么我们需要 CSMA/CA</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_43\" /></p>\n<p>用于无基站的情况</p>\n<p>冲突 (Collisions) 可能发生在 WLAN 无线局域网中，但是站点只能知道附近的传输，因此 CSMA/CD 不是一个好的选择。【有线局域网是总线模式，可以知道所有的传输】</p>\n<ul>\n<li>隐藏站问题：当 A 将数据传输到 B 时，C 无法检测到 A 和 B 之间的传输，因此 C 可能会决定将数据传输到 B 并导致 B 发生冲突。</li>\n<li>暴露站问题：当 B 将数据传输到 A 时，C 可以检测到传输，因此 C 不会将数据传输到 D。但这是一个错误。</li>\n</ul>\n<h4 id=\"多路复用机制\"><a class=\"anchor\" href=\"#多路复用机制\">#</a> 多路复用机制</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_44\" /></p>\n<p>以太网（有线局域网）</p>\n<ul>\n<li>信号被传输到电缆上的<strong>所有</strong>站。</li>\n<li>发送站检测到冲突。</li>\n<li>一次只能在信道上发送一个有效帧。</li>\n</ul>\n<p>WLAN （无线局域网）</p>\n<ul>\n<li>信号通过电缆传输到发送站附近的站 (相邻，不可以跨越有效距离发送)</li>\n<li>MAC 协议必须尽最大努力确保只有一个相邻接收基站的发送点</li>\n<li>由接收基站来确定冲突。</li>\n<li>多路传输，一次可以在通道上传输<strong>多</strong>个有效 (effective) 帧</li>\n</ul>\n<h4 id=\"csmaca-避免冲突的载波侦听多路访问\"><a class=\"anchor\" href=\"#csmaca-避免冲突的载波侦听多路访问\">#</a> CSMA/CA 避免冲突的载波侦听多路访问</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_45\" /></p>\n<p>CSMA/CA(Carrier Sense Multiple Access with Collision Avoidance)</p>\n<p>RTS Request To Send</p>\n<p>CTS Clear To Send</p>\n<p>有可能在 B 处发生冲突，C 由于与 B 较远，未听到 CTS，与 A 同时发送</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_46\" /></p>\n<ol>\n<li>\n<p>为避免冲突，802.11 所有站点在完成一个事务后必须等待一段时间才能进行下一个动作，这个时间被称为 IFS，具体取决于帧的类型。</p>\n</li>\n<li>\n<p>SIFS (Short interframe space): 短帧间间隔 28us，用于本设备接受发送状态转换，不足够源站接受 CTS</p>\n</li>\n<li>\n<p>DIFS (Distributed Inter-frame Spacing)：分布协调功能帧间间隔 128us (多个节点进行协调)</p>\n</li>\n<li>\n<p>应答 CTS (Clear to Send)，等待 SIFS (Short interframe space) 后发送数据</p>\n</li>\n<li>\n<p>在收到 ACK 之后，一次通讯结束</p>\n</li>\n<li>\n<p>过程中的时间写入帧的<strong>时间数据标记位</strong></p>\n</li>\n<li>\n<p>NAV (网络分配向量)：网络协调时间，时间长度；</p>\n<p>NAV 计算方式在后面，NAV 是一开始就进行预估了，别的节点抢到了节点时，我们会减掉别人正常通信的时间，不是一直累积下去的情况。</p>\n</li>\n<li>\n<p>这次通讯结束，下一次经过争用窗口来抢</p>\n</li>\n<li>\n<p>源站需要收到确认信息 CTS 才能接着发送信息</p>\n</li>\n<li>\n<p>多个源站向目的站发 RTS 给目的站，目的站发现冲突，告诉各自站点，PPT 处理的是 RTS</p>\n</li>\n</ol>\n<h4 id=\"csmaca实例\"><a class=\"anchor\" href=\"#csmaca实例\">#</a> CSMA/CA 实例</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_47\" /></p>\n<h4 id=\"实际数据传输率\"><a class=\"anchor\" href=\"#实际数据传输率\">#</a> 实际数据传输率</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_48\" /></p>\n<ol>\n<li>当源节点发送帧时，接收节点将返回肯定确认 (ACK)。\n<ul>\n<li>这可能导致消耗 50％的可用带宽 (bandwidth)。</li>\n<li>在额定为 11 Mbps 的 802.11b 无线局域网上，这会将实际数据吞吐量降低到最大 5.0 到 5.5Mbps。</li>\n</ul>\n</li>\n<li>网络性能也会受到信号强度的影响\n<ul>\n<li>随着信号变弱，可以调用<strong>自适应速率选择 (ARS)</strong></li>\n<li>信号会受到距离影响，越远信号越弱，功率越低，带宽不能稳定到初始带宽</li>\n<li>传输单元会将数据速率从 11 Mbps 降低到 5.5Mbps，从 5.5 Mbps 降低到 2 Mbps 或 2 Mbps 到 1 Mbps。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"wlan和ethernet区别\"><a class=\"anchor\" href=\"#wlan和ethernet区别\">#</a> WLAN 和 Ethernet 区别</h3>\n<table>\n<thead>\n<tr>\n<th>Ethernet</th>\n<th>WLAN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>信号被传输到连接在线缆上的所有站点上</td>\n<td>信号只被传输到接近发送站点的站点</td>\n</tr>\n<tr>\n<td></td>\n<td>接受站点检测冲突</td>\n</tr>\n<tr>\n<td>只会有一个有效帧在信道上传播</td>\n<td>会有多个有效帧同时在信道上传播</td>\n</tr>\n<tr>\n<td></td>\n<td>MAC 协议必须尽可能保证只有发送站点接近接收站点</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第二层设备\"><a class=\"anchor\" href=\"#第二层设备\">#</a> 第二层设备</h2>\n<h3 id=\"nics网卡\"><a class=\"anchor\" href=\"#nics网卡\">#</a> NICs 网卡</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_50\" /></p>\n<p>NIC 执行重要的第 2 层数据链路层功能：</p>\n<ol>\n<li>逻辑链接控制 - 与计算机上层通信</li>\n<li>媒体访问控制 - 提供对共享访问媒体的结构化访问</li>\n<li>命名 - 提供唯一的 MAC 地址标识符</li>\n<li>成帧 - 封装过程的一部分，打包比特以进行传输。</li>\n<li>发信号 - 使用内置收发器创建信号并与媒体接口 (也有第一层功能，01 序列变成信号发出去)</li>\n</ol>\n<h3 id=\"bridges网桥\"><a class=\"anchor\" href=\"#bridges网桥\">#</a> Bridges 网桥</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_51\" /></p>\n<ol>\n<li>\n<p>网桥将流量划分为多个部分，并根据 MAC 地址而不是协议对流量进行过滤。</p>\n</li>\n<li>\n<p>网桥可以通过减少较大的冲突域来提高网络性能。</p>\n</li>\n<li>\n<p>在从网络的一个网段到其他网段的流量较低的情况下，网桥最有效。</p>\n<p>当网段之间的流量变大时，网桥会成为瓶颈 (bottleneck)，并减慢通信速度。(网桥将数据帧检验存储再转发)</p>\n</li>\n</ol>\n<h4 id=\"透明网桥\"><a class=\"anchor\" href=\"#透明网桥\">#</a> 透明网桥</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_52\" /></p>\n<ol>\n<li>Mac 表放到缓存的位置，刚启动时是空表，之后在发送中逐渐学习。\n<ul>\n<li>Mac 地址表是有生命周期的，如果计时超过一个阈值没有刺激刷新 Mac 表，则会刷新表</li>\n<li>比如笔记本更换接入地址。</li>\n</ul>\n</li>\n<li>&quot;透明&quot; 指局域网中的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的</li>\n<li>原理\n<ol>\n<li>从 A 发出的帧从接口 x 进入了网桥，则从这个接口发出帧就一定能达到 A。网桥每收到一个帧，就记下其源地址和进入网桥的接口，写入转发表。</li>\n<li>在收到一个新的帧时，在转发表中匹配此帧的目的地址，找到对应的接口并转发。</li>\n<li>在网桥的转发表中写入的信息除了地址和接口外，还有帧进入网桥的时间，因为\n<ul>\n<li>拓扑可能经常变化</li>\n<li>站点也可能会更换适配器 (这就改变了站点的地址)</li>\n<li>站点并非总是处于工作状态</li>\n<li>把每个帧到达网桥的时间登记下来，就可以在转发表中只保留网络拓扑的最新状态信息，使得网桥中的转发表能反映当前网络的最新拓扑</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_53\" /></p>\n<ol>\n<li>问题：网络上的设备要发送数据但不知道目标地址时。\n<ul>\n<li>向网络上的所有设备发送<strong>广播</strong>。因为希望数据帧能够发送到全网，尽可能到达目的地</li>\n<li>由于网络上的每个设备都必须注意此类广播，因此<strong>网桥始终会转发这些广播</strong>。</li>\n</ul>\n</li>\n<li>广播过多会导致<strong>广播风暴</strong>，并且可能导致：\n<ul>\n<li>网络延时 (network time-outs)</li>\n<li>交通减速 (traffic slowdowns)</li>\n<li>低于可接受的性能</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"源路由网桥\"><a class=\"anchor\" href=\"#源路由网桥\">#</a> 源路由网桥</h4>\n<ol>\n<li>发送帧时将详细的路由信息放在帧的首部中，从而使每个经过的网桥都了解帧的路径</li>\n<li>在令牌环网络中被广泛使用</li>\n<li>原理 —— 源站以广播方式向目的站发送一个发现帧，每个发现帧都记录所经过的路由。发现帧到达目的站时就沿各自的路由返回源站。源站在得知这些路由后，从所有可能的路由中选择出一个最佳路由。凡从该源站向该目的站发送的帧的首部，都必须携带源站所确定的这一路由信息。</li>\n</ol>\n<h3 id=\"switches\"><a class=\"anchor\" href=\"#switches\">#</a> Switches</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_54\" /></p>\n<p>执行两个基本操作：</p>\n<ol>\n<li>帧交换：在输入介质 (medium) 上接收帧，然后将其传输到输出介质</li>\n<li>维护交换操作：交换器建立和维护交换表并搜索回路。 路由器构建并维护路由表和交换表。(STB 协议避免回路)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_55\" /></p>\n<p>交换机可以分离冲突域。</p>\n<p>交换是一项通过减少流量和提高带宽来缓解以太网 LAN 拥塞 (alleviates congestion) 的技术.</p>\n<ol>\n<li>交换机创建专用 (dedicated) 的网段或点对点连接，并将这些网段连接到交换机内的虚拟网络中。</li>\n<li>之所以称为<strong>虚拟电路</strong>，是因为它仅在两个端口需要通信时才存在，并且在交换机内建立。网桥内部有一个高带宽的总线 (一般内部母线带宽是端口带宽的 10 倍)</li>\n<li>您可以将每个交换机端口视为一个微桥 (micro-bridge)。该过程称为微分段 (microsegmentation)。</li>\n<li>每个交换机端口将介质的全部带宽提供给每个主机</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_56\" /></p>\n<p>局域网交换机可减少冲突域的大小</p>\n<p>但是，连接到交换机的所有主机仍位于同一广播域中。</p>\n<ol>\n<li>也就是说，通过 LAN 交换机连接的所有其他节点仍将看到来自一个节点的广播。</li>\n<li><strong>交换机不能划分广播域</strong> (端口 -&gt; 所有端口转发)</li>\n</ol>\n<p>交换机连接的是一个局域网，而路由器连接的是不同局域网。</p>\n<h4 id=\"交换机划分冲突域\"><a class=\"anchor\" href=\"#交换机划分冲突域\">#</a> 交换机划分冲突域</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_57\" /></p>\n<ol>\n<li>\n<p>转发的速度明显加快，因为它们在<strong>硬件</strong>中进行切换，而网桥在<strong>软件</strong>中进行切换。</p>\n</li>\n<li>\n<p>可以使用交换机连接 10 Mbps 以太网 LAN 和 100 Mbps 以太网 LAN。</p>\n</li>\n<li>\n<p>在交换式以太网实现中，可用带宽可以接近 100％。</p>\n</li>\n<li>\n<p>共享以太网网络的容量不足其全部容量的 30％至 40％时，其性能最佳。</p>\n</li>\n<li>\n<p>一些交换机支持直通交换，这减少了延迟和延迟，而网桥仅支持存储转发交换 (存储转发，存下来检验转发)</p>\n<p>直通交换：快速转发，不做校验，只看前 6 字节的 MAC 地址（目的地址）。局域网下，网速比较快，传输速率高，网线比较短，可以认为是基本没有错误的，所以可以进行直通转发</p>\n</li>\n</ol>\n<h3 id=\"路由器分割广播域和冲突域\"><a class=\"anchor\" href=\"#路由器分割广播域和冲突域\">#</a> 路由器分割广播域和冲突域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC3%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第3讲：局域网数据链路层原理与技术_页面_58\" /></p>\n<ol>\n<li>路由器可以创建最高级别的细分：\n<ol>\n<li>创建较小的<strong>碰撞域</strong></li>\n<li>创建较小的<strong>广播域</strong>：除非经过编程，否则路由器不会转发广播。</li>\n</ol>\n</li>\n<li>路由器通过检查数据包上的<strong>目标逻辑地址</strong>，然后在其路由表中查找转发指令来完成数据包的转发</li>\n<li>由于路由器比网桥执行更多的功能，因此它们以更高的延迟率运行。</li>\n<li>路由器可以用作<strong>网关</strong>，用于连接不同的网络媒体和不同的 LAN 技术</li>\n<li>是根据逻辑地址 (<strong>IP 地址</strong>) 进行转发，不再是 MAC</li>\n</ol>\n<p><strong>路由器可以分割广播域</strong></p>\n<h3 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h3>\n<p>Service Set Identifier(SSID)</p>\n<p>主动扫描，较为安全，不用发送 SSID</p>\n<p>被动扫描，存在安全隐患，会潜在 SSID</p>\n<h3 id=\"无线局域网帧结构有考试要求\"><a class=\"anchor\" href=\"#无线局域网帧结构有考试要求\">#</a> 无线局域网帧结构（有考试要求）</h3>\n<p>以太帧不能超过 1518 字节，而无线帧则可能高达<strong> 2346 字节</strong>。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VuZ2luZWVyX2phbWVzL2FydGljbGUvZGV0YWlscy8xMDI2MjUzMjQ=\">帧结构</span></p>\n<p>持续期 —— 告诉周边节点正在发送，避免发生冲突</p>\n<h2 id=\"第二层设备-2\"><a class=\"anchor\" href=\"#第二层设备-2\">#</a> 第二层设备</h2>\n<h3 id=\"nic网卡\"><a class=\"anchor\" href=\"#nic网卡\">#</a> NIC 网卡</h3>\n<p><strong>网络接口控制器</strong>（英语：network interface controller，NIC）</p>\n<p>是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件。</p>\n<h3 id=\"网桥\"><a class=\"anchor\" href=\"#网桥\">#</a> 网桥</h3>\n<h4 id=\"透明网桥-2\"><a class=\"anchor\" href=\"#透明网桥-2\">#</a> 透明网桥</h4>\n<p>缓存是 RAM，从开始时是空表，到逐渐学习记录。</p>\n<h4 id=\"源路由网桥-2\"><a class=\"anchor\" href=\"#源路由网桥-2\">#</a> 源路由网桥</h4>\n<p>ROM —— Read-Only Memory</p>\n<p>只读储存器 ，对于电脑来讲就是硬盘，对于手机来讲就是内置储存，对于单片机来讲就是 Flash。用于存放操作系统的软件。ROM 可以在掉电的情况下，依然保存原有的数据。</p>\n<p>RAM —— Random-Access Memory</p>\n<p>随机储存器 ，就是电脑的内存条。用于存放动态数据。(也叫运行内存) 系统运行的时候，需要把操作系统从 ROM 中读取出来，放在 RAM 中运行。RAM 为随机存储，掉电不会保存数据</p>\n<h3 id=\"交换机\"><a class=\"anchor\" href=\"#交换机\">#</a> 交换机</h3>\n<p>可以划分冲突域，但是不能够隔绝广播域。</p>\n<p>交换机连接的是一个局域网，而路由器连接的是不同局域网。</p>\n<p>一些交换机<strong>支持直通交换</strong>，这减少了延迟和延迟，而网桥仅支持<strong>存储转发交换 (存储转发，存下来检验转发)</strong>。</p>\n<ol>\n<li>直通交换：快速转发，不做校验，只看前 6 字节的 MAC 地址。</li>\n<li>局域网：网速比较快，传输速率高，网线比较短，可以认为是基本没有错误的，所以可以进行直通转发</li>\n</ol>\n<p>SDN 只用交换机做控制，不用路由器做控制。</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture14-%E6%A8%A1%E6%9D%BF/",
            "title": "Lecture14-模板",
            "date_published": "2023-02-08T09:49:10.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140245554.png\" alt=\"image-20221213140245554\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140325903.png\" alt=\"image-20221213140325903\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140639104.png\" alt=\"image-20221213140639104\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140700118.png\" alt=\"image-20221213140700118\" /></p>\n<p>反而变得复杂、可读性变差</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213140851851.png\" alt=\"image-20221213140851851\" /></p>\n<p>添加新的声明 <code>template &lt;typename T&gt;</code></p>\n<p>使用 typename 来声明类型参数而不是 class，防止产生歧义。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142015728.png\" alt=\"image-20221213142015728\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142501077.png\" alt=\"image-20221213142501077\" /></p>\n<p>如何处理 max (x,m) 的处理【x 和 m 的类型不一样】？</p>\n<p>可以定义一个 max 的重载函数。</p>\n<p>非模板函数、模板函数（显式具体化）、重载函数 —— 编译器会优先调用重载函数、显式具体化的模板函数，然后是非模板函数，不会出现歧义。函数模板和函数重载可以配合在一起使用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213142850552.png\" alt=\"image-20221213142850552\" /></p>\n<p>类也可以模板化。</p>\n<p>左边是初始版本，右边是类模板。</p>\n<p>在类外定义函数的时候，需要再次声明类型参数 T。 <code>template &lt;class T&gt;</code></p>\n<p>创建的时候需要显式实例化，int 和 double 的 Stack 是两个类。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143356564.png\" alt=\"image-20221213143356564\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213143809099.png\" alt=\"image-20221213143809099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144212201.png\" alt=\"image-20221213144212201\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144522445.png\" alt=\"image-20221213144522445\" /></p>\n<p>cpp 完整的定义通常定义在头文件中</p>\n<p>file2.cpp 找不到 max 定义，也找不到完整的 S 代码</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213144541044.png\" alt=\"image-20221213144541044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221213150026993.png\" alt=\"image-20221213150026993\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141328851.png\" alt=\"image-20221220141328851\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141344849.png\" alt=\"image-20221220141344849\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141355901.png\" alt=\"image-20221220141355901\" /></p>\n<p>输入输出流的重定向</p>\n<p>先新建一个输入流  <code>ifstream in(&quot;in.txt&quot;);</code></p>\n<p>保存输入流</p>\n<p>重置输入流</p>\n<p>测试用例可以从文件读入并输出到文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141909130.png\" alt=\"image-20221220141909130\" /></p>\n<p>不能作为类的成员函数进行重载</p>\n<p>不正确的解决方案</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141922509.png\" alt=\"image-20221220141922509\" /></p>\n<p>正确的解决方案</p>\n<p>非虚函数进行虚化，非虚接口。</p>\n<p>全局函数针对不同的类也有派生类。调用虚函数。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220141942718.png\" alt=\"image-20221220141942718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142000257.png\" alt=\"image-20221220142000257\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142011316.png\" alt=\"image-20221220142011316\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221220142028306.png\" alt=\"image-20221220142028306\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture13-newdelete/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture13-newdelete/",
            "title": "Lecture13-newdelete",
            "date_published": "2023-02-08T09:49:01.000Z",
            "content_html": "<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152207062.png\" alt=\"image-20221208152207062\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152217123.png\" alt=\"image-20221208152217123\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208152525691.png\" alt=\"image-20221208152525691\" /></p>\n<p>如何记录可用的位置？</p>\n<p>用数组或者链表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153029941.png\" alt=\"image-20221208153029941\" /></p>\n<p>如何 new</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153043266.png\" alt=\"image-20221208153043266\" /></p>\n<p>如何 delete</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153107962.png\" alt=\"image-20221208153107962\" /></p>\n<p>自嵌入链表形式的缺点：</p>\n<p>？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153833507.png\" alt=\"image-20221208153833507\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208153642961.png\" alt=\"image-20221208153642961\" /></p>\n<p>这样可以减少 new 和 delete 的次数</p>\n<p>使用 template 推广到其他使用场景。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "url": "https://quas-modo.github.io/2023/02/08/cpp/Lecture12-%E5%A4%9A%E6%80%81/",
            "title": "Lecture12-多态",
            "date_published": "2023-02-08T09:48:46.000Z",
            "content_html": "<h1 id=\"lecture12-多态\"><a class=\"anchor\" href=\"#lecture12-多态\">#</a> Lecture12 - 多态</h1>\n<p>&amp; 引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p>\n<p>引用的声明方法：类型标识符 &amp; 引用名 = 目标变量名；</p>\n<p>return *this 返回的是当前对象的克隆或者本身（若返回类型为 A， 则是拷贝， 若返回类型为 A&amp;， 则是本身 ）。return this 返回当前对象的地址（指向当前对象的指针）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206140630613.png\" alt=\"image-20221206140630613\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129140810020.png\" alt=\"image-20221129140810020\" /></p>\n<h2 id=\"操作符重载\"><a class=\"anchor\" href=\"#操作符重载\">#</a> 操作符重载</h2>\n<h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3>\n<ol>\n<li><strong>名同、参数不同</strong>，返回值不同没有用的：参数顺序、参数类型匹配 (找到最佳匹配)</li>\n<li>静态绑定</li>\n</ol>\n<h3 id=\"歧义控制\"><a class=\"anchor\" href=\"#歧义控制\">#</a> 歧义控制</h3>\n<p>最佳匹配:</p>\n<ol>\n<li>原则一：这个匹配每一个参数不必其他的匹配更差</li>\n<li>原则二：这个匹配有一个参数更精确匹配</li>\n</ol>\n<p>整型提升：标准转化都是一视同仁的（char to unsigned char, char to double）</p>\n<p>窄转换：是被允许的，把表数范围大的 赋值给表数范围小的叫做窄转换，特点是 不安全 不是自动的 可能会发生精度丢失 需要进行强制类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129141712045.png\" alt=\"image-20221129141712045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129142310557.png\" alt=\"image-20221129142310557\" /></p>\n<p>至少要包含一个用户自定义的类型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143856395.png\" alt=\"image-20221129143856395\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129143908332.png\" alt=\"image-20221129143908332\" /></p>\n<h3 id=\"可重载的操作符\"><a class=\"anchor\" href=\"#可重载的操作符\">#</a> 可重载的操作符</h3>\n<p>操作符的重载本质上是函数的调用，不能够改变原来的语法</p>\n<p>不可以重载的操作符：</p>\n<p><code>.</code>  (成员访问操作符)、</p>\n<p><code>.*</code>  (成员指针访问运算符，如下)、</p>\n<p><code>::</code>  (域操作符)、</p>\n<p><code>?:</code>  (条件操作符)、</p>\n<p><code>sizeof</code>  也不重载</p>\n<ol>\n<li>原因：前两个为了防止类访问出现混乱</li>\n<li>:: 后面是名称不是变量</li>\n<li>?: 条件运算符是跳转和流程控制，重载之后会出现理解的偏差</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150203584.png\" alt=\"image-20221129150203584\" /></p>\n<ol>\n<li>格式: <code>&lt;ret type&gt;operator #(&lt;arg&gt;)</code></li>\n<li>this: 隐含，必然是第一个参数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129150334475.png\" alt=\"image-20221129150334475\" /></p>\n<p>全局函数要有两个参数</p>\n<p>？不懂</p>\n<p>注意: <code>=</code> 、 <code>()</code> 、 <code>[]</code> 、 <code>-&gt;</code>  不可以作为全局函数重载</p>\n<ul>\n<li>大体上来讲，C++ 一个类本身对这几个运算符就已经有了相应的解释了。</li>\n<li>如果将这四种符号进行友元全局重载，则会出现一些冲突</li>\n<li>下标和箭头运算符为什么？有保留调用顺序，我们希望能保留原来的顺序，而全局不能要求，而成员函数的 this 就可以解决这个问题</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDc4MTEwNy9hcnRpY2xlL2RldGFpbHMvOTgxNDc5Mzg=\">参考</span></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221129151553515.png\" alt=\"image-20221129151553515\" /></p>\n<p>需要支持一些交换律，全局函数可以作为补充</p>\n<p>全局函数作为补充：</p>\n<ol>\n<li>单目运算符、类型转换函数最好重载为类的成员函数（不存在上图出现的情况）（单目操作不需要补充）</li>\n<li>双目运算符最好重载为类的友元函数</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141107489.png\" alt=\"image-20221206141107489\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141117260.png\" alt=\"image-20221206141117260\" /></p>\n<p>​\t返回什么值，由应用场景决定，返回右值的就要按值传递，临时变量。</p>\n<p>​\t四则运算大多数都是右值。</p>\n<p>​\t其他大多数都是左值。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141829112.png\" alt=\"image-20221206141829112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206141838660.png\" alt=\"image-20221206141838660\" /></p>\n<p>prefix 和 postfix 是不一样的。</p>\n<p>prefix &amp; 返回引用</p>\n<p>postfix 返回值 dummy argument 传值没有用，仅作为区分</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> =</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206142025129.png\" alt=\"image-20221206142025129\" /></p>\n<p>如果程序员没有提供等号的操作符重载，编译器会提供默认的赋值操作符重载函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值操作符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// A a (b); 拷贝构造函数</span></pre></td></tr></table></figure><p>必须同时有赋值操作符和拷贝构造函数。</p>\n<p>一个对象只能被初始化一次，所以需要有赋值。</p>\n<p>拷贝构造函数效率更高，且会被经常使用（函数的传参）。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144008728.png\" alt=\"image-20221206144008728\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>等号是右结合的</p>\n<p>a = b = c</p>\n<p>(a = b) = c</p>\n<p>可以按左值 -》传递引用</p>\n<p>内存可能不够？</p>\n<p>这段代码写得不好，应该<strong>先申请，再释放</strong>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>temp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">delete</span> temp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206144737520.png\" alt=\"image-20221206144737520\" /></p>\n<p>上面那个代码如果出现 “自我赋值”，会出现错误，把数据删除了。</p>\n<p>解决方法 1：做一个额外的检测。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// rhs  right hand side</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 加上正同测试</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上只是一个很简单的操作</span></pre></td></tr></table></figure><p>解决方法 2：先申请再释放可以解决。</p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> []</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206150836412.png\" alt=\"image-20221206150836412\" /></p>\n<p>可以有两个重载函数吗？可以。</p>\n<p>在前文歧义控制的最佳匹配中，可以解释，为什么 s 的构建会匹配第一个重载函数，cs 则会调用第二个重载函数。因为是” 更精确的匹配 “</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aacd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一个重载加上 const 可以使得 const 或者非 const 对象都可以调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span><span class=\"token char\">'const'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const 版本不想被赋值 (返回 const 的)，非 const 版本想要被赋值，之后再进行重载的时候就需要同时重载两个</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206152243321.png\" alt=\"image-20221206152243321\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153301599.png\" alt=\"image-20221206153301599\" /></p>\n<p>用于内存资源、多维数组的管理。</p>\n<p>wrapper</p>\n<p>隐式转换，explicit 禁用。</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> ()</h3>\n<p>函数调用、类型转换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206153818186.png\" alt=\"image-20221206153818186\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221206154436607.png\" alt=\"image-20221206154436607\" /></p>\n<p>问题：为什么禁止在类外禁止重载赋值操作符？</p>\n<ol>\n<li>如果没有类内提供一个赋值操作符，则编译器会默认提供一个类内的复制操作符</li>\n<li>查找操作符优先查找类内，之后查找全局，所以全局重载赋值操作符不可能被用到</li>\n</ol>\n<h3 id=\"-\"><a class=\"anchor\" href=\"#-\">#</a> -&gt;</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208141511572.png\" alt=\"image-20221208141511572\" /></p>\n<p>CPanel 中有一个 CPen，需要修改 pen 的颜色</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CPanel c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">getPen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">SetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 箭头重定义之后</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>c<span class=\"token operator\">-></span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重载时按照一元操作符重载描述</p>\n<p>必须返回指针类型？不是，还可以返回一些能够进行箭头操作的引用。</p>\n<h3 id=\"prevent-memory-leak\"><a class=\"anchor\" href=\"#prevent-memory-leak\">#</a> prevent memory leak</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208143634290.png\" alt=\"image-20221208143634290\" /></p>\n<p>一定不会出现内存泄漏吗？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//return 的时候就没有办法 delete 了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以上是</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>多出口</strong>程序的处理出现了问题。</p>\n<ol>\n<li>\n<p>用 RAII 进行处理。将 <code>A *p = new A;</code>  写成  <code>AWrapper p(new A);</code> ，资源和对象同生命周期，栈上的对象一定会消亡，不需要管理多出口问题，且是可控的。</p>\n<p>将箭头操作符重载  <code>A *operator -&gt; () &#123; return p;&#125; </code>  使得申请的资源暴露，就像普通的指针一样使用。</p>\n</li>\n<li>\n<p>所有类型都需要写一个 wrapper 吗？</p>\n<p>不需要，利用泛型 / 模板解决。</p>\n</li>\n<li>\n<p>如此用 wrapper 封装，有什么局限性？</p>\n<p>资源和对象必须同生命周期。</p>\n<p>解决方法：例如，shared_ptr</p>\n</li>\n</ol>\n<h3 id=\"new-delete\"><a class=\"anchor\" href=\"#new-delete\">#</a> new、delete</h3>\n<p>new 和 delete 的操作步骤</p>\n<p>new</p>\n<ol>\n<li>获得一块内存空间</li>\n<li>调用构造函数</li>\n<li>返回一个正确的指针</li>\n</ol>\n<p>delete</p>\n<ol>\n<li>调用析构函数</li>\n<li>确定指向分配空间的指针</li>\n<li>归还内存空间</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144624639.png\" alt=\"image-20221208144624639\" /></p>\n<p>系统自助管理的缺点：系统频繁调用系统的存储管理，影响效率。并且会造成内存碎片。</p>\n<p>重载 new 和 delete 之后：程序自身管理内存，提高效率</p>\n<p>重载过的 new 和 delete 是静态成员：默认是 static，不能调用非静态函数</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208144830546.png\" alt=\"image-20221208144830546\" /> 返回类型：void * ，不知道 new 什么类型</p>\n<p>返回参数：第一个参数是固定的，其他参数可有可无。系统知道要申请的大小，参数 size_t 是给程序员用的。</p>\n<p>new 是可以被继承的。</p>\n<p>定位 new   <code>A *p =  new (place) A</code></p>\n<p>可以自己在栈上申请一块内存，反复新建和销毁 A。好处是，效率高（？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208151134563.png\" alt=\"image-20221208151134563\" /></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        }
    ]
}