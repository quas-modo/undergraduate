{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2022/11/03/COA/Lecture08-cache/",
            "url": "https://quas-modo.github.io/2022/11/03/COA/Lecture08-cache/",
            "title": "Lecture08-cache",
            "date_published": "2022-11-03T13:03:21.000Z",
            "content_html": "<p>cache 缓存器，解决内存墙问题，是主存部分的副本，设计要素有地址、容量、映射功能、替换算法、写策略、行大小、cache 数目。</p>\n<h1 id=\"lecture08-cache\"><a class=\"anchor\" href=\"#lecture08-cache\">#</a> Lecture08-cache</h1>\n<h2 id=\"cache简介\"><a class=\"anchor\" href=\"#cache简介\">#</a> cache 简介</h2>\n<h3 id=\"存储器层次结构\"><a class=\"anchor\" href=\"#存储器层次结构\">#</a> 存储器层次结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164918401.png\" alt=\"image-20221101164918401\" /></p>\n<p>随着层次的下降，每位价格下降，容量增大，存取时间变长，处理器访问存储器的频率降低。</p>\n<p>cache（高速缓存）存储器的目的是使存储器的速度逼近可用的最快存储器的速度。</p>\n<p>多级 cache 一般标注为 L1、L2，通常由动态随机存取存储器（DRAM）构成。</p>\n<h3 id=\"cache存在的意义解决内存墙的问题\"><a class=\"anchor\" href=\"#cache存在的意义解决内存墙的问题\">#</a> cache 存在的意义：解决内存墙的问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165310897.png\" alt=\"image-20221101165310897\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165325716.png\" alt=\"image-20221101165325716\" /></p>\n<h3 id=\"cache的基本思路\"><a class=\"anchor\" href=\"#cache的基本思路\">#</a> cache 的基本思路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164904882.png\" alt=\"image-20221101164904882\" /></p>\n<p>只是主存<strong>部分</strong>信息的<strong>副本</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101170441990.png\" alt=\"image-20221101170441990\" /></p>\n<h3 id=\"cache主存系统的结构\"><a class=\"anchor\" href=\"#cache主存系统的结构\">#</a> cache / 主存系统的结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101205028927.png\" alt=\"image-20221101205028927\" /></p>\n<p>主存系统中 ——M 个块，每块有 K 个字</p>\n<p>cache 中 ——m 个块，称作行【控制为 + 标记 + K 个字】</p>\n<p><strong>行的数量远远小于主存储器块的数目 m &lt;&lt; M</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101170954954.png\" alt=\"image-20221101170954954\" /></p>\n<p>传入地址 RA， 最后红线框处的两步为并行操作。</p>\n<h2 id=\"cache的工作流程\"><a class=\"anchor\" href=\"#cache的工作流程\">#</a> cache 的工作流程</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165017905.png\" alt=\"image-20221101165017905\" /></p>\n<ul>\n<li>Hit—— 传送的是<strong>字</strong></li>\n<li>Miss—— 读入 cache 的是<strong>块</strong>，传入 CPU 的是<strong>字</strong></li>\n</ul>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165200894.png\" alt=\"image-20221101165200894\" /></p>\n<h3 id=\"命中还是未命中\"><a class=\"anchor\" href=\"#命中还是未命中\">#</a> 命中还是未命中？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165513269.png\" alt=\"image-20221101165513269\" /></p>\n<p>CPU、cache、主存如何建立地址的一一对应关系？</p>\n<p><strong>标记</strong>是什么？</p>\n<h3 id=\"为什么从内存中读入一个块\"><a class=\"anchor\" href=\"#为什么从内存中读入一个块\">#</a> 为什么从内存中读入一个块？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101165809967.png\" alt=\"image-20221101165809967\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171223532.png\" alt=\"image-20221101171223532\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171836956.png\" alt=\"image-20221101171836956\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101172138850.png\" alt=\"image-20221101172138850\" /></p>\n<p>利用空间局限性，所以把块传入 cache 当中。</p>\n<p>块在 cache 中，则字在 cache 中。</p>\n<p>标记和内存地址之间的关系？</p>\n<h3 id=\"使用cache需要更多的操作为什么还可以节省时间\"><a class=\"anchor\" href=\"#使用cache需要更多的操作为什么还可以节省时间\">#</a> 使用 cache 需要更多的操作，为什么还可以节省时间？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173524901.png\" alt=\"image-20221101173524901\" /></p>\n<p>Tm 是未命中惩罚</p>\n<p>两个式子都需要理解，下面的式子更方便做题。</p>\n<p>降低 cache 的访问时间与提高命中率矛盾 —— 存的东西多，提高命中率，但是降低了 cache 的访问时间。</p>\n<h4 id=\"避免cache未命中提高命中率\"><a class=\"anchor\" href=\"#避免cache未命中提高命中率\">#</a> 避免 cache 未命中，提高命中率</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173558232.png\" alt=\"image-20221101173558232\" /></p>\n<p>容量失效 —— 涉及映射规则和替代原则的问题</p>\n<p>冲突失效 —— 例如直接映射中的冲突</p>\n<h2 id=\"cache的设计要素\"><a class=\"anchor\" href=\"#cache的设计要素\">#</a> cache 的设计要素</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101173743177.png\" alt=\"image-20221101173743177\" /></p>\n<h3 id=\"cache地址\"><a class=\"anchor\" href=\"#cache地址\">#</a> cache 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174037678.png\" alt=\"image-20221101174037678\" /></p>\n<p>物理 cache 和逻辑 cache 的比较</p>\n<p>逻辑 cache 访问速度快，但是需要 cache 的每一行增加额外的几位来标记与该地址相关的虚拟地址。</p>\n<h3 id=\"cache容量\"><a class=\"anchor\" href=\"#cache容量\">#</a> cache 容量</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174233373.png\" alt=\"image-20221101174233373\" /></p>\n<p>1k 涨到 16k，命中率有明显的上升，可以解决一些容量失效的额问题，但是再往后，命中率的上升近乎达到峰值。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174537594.png\" alt=\"image-20221101174537594\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174552006.png\" alt=\"image-20221101174552006\" /></p>\n<h3 id=\"映射功能\"><a class=\"anchor\" href=\"#映射功能\">#</a> 映射功能</h3>\n<h4 id=\"直接映射\"><a class=\"anchor\" href=\"#直接映射\">#</a> 直接映射</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101174930231.png\" alt=\"image-20221101174930231\" /></p>\n<p>左边的映射方式可能会造成容量失效的问题。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175153621.png\" alt=\"image-20221101175153621\" /></p>\n<p>000H 和 080H 对应一个 cache 的行，每隔 8 个就会共用一个 cache 的行。</p>\n<p>稍微真实一点的示例，一个块里面有 16 个字，每个地址差 10H（即为 16）。</p>\n<p>H 是 16 进制的意思。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175330724.png\" alt=\"image-20221101175330724\" /></p>\n<p>M = 主存的块数</p>\n<p>i = cache 行号（在 cache 中对应的行数）</p>\n<p>j = 主存储器的块号</p>\n<p>C = cache 的行数（cache 总共的行数）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101210831620.png\" alt=\"image-20221101210831620\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101175648891.png\" alt=\"image-20221101175648891\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213351613.png\" alt=\"image-20221101213351613\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213323009.png\" alt=\"image-20221101213323009\" /></p>\n<h4 id=\"全相联映射关联映射\"><a class=\"anchor\" href=\"#全相联映射关联映射\">#</a> 全相联映射（关联映射）</h4>\n<p>标记域 + 字域（s+w）位，cache 中的行号不由地址格式决定</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103162237911.png\" alt=\"image-20221103162237911\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101213419743.png\" alt=\"image-20221101213419743\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163021051.png\" alt=\"image-20221103163021051\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163033660.png\" alt=\"image-20221103163033660\" /></p>\n<h4 id=\"组关联映射\"><a class=\"anchor\" href=\"#组关联映射\">#</a> 组关联映射</h4>\n<p>折中方法，体现了直接映射和全相联映射的优点，又避免了两者的缺点。</p>\n<p>标记 + 组（v = 2 <sup>d</sup>）+ 字（块大小 ）。</p>\n<p>一组中有 K 行。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163817034.png\" alt=\"image-20221103163817034\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103163951991.png\" alt=\"image-20221103163951991\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164015137.png\" alt=\"image-20221103164015137\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164147269.png\" alt=\"image-20221103164147269\" /></p>\n<p>小容量适合全关联映射</p>\n<p>大容量适合直接映射</p>\n<p>K 路组关联映射处于两者之间</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172751908.png\" alt=\"image-20221103172751908\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172808723.png\" alt=\"image-20221103172808723\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172844027.png\" alt=\"image-20221103172844027\" /></p>\n<p>两个映射到同一 cache 组的块不可能具有相同的标记数。</p>\n<p>每组两行 (v = m/2, k = 2) 是最常用的组相联结构，与直接映射相比，它明显地提高了命中率。</p>\n<h4 id=\"三种映射方式比较\"><a class=\"anchor\" href=\"#三种映射方式比较\">#</a> 三种映射方式比较</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164308172.png\" alt=\"image-20221103164308172\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164318953.png\" alt=\"image-20221103164318953\" /></p>\n<p>关联度越低，命中率越低，判断是否命中的时间越短，标记所占额外空间开销越小。【关联度小，其他三个都小】</p>\n<h3 id=\"替换算法\"><a class=\"anchor\" href=\"#替换算法\">#</a> 替换算法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164810384.png\" alt=\"image-20221103164810384\" /></p>\n<h4 id=\"常用的替换算法\"><a class=\"anchor\" href=\"#常用的替换算法\">#</a> 常用的替换算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165206857.png\" alt=\"image-20221103165206857\" /></p>\n<h4 id=\"最近最少使用算法lru\"><a class=\"anchor\" href=\"#最近最少使用算法lru\">#</a> 最近最少使用算法 LRU</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165310688.png\" alt=\"image-20221103165310688\" /></p>\n<p>USE 位为 0，不代表没有数据</p>\n<p>由前文，可以看到，两路组关联映射是最常用的方法，这个实现是很有现实意义的举例。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165326712.png\" alt=\"image-20221103165326712\" /></p>\n<p>最后一个 1110 的替换，LRU 最大为 3 的位置被替换，其他得未被访问的行的 LRU 自增 1。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpYW9waWFvbGFuZ2h1YS9hcnRpY2xlL2RldGFpbHMvOTM4NDA0Mw==\">https://blog.csdn.net/piaopiaolanghua/article/details/9384043</span></p>\n<p>为什么是 log (K!)—— 排列组合的问题</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165404094.png\" alt=\"image-20221103165404094\" /></p>\n<p>LRU 的命中率可能没有想象中那么高</p>\n<h4 id=\"先进先出算法fifo\"><a class=\"anchor\" href=\"#先进先出算法fifo\">#</a> 先进先出算法 FIFO</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165417670.png\" alt=\"image-20221103165417670\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165432556.png\" alt=\"image-20221103165432556\" /></p>\n<h4 id=\"最不经常使用算法lfu\"><a class=\"anchor\" href=\"#最不经常使用算法lfu\">#</a> 最不经常使用算法 LFU</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165447852.png\" alt=\"image-20221103165447852\" /></p>\n<p>所需要的额外的硬件实现太多，不能够支持。</p>\n<h4 id=\"随机替换算法\"><a class=\"anchor\" href=\"#随机替换算法\">#</a> 随机替换算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103165504705.png\" alt=\"image-20221103165504705\" /></p>\n<p>随机替换算法是一种基线【或者说底线】，随机替换算法在性能上只稍逊于使用其他替换算法，也就说明其他随机替换算法没有那么好。</p>\n<h3 id=\"写策略\"><a class=\"anchor\" href=\"#写策略\">#</a> 写策略</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103172948799.png\" alt=\"image-20221103172948799\" /></p>\n<h4 id=\"缓存命中时的写策略写直达write-through\"><a class=\"anchor\" href=\"#缓存命中时的写策略写直达write-through\">#</a> 缓存命中时的写策略：写直达 Write Through</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173037433.png\" alt=\"image-20221103173037433\" /></p>\n<h4 id=\"缓存命中时的写策略写回法write-back\"><a class=\"anchor\" href=\"#缓存命中时的写策略写回法write-back\">#</a> 缓存命中时的写策略：写回法 Write Back</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173052648.png\" alt=\"image-20221103173052648\" /></p>\n<p>缺点的解决方法：每次 I/O 模块存取的时候先和 cache 做一个同步</p>\n<h4 id=\"缓存未命中的写策略写不分配写分配\"><a class=\"anchor\" href=\"#缓存未命中的写策略写不分配写分配\">#</a> 缓存未命中的写策略：写不分配 / 写分配</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103173811474.png\" alt=\"image-20221103173811474\" /></p>\n<h3 id=\"行大小\"><a class=\"anchor\" href=\"#行大小\">#</a> 行大小</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174054409.png\" alt=\"image-20221103174054409\" /></p>\n<p>不是违反时间和空间关系，而是影响局部性（？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103180046644.png\" alt=\"image-20221103180046644\" /></p>\n<h3 id=\"cache数目\"><a class=\"anchor\" href=\"#cache数目\">#</a> cache 数目</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174453746.png\" alt=\"image-20221103174453746\" /></p>\n<p>通常，会有片内和片外的 cache。片内 cache 为第一级（L1），外部 cache 为第二级（L2）。L2cache 大小至少为 L1cache 大小的两倍时，才对提高总命中率有明显的作用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221103174504972.png\" alt=\"image-20221103174504972\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/01/cpp/Lecture09-%E6%8C%87%E9%92%88/",
            "url": "https://quas-modo.github.io/2022/11/01/cpp/Lecture09-%E6%8C%87%E9%92%88/",
            "title": "Lecture09-指针",
            "date_published": "2022-11-01T12:42:02.000Z",
            "content_html": "<p><span id=\"more\"></span></p>\n<h1 id=\"lecture09-指针\"><a class=\"anchor\" href=\"#lecture09-指针\">#</a> Lecture09 - 指针</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144621124.png\" alt=\"image-20221018144621124\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144628629.png\" alt=\"image-20221018144628629\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">*</span>p 只读</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 经常使用，赋予所有权限，但只要读的权限</span></pre></td></tr></table></figure><p><strong>use CONST whenever possible</strong> 只要不改变成员变量的值，就一定要加上 const</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150257160.png\" alt=\"image-20221018150257160\" /></p>\n<p>为什么 c 和 * q 中的值不一样？</p>\n<p>因为 compiler 把 c 直接替换成 128。但是 q 中存储的确实变成了 111。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150447107.png\" alt=\"image-20221018150447107\" /></p>\n<p>指针自己是常量，不可以改变</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150811366.png\" alt=\"image-20221018150811366\" /></p>\n<p><strong>不懂</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018150633134.png\" alt=\"image-20221018150633134\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152026024.png\" alt=\"image-20221018152026024\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018151849436.png\" alt=\"image-20221018151849436\" /></p>\n<p>(x+n-1) / n * n</p>\n<p>对齐</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152011730.png\" alt=\"image-20221018152011730\" /></p>\n<p>struct —— 访问控制默认 public</p>\n<p>class —— 访问控制默认 private</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018152118088.png\" alt=\"image-20221018152118088\" /></p>\n<p>插入一个，丢一个（？）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018153026760.png\" alt=\"image-20221018153026760\" /></p>\n<p>剥离出来，方便增改</p>\n<p>利用 #宏来保证函数名的一一对应 #compose</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018154617288.png\" alt=\"image-20221018154617288\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018154635527.png\" alt=\"image-20221018154635527\" /></p>\n<p>char 数组型不可以</p>\n<p>只能用 copy</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/11/01/cpp/Lecture10-OOP/",
            "url": "https://quas-modo.github.io/2022/11/01/cpp/Lecture10-OOP/",
            "title": "Lecture10-OOP",
            "date_published": "2022-11-01T12:40:09.000Z",
            "content_html": "<p>OOP 相关<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture10-oop\"><a class=\"anchor\" href=\"#lecture10-oop\">#</a> Lecture10-OOP</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpY29kZXIuZ2l0aHViLmlvLzIwMjAvMDcvMDEvMjAyMC1DLXBsdXMtcGx1cy1hZHZhbmNlZC1wcm9ncmFtbWluZy9DKystT09QLzIwMjAtQy1wbHVzLXBsdXMtYWR2YW5jZWQtcHJvZ3JhbW1pbmctQysrJTIwJUU3JUIxJUJCJUU3JTlBJTg0JUU1JUIwJTgxJUU4JUEzJTg1LyM2LSVFNyVCMSVCQiVFNyU5QSU4NCVFNyVBNyVCQiVFNSU4QSVBOCVFNiU5RSU4NCVFOSU4MCVBMCVFNSU4NyVCRCVFNiU5NSVCMA==\">https://spricoder.github.io/2020/07/01/2020-C-plus-plus-advanced-programming/C++-OOP/2020-C-plus-plus-advanced-programming-C++ 类的封装 /#6 - 类的移动构造函数</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190551858.png\" alt=\"image-20221101190551858\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221029222347755.png\" alt=\"image-20221029222347755\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190605135.png\" alt=\"image-20221101190605135\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101190615624.png\" alt=\"image-20221101190615624\" /></p>\n<ol>\n<li>encapsulation\n<ol>\n<li>减少类之间的耦合</li>\n<li>类内部的结构可以自由的进行修改</li>\n<li>对成员进行控制</li>\n<li>对代码的理解性更好</li>\n</ol>\n</li>\n<li>information hidding：不需要知道如何初始化，只需要使用提供的接口</li>\n<li>Cfront 第一个 C++ 的编译器，转为 C</li>\n</ol>\n<ul>\n<li>基于对象：没有继承</li>\n<li>面向对象：封装、继承、多态</li>\n</ul>\n<h2 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101140737002.png\" alt=\"image-20221101140737002\" /></p>\n<ul>\n<li>\n<p>成员变量</p>\n</li>\n<li>\n<p>成员函数</p>\n</li>\n<li>\n<p>头文件、源文件：C++ 是一个个编译单元进行编译，所以需要提前知道其他编译单元的相关信息（存储在头文件中），只需要知道声明，不需要知道具体定义，减少编译复杂度</p>\n</li>\n</ul>\n<ol>\n<li>如果直接将函数定义直接放在头文件里，会建议 compiler 将其作为 inline 函数进行编译。</li>\n<li>如果函数长度很长的话，反复调用的函数调用时间就会占比很小，而相反的话则会很大。</li>\n<li>随便使用内联函数可能是的代码很烂:get 和 set 函数我们选择使用 inline 方式</li>\n<li>代码长度不超过 10 行，不包含 for、switch 等语句。</li>\n</ol>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101140754215.png\" alt=\"image-20221101140754215\" /></p>\n<ul>\n<li>\n<p>当类中未提供构造函数的时候，编译系统会提供默认构造函数。</p>\n</li>\n<li>\n<p>程序员无论提供有参数的还是无参数的构造函数，编译系统都不再提供，防止干扰程序员本身的意思。</p>\n</li>\n<li>\n<p>如果没有指定 c++ 默认初始化，则各种变量都会有<strong>不确定的值</strong></p>\n</li>\n<li>\n<p>成员变量如果是成员对象，则总是会初始化的，需要为成员对象设置构造函数</p>\n</li>\n<li>\n<p>全局变量和静态变量，未初始化，默认为 0</p>\n</li>\n<li>\n<p>局部变量、成员变量，未初始化，默认为不确定的值</p>\n</li>\n<li>\n<p>编译系统提供的默认构造函数不会对成员变量进行处理，主要功能是<strong>完成对象的初始化，创建标识符，开辟内存空间</strong>，最后再根据传入的参数或者默认值进行对数据的处理。</p>\n</li>\n<li>\n<p>构造函数可定义为 <code>private</code> ，避免在其他代码中创建该对象，所以<strong>只能通过类内部的方法进行创建</strong>，而类内部的方法是我自己写的，因此<strong>可以接管对象的创建</strong>，例如保证单例，或者保证只有十个对象创建</p>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141207824.png\" alt=\"image-20221101141207824\" /></p>\n<ol>\n<li>调用:\n<ol>\n<li>自动按照参数列表来对应构造函数</li>\n<li>具体调用方式参照以上。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"成员初始化表构造函数初始化成员变量的一种方法\"><a class=\"anchor\" href=\"#成员初始化表构造函数初始化成员变量的一种方法\">#</a> 成员初始化表（构造函数初始化成员变量的一种方法）</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTMyNjEvYXJ0aWNsZS9kZXRhaWxzLzg1MDM2MDI1\">https://blog.csdn.net/u010853261/article/details/85036025</span></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141220879.png\" alt=\"image-20221101141220879\" /></p>\n<p>C++ 构造函数的初始化列表定义</p>\n<p>C++ 的构造函数与其他函数不同，构造函数除了有名字，参数列表和函数体之外，还可以有初始化列表，初始化列表<strong>以冒号开头，后跟一系列以逗号分隔的初始化字段</strong>。</p>\n<p>比如下面的例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> id <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化列表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>构造函数的补充\n<ol>\n<li>构造函数：先开辟空间并赋默认值</li>\n<li>成员初始化表：开辟空间的时候就赋值</li>\n</ol>\n</li>\n<li>执行：(常量和引用的声明和定义要放在一起，只能通过这个方法来完成)\n<ol>\n<li><strong>先于构造函数执行</strong></li>\n<li><strong>按类数据成员声明次序</strong>：下面的例子中先 x 再 y 再 z</li>\n</ol>\n</li>\n<li><code>static const</code> : 常量数字，这个是可以在类内部进行初始化 ( <code>static const a = 1;</code> )</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 非静态成员可以初始化</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> z<span class=\"token punctuation\">;</span><span class=\"token comment\">// 引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 签名的冒号后面，用变量 (值) 来进行初始化，这就是初始化表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">z</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>减轻 Compiler 负担:</li>\n</ol>\n<ul>\n<li>正常构造函数中赋值 <code>x = 100</code> ：首先对象构造的时候进行了赋值，之后再次进行了赋值，共计 2 次</li>\n<li>成员初始化表的时候，<strong>只进行了赋值一次</strong>。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>初始化顺序问题</strong>：先执行 p，再执行 size 有问题，按照字面序进行。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CString</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">CString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101191054488.png\" alt=\"image-20221101191054488\" /></p>\n<p>必须放在成员初始化表中：</p>\n<ul>\n<li>常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面</li>\n<li>引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</li>\n<li>没有默认构造函数的 class type，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化。</li>\n</ul>\n<h2 id=\"析构函数\"><a class=\"anchor\" href=\"#析构函数\">#</a> 析构函数</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141330420.png\" alt=\"image-20221101141330420\" /></p>\n<p><strong>程序员负责资源的申请和释放</strong></p>\n<p>类的析构函数，它是类的一个成员函数，名字由波浪号加类名构成，是执行与构造函数相反的操作：释放对象使用的资源，并销毁非 static 成员。</p>\n<p>同样的，我们来看看析构函数的几个特点：</p>\n<ol>\n<li>函数名是在类名前加上～，无参数且无返回值。</li>\n<li>一个类只能有且有一个析构函数，如果没有显式的定义，系统会生成一个缺省的析构函数（合成析构函数）。</li>\n<li>析构函数不能重载。<strong>每有一次构造函数的调用就会有一次析构函数的调用。</strong></li>\n</ol>\n<p><strong>声明为 private</strong></p>\n<ol>\n<li>\n<p>系统无法调用析构函数，因为是自动消亡的，内存分配在栈中，<strong>离开作用域就会自动消亡</strong></p>\n</li>\n<li>\n<p><strong>通过将对象的析构函数定义为</strong> <code>**private**</code> <strong>，强制在堆上分配内存</strong>，场景：栈的内存有限，对象的内存很大</p>\n</li>\n<li>\n<p>better solution：这种方法也能够将 <code>p</code>  指针重新定义为空指针，更好</p>\n</li>\n</ol>\n<p><strong>GC 垃圾回收</strong></p>\n<ol>\n<li>存在效率障碍，发生时间不确定</li>\n<li>存在不能使用 GC 的场合</li>\n<li>只能回收内存，不能回收文件操作的句柄等  <code>finalize</code></li>\n<li>不能由程序员自己控制<br />\n &lt;a name=&quot;dC6ui&quot;&gt;&lt;/a&gt;</li>\n</ol>\n<p>**RAII  Resource Acquisition Is Initialization **</p>\n<ol>\n<li>什么时候获取什么时候释放都是确定的</li>\n<li>对象获得的资源都是要在析构函数中释放的</li>\n<li>栈上的内存资源自动释放，堆上的内存资源需要通过析构函数释放</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101191747419.png\" alt=\"image-20221101191747419\" /></p>\n<h2 id=\"拷贝构造函数-copy-constructor一种特殊的构造函数\"><a class=\"anchor\" href=\"#拷贝构造函数-copy-constructor一种特殊的构造函数\">#</a> 拷贝构造函数 copy constructor—— 一种特殊的构造函数</h2>\n<p>拷贝构造函数是来复制对象用的。</p>\n<p>将地址传递和值传递统一起来，归根结底还是传递的是 &quot;值&quot;(地址也是值，只不过通过它可以找到另一个值)！</p>\n<ol>\n<li>相同类型的类对象是通过拷贝构造函数来完成整个复制过程：自动调用：创建对象时，用一同类的对象对其初始化的时候进行调用。</li>\n<li>默认拷贝构造函数\n<ol>\n<li><strong>逐个成员初始化</strong> (member-wise initialization)</li>\n<li><strong>对于对象成员，该定义是递归的</strong></li>\n</ol>\n</li>\n<li>什么时候需要拷贝构造函数:\n<ol>\n<li>赋值拷贝构造</li>\n<li>传参进行拷贝</li>\n<li>返回值进行拷贝</li>\n</ol>\n</li>\n<li>拷贝构造函数私有：目的是让编译器不能调用拷贝构造函数，防止对象按值传递，只能引用传递 (对象比较大)</li>\n</ol>\n<h3 id=\"拷贝函数的使用情况以及定义\"><a class=\"anchor\" href=\"#拷贝函数的使用情况以及定义\">#</a> 拷贝函数的使用情况以及定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101192544506.png\" alt=\"image-20221101192544506\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 赋值拷贝构造</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 传参进行拷贝</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>A a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>A b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回值进行拷贝</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>A <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    A a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//const 避免出现修改</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一定要写引用，不然就递归调用了</span></pre></td></tr></table></figure><p>为什么对象是一个<strong>引用类型</strong>，而不是<strong>值传递</strong>？</p>\n<p>不然会出现<strong>循环拷贝</strong>问题：如果没有引用的话，传参则会拷贝，那么就会出现循环拷贝，也就是防止递归引用。</p>\n<h3 id=\"拷贝构造函数的深浅拷贝\"><a class=\"anchor\" href=\"#拷贝构造函数的深浅拷贝\">#</a> 拷贝构造函数的深 / 浅拷贝</h3>\n<h4 id=\"默认拷贝构造函数\"><a class=\"anchor\" href=\"#默认拷贝构造函数\">#</a> 默认拷贝构造函数</h4>\n<p>“默认拷贝构造函数”，这个构造函数很简单，仅仅使用 “老对象” 的数据成员的值对 “新对象” 的数据成员一一进行赋值，它一般具有以下形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Rect</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Rect<span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twidth <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\theight <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>默认拷贝构造函数会在处理静态数据成员和指针数据成员的时候出现错误。</p>\n<h4 id=\"深拷贝浅拷贝\"><a class=\"anchor\" href=\"#深拷贝浅拷贝\">#</a> 深拷贝 / 浅拷贝</h4>\n<p>深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，<strong>资源重新分配</strong>，这个过程就是<strong>深拷贝</strong>，反之，<strong>没有重新分配资源，就是浅拷贝。</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMjExMDExOTI1NTU3NDAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101192555740.png</span>&quot; alt=&quot;image-20221101192555740&quot; style=&quot;zoom:200%;&quot; /&gt;</p>\n<ol>\n<li>原来 S1 和 S2 两个指针都指向 &quot;abcd&quot;, 但是随着 S1 的归还，S2 就变成了一个空指针了。</li>\n<li>此时我们通过深拷贝完成拷贝</li>\n<li>没有深拷贝需求的时候，使用编译器默认构造函数即可</li>\n</ol>\n<h3 id=\"拷贝构造函数的初始化问题\"><a class=\"anchor\" href=\"#拷贝构造函数的初始化问题\">#</a> 拷贝构造函数的初始化问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141650806.png\" alt=\"image-20221101141650806\" /></p>\n<p>“接管编译器行为”</p>\n<ol>\n<li>\n<p>包含成员对象的类</p>\n<ol>\n<li>默认拷贝构造函数：调用<strong>成员对象</strong>的<strong>拷贝构造函数</strong></li>\n<li>自定义拷贝构造函数：调用成员对象的<strong>默认构造函数</strong>：程序员如果接管这件事情，则编译器不再负责任何默认参数。</li>\n</ol>\n</li>\n<li>\n<p>拷贝函数的拷贝过程没有处理静态数据成员</p>\n</li>\n<li>\n<p>默认拷贝构造函数:</p>\n<ol>\n<li>\n<p>逐个成员初始化</p>\n</li>\n<li>\n<p>对于对象成员，该定义是递归的</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM5MzcwNTExL2FydGljbGUvZGV0YWlscy85MTk4MTAzMw==\">https://blog.csdn.net/sinat_39370511/article/details/91981033</span></p>\n<h2 id=\"移动构造函数-move-constructor\"><a class=\"anchor\" href=\"#移动构造函数-move-constructor\">#</a> 移动构造函数 move constructor</h2>\n<p>官方文档：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvY3BwL2xhbmd1YWdlL21vdmVfY29uc3RydWN0b3I=\">https://en.cppreference.com/w/cpp/language/move_constructor</span></p>\n<p>一些参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjU0MTIyNjI=\">https://zhuanlan.zhihu.com/p/365412262</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1Mzk0MDQzL2FydGljbGUvZGV0YWlscy83ODcyODUwNA==\">https://blog.csdn.net/sinat_25394043/article/details/78728504</span></p>\n<p>所谓移动语义（Move 语义），指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。对于程序执行过程中产生的临时对象，往往只用于传递数据（没有其它的用处），并且会很快会被销毁。因此在使用临时对象初始化新对象时，我们可以<strong>将其包含的指针成员指向的内存资源直接移给新对象所有</strong>，无需再新拷贝一份，这大大提高了初始化的执行效率。（看上去，原来的成员没有访问资源的权限了？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101141853347.png\" alt=\"image-20221101141853347\" /></p>\n<ol>\n<li>\n<p><strong>左值和右值</strong></p>\n<p>左值：赋值操作符左边的值。是可以赋值的，通常是一个变量</p>\n<p>右值：赋值操作符右边的值。是一个值，通常是一个常数、表达式、函数调用</p>\n<p>能出现在赋值号左边的表达式称为 “左值”，不能出现在赋值号左边的表达式称为 “右值”。一般来说，左值是可以取地址的，右值则不可以。</p>\n<p>非 const 的变量都是左值。函数调用的返回值若不是引用，则该函数调用就是右值。一般的 “引用” 都是引用变量的，而变量是左值，因此它们都是 “左值引用”。</p>\n<p>C++11 新增了一种引用，可以引用右值，因而称为 “右值引用”。无名的临时变量不能出现在赋值号左边，因而是右值。右值引用就可以引用无名的临时变量。</p>\n</li>\n<li>\n<p>Const 只能被绑定到右值上</p>\n<ol>\n<li>不可以写成 <code>int &amp;x = 5</code></li>\n<li>为什么不可以对非 const 引用绑定一个右值？可能会导致可以修改临时变量的值，不允许被修改。</li>\n</ol>\n</li>\n<li>\n<p>移动构造函数：直接将对应的右值移动过来 (我们已经将 vector 和 String 进行了是此岸)</p>\n</li>\n<li>\n<p><strong>&amp;&amp; 是右值引用</strong>，不会被左值调用。</p>\n</li>\n<li>\n<p>五删原则：拷贝构造、拷贝赋值、析构函数、移动构造、移动复制</p>\n<ol>\n<li>提供上面的 5 个函数之一，则需要自己提供默认函数</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"动态对象\"><a class=\"anchor\" href=\"#动态对象\">#</a> 动态对象</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101143939590.png\" alt=\"image-20221101143939590\" /></p>\n<p>在<strong>堆</strong>上创建</p>\n<p>引入 new 和 delete 操作符，除了可以分配内存，还可以调用构造函数，消除对象时，能归还内存，还可以调用析构函数。</p>\n<p>malloc 不调用构造函数</p>\n<p>new 可重载</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101144552660.png\" alt=\"image-20221101144552660\" /></p>\n<h3 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101144604251.png\" alt=\"image-20221101144604251\" /></p>\n<ol>\n<li>\n<p>new:</p>\n<ol>\n<li>使用原始类型</li>\n<li>使用类类型</li>\n</ol>\n</li>\n<li>\n<p>Syntax: 语法</p>\n<ol>\n<li>原始类型: <code>type* ptrName = new type;</code></li>\n<li>使用类类型: <code>type* ptrName = new type(params);</code></li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101145458897.png\" alt=\"image-20221101145458897\" /></p>\n<ol start=\"3\">\n<li>注意：这是没有变量名字的物体【堆上的对象，只有通过指针去访问对象】</li>\n</ol>\n<h3 id=\"对象删除\"><a class=\"anchor\" href=\"#对象删除\">#</a> 对象删除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101150246371.png\" alt=\"image-20221101150246371\" /></p>\n<ol>\n<li>\n<p>delete：</p>\n<ol>\n<li>唤起指向物体的指针</li>\n<li>处理原始类型或类类型</li>\n</ol>\n</li>\n<li>\n<p>语法: <code>delete ptrName;</code></p>\n</li>\n<li>\n<p>注意: <strong>删除之后，要将指针置为空指针</strong>，这样子之后可以继续使用，避免意外的引用对象，如果指针没有修改的话，可能是一个悬挂指针 (有可能出现段错误等等)</p>\n<p>dangling pointer 悬垂指针</p>\n<p>double free 两次删除</p>\n<p>如果 delete 后指向 null，没有任何作用，可以防止很多的内存安全问题。这样写可以提高程序的鲁棒性。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果没有办法确定 p 的类型，那么只会释放内存，但是不会调用析构函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 对于 cpp 这种编译语言来说，类型的声明是非常重要的</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"动态对象数组\"><a class=\"anchor\" href=\"#动态对象数组\">#</a> 动态对象数组</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101150739939.png\" alt=\"image-20221101150739939\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//p = new A;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以上两种写法返回的都是 A 的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[] 不能够省略，省略之后不知道指向的是一个 A，还是一个数组</span></pre></td></tr></table></figure><p>在指针前存储 4 个字节，存储了数据类型，如果没有 []，就不会去访问 4 个字节。那么后面的对象都没有调用析构函数，没有内存释放，造成内存泄漏。</p>\n<p>同时，会出现段错误。段错误是指访问的内存超出了系统给这个程序所设定的内存空间，例如访问了不存在的内存地址、访问了系统保护的内存地址、访问了只读的内存地址等等情况。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上这段代码没有问题，对于内置的类型 int，不需要存储 4 个字节，也不需要调用析构函数。p 是一块完整的内存。</p>\n<p>但是，为了简单起见，<strong>new []</strong> 与 <strong>delete[]</strong> 搭配使用。</p>\n<p><strong>注意</strong></p>\n<p>在堆上分配的内存默认不进行初始化</p>\n<ol>\n<li><code>int *p1 = new int[5];</code>  默认不进行初始化</li>\n<li><code>int *p2 = new int[5]();</code>  进行默认初始化</li>\n<li><code>int *p2 = new int[5]&#123;0,1,2,3,4&#125;</code> : 进行显式对应函数初始化</li>\n</ol>\n<h3 id=\"动态2d数组\"><a class=\"anchor\" href=\"#动态2d数组\">#</a> 动态 2D 数组</h3>\n<h4 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101152237726.png\" alt=\"image-20221101152237726\" /></p>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101152523993.png\" alt=\"image-20221101152523993\" /></p>\n<p>先 delete char*，再 delete char**</p>\n<p>先 delete 三个粉红块块，再 delete 一个粉红块块</p>\n<p>多维数组很少用现在这种方式做，都是用一维数组模拟多维数组。</p>\n<h2 id=\"const成员\"><a class=\"anchor\" href=\"#const成员\">#</a> Const 成员</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101153137329.png\" alt=\"image-20221101153137329\" /></p>\n<ol>\n<li>\n<p>初始化放在构造函数的成员初始化表中进行：</p>\n<ol>\n<li>常量在初始化的时候必须被给值，而不是赋值，所以不能写在构造函数内</li>\n<li>所以我们通过初始化表的方式完成。</li>\n</ol>\n</li>\n<li>\n<p><strong>不同的对象，可以有不同的 const 成员变量的值</strong>。对象一旦有了，在对象的生命周期内不变。不同的对象可以有不一样的值。A (1); A (2);</p>\n</li>\n<li>\n<p><strong>所有的对象共享一个</strong> static const: 编译器内的常量，所有的对象都是一样的，最好在定义的地方进行初始化。</p>\n</li>\n</ol>\n<p>静态成员变量一般在类外进行定义。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101153818760.png\" alt=\"image-20221101153818760\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前后要保证一致，const 在后面</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 编译器怎么能发现不是 const 的？转化为防止变量被赋值，见下面，所以 const 指针不能修改</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>A <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上面的函数相当于这个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">A</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>cout <span class=\"token operator\">&lt;&lt;</span>x <span class=\"token operator\">&lt;&lt;</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> A<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上面的函数相当于这个，第一个 const 表示指向对象常量，后一个 const 表示指针本身是常量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> A <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常对象：这个对象是不可以修改的</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，常对象无法调用非常方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 正确</span></pre></td></tr></table></figure><p>我们将不修改对象内变量的值的时候，将对应方法声明为 const，如 <code>const A a(0,0);</code></p>\n<p>const 成员函数，在声明编译的函数后面，增加关键字 const。 <code>void show(); const</code></p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/24/COA/Lecture07-%E5%AD%98%E5%82%A8%E5%99%A8/",
            "url": "https://quas-modo.github.io/2022/10/24/COA/Lecture07-%E5%AD%98%E5%82%A8%E5%99%A8/",
            "title": "Lecture07-存储器",
            "date_published": "2022-10-24T05:30:15.000Z",
            "content_html": "<p>存储器相关，聚焦于半导体存储器，主要分为读写存储器、只读存储器以及读为主的存储器。接着叙述芯片逻辑，以及芯片优化。<br />\n<span id=\"more\"></span></p>\n<h2 id=\"回顾存储器\"><a class=\"anchor\" href=\"#回顾存储器\">#</a> 回顾：存储器</h2>\n<h2 id=\"回顾存储器-2\"><a class=\"anchor\" href=\"#回顾存储器-2\">#</a> 回顾：存储器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221020163158122.png\" alt=\"image-20221020163158122\" /></p>\n<p>1Byte（字节） = 8 bit（比特）</p>\n<p>1 字 可能是 4 字节，也可能是 8 字节。根据计算机是 32 位还是 64 位有所不同，不同计算机有不同的字长。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101171557660.png\" alt=\"image-20221101171557660\" /></p>\n<h2 id=\"存储器层次结构\"><a class=\"anchor\" href=\"#存储器层次结构\">#</a> 存储器层次结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221021202852887.png\" alt=\"image-20221021202852887\" /></p>\n<h2 id=\"半导体存储器\"><a class=\"anchor\" href=\"#半导体存储器\">#</a> 半导体存储器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124316886.png\" alt=\"image-20221024124316886\" /></p>\n<p><strong>半导体</strong></p>\n<p>位元 存储 1 位数据</p>\n<h3 id=\"半导体存储器类型\"><a class=\"anchor\" href=\"#半导体存储器类型\">#</a> 半导体存储器类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124432370.png\" alt=\"image-20221024124432370\" /></p>\n<p>表中列出的而<strong>所有类型的存储器都是随机存取</strong>的。</p>\n<p>快闪 flash——U 盘是其中的一种。</p>\n<h3 id=\"读-写存储器随机存取存储器ram\"><a class=\"anchor\" href=\"#读-写存储器随机存取存储器ram\">#</a> 读 - 写存储器 —— 随机存取存储器 RAM</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124536588.png\" alt=\"image-20221024124536588\" /></p>\n<p>RAM 的明显特征是，可以<strong>方便快捷</strong>地从存储器读取数据和向存储器写入新数据，且读写操作都是通过使用<strong>电信号</strong>来实现的。</p>\n<p><strong>易失</strong> —— 必须持续供电，一旦断电，数据就会丢失。</p>\n<h4 id=\"sram-静态ram\"><a class=\"anchor\" href=\"#sram-静态ram\">#</a> SRAM 静态 RAM</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124554411.png\" alt=\"image-20221024124554411\" /></p>\n<p>CS 片送</p>\n<p>RW 控制读写</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124714978.png\" alt=\"image-20221024124714978\" /></p>\n<p>推导过程</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130157726.png\" alt=\"image-20221024130157726\" /></p>\n<h4 id=\"dram-动态ram\"><a class=\"anchor\" href=\"#dram-动态ram\">#</a> DRAM 动态 RAM</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024124958784.png\" alt=\"image-20221024124958784\" /></p>\n<p>通过电容充电来存储数据。</p>\n<p>电容器有漏电趋势，动态 RAM 需要周期地充电刷新来维持数据的存储。</p>\n<p>动态一词就是在描述存储电荷丢失的趋势，即使电源一直在供电。</p>\n<h4 id=\"sram与dram的对比\"><a class=\"anchor\" href=\"#sram与dram的对比\">#</a> SRAM 与 DRAM 的对比</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024125105338.png\" alt=\"image-20221024125105338\" /></p>\n<p>DRAM 密度高，价格便宜，趋向于满足大容量存储器的要求。但是 SRAM 更快。</p>\n<p>SRAM 一般用于 cache 存储器（片上或者片外的）【CPU 中】，而 DRAM 则用于主存储器中。</p>\n<h3 id=\"只读存储器\"><a class=\"anchor\" href=\"#只读存储器\">#</a> 只读存储器</h3>\n<h4 id=\"rom-只读存储器\"><a class=\"anchor\" href=\"#rom-只读存储器\">#</a> ROM 只读存储器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130516422.png\" alt=\"image-20221024130516422\" /></p>\n<p>问题补充：固化数据需要较大的固定成本，无论是制造一片或者复制上千片特殊的 ROM。但是可以通过批量生产降低单片芯片的成本。</p>\n<h4 id=\"可编程romprom\"><a class=\"anchor\" href=\"#可编程romprom\">#</a> 可编程 ROM（PROM）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024130821252.png\" alt=\"image-20221024130821252\" /></p>\n<p>需要少量的存储特定内容的 ROM 芯片，可以选择较为廉价的可编程 PROM</p>\n<p>可由供应商或者用户在芯片出厂后写入一次、</p>\n<h3 id=\"主要进行读操作的存储器\"><a class=\"anchor\" href=\"#主要进行读操作的存储器\">#</a> 主要进行读操作的存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131021140.png\" alt=\"image-20221024131021140\" /></p>\n<h4 id=\"eprom\"><a class=\"anchor\" href=\"#eprom\">#</a> EPROM</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131047438.png\" alt=\"image-20221024131047438\" /></p>\n<p>使芯片暴露在紫外线辐射下使所有的存储位元都被擦除，没有办法做到很精确，因此是芯片级的可擦除性。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131226634.png\" alt=\"image-20221024131226634\" /></p>\n<h4 id=\"eeprom\"><a class=\"anchor\" href=\"#eeprom\">#</a> EEPROM</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131245626.png\" alt=\"image-20221024131245626\" /></p>\n<p>任何时候都可以写入，无需擦除原先内容，只更新寻址到的一个或多个字节。</p>\n<p>将非易失性和数据修改灵活的优点结合起来。修改数据只需要使用常规的控制、地址和地址总线。</p>\n<p><strong>电写入，从 1 变成 0； 电擦除，从 0 变成 1。</strong></p>\n<h4 id=\"快闪存储器\"><a class=\"anchor\" href=\"#快闪存储器\">#</a> 快闪存储器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131457113.png\" alt=\"image-20221024131457113\" /></p>\n<p>NAND Flash 共用一条线 —— 外部存储器</p>\n<h3 id=\"各类rom对比\"><a class=\"anchor\" href=\"#各类rom对比\">#</a> 各类 ROM 对比</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131557564.png\" alt=\"image-20221024131557564\" /></p>\n<h2 id=\"芯片逻辑\"><a class=\"anchor\" href=\"#芯片逻辑\">#</a> 芯片逻辑</h2>\n<h3 id=\"从位元到主存\"><a class=\"anchor\" href=\"#从位元到主存\">#</a> 从位元到主存</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131723140.png\" alt=\"image-20221024131723140\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131744592.png\" alt=\"image-20221024131744592\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131758270.png\" alt=\"image-20221024131758270\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131957375.png\" alt=\"image-20221024131957375\" /></p>\n<p>位扩展，从 1bit 增加到 8bit，需要增加 7 根线。</p>\n<p>字扩展，从 16K 变成 64K，16K 需要 7 根线，64K 需要 8 根线【因为行列复用】，只需要增加一根线，就可以实现 16K 到 64K。</p>\n<p>1K = 2 <sup>10</sup></p>\n<p>有多少位数据，就需要有多少根数据线。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101172926489.png\" alt=\"image-20221101172926489\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132007925.png\" alt=\"image-20221024132007925\" /></p>\n<h3 id=\"如何寻址地址译码器\"><a class=\"anchor\" href=\"#如何寻址地址译码器\">#</a> 如何寻址：地址译码器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131851948.png\" alt=\"image-20221024131851948\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131815432.png\" alt=\"image-20221024131815432\" /></p>\n<p>DRAM 不用刷新，采用行列复用 —— 用 11 位分别计算出行地址和列地址进行访问， 因为 DRAM 的存储空间较大，且行列复用耗时较高，所以只在 DRAM 中使用。</p>\n<p>SRAM 且没有 RAS（行地址选通）和 CAS（列地址选通），也没有数据输入输出缓冲器，SRAM 常作为缓存，需要更快的速度。</p>\n<p>WE 写允许</p>\n<p>OE 输出允许</p>\n<h3 id=\"如何刷新\"><a class=\"anchor\" href=\"#如何刷新\">#</a> 如何刷新</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024131911336.png\" alt=\"image-20221024131911336\" /></p>\n<p>集中式刷新会造成死区，影响使用，因此开发分散式刷新和异步刷新进行优化。</p>\n<p>译码阶段不需要进行缓存，每行的刷新相对独立，不需要按照顺序。</p>\n<h2 id=\"高级的dram架构\"><a class=\"anchor\" href=\"#高级的dram架构\">#</a> 高级的 DRAM 架构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132123622.png\" alt=\"image-20221024132123622\" /></p>\n<h3 id=\"同步dramsynchorounous-dram-sdram\"><a class=\"anchor\" href=\"#同步dramsynchorounous-dram-sdram\">#</a> 同步 DRAM (Synchorounous DRAM, SDRAM)</h3>\n<h3 id=\"双频率sdramdouble-data-rate-sdram\"><a class=\"anchor\" href=\"#双频率sdramdouble-data-rate-sdram\">#</a> 双频率 SDRAM (Double-Data-Rate SDRAM)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132312999.png\" alt=\"image-20221024132312999\" /></p>\n<p>SDRAM</p>\n<p>在每一次行选之前，都需要做预充电</p>\n<p>如果下一次仍然是同一行的数据，不需要行选。</p>\n<p>在时钟上升沿才能发数据</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132326001.png\" alt=\"image-20221024132326001\" /></p>\n<p>DDR SDRAM</p>\n<p>在时钟下升沿也可以发数据</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132335364.png\" alt=\"image-20221024132335364\" /></p>\n<p>核心频率无法改变 —— 电容很难提升</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101162647755.png\" alt=\"image-20221101162647755\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101162656519.png\" alt=\"image-20221101162656519\" /></p>\n<h2 id=\"寄存器基本原理\"><a class=\"anchor\" href=\"#寄存器基本原理\">#</a> 寄存器基本原理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221101164208668.png\" alt=\"image-20221101164208668\" /></p>\n<p>边沿 D 触发器，RS 锁存器以及增加了 input 和 clock（？</p>\n<p>寄存器和 CPU 的时钟同步</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221024132047639.png\" alt=\"image-20221024132047639\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/18/cpp/Lecture08-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/",
            "url": "https://quas-modo.github.io/2022/10/18/cpp/Lecture08-%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/",
            "title": "Lecture08-数组和指针",
            "date_published": "2022-10-18T11:53:25.000Z",
            "content_html": "<p>一维数组、指针的指针、RAII、union、函数指针<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture08-数组和指针\"><a class=\"anchor\" href=\"#lecture08-数组和指针\">#</a> Lecture08 - 数组和指针</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011193356316.png\" alt=\"image-20221011193356316\" /></p>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h3>\n<p>相同类型，连续存储</p>\n<h3 id=\"一维数组\"><a class=\"anchor\" href=\"#一维数组\">#</a> 一维数组</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMjEwMTExOTM2MjIxNjQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011193622164.png</span>&quot; alt=&quot;image-20221011193622164&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>函数接口中，数组的长度需要显式的表达。即需要 f (int A [], int n); 其中，n 表示数组的长度。</p>\n<p>int a[6];</p>\n<p>a 是数组类型。</p>\n<p>f (a) 中的 a 是地址，因为在函数中，a 变成了右值，进行了隐式的类型转换。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194122070.png\" alt=\"image-20221011194120299\" /></p>\n<p>第二种写法是错误的<br />\n栈中未初始化填充 0xCC，对应中文的烫（在 vscode 中）<br />\n堆中未初始化填充 0xCSD，对应中文的屯（在 vscode 中)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194633177.png\" alt=\"image-20221011194633177\" /></p>\n<p>工具<br />\n / RTC1<br />\nmallopt<br />\nvalgrind ——Valgrind 基于仿真方式对程序进行调试，它先于应用程序获取实际处理器的控制权，并在实际处理器的基础上仿真一个虚拟处理器，并使应用程序运行于这个虚拟处理器之上，从而对应用程序的运行进行监视。</p>\n<p>debug 文件中有符号表，release 中没有。</p>\n<h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194756090.png\" alt=\"image-20221011194756090\" /></p>\n<p>pointer literal<br />\n 指针定义为 null，保护内存。<br />\n（void *）0 —— 未定义的 datatype，无法对其做解地址操作。<br />\n（void *）可作为任何类型的接口。<br />\ndouble * q;<br />\nInt * p;<br />\nVoid * v;<br />\nV = q;<br />\nV = p;<br />\n 但是 q 和 p 不能赋值为 v。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011194829940.png\" alt=\"image-20221011194829940\" /></p>\n<p>例如：</p>\n<p>void memset(void *p, int n){<br />\n// 内存清空<br />\n char * q = (char <em>)p;<br />\nFor(int I = 0; i &lt; n; i++)<br />\n{<br />\n<em>(q+i) = 0;\t<br />\n}<br />\n}<br />\nInt a[100];<br />\nA b;<br />\nmemset(&amp;a[0], 100</em>4);<br />\nMemset(&amp;b, );<br />\n 可以传递进 int</em> 类型，也可以传入 A 类型。</p>\n<h2 id=\"指针与数组\"><a class=\"anchor\" href=\"#指针与数组\">#</a> 指针与数组</h2>\n<p><img data-src=\"C:%5CUsers%5CQUAS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221011195335516.png\" alt=\"image-20221011195335516\" /></p>\n<p>a 是一个 const，不能用 a++ 的方式改变访问</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195419924.png\" alt=\"image-20221011195419924\" /></p>\n<p>P [i] 用指针实现动态数组</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195822103.png\" alt=\"image-20221011195822103\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195702881.png\" alt=\"image-20221011195702881\" /></p>\n<p>多维数组</p>\n<p>关注不同的定义方式</p>\n<p>using T = int [2];</p>\n<p>ragged array——java 中并非整齐排列，可以锯齿排列。cpp 中可以自己实现。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195308401.png\" alt=\"image-20221011195308401\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012000657463.png\" alt=\"image-20221012000657463\" /></p>\n<p>关于如何理解取 a00 的地址和取 a0 的地址一样，并且取 q+1 的地址仍然是它自身，我的理解是，编译器识别的它的类型不一样，因此解一个指针的指针仍然是一个指针，也不存在另外存储了一个指针数组来表示。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011195953872.png\" alt=\"image-20221011195953872\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200024133.png\" alt=\"image-20221011200024133\" /></p>\n<p>cpp 是允许数组越界的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200038340.png\" alt=\"image-20221011200038340\" /></p>\n<p>在传入参数的时候，先进行升维的操作，在打印地址时，再进行降维的操作。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思考为什么地址是这样的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" :\"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>k <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" :\"</span>  <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思考如何不另外计数完成每隔四个就打印一次 endl</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token operator\">+</span>j<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221011200055610.png\" alt=\"image-20221011200055610\" /></p>\n<p>C<br />\nint *p = (int <em>) malloc(sizeof(int) * 8);<br />\n 因为 malloc 为 void</em>，需要定义 int * 来使用。</p>\n<p>Cpp<br />\nInt *p1= new int;<br />\nInt *q1 = new int[8];</p>\n<p>用 new 的时候，会强制类型转换，并一个一个调用构造函数进行构造。因为 new 知道新建的类型，但是 malloc 不知道新建的类型，无法进行调用。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018140518525.png\" alt=\"image-20221018140518525\" /></p>\n<p>delete [] 另外存储 4byte 记录空间的大小（如果是 32 位存储）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//delete 的时候，无法删除且会造成归还的错误</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 解决方案是另外开一个指针进行遍历</span></pre></td></tr></table></figure><p>RAII</p>\n<p>Resource Acquisition Is Initialization</p>\n<p>RAII，也称为 “资源获取就是初始化”，是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9jJTJCJTJCLzk5MjcyP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\"> c++</span> 等编程语言常用的管理资源、避免内存泄露的方法。它保证在任何情况下，使用对象时先构造对象，最后析构对象。</p>\n<p>compiler 帮助程序员管理资源，防止资源泄露。~auto_ptr ()</p>\n<p>类中能够同时使用 operator * 和 operato -&gt;</p>\n<p>shared_ptr 的表示方式</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018142936362.png\" alt=\"image-20221018142936362\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018142519655.png\" alt=\"image-20221018142519655\" /></p>\n<p>struct B sizeof 不是 7，需要对齐</p>\n<p>也许是 12，一一对齐</p>\n<p>也许是 8【char b; short c; int a】变量的顺序也会影响内存的存放方式</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143235958.png\" alt=\"image-20221018143235958\" /></p>\n<p>Union 和 Struct 的区别是可以共享存储空间。</p>\n<p>对于 Struct，三个赋值都有效；对于 Union 来说，只有最后一个语句有效【共享空间】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143001639.png\" alt=\"image-20221018143001639\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143334428.png\" alt=\"image-20221018143334428\" /></p>\n<p>原本各开 100 个空间，耗费资源，正好时候 union 的定义【只需要 Line\\Rectangle\\Ellipse 中的一种】。</p>\n<p>但是值存储 Line 或 Rectangle 或 Ellipse 不能知道是哪种，需要 tag，且每个类型都需要 tag，不然 tag 会覆盖掉别的数据。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143902650.png\" alt=\"image-20221018143902650\" /></p>\n<p>不止 OO 中存在多态性，cpp 也可以通过 union 实现多态。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018143952177.png\" alt=\"image-20221018143952177\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018144156718.png\" alt=\"image-20221018144156718\" /></p>\n<p>Struct Programming 也可以去实现 OO 的功能</p>\n<p>OO 实际上是编译器帮助做了一些工作。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/18/COA/Lecture06-%E5%8A%A0%E5%87%8F%E6%B3%95%E5%8D%81%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/",
            "url": "https://quas-modo.github.io/2022/10/18/COA/Lecture06-%E5%8A%A0%E5%87%8F%E6%B3%95%E5%8D%81%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/",
            "title": "Lecture06-加减法十进制表示",
            "date_published": "2022-10-18T11:50:47.000Z",
            "content_html": "<p>十进制表示的加减法<br />\n &lt;!--more&gt;</p>\n<h1 id=\"lecture06-加减法十进制数表示\"><a class=\"anchor\" href=\"#lecture06-加减法十进制数表示\">#</a> Lecture06 加减法十进制数表示</h1>\n<h2 id=\"回顾二进制编码的十进制表示\"><a class=\"anchor\" href=\"#回顾二进制编码的十进制表示\">#</a> 回顾：二进制编码的十进制表示</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018161625312.png\" alt=\"image-20221018161625312\" /></p>\n<h2 id=\"回顾补码表示整数的加减法\"><a class=\"anchor\" href=\"#回顾补码表示整数的加减法\">#</a> 回顾：补码表示整数的加减法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018161749133.png\" alt=\"image-20221018161749133\" /></p>\n<h3 id=\"加法溢出判定\"><a class=\"anchor\" href=\"#加法溢出判定\">#</a> 加法溢出判定</h3>\n<p>正负 进位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018162304448.png\" alt=\"image-20221018162304448\" /></p>\n<h2 id=\"加法\"><a class=\"anchor\" href=\"#加法\">#</a> 加法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018162440184.png\" alt=\"image-20221018162440184\" /></p>\n<h3 id=\"25-31-56\"><a class=\"anchor\" href=\"#25-31-56\">#</a> 25 + 31 = 56</h3>\n<p>用 0010 表示 2，用 0101 表示 5</p>\n<p>用 0011 表示 3，用 0001 表示 1</p>\n<p>个位数和十位数的和均小于 9</p>\n<h3 id=\"28-39-67\"><a class=\"anchor\" href=\"#28-39-67\">#</a> 28 + 39 = 67</h3>\n<p>0001 要再加上一个 0110 等于 0111</p>\n<p><strong>为什么加上 6？</strong></p>\n<p>二进制 10000 的第 5 位表示 16，但在十进制中实际上表示的是 10，少进了 6，所以在个位还需要再加上 6。</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018163500884.png\" alt=\"image-20221018163500884\" /></p>\n<p>左边表格分别表示 10-19 的数，右边为实际的硬件实现。</p>\n<p>C4 表达式的意思是，如果（S1 和 S3 为 1）或者（S2 和 S3 为 1）则肯定大于 10，若 C4 * 为 1，则肯定大于 16。【公式中的 S1、2、3 应该有星号）</p>\n<p>C4 作为输出的同时，也对 S2 和 S1 的真正输出产生了影响。</p>\n<h2 id=\"减法\"><a class=\"anchor\" href=\"#减法\">#</a> 减法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164311877.png\" alt=\"image-20221018164311877\" /></p>\n<p>9-x 不会出现借位的情况。</p>\n<h3 id=\"反转数字\"><a class=\"anchor\" href=\"#反转数字\">#</a> “反转” 数字：</h3>\n<ul>\n<li>按位反转，并添加 <code>1010</code> （10）</li>\n<li>添加 <code>0110</code> （6），并按位反转</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190527126.png\" alt=\"image-20221018190527126\" /></p>\n<h3 id=\"结果调整\"><a class=\"anchor\" href=\"#结果调整\">#</a> 结果调整</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164745084.png\" alt=\"image-20221018164745084\" /></p>\n<h4 id=\"309-125184有进位舍弃进位\"><a class=\"anchor\" href=\"#309-125184有进位舍弃进位\">#</a> 309-125=184 (有进位，舍弃进位)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018194656730.png\" alt=\"image-20221018194656730\" /></p>\n<p>当得到的结果在 <code>10~19</code>  时，都需要进行修正。 <code>10~15</code>  时，加上 6 进行修正。</p>\n<p>例如，1110 + 0110 进 1 得到 0100. 即 13+6-16 (-10) 得到 3。</p>\n<p>有进位相当于，a-b 的时候 a&gt;b，所以 a-b = a + (999 - b) + 1 - 1000。</p>\n<h4 id=\"125-309-184无进位取反加1符号位设为负\"><a class=\"anchor\" href=\"#125-309-184无进位取反加1符号位设为负\">#</a> 125-309 = -184（无进位，取反加 1，符号位设为负）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018194641391.png\" alt=\"image-20221018194641391\" /></p>\n<p>相当于此时 a &lt; b</p>\n<p>a - b =  -[1000 - [a + (999 - b) + 1]]</p>\n<p>【以上部分可参考 Lecture05 中，尾数的原码加法示例，是一样的道理】</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018164912432.png\" alt=\"image-20221018164912432\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/15/thoughts/to-the-moon/",
            "url": "https://quas-modo.github.io/2022/10/15/thoughts/to-the-moon/",
            "title": "to the moon",
            "date_published": "2022-10-14T16:13:14.000Z",
            "content_html": "<p>「如果你忘记了，或是走丢了呢？」<br />\n「那我们会在月亮上相遇的，傻瓜」<br />\n<span id=\"more\"></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUczNHkxcDd3TS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT00MTRjOWY2ODI5NzBkNmUwZDVkYjhhMjcyNGQ2M2ZhNw==\">https://www.bilibili.com/video/BV1G34y1p7wM/?spm_id_from=333.337.search-card.all.click&amp;vd_source=414c9f682970d6e0d5db8a2724d63fa7</span></p>\n<p>在音乐里寻找到了更多的感动。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXdWNHkxdTd2dC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT00MTRjOWY2ODI5NzBkNmUwZDVkYjhhMjcyNGQ2M2ZhNw==\">https://www.bilibili.com/video/BV1wV4y1u7vt/?spm_id_from=333.337.search-card.all.click&amp;vd_source=414c9f682970d6e0d5db8a2724d63fa7</span></p>\n<p>看了一遍复盘，鸡皮疙瘩更厉害了……</p>\n<p>成千上万的灯塔…… 镶嵌在遥远的天际。<br />\n他们让那光芒照耀着其他灯塔，也照耀着我。</p>\n<p>John 在 River 的病榻前给她弹了这首曲子。<br />\nRiver 问：“这首曲子叫什么名字？”<br />\nJohn：“叫 For River。”<br />\nRiver：“真老土。”</p>\n<p>“您为什么想去月球呢？”<br />\n“我也不知道，就是想去。”</p>\n<p>“那如果你忘了，或者是走丢了，怎么办？”<br />\n“那我们总会在月亮上相遇的，傻瓜。”</p>\n<p>男主第一次遇见女主时提到过鸭嘴兽和兔子<br />\n并且约定到月球相遇 但是男主的兄弟死了，男主就注射药物忘掉了那段记忆<br />\n所以女主一遍一遍的折兔子<br />\n一次又一次的追问男主<br />\n永远抱着他和她的鸭嘴兽<br />\n永远怀着对男主的期待与眷恋</p>\n",
            "tags": [
                "杂谈",
                "书影音",
                "杂谈",
                "书影音"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/",
            "url": "https://quas-modo.github.io/2022/10/14/COA/Lecture05-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/",
            "title": "Lecture05-浮点数计算",
            "date_published": "2022-10-14T02:57:07.000Z",
            "content_html": "<p>浮点数的加减乘除。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture05-浮点数运算\"><a class=\"anchor\" href=\"#lecture05-浮点数运算\">#</a> Lecture05 - 浮点数运算</h1>\n<h2 id=\"回顾\"><a class=\"anchor\" href=\"#回顾\">#</a> 回顾</h2>\n<p>记忆 1+8+23 的（符号位移码原码）</p>\n<p>记忆各种情况对应的表示</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162002689.png\" alt=\"image-20221013162002689\" /></p>\n<h2 id=\"加法和减法\"><a class=\"anchor\" href=\"#加法和减法\">#</a> 加法和减法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013162704448.png\" alt=\"image-20221013162704448\" /></p>\n<ol>\n<li>\n<p>检查 0：如果有 0 存在可以不用计算</p>\n</li>\n<li>\n<p>对齐有效位：阶码向<strong>大值</strong>对齐，因为右移较小的数而丢失的数字所造成的的影响较小。右移较小的数有效值的幅值部分 1 位，并将阶值加 1。<strong>如果两个数的阶值差别非常大，则较小的数丢失</strong></p>\n</li>\n<li>\n<p>加或减有效值：<strong>原码加减法</strong></p>\n</li>\n<li>\n<p>规格化结果：把结果调整为左移有效值直到<strong>最高有效数字为非 0</strong>。</p>\n<p>（右规最多是两位，最多是 1.1111...+1.xxxx，对应有效值的上溢）</p>\n</li>\n</ol>\n<h3 id=\"溢出\"><a class=\"anchor\" href=\"#溢出\">#</a> 溢出</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013164459041.png\" alt=\"image-20221013164459041\" /></p>\n<ol>\n<li>阶值上溢</li>\n</ol>\n<p>​\t\t最大允许阶值 127（11111110）</p>\n<p>​\t\t右移可能会导致阶值的上溢</p>\n<ol start=\"2\">\n<li>\n<p>阶值下溢</p>\n<p>最小阶值为 - 126（00000001）</p>\n<p>左移可能会引起阶值的下溢</p>\n</li>\n<li>\n<p>有效值的上下溢只存在于右规</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013171505053.png\" alt=\"image-20221013171503186\" /></p>\n</li>\n</ol>\n<h3 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014093204887.png\" alt=\"image-20221014093204887\" /></p>\n<p>关于<strong>数太小</strong>阶下溢的问题，在 cpp 中，如果是单精度浮点数，会用非规格化数表示，如果是双精度浮点数，会直接用 0 表示。</p>\n<h3 id=\"原码的加法\"><a class=\"anchor\" href=\"#原码的加法\">#</a> 原码的加法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165531300.png\" alt=\"image-20221013165531300\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013165721396.png\" alt=\"image-20221013165721396\" /></p>\n<p>求补的时候加了 2 的 n 次方</p>\n<p>有进位说明 a&gt;b</p>\n<p>无进位说明 a&lt;b</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014103516514.png\" alt=\"image-20221014103516514\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013172902710.png\" alt=\"image-20221013172902710\" /></p>\n<p>01111110 ——127    23 表示有 23 个零</p>\n<p>01111101 ——126    21 表示有 21 个零</p>\n<p>差了一位，左移一位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173317582.png\" alt=\"image-20221013173317582\" /></p>\n<p>1111110 127</p>\n<p>1111101 126</p>\n<p>然后给 0.4375 取个反</p>\n<h2 id=\"乘法和除法\"><a class=\"anchor\" href=\"#乘法和除法\">#</a> 乘法和除法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013163420919.png\" alt=\"image-20221013163420919\" /></p>\n<p>注意乘法和除法的阶值计算 ——</p>\n<ul>\n<li>乘法加 bias</li>\n<li>除法减 bias</li>\n<li>bias 的值为 127【通常，移码的偏移量为 2<sup>k-1</sup> -1，移码的偏移量主要是看想表示多少个负数和多少个正数，阶码的范围是 - 126~127，-127 和 128 分别表示特殊的数】</li>\n</ul>\n<h3 id=\"乘法\"><a class=\"anchor\" href=\"#乘法\">#</a> 乘法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173727304.png\" alt=\"image-20221013173727304\" /></p>\n<p>对于乘法来说，只有右规。【1.x * 1.x 只可能超出】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013173847536.png\" alt=\"image-20221013173847536\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174221322.png\" alt=\"image-20221013174221322\" /></p>\n<p>最高两位为 01，不用处理。</p>\n<h3 id=\"除法\"><a class=\"anchor\" href=\"#除法\">#</a> 除法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174335704.png\" alt=\"image-20221013174335704\" /></p>\n<p>x 和 y 可能都是 0，可能会报错或者是正负无穷</p>\n<p>对于除法来说，只有左规。【1.x/ 1.x 】</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174656673.png\" alt=\"image-20221013174656673\" /></p>\n<h3 id=\"精度保护\"><a class=\"anchor\" href=\"#精度保护\">#</a> 精度保护</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013174820265.png\" alt=\"image-20221013174820265\" /></p>\n<p>y 需要左移一位对齐，所以最后一位 1 在不使用附加位的情况下会丢失。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175053246.png\" alt=\"image-20221013175053246\" /></p>\n<p>一般而言，多余位的值超过了最低可表示位值的一半，则进位。</p>\n<p>重点关注 “10” 强制结果为偶数的分类讨论。如果结果的最低可表示位是 1，结果向上入；当最低可表示位是 0，结果向下入。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013175347832.png\" alt=\"image-20221013175347832\" /></p>\n<p>朝 0 摄入，被截断值的幅值总是小于或等于更精确原值的幅值，在计算中产生一致的向下偏差。</p>\n<h3 id=\"精度考虑\"><a class=\"anchor\" href=\"#精度考虑\">#</a> 精度考虑</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014105545840.png\" alt=\"image-20221014105545840\" /></p>\n<p>x == (int)(float) x</p>\n<p>int 型有 32 位，但是 float 精度只能保存 24 位，会有精度的损失。</p>\n<p>x * x &gt;=  0 否</p>\n<p><strong>(D + F)  - D == F 什么时候不成立？</strong></p>\n<p>右边计算出来为 double 型，左边是 float</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> f <span class=\"token operator\">-</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于此例情况，当<strong> i 大于 53 或等于 - 53</strong> 时，会输出。</p>\n<p>因为此时 f 相对于 d 较小，相当于 0。</p>\n<p>补充：双精度 64（1+11+52）小数部分有 <code>52</code>  位。别的情况，i 会有不同的值对应。</p>\n<ol>\n<li>\n<p>i 大于 53 的情况</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190250710.png\" alt=\"image-20221018190250710\" /></p>\n<p>舍入位虽然是 10，但前置位已经是 0（偶数），因此不进位，所以有精度的丢失。</p>\n</li>\n<li>\n<p>i 等于 - 53 的情况</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221018190243583.png\" alt=\"image-20221018190243583\" /></p>\n<p>​\t\t舍入位是 10，前置位是 1，因此要进位，从而造成了误差。</p>\n<p>只要有精度的丢失，就是 “否”</p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/14/%E9%83%91%E9%92%A2%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6%E8%AE%AD%E7%BB%83%E8%90%A5/20221013-%E8%AE%A1%E7%AE%97%E6%9C%BA/",
            "url": "https://quas-modo.github.io/2022/10/14/%E9%83%91%E9%92%A2%E8%A1%8C%E4%B8%9A%E7%A0%94%E7%A9%B6%E8%AE%AD%E7%BB%83%E8%90%A5/20221013-%E8%AE%A1%E7%AE%97%E6%9C%BA/",
            "title": "20221013-计算机",
            "date_published": "2022-10-13T16:23:01.000Z",
            "content_html": "<p>计算机行业研究<br />\n<span id=\"more\"></span></p>\n<h1 id=\"海通计算机行业研究框架\"><a class=\"anchor\" href=\"#海通计算机行业研究框架\">#</a> 海通计算机行业研究框架</h1>\n<h2 id=\"实事\"><a class=\"anchor\" href=\"#实事\">#</a> 实事</h2>\n<p>上周五，拜登政府批准新规定，在未获美国商务部特别许可证情况下，禁止软硬件供应商生产 18 纳米以下的 DRAM 芯片、128 层或以上 NAND 存储芯片以及逻辑芯片。此外，还明确禁止向被美国商务部列入黑名单的中国 28 家公司出售更广泛的半导体技术（或传统逻辑芯片）；禁止制造商出口使用美国硬件或软件制造的人工智能芯片。这些规定，适用于所有在美国注册的公司，即使在美国境外。再有，禁止向中国供应这些芯片的设备。</p>\n<p>美国限制中国，让中国和美国的芯片有代差级优势，但高性能芯片将用于无人机、人工智能、超算、军工等。只给中国做低端的芯片。</p>\n<h2 id=\"计算机行业梳理\"><a class=\"anchor\" href=\"#计算机行业梳理\">#</a> 计算机行业梳理</h2>\n<h3 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235102149.png\" alt=\"image-20221013235102149\" /></p>\n<p>计算机行业<br />\n A 股人均创收 70-80 万，人均创利 7-8 万，美股人均创收 200-300 万。</p>\n<p>商业模式分为平台型、产品型、项目型，毛利率高达 70% 可以称为产品型。</p>\n<h4 id=\"水平分类\"><a class=\"anchor\" href=\"#水平分类\">#</a> 水平分类</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235355825.png\" alt=\"image-20221013235355825\" /></p>\n<h4 id=\"垂直分类\"><a class=\"anchor\" href=\"#垂直分类\">#</a> 垂直分类</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013235418071.png\" alt=\"image-20221013235418071\" /></p>\n<p>软件产业个性大于共性，要看软件服务于哪个行业。<br />\n垂直行业以客户所处行业为区分，较大的有金融、电信、政府、制造等。软件行业依附于服务的行业，比如服务银行，银行较为稳定，服务银行的软件行业也比较稳定，增速比较快。</p>\n<h3 id=\"子行业\"><a class=\"anchor\" href=\"#子行业\">#</a> 子行业</h3>\n<p>重点领域：云计算基础 IT、软件、IT 服务、信息安全、大数据、人工智能、金融信息化、政务信息化、电力信息化、医疗信息化、交通信息化</p>\n<p>金融科技 —— 产品分割（每个公司专注于一个系统）<br />\n医疗信息化 —— 地域分割（每个公司在各个软件上的水平差不多，但主要业务集中在一个地域）<br />\n工业软件</p>\n<h2 id=\"细分领域\"><a class=\"anchor\" href=\"#细分领域\">#</a> 细分领域</h2>\n<h3 id=\"人工智能\"><a class=\"anchor\" href=\"#人工智能\">#</a> 人工智能</h3>\n<p>人工智能前期由政府投入，现在逐渐从 G 端转向 B 端再转向 C 端。<br />\n成本大幅度下降。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001113989.png\" alt=\"image-20221014001113989\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001138528.png\" alt=\"image-20221014001138528\" /></p>\n<h4 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h4>\n<p>应用于智慧城市、工业、智能网联汽车。</p>\n<p>AI 智慧教学系统多维度识别与分析</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001247795.png\" alt=\"image-20221014001247795\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001340849.png\" alt=\"image-20221014001340849\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001359801.png\" alt=\"image-20221014001359801\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001538543.png\" alt=\"image-20221014001538543\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001615073.png\" alt=\"image-20221014001615073\" /></p>\n<h4 id=\"英伟达\"><a class=\"anchor\" href=\"#英伟达\">#</a> 英伟达</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014001858282.png\" alt=\"image-20221014001858282\" /></p>\n<h4 id=\"终端\"><a class=\"anchor\" href=\"#终端\">#</a> 终端</h4>\n<p>逐渐有学习能力</p>\n<p>摄像头端</p>\n<p>智能视频分析</p>\n<p>视频监控</p>\n<p>安防</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002001941.png\" alt=\"image-20221014002001941\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002016834.png\" alt=\"image-20221014002016834\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002034532.png\" alt=\"image-20221014002034532\" /></p>\n<h3 id=\"云计算\"><a class=\"anchor\" href=\"#云计算\">#</a> 云计算</h3>\n<p>版权保护，用户付费习惯养成<br />\n单机游戏到网络游戏，大型游戏公司形成<br />\n通用型云化软件<br />\n专用型云化软件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002149228.png\" alt=\"image-20221014002149228\" /><br />\nAdobe 转型为定期收费时，财务报表数据变得更好看</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221014002210396.png\" alt=\"image-20221014002210396\" /></p>\n<h2 id=\"常见术语\"><a class=\"anchor\" href=\"#常见术语\">#</a> 常见术语</h2>\n<h3 id=\"市场渗透率\"><a class=\"anchor\" href=\"#市场渗透率\">#</a> 市场渗透率</h3>\n<p>市场渗透率 = （实际销售量 * 100%） / （市场潜量 * 100%）</p>\n<p>市场渗透率低，说明企业这种产品大有市场空间。</p>\n<h3 id=\"市场占有率\"><a class=\"anchor\" href=\"#市场占有率\">#</a> 市场占有率</h3>\n<p>实际占有额度，即一个品牌产品的销售额在所有这个品类产品中的份额。</p>\n",
            "tags": [
                "其他",
                "行业研究",
                "行业研究"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/10/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture02-03-%E5%8F%A4%E5%85%B8%E6%97%B6%E6%9C%9F-%E5%8F%A4%E7%BD%97%E9%A9%AC%E6%97%B6%E6%9C%9F/",
            "url": "https://quas-modo.github.io/2022/10/10/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture02-03-%E5%8F%A4%E5%85%B8%E6%97%B6%E6%9C%9F-%E5%8F%A4%E7%BD%97%E9%A9%AC%E6%97%B6%E6%9C%9F/",
            "title": "Lecture02/03 古典时期 古罗马时期",
            "date_published": "2022-10-10T09:39:52.000Z",
            "content_html": "<p>古典时期和古罗马时期艺术<br />\n<span id=\"more\"></span></p>\n<h2 id=\"lecture02\"><a class=\"anchor\" href=\"#lecture02\">#</a> Lecture02</h2>\n<h3 id=\"古典时期\"><a class=\"anchor\" href=\"#古典时期\">#</a> 古典时期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162712888.png\" alt=\"img\" /></p>\n<h4 id=\"普拉克希特列斯\"><a class=\"anchor\" href=\"#普拉克希特列斯\">#</a> 普拉克希特列斯</h4>\n<p>最早的全裸女人雕塑，展现 S 曲线。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162746271.png\" alt=\"img\" /></p>\n<h4 id=\"史柯帕斯\"><a class=\"anchor\" href=\"#史柯帕斯\">#</a> 史柯帕斯</h4>\n<p>还有其他神话也证明了阿波罗作为弓箭手的能力。其中一个神话是关于 Niobids 的破坏，即孩子尼俄伯。在希腊神话中，尼奥贝（Niobe) 是锡比卢斯（Sypylus）国王（利迪亚）坦塔卢斯 (Tantalus) 的女儿，底比斯的统治者安菲翁 (Amphion) 的妻子。尼奥比有六个儿子和六个女儿 (一些消息来源说她有七个儿子和七个女儿)，这是她的自尊心，如此之多，以至于她吹嘘自己的孩子比只有两个的勒托更有福气。泰坦尼克号对此感到恼火，并命令她的孩子们惩罚女王。因此，阿波罗用箭杀死了尼奥贝的儿子，而阿耳 emi 弥斯对她的女儿们也这样做。在神话的某些版本中，所有尼奥比德人都被杀死。</p>\n<p>然而，在另一本中，由于对 Leto 的热切祈祷，Chloris 得以幸存。据说 Chloris 后来与 Neleus 结婚，并且是 Trojan 战争期间希腊领导人之一的 Nestor 的母亲。在任何情况下，</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010162920746.png\" alt=\"img\" /></p>\n<p>断臂，但是很和谐。当时的审美标准是强调整体的和谐，而没有任何突出的地方。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010164534340.png\" alt=\"img\" /></p>\n<h2 id=\"lecture03-古罗马美术和中世纪美术\"><a class=\"anchor\" href=\"#lecture03-古罗马美术和中世纪美术\">#</a> Lecture03  古罗马美术和中世纪美术</h2>\n<h3 id=\"古罗马艺术\"><a class=\"anchor\" href=\"#古罗马艺术\">#</a> 古罗马艺术</h3>\n<h4 id=\"好大喜功的建筑\"><a class=\"anchor\" href=\"#好大喜功的建筑\">#</a> 好大喜功的建筑</h4>\n<p>万神殿，又译潘提翁神殿，是一座完整保存的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTclRTklQTklQUMlRTUlQjglOUQlRTUlOUIlQkQvMzA1OT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">罗马帝国</span>时期建筑，始建于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQUMlRTUlODUlODMlRTUlODklOEQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">公元前</span> 27-25 年，由<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTclRTklQTklQUMlRTUlQjglOUQlRTUlOUIlQkQvMzA1OT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">罗马帝国</span>首任皇帝<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjElOEIlRTUlQTQlQTclRTclQkIlQjQvMTYxMjg1Mj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">屋大维</span>的女婿<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOTglQkYlRTYlQTAlQkMlRTklODclOEMlRTUlQjglOTUvNzQ3NDUxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">阿格里帕</span>建造，用以供奉<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlQTUlRTYlOUUlOTclRTUlOEMlQjklRTQlQkElOUElRTUlQjElQjE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">奥林匹亚山</span>上诸神，可谓奥古斯都时期的经典建筑。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170353129.png\" alt=\"image-20221010170353129\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170415910.png\" alt=\"image-20221010170415910\" /></p>\n<p>科洛西姆竞技场</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010170723180.png\" alt=\"image-20221010170723180\" /></p>\n<p>凯旋门</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171042092.png\" alt=\"img\" /></p>\n<p>图拉真纪念柱</p>\n<p>图拉真（Trajan, Marcus Ulpius Nerva Traianus，53 年 9 月 18 日 - 117 年 8 月 9 日），古代罗马<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlODklRTYlOTUlQTYlRTUlQjAlQkMlRTclOEUlOEIlRTYlOUMlOUQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">安敦尼王朝</span>第二任皇帝，罗马<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOTQlRTglQjQlQTQlRTUlQjglOUQvNTM5NDQ1MD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">五贤帝</span>之一，98－117 年在位。</p>\n<p>五贤帝 (5 Good Emperors)，又称五贤君，是在公元 96 年至 180 年期间统治罗马帝国的五位皇帝。他们分别为： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjYlODUlRTUlQjAlOTQlRTclOTMlQTYvMzYwNzI4Mz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">涅尔瓦</span>（Nerva，96 年 —98 年）、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUIlQkUlRTYlOEIlODklRTclOUMlOUYvNDkwNTQ5P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">图拉真</span>（Trajan，98 年 —117 年）、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTMlODglRTUlQkUlQjclRTglODklQUY/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">哈德良</span>（Hadrian，117 年 —138 年，“勇帝”）、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlODklRTQlQjglOUMlRTUlQjAlQkMlQzIlQjclRTUlQkElODclRTYlOEElQTQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">安东尼・庇护</span>（Antoninus Pius，138 年 —161 年，又译安东尼努斯・庇乌斯） 以及<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQTklQUMlRTUlOEYlQUYlQzIlQjclRTUlQTUlQTUlRTUlOEIlOTIlRTclOTUlOTk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">马可・奥勒留</span>（Marcus Aurelius，161 年 —180 年，又译马克・安东尼努斯，或马尔库斯・奥列里乌斯，“哲学家皇帝”）。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171201721.png\" alt=\"img\" /></p>\n<p>庞贝古城</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171614647.png\" alt=\"img\" /></p>\n<h4 id=\"雕塑\"><a class=\"anchor\" href=\"#雕塑\">#</a> 雕塑</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171418967.png\" alt=\"img\" /></p>\n<p>《在死去的先辈头上翻制蜡像》</p>\n<p>追求写实</p>\n<p>屋大维 / 奥古斯都</p>\n<p>脸部刻画生动，但是手部和脚部粗糙</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171738845.png\" alt=\"img\" /></p>\n<p>弗拉维安王朝的少女肖像</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171928977.png\" alt=\"img\" /></p>\n<p>卡拉卡拉像</p>\n<p>用非写实方法写实（眼睛凹陷）</p>\n<p>暴君</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010171958564.png\" alt=\"img\" /></p>\n<h3 id=\"庞贝古城\"><a class=\"anchor\" href=\"#庞贝古城\">#</a> 庞贝古城</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012105812541.png\" alt=\"image-20221012105812541\" /></p>\n<p>第一风格</p>\n<p>庞贝红</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012105826460.png\" alt=\"image-20221012105826460\" /></p>\n",
            "tags": [
                "其他",
                "西方美术史",
                "美术"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/07/internet-computer/Lecture02-%E7%89%A9%E7%90%86%E5%B1%82/",
            "url": "https://quas-modo.github.io/2022/10/07/internet-computer/Lecture02-%E7%89%A9%E7%90%86%E5%B1%82/",
            "title": "Lecture02-物理层",
            "date_published": "2022-10-07T01:38:59.000Z",
            "content_html": "<p>一些物理层的补充<br />\n<span id=\"more\"></span></p>\n<h1 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h1>\n<h2 id=\"局域网介质\"><a class=\"anchor\" href=\"#局域网介质\">#</a> 局域网介质</h2>\n<h3 id=\"utp-无屏蔽双绞线-unshielded-twisted-pair\"><a class=\"anchor\" href=\"#utp-无屏蔽双绞线-unshielded-twisted-pair\">#</a> UTP (无屏蔽双绞线 Unshielded Twisted Pair)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100316364.png\" alt=\"image-20221013100316364\" /></p>\n<p>一般认为有效范围为 100m</p>\n<p>UTP 是非屏蔽双绞线；<strong>STP</strong> 是内每对线都包裹一层铝箔（共有 4 个单独的铝箔包裹），外编织网的双层屏蔽网线。</p>\n<h4 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h4>\n<ol>\n<li>直通线</li>\n<li>反转线</li>\n<li>交叉电缆</li>\n</ol>\n<h3 id=\"同轴电缆-coaxial\"><a class=\"anchor\" href=\"#同轴电缆-coaxial\">#</a> 同轴电缆 Coaxial</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100338119.png\" alt=\"image-20221013100338119\" /></p>\n<p>有效范围 500m 左右</p>\n<h3 id=\"光缆\"><a class=\"anchor\" href=\"#光缆\">#</a> 光缆</h3>\n<h3 id=\"无线通信\"><a class=\"anchor\" href=\"#无线通信\">#</a> 无线通信</h3>\n<h3 id=\"无线传输手段\"><a class=\"anchor\" href=\"#无线传输手段\">#</a> 无线传输手段</h3>\n<p>激光</p>\n<p>红外线</p>\n<p>收音机</p>\n<h2 id=\"介质和信号问题\"><a class=\"anchor\" href=\"#介质和信号问题\">#</a> 介质和信号问题</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221007093055656.png\" alt=\"image-20221007093055656\" /></p>\n<p>网桥、交换机、路由器可以分割冲突域。</p>\n<p>到第二第三层 (分段后) 才能有效划分冲突域，第一层不能解决冲突问题</p>\n<p>。</p>\n<h2 id=\"数据通信的基础信息\"><a class=\"anchor\" href=\"#数据通信的基础信息\">#</a> 数据通信的基础信息</h2>\n<h3 id=\"编码方式\"><a class=\"anchor\" href=\"#编码方式\">#</a> 编码方式</h3>\n<h4 id=\"5111-单极性编码\"><a class=\"anchor\" href=\"#5111-单极性编码\">#</a> 5.11.1. 单极性编码</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/29.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/29.png\" alt=\"img\" /></a></p>\n<p>原理：用 0 电平表示 &quot;0&quot;，正电平表示 &quot;1&quot;</p>\n<h4 id=\"5112-极化编码不归零制码nrz-non-return-to-zero\"><a class=\"anchor\" href=\"#5112-极化编码不归零制码nrz-non-return-to-zero\">#</a> 5.11.2. 极化编码：不归零制码 (NRZ: Non-Return to Zero)</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/18.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/18.png\" alt=\"img\" /></a></p>\n<p>不归零电平编码，原理：用负电平表示 &quot;0&quot;，正电平表示 &quot;1&quot; (或相反)，一定的中和。</p>\n<h4 id=\"5113-极化编码归零制码rz-return-to-zero\"><a class=\"anchor\" href=\"#5113-极化编码归零制码rz-return-to-zero\">#</a> 5.11.3. 极化编码：归零制码 (RZ: Return to Zero)</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/19.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/19.png\" alt=\"img\" /></a></p>\n<p>原理：用负电平表示 &quot;0&quot;，正电平表示 &quot;1&quot;(或 相反)，比特中位跳变到零电平，从而提供同步</p>\n<h4 id=\"5114-极化编码曼彻斯特码manchester\"><a class=\"anchor\" href=\"#5114-极化编码曼彻斯特码manchester\">#</a> 5.11.4. 极化编码：曼彻斯特码 (Manchester)</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/20.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/20.png\" alt=\"img\" /></a></p>\n<p>原理：每一位中间都有一个跳变，从低跳到高表示 &quot;0&quot;，从高跳到低表示 &quot;1&quot;</p>\n<h4 id=\"5115-极化编码差分曼彻斯特码differential-manchester\"><a class=\"anchor\" href=\"#5115-极化编码差分曼彻斯特码differential-manchester\">#</a> 5.11.5. 极化编码：差分曼彻斯特码 (Differential Manchester)</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/21.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/21.png\" alt=\"img\" /></a></p>\n<p>原理：</p>\n<ul>\n<li>每一位中间跳变：表示时钟</li>\n<li>每一位位前跳变：表示数据：有跳变表示 &quot;0&quot;，无跳变表示 &quot;1&quot;</li>\n</ul>\n<h4 id=\"5116-双极性编码双极性传号交替反转码ami\"><a class=\"anchor\" href=\"#5116-双极性编码双极性传号交替反转码ami\">#</a> 5.11.6. 双极性编码：双极性传号交替反转码 (AMI)</h4>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/22.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec02/22.png\" alt=\"img\" /></a></p>\n<ol>\n<li>与 RZ 相同的是：采用三个电平：正、负与零</li>\n<li>与 RZ 不同的是：零电平表示 &quot;0&quot;，正负电平的跃迁表示 “1”，实现对 &quot;1&quot; 电平的交替反转。</li>\n<li>优点：\n<ol>\n<li>对每次出现的 &quot;1&quot; 交替反转，使直流分量为 0</li>\n<li>尽管连续 &quot;0&quot; 不能同步，但连续 &quot;1&quot; 可以同步</li>\n</ol>\n</li>\n<li>这次是 1 是高点位，下一次就是低电位。</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/",
            "url": "https://quas-modo.github.io/2022/10/04/COA/Lecture04-%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/",
            "title": "Lecture04-整数运算",
            "date_published": "2022-10-04T13:32:43.000Z",
            "content_html": "<p>整数的加减乘除计算的实现。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"整数运算\"><a class=\"anchor\" href=\"#整数运算\">#</a> 整数运算</h1>\n<h2 id=\"算术逻辑单元alu\"><a class=\"anchor\" href=\"#算术逻辑单元alu\">#</a> 算术逻辑单元 ALU</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110026189.png\" alt=\"image-20221012110026189\" /></p>\n<p>寄存器存储数据、结果、flags</p>\n<p>控制器控制 ALU 操作和数据传入的信号</p>\n<h2 id=\"全加器\"><a class=\"anchor\" href=\"#全加器\">#</a> 全加器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110035166.png\" alt=\"image-20221012110035166\" /></p>\n<p><strong>关注与或异或的符号</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110051989.png\" alt=\"image-20221012110051989\" /></p>\n<p><strong>计算结果和进位</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110059850.png\" alt=\"image-20221012110059850\" /></p>\n<p>F 可以理解为，是奇数个 1 的时候，结果为 1；是偶数个 1 的时候，结果为 0。</p>\n<p>进位则是，有两个 1 的时候即可进位。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110111693.png\" alt=\"image-20221012110111693\" /></p>\n<p>异或门只能有<strong>两个</strong>输入端，异或门的时延<strong>不一定为 3ty</strong>。</p>\n<p>在网上找了一些实现异或的方法，可以看出，时延可以是 2ty 也可以是 3ty，应该是由异或门实现的方式决定的。</p>\n<p><img data-src=\"https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log29.gif\" alt=\"logic equivalent\" /></p>\n<p><img data-src=\"https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/logic-log30.gif\" alt=\"implimentation using NAND\" /></p>\n<p>非门算不算时延？ <strong>非门算时延</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110147229.png\" alt=\"image-20221012110147229\" /></p>\n<p>减少了一个与门，但是时延仍然是 6ty</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110159471.png\" alt=\"image-20221012110159471\" /></p>\n<p>这里可以解释为，因为 X 和 Y 的或和异或仅在 X、Y 均为 1 时不同，但 X、Y 均为 1 时，前面的与为 1，并不影响结果，所以两个式子相等。</p>\n<h2 id=\"串行进位行波进位加法器\"><a class=\"anchor\" href=\"#串行进位行波进位加法器\">#</a> 串行进位（行波进位）加法器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110210316.png\" alt=\"image-20221012110210316\" /></p>\n<p>公式来源于前面的全加法器，理解一样。</p>\n<p>需要等待 “进位输出信号”，所以缺点是延迟慢。</p>\n<h2 id=\"全先行进位加法器\"><a class=\"anchor\" href=\"#全先行进位加法器\">#</a> 全先行进位加法器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110215735.png\" alt=\"image-20221012110215735\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110224827.png\" alt=\"image-20221012110224827\" /></p>\n<p>不需要等待 n-1 位算完，就可以开始计算第 n 位，把能计算的先提前计算好。</p>\n<p>1ty：Gi 和 Pi 的计算，Gi 和 Pi 的计算可以同时进行，只需要 1ty</p>\n<p>2ty：计算 C 的值，因为需要先进行与操作，再进行或操作，所以需要 2ty，因为 Ci 只和 P\\G\\C0 的值有关，所以不需要等前一位的进位算好。</p>\n<p>3ty：Xi 和 Yi 的异或可在前三个时延做好，只需要再和 Ci-1 做异或即可算出 F。</p>\n<h2 id=\"部分先行进位加法器\"><a class=\"anchor\" href=\"#部分先行进位加法器\">#</a> 部分先行进位加法器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110230663.png\" alt=\"image-20221012110230663\" /></p>\n<p>加法器延迟过于严重，但是全先行进位又难以实现，所以采用了两者的混合杂交。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110240165.png\" alt=\"image-20221012110240165\" /></p>\n<p>3ty：第一个全先行加法器需要算出 G、P，耗时 1ty；然后需要算出所有的进位，耗时 2ty；与此同时，其他三个 CLA 也算好了自己的 G 和 P。</p>\n<p>2ty：第二个 CLA 收到 Cin 之后，需要 2ty 计算 Cout。</p>\n<p>2ty：同上，为第三个 CLA 的计算。</p>\n<p>5ty：2ty+3ty，第四个 CLA 计算 C 需要 2ty，然后再和 X、Y 进行异或操作，需要 3ty。在此之前，其余的 CLA 已经完成了异或计算。</p>\n<h2 id=\"加法\"><a class=\"anchor\" href=\"#加法\">#</a> 加法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110246821.png\" alt=\"image-20221012110246821\" /></p>\n<p>溢出的情况只能是两个正的变成负的，或者两个负的变成正的。</p>\n<table>\n<thead>\n<tr>\n<th>Xn</th>\n<th>Yn</th>\n<th>C</th>\n<th>Fn</th>\n<th>overflow</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>溢出</strong></td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>溢出</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>不溢出</td>\n</tr>\n</tbody>\n</table>\n<p>判断是否溢出的 flag 就是在 Cn-1 和 Cn 上加一个异或器</p>\n<table>\n<thead>\n<tr>\n<th>Xn</th>\n<th>Yn</th>\n<th>Cn-1</th>\n<th>Cn</th>\n<th>overflow</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>溢出</strong></td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>不溢出</td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>溢出</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>不溢出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"减法\"><a class=\"anchor\" href=\"#减法\">#</a> 减法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110254314.png\" alt=\"image-20221012110254314\" /></p>\n<p>减法就是在加法器上加一个选择器，sub 给一个信号</p>\n<h2 id=\"乘法\"><a class=\"anchor\" href=\"#乘法\">#</a> 乘法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110300471.png\" alt=\"image-20221012110300471\" /></p>\n<p>实际上，加法和移位可以合并，因为始终上升沿到来之前，各寄存器中的数据会被取出，因此不需要 2-3 个时钟周期，1 个时钟周期即可完成。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110306067.png\" alt=\"image-20221012110306067\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110312495.png\" alt=\"image-20221012110312495\" /></p>\n<p>由于乘法会出现溢出的问题，所以出现了原码一位乘法和布斯算法。</p>\n<h3 id=\"原位一位乘法\"><a class=\"anchor\" href=\"#原位一位乘法\">#</a> 原位一位乘法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110326698.png\" alt=\"image-20221012110326698\" /></p>\n<h3 id=\"补码一位乘法布斯算法\"><a class=\"anchor\" href=\"#补码一位乘法布斯算法\">#</a> 补码一位乘法：布斯算法</h3>\n<h4 id=\"基本思路和证明\"><a class=\"anchor\" href=\"#基本思路和证明\">#</a> 基本思路和证明</h4>\n<p>每次根据两位决定直接移位 / 加 / 减（共四种情况）</p>\n<ol>\n<li>00、11—— 直接移位</li>\n<li><strong>10</strong> —— 减</li>\n<li><strong>01</strong> —— 加</li>\n</ol>\n<h4 id=\"黑书证明\"><a class=\"anchor\" href=\"#黑书证明\">#</a> 黑书证明</h4>\n<p>用 **2 <sup>n</sup> + 2 <sup>n-1</sup> + ... + 2 <sup>n-k</sup> = 2 <sup>n+1</sup> - 2 <sup>n-k</sup>** 可以表示正乘数和负乘数</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009234843548.png\" alt=\"image-20221009234843548\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221009235208579.png\" alt=\"image-20221009235208579\" /></p>\n<h4 id=\"ppt证明\"><a class=\"anchor\" href=\"#ppt证明\">#</a> PPT 证明</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110337646.png\" alt=\"image-20221012110337646\" /></p>\n<p>为什么可以这样用布斯算法计算？</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6D18DEB3A3D802AB3B7AE9DB900A475C.png\" alt=\"img\" /><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110345029.png\" alt=\"image-20221012110345029\" /></p>\n<h4 id=\"易错点算数移位\"><a class=\"anchor\" href=\"#易错点算数移位\">#</a> 易错点：算数移位</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110426386.png\" alt=\"image-20221012110426386\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110429745.png\" alt=\"image-20221012110429745\" /></p>\n<p>错误原因：补位负数补 1，不论是何种情况，右移都使得 A 的最左位，即 A<sub>n-1</sub> 不仅移入 A<sub>n-2</sub> 中，而且还保留在 A<sub>n-1</sub> 中。这是为了保持 A 和 Q 中数的符号，因为它<strong>保留了符号位</strong>，所以被称为<strong>算数移位</strong>。</p>\n<p>实际上，根据黑书，应该还有一位 Q<sub>-1</sub> 寄存器，放在 Q 最低有效位的右边，负责保存丢失的那位。</p>\n<h3 id=\"乘法溢出\"><a class=\"anchor\" href=\"#乘法溢出\">#</a> 乘法溢出</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110434583.png\" alt=\"image-20221012110434583\" /></p>\n<p>带符号整数：因为乘法的补位是根据当前最高位计算的，如果有变化，则说明有溢出</p>\n<p>无符号整数：无符号整数应该没有 1 的出现</p>\n<h2 id=\"除法\"><a class=\"anchor\" href=\"#除法\">#</a> 除法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221013100038320.png\" alt=\"image-20221013100038320\" /></p>\n<p>不同的高级算法对于 1/0 0/0 的计算结果处理是不同的</p>\n<p>如在 js 中，1/0 为正无穷；c 中会报错</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110438424.png\" alt=\"image-20221012110438424\" /></p>\n<p>在十进制除法中，需要用到乘法；在二进制中则不需要。</p>\n<p>除数和被除数符号不一样时，不同的编程语言也会得到不一样的答案。</p>\n<p>注意补齐被除数的符号位，从<strong>次高位</strong>开始计算。</p>\n<h3 id=\"除法器\"><a class=\"anchor\" href=\"#除法器\">#</a> 除法器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110445518.png\" alt=\"image-20221012110445518\" /></p>\n<p>对应于手工进行除法运算，</p>\n<p>因为需要补全被除数的位数，所以需要 2n 寄存器；</p>\n<p>因为除数相对于被除数的次高位开始移动，所以需要 2n 位支持右移的寄存器；</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110451162.png\" alt=\"image-20221012110451162\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110454561.png\" alt=\"image-20221012110454561\" /></p>\n<p>除法流程图 —— “是否为第<strong> N+1</strong> 次循环”</p>\n<p>和乘法不同 ——<strong>N</strong> 次循环</p>\n<p><strong>如何做优化？</strong></p>\n<p>常见的思路 —— 并行操作 / 硬件节省</p>\n<blockquote>\n<p>不能够做并行操作</p>\n<p>可以做一些硬件的优化</p>\n</blockquote>\n<h3 id=\"优化的除法器\"><a class=\"anchor\" href=\"#优化的除法器\">#</a> 优化的除法器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110458490.png\" alt=\"image-20221012110458490\" /></p>\n<h3 id=\"异号的除法如何处理\"><a class=\"anchor\" href=\"#异号的除法如何处理\">#</a> 异号的除法如何处理？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110504455.png\" alt=\"image-20221012110504455\" /><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110514117.png\" alt=\"image-20221012110514117\" /></p>\n<p>结果都是<strong>和余数进行比较</strong>，操作之后，如果相对于余数的符号改变，则不够；如果相对于余数的符号不变，则够。</p>\n<p>例子：</p>\n<p>可以对照上下（36、37）两张图理解异号的除法，</p>\n<p>被除数为 11111001，它的值为 - 7</p>\n<ol>\n<li>1111 + 0011 为 10010 符号改变</li>\n<li>1110 + 0011 为 10001 符号改变</li>\n<li>1100 + 0011 为 1111 符号不变，且绝对值减小，因此可以加，且商上 1</li>\n<li>1111 + 0011 符号改变</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221010003001858.png\" alt=\"img\" /></p>\n<p>参考黑书的话，</p>\n<p>余数的符号 = 被除数</p>\n<p>商的符号 = 被除数 * 除数</p>\n<p>因此，此题中，商和余数都需要取负数，所以商要取补码</p>\n<h3 id=\"补码除法运算过程\"><a class=\"anchor\" href=\"#补码除法运算过程\">#</a> 补码除法运算过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110521683.png\" alt=\"image-20221012110521683\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110524618.png\" alt=\"image-20221012110524618\" /></p>\n<h3 id=\"不恢复余数除法\"><a class=\"anchor\" href=\"#不恢复余数除法\">#</a> 不恢复余数除法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110534163.png\" alt=\"image-20221012110534163\" /></p>\n<p>可以参考之前的恢复余数的操作理解</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110539289.png\" alt=\"image-20221012110539289\" /></p>\n<p>如何理解大致思路：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4C93EBA825F2B3B083A9B5CC5D1E567D.png\" alt=\"img\" /></p>\n<p>由下面的通式表示：</p>\n<p><strong>ri+1=2ri+(1-2Qi)Y</strong></p>\n<blockquote>\n<p>式中 Qi 为第 i 次所得的商，若部分余数为正，则 Qi=1，部分余数左移一位，下一次继续减除数；若部分余数为负，则 Qi=0，部分余数左移一位，下一次加除数。由于加减运算交替地进行，故称为原码加减交替法。</p>\n</blockquote>\n<h3 id=\"补码不恢复余数除法流程图\"><a class=\"anchor\" href=\"#补码不恢复余数除法流程图\">#</a> 补码不恢复余数除法流程图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221006172646381.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110545429.png\" alt=\"image-20221012110545429\" /></p>\n<p>同号说明 “够大”，异号说明 “不够大”</p>\n<p>注意不恢复余数补码除法分为两个流程，首先需要判断符号然后初始化。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110550193.png\" alt=\"image-20221012110550193\" /></p>\n<p><strong>计算流程</strong>理解：</p>\n<p>流程一：因为余数和除数异号，所以采用加的方式。加完后发现同号（实际上是由异号变为同号），补 1，实际上是取反的操作。</p>\n<p>流程二：根据 X 和 Y 是否同号，继续操作。</p>\n<p><strong>关于商的修正</strong>：</p>\n<p>Z 左移一位，根据是否够加，上 1 或 0。</p>\n<p>如果被除数和除数异号，说明商是负数。在求每一位的时候，已经取了反，因此再加 1 即可。这样的操作，比最后再计算商的总体的补码简单。</p>\n<p><strong>关于余数的修正</strong>：</p>\n<p>余数和被除数的符号相同。</p>\n<p>如果符号不同，则说明余数多加 / 多减了一个除数。如果被除数和除数的符号相同，说明余数和除数符号不相同，加上除数进行修正；如果被除数和除数符号不同，说明余数和除数符号相同，减去除数进行修正。</p>\n<p>在最后多加了一个 Y</p>\n<p>符号位，不恢复余数补码除法运算和除数比，恢复的和被除数相比</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110557310.png\" alt=\"image-20221012110557310\" /></p>\n<p>因为除法器效率不高，所以用右移运算实现简化</p>\n<p>能整除的时候，被移除的全为 0；</p>\n<p>不能整除的时候，移除的数存在非 0，</p>\n<p>-14/4 负数补位 1</p>\n<h3 id=\"阵列除法器\"><a class=\"anchor\" href=\"#阵列除法器\">#</a> 阵列除法器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110601896.png\" alt=\"image-20221012110601896\" /></p>\n<p>实际生活中并不是斜着排列的</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221012110605353.png\" alt=\"image-20221012110605353\" /></p>\n<p>全加器是两个半加器组合起来的，半加器不考虑进位。</p>\n<p>全加器算了两次 X+Y：第一次 X+Y 得到 Z，第二次 Z+Cin 得到结果。</p>\n<p>注意各整数运算的优化过程</p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/10/04/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/",
            "url": "https://quas-modo.github.io/2022/10/04/cpp/Lecture07-%E7%A8%8B%E5%BA%8F%E7%BB%84%E7%BB%87/",
            "title": "Lecture07-程序组织",
            "date_published": "2022-10-04T12:07:08.000Z",
            "content_html": "<p>内联函数、ROP、头文件、namespace、宏</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"lecture-07\"><a class=\"anchor\" href=\"#lecture-07\">#</a> Lecture 07</h1>\n<h1 id=\"程序组织\"><a class=\"anchor\" href=\"#程序组织\">#</a> 程序组织</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194251637.png\" alt=\"image-20221004194251637\" /></p>\n<h2 id=\"头文件\"><a class=\"anchor\" href=\"#头文件\">#</a> 头文件</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194306679.png\" alt=\"image-20221004194306679\" /></p>\n<h3 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h3>\n<p>程序级</p>\n<p>文件级</p>\n<p>函数级</p>\n<p>块级</p>\n<h3 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p>main 函数中的变量的生命周期一般是整个程序。</p>\n<p>idle pointer</p>\n<h3 id=\"头文件中包含的内容\"><a class=\"anchor\" href=\"#头文件中包含的内容\">#</a> 头文件中包含的内容</h3>\n<ol>\n<li>\n<p>常量定义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195026698.png\" alt=\"image-20221004195026698\" /></p>\n</li>\n<li>\n<p>变量 / 函数定义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004194957282.png\" alt=\"image-20221004194957282\" /></p>\n</li>\n<li>\n<p>编译预处理</p>\n</li>\n<li>\n<p>类型定义（class\\ 接口）</p>\n</li>\n<li>\n<p>内联函数</p>\n</li>\n</ol>\n<pre><code># include&quot;a.h&quot;\n</code></pre>\n<p><strong>井号</strong></p>\n<p>编译预处理，把头文件的<strong>复制</strong>过来</p>\n<p><strong>static</strong></p>\n<p>只要不在头文件中，就不能更改 —— 加上<strong> static <strong>，把变量或者函数的程序级限制到</strong>文件级</strong></p>\n<p><strong>const</strong></p>\n<p>默认属性是 static</p>\n<p>写在另外 &quot;const.h&quot; 文件中</p>\n<h2 id=\"namespace\"><a class=\"anchor\" href=\"#namespace\">#</a> namespace</h2>\n<h3 id=\"两种形式\"><a class=\"anchor\" href=\"#两种形式\">#</a> 两种形式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195211541.png\" alt=\"image-20221004195211541\" /></p>\n<ul>\n<li>declaration (绝对路径)</li>\n<li>directive（批量处理）</li>\n</ul>\n<h3 id=\"details\"><a class=\"anchor\" href=\"#details\">#</a> details</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004200112776.png\" alt=\"image-20221004200112776\" /></p>\n<ol>\n<li>\n<p>别名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> American_Telephone_and_Telegraph <span class=\"token punctuation\">&#123;</span>…… <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>……<span class=\"token punctuation\">.</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">namespace</span> ATT <span class=\"token operator\">=</span> American_Telephone_and_Telegraph</pre></td></tr></table></figure></li>\n<li>\n<p>全局</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> X</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         X<span class=\"token double-colon punctuation\">::</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token double-colon punctuation\">::</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>开放</p>\n<p>可以在代码别的位置重新增加函数、变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可嵌套</p>\n<p>软工：：三班::quasdo</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> L1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     ……<span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">namespace</span> L2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>L1<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">L2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> L1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">L2</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重载</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">namespace</span> B</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">namespace</span> A</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ……<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>‘<span class=\"token number\">1</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>重载 —— 有可能造成冲突和语义的错误</p>\n<p>可能在 namespace A 和 namespace B 中均定义了同一个函数名，因此<strong>不建议在同一作用域两次使用 using-directive</strong></p>\n<h3 id=\"编译预处理\"><a class=\"anchor\" href=\"#编译预处理\">#</a> 编译预处理</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195709681.png\" alt=\"image-20221004195709681\" /></p>\n<blockquote>\n<p><em>gcc</em> <em>-7 -<strong>Dsqrt</strong>=rand -<strong>Dreturn</strong>=exit</em></p>\n<p>define sqrt rand</p>\n</blockquote>\n<p>虽然编译预处理可能会造成问题，但因为难以找到更好的结构且高效的替代品，没有取缔。</p>\n<h2 id=\"宏\"><a class=\"anchor\" href=\"#宏\">#</a> 宏</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004195913290.png\" alt=\"image-20221004195913290\" /></p>\n<p>while 后缺少；</p>\n<p>形成完美的语句（不产生多余的空语句）</p>\n<p>eight queen 八皇后问题，可用递归的方式求解</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/29/cpp/Lecture06-%E5%87%BD%E6%95%B0/",
            "url": "https://quas-modo.github.io/2022/09/29/cpp/Lecture06-%E5%87%BD%E6%95%B0/",
            "title": "Lecture06-函数",
            "date_published": "2022-09-29T08:22:20.000Z",
            "content_html": "<p>cpp 中的函数<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture06-函数\"><a class=\"anchor\" href=\"#lecture06-函数\">#</a> Lecture06 - 函数</h1>\n<h2 id=\"运行时环境-runtime-environment\"><a class=\"anchor\" href=\"#运行时环境-runtime-environment\">#</a> 运行时环境 runtime environment</h2>\n<p>永远分配 full stay（？）-- 早期变量存储不分全局变量和局部变量，比较浪费空间，无法使用 recursive 递归</p>\n<p>dynamic-- 函数调用完即刻回收，支持递归，节约空间</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//x 地址什么时候填入（符号表、link 时）</span></pre></td></tr></table></figure><p>增加函数 function 需要在 stack 中付出代价 cost</p>\n<p>stack 编译器帮助程序员做好</p>\n<p>heap 中存储动态变量，编译器未知</p>\n<p>Dynamic-link library DLL 动态链接库</p>\n<p>在代码段中，以一个函数为基本单位</p>\n<p>为什么 code、data、stack、heap 中不能 x（执行）？</p>\n<blockquote>\n<p>攻击（断章取义）—— 利用看似正常的代码段。攻击操作系统。从头操作则没有问题。避免攻击，取消了执行。</p>\n</blockquote>\n<h3 id=\"name-mangling\"><a class=\"anchor\" href=\"#name-mangling\">#</a> name mangling</h3>\n<p>c 中 func 不可以重载，但是 cpp 中函数可以重载（参数可以不同），func 不能够唯一指代。</p>\n<p>cpp 中加了一些表示 --name mangling。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//cpp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//_Z4funci  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//_Z4funcid</span></pre></td></tr></table></figure><p>要告诉编译器</p>\n<blockquote>\n<p>extern = &quot;C&quot; // 编译的是 c</p>\n</blockquote>\n<h2 id=\"原则和执行机制\"><a class=\"anchor\" href=\"#原则和执行机制\">#</a> 原则和执行机制</h2>\n<h3 id=\"原则\"><a class=\"anchor\" href=\"#原则\">#</a> 原则</h3>\n<ol>\n<li>定义不允许嵌套（函数中不能有另外一个 definition）</li>\n<li>先定义后使用</li>\n</ol>\n<h3 id=\"函数的执行机制\"><a class=\"anchor\" href=\"#函数的执行机制\">#</a> 函数的执行机制</h3>\n<ol>\n<li>\n<p>建立被调用函数的栈空间</p>\n</li>\n<li>\n<p>参数传递</p>\n<ul>\n<li>值传递 call by value（c 中只有值传递，想要改变原值需要指针）</li>\n<li>引用传递 call by reference（cpp 中的隐式指针）int &amp;a</li>\n</ul>\n</li>\n<li>\n<p>保存调用函数的运行状态（回来之后还要接着执行）</p>\n</li>\n<li>\n<p>将控制转交被调函数</p>\n</li>\n</ol>\n<p><strong>EBP</strong> extended base pointer</p>\n<p><strong>ESP</strong> extended stack pointer</p>\n<p><strong>EIP</strong> is a register in x86 architectures (32bit). It holds the &quot;Extended Instruction Pointer&quot; for the stack. In other words, it tells the computer where to go next to execute the next command and controls the flow of a program.</p>\n<p>stack <strong>从 high 到 low 增长</strong></p>\n<h2 id=\"如何调用函数-以及函数付出的代价\"><a class=\"anchor\" href=\"#如何调用函数-以及函数付出的代价\">#</a> 如何调用函数 以及函数付出的代价</h2>\n<blockquote>\n<p>__cdecl</p>\n<p>__stdcall</p>\n<p>__fastcall</p>\n<p>__thiscall</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 从右往左传递参数</span></pre></td></tr></table></figure><p>在函数中需要初始化变量，编译器在返回时，不会主动清理 stack 中的数据</p>\n<h3 id=\"cost\"><a class=\"anchor\" href=\"#cost\">#</a> cost</h3>\n<ol>\n<li>\n<p>付出指令的开销</p>\n</li>\n<li>\n<p>付出栈的开销</p>\n</li>\n</ol>\n<h3 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h3>\n<ol>\n<li>加载参数 (进栈)</li>\n<li>保存上下文环境\n<ul>\n<li>保存返回地址</li>\n<li>保存调用者基指针</li>\n</ul>\n</li>\n<li>执行函数\n<ul>\n<li>设置新的基指针</li>\n<li>分配空间 (可选)</li>\n<li>执行一些任务</li>\n<li>释放空间 (如果分配了的话)</li>\n</ul>\n</li>\n<li>恢复上下文环境\n<ul>\n<li>加载调用者基指针</li>\n<li>加载返回指针</li>\n</ul>\n</li>\n<li>继续执行调用者的功能 a</li>\n</ol>\n<h3 id=\"静态成员函数和非静态成员函数的差别\"><a class=\"anchor\" href=\"#静态成员函数和非静态成员函数的差别\">#</a> 静态成员函数和非静态成员函数的差别</h3>\n<p>静态成员函数中没有 this，非静态成员函数有 this</p>\n<p>静态成员函数形同于全局函数</p>\n<h3 id=\"printf和cout\"><a class=\"anchor\" href=\"#printf和cout\">#</a> printf 和 cout</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可变参数可被利用，进行攻击。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>cout 是个<strong>对象</strong>，cout &lt;&lt;&quot;c&quot; 是一个新的对象</p>\n<h3 id=\"stdcall\"><a class=\"anchor\" href=\"#stdcall\">#</a> stdcall</h3>\n<p>调用者借还参数</p>\n<p>参数未知长度</p>\n<p>复用次数多，消耗空间和时间</p>\n<h3 id=\"fastcall\"><a class=\"anchor\" href=\"#fastcall\">#</a> fastcall</h3>\n<p>寄存器有限，如果要用更多的寄存器，就要保存更多的数据（现场）</p>\n<p>其实最多有两个参数 move 到寄存器，再有多的参数，就需要 push 了</p>\n<h2 id=\"函数原型\"><a class=\"anchor\" href=\"#函数原型\">#</a> 函数原型</h2>\n<p><strong>原型，只需要类型</strong></p>\n<ol>\n<li>\n<p>遵守先定义后使用原则</p>\n</li>\n<li>\n<p>自由安排函数定义位置</p>\n</li>\n<li>\n<p>语句</p>\n</li>\n<li>\n<p>只需参数类型，无需参数名称</p>\n</li>\n<li>\n<p>编译器检查</p>\n</li>\n<li>\n<p>函数原型：只需要看到函数名和参数读取到即可:</p>\n<pre><code>int func(int,int)\n</code></pre>\n<ul>\n<li>在调用点一定要能看到接口</li>\n<li>仅仅需要函数名和参数类型即可</li>\n</ul>\n</li>\n<li>\n<p>函数原型应当放置在头文件中</p>\n</li>\n</ol>\n<h2 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h2>\n<p>type conversion</p>\n<h3 id=\"原则-2\"><a class=\"anchor\" href=\"#原则-2\">#</a> 原则</h3>\n<ol>\n<li>名同，参数不同（个数、类型、顺序）</li>\n<li>返回值类型不作为区别重载函数的依据</li>\n</ol>\n<h3 id=\"匹配原则\"><a class=\"anchor\" href=\"#匹配原则\">#</a> 匹配原则</h3>\n<p><strong>Polymorphism 多态</strong> -&gt; 增强语言的丰富性和灵活性 -&gt; 一名多用，并不只存在 OO programming 中</p>\n<ol>\n<li>严格</li>\n<li>内部转换</li>\n<li>用户定义的转换</li>\n</ol>\n<blockquote>\n<p><em>void f(long); void f(double);</em></p>\n<p><em>f(10);</em></p>\n</blockquote>\n<p>10 既可以是 int 也可以是 double，编译器会感到困惑，<strong>ambiguous</strong>。</p>\n<h2 id=\"函数-默认参数\"><a class=\"anchor\" href=\"#函数-默认参数\">#</a> 函数 - 默认参数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"默认参数的声明\"><a class=\"anchor\" href=\"#默认参数的声明\">#</a> 默认参数的声明</h3>\n<ol>\n<li>函数<strong>原型</strong>中给出  -&gt;  <strong>是给使用点看的</strong></li>\n<li>先定义的函数中给出</li>\n</ol>\n<h3 id=\"默认参数的顺序\"><a class=\"anchor\" href=\"#默认参数的顺序\">#</a> 默认参数的顺序</h3>\n<ol>\n<li>从右到左</li>\n<li>不间断</li>\n</ol>\n<h3 id=\"默认参数与函数重载\"><a class=\"anchor\" href=\"#默认参数与函数重载\">#</a> 默认参数与函数重载</h3>\n<p><em>void f(int);  void f(int, int=2);</em></p>\n<p><strong>ambiguous</strong></p>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>Q1、能在不降低可读性的前提下，降低 COST 吗？</p>\n<p>HL src ---compiler----》 machine language</p>\n<p>程序员看到的是函数，compiler 把 block 移到调用处</p>\n<p>问题：</p>\n<ol>\n<li>假设 function 有 1000 行，代码拉长，存储占用率大</li>\n<li>不再有递归</li>\n</ol>\n<p>程序员主动提出：在 function 前写<strong> inline</strong></p>\n<p>Q2、使用 lib 需要注意什么？</p>\n<p>注意区分是哪种调用方式，哪种 compiler。</p>\n<p>c 中不允许重载，cpp 可以</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004190900029.png\" alt=\"image-20221004190900029\" /></p>\n<h2 id=\"内联函数inline\"><a class=\"anchor\" href=\"#内联函数inline\">#</a> 内联函数 inline</h2>\n<ol>\n<li>\n<p>目的:</p>\n<ol>\n<li>提高可读性</li>\n<li>提高效率</li>\n<li>解决了两个 cost 的问题</li>\n</ol>\n</li>\n<li>\n<p>对象: <strong>使用频率高、简单、小段代码</strong></p>\n<p>简单：没有 loop 或者 switch，不要有多个接口</p>\n<p>例如：OO 的 class 的 constructor 函数（构造函数）</p>\n</li>\n<li>\n<p>实现方法：编译系统将为 inline 函数创建一段代码，在调用点，用相应的代码替换</p>\n</li>\n<li>\n<p>限制：</p>\n<ol>\n<li>\n<p>递归 —— 必须是非递归函数，因为已经加入主体部分了</p>\n</li>\n<li>\n<p>函数指针 —— 由编译系统控制，和编译器是完全相关的</p>\n<p>函数指针最主要的作用为写框架（framework）</p>\n</li>\n</ol>\n</li>\n<li>\n<p>inline 关键字 <strong>仅仅是请求</strong></p>\n<ol>\n<li>有可能是递归，无法加入</li>\n<li>也有可能是很复杂的函数，导致无法理解 (上下文比较复杂)</li>\n</ol>\n</li>\n<li>\n<p>提请 inline<strong> 被拒绝时是有代价的</strong></p>\n</li>\n<li>\n<p>如果对象的初始化 - 构造函数为明确给出，计算机会给出 inline 的构造函数</p>\n</li>\n<li>\n<p>宏: <code>max(a,b) (a) &gt; (b) ? (a) : (b)</code> ：不同于 inline 函数，一定要有括号，因为运算数据中的优先级不同</p>\n</li>\n<li>\n<p><strong>时间局部性</strong>：是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 空间局部性是指一旦程序访问了某个存储单元，则不久之后。</p>\n<p><strong>空间局部性</strong>：执行周边的代码的可能性很大，将附近的代码放到 cache 中，如果代码块过大，会造成抖动，cache 不断切换内存中的代码段。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191015068.png\" alt=\"image-20221004191015068\" /></p>\n<h2 id=\"攻击\"><a class=\"anchor\" href=\"#攻击\">#</a> 攻击</h2>\n<h3 id=\"stack\"><a class=\"anchor\" href=\"#stack\">#</a> stack</h3>\n<p>攻击：在 stack 中写入地址执行</p>\n<p>解决：</p>\n<ol>\n<li>W 正交 X</li>\n<li>禁止写入</li>\n</ol>\n<h3 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h3>\n<p>攻击：利用已有的代码进行攻击，比如利用 return 之前的语句</p>\n<p>解决：</p>\n<ol>\n<li>R 正交 X</li>\n<li>打乱顺序 load</li>\n<li>检测，如果多次跳转 / 踩点，则可能是攻击的代码</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221004191213187.png\" alt=\"image-20221004191213187\" /></p>\n<h3 id=\"rop\"><a class=\"anchor\" href=\"#rop\">#</a> ROP</h3>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>Return-oriented programming 返回导向编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名【<strong>代码签名</strong>是对可执行文件或脚本进行数字签名。用来确认软件的来源并保证在签名后未被修改或损坏的措施】等。</p>\n<p>通过上一篇文章走进栈溢出，我们可以发现栈溢出的控制点是 ret 处，那么 ROP 的核心思想就是<strong>利用以 ret 结尾的指令序列把栈中的应该返回 EIP 的地址更改成我们需要的值</strong>，从而控制程序的执行流程。</p>\n<p>ROP 方法技巧性很强，那它能完全胜任所有攻击吗？返回语句前的指令是否会因为功能单一，而无法实施预期的攻击目标呢？业界大牛已经过充分<span class=\"exturl\" data-url=\"aHR0cDovL2RsLmFjbS5vcmcvY2l0YXRpb24uY2ZtP2RvaWQ9MTEwMjEyMC4xMTAyMTY1\">研究并证明</span> ROP 方法是图灵完备的，换句话说， ROP 可以借用 libc 的指令实现任何逻辑功能。</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/",
            "url": "https://quas-modo.github.io/2022/09/23/COA/Lecture03-%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E8%A1%A8%E7%A4%BA/",
            "title": "Lecture03-数据的机器级表表示",
            "date_published": "2022-09-22T23:41:11.000Z",
            "content_html": "<p>仅记录有用部分，课件详细内容在 ppt 上已经很清楚了。</p>\n<p>需要加强的地方：二进制转十进制，十进制转二进制，补码的模不懂，静默式和通知式，非规格化数不懂、精度保护中的舍入看不懂，大端小端</p>\n<p>好难…… 呜呜看不懂</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"第一次作业讲解\"><a class=\"anchor\" href=\"#第一次作业讲解\">#</a> 第一次作业讲解</h2>\n<p>作业 1：. 为什么速率的总和没有意义？</p>\n<p>作业 2：指令集结构不同的计算机，只比较 MIPS 是没有意义的，例如此题当中，A 的 MIPS 大，但是运行时间较长。</p>\n<p>作业 3：采用不同指令集、<strong>流水线</strong>和并行</p>\n<p>作业 4：MIPS 求和有意义吗？</p>\n<p>组织不可见，结构可见</p>\n<h1 id=\"lecture0304-数据的机器级表示\"><a class=\"anchor\" href=\"#lecture0304-数据的机器级表示\">#</a> lecture03/04 - 数据的机器级表示</h1>\n<p>参考紫书第 2 章 / 黑书第 9 章 计算机算数</p>\n<h2 id=\"课堂ppt结合黑书版本\"><a class=\"anchor\" href=\"#课堂ppt结合黑书版本\">#</a> 课堂 /ppt—— 结合黑书版本</h2>\n<h3 id=\"信息的二进制编码\"><a class=\"anchor\" href=\"#信息的二进制编码\">#</a> 信息的二进制编码</h3>\n<h3 id=\"整数的二进制表示\"><a class=\"anchor\" href=\"#整数的二进制表示\">#</a> 整数的二进制表示</h3>\n<h4 id=\"无符号整数\"><a class=\"anchor\" href=\"#无符号整数\">#</a> 无符号整数</h4>\n<h4 id=\"有符号整数\"><a class=\"anchor\" href=\"#有符号整数\">#</a> 有符号整数</h4>\n<h5 id=\"原码-符号幅值表示法\"><a class=\"anchor\" href=\"#原码-符号幅值表示法\">#</a> 原码 符号幅值表示法</h5>\n<p>符号位不同，数值位相同</p>\n<p>不同位长间的转换：符号位左移，空余的填补 0</p>\n<p>浮点数的尾数用原码定点小数表示</p>\n<p>零的表示不唯一，不利于程序员编程</p>\n<h5 id=\"反码\"><a class=\"anchor\" href=\"#反码\">#</a> 反码</h5>\n<p>符号位和数值位均取反</p>\n<h5 id=\"移码\"><a class=\"anchor\" href=\"#移码\">#</a> 移码</h5>\n<p>是一种有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2lnbmVkX251bWJlcl9yZXByZXNlbnRhdGlvbg==\">符号数表示</span>的方法，其中有符号数 n 是由对应于<strong>无符号数 n + K</strong> 的位模式表示，K 是<em>偏置值</em>或<em>偏移量</em>。</p>\n<p>bias 通常取 2 的 n-1 次方或者 2 的 n-1 次方减 1<br />\n 当 bias 为 2 的 n-1 次方时，移码和补码仅第一位不同，0 的表示唯一<br />\n<strong>浮点数的阶用移码表示</strong>：当两个数都是负数的时候，移码更容易比较</p>\n<h5 id=\"补码\"><a class=\"anchor\" href=\"#补码\">#</a> 补码</h5>\n<p>计算机处理中，<strong>通常使用补码</strong><br />\n负数的数值部分 <strong>各位取反，末尾加 1</strong></p>\n<p>不同位长间的转换：符号位移到最左位，其余空出位用符号位的值替代</p>\n<p>加和减的统一：<br />\n一个负数的补码等于模减该负数的绝对值<br />\n对于一个确定的模，某数减去小于模的另一数，总可以加上另一数负数的补码来代替。</p>\n<p><strong>求真值的补码</strong></p>\n<p>全 0：0</p>\n<p>全 1：-1</p>\n<p>10000...：- 2 <sup>n-1</sup></p>\n<p><strong>求补码的真值</strong></p>\n<p>**X = - x<sub>n-1</sub> * 2 <sup>n-1</sup> + ... + x <sub>2</sub> * 2 <sup>1</sup>+ x <sub>1</sub>*2<sup>0</sup> **</p>\n<p><strong>若对负数的补码再取负，得到原来那个数</strong>【其中的特例是，-2<sup>n-1</sup> 在取负之后仍然为本身，因为范围内并没有 2<sup>n-1</sup> 与之相对应】</p>\n<h3 id=\"浮点数\"><a class=\"anchor\" href=\"#浮点数\">#</a> 浮点数</h3>\n<p>单精度 32 位（1+8+23）<strong>仍然表示 2<sup>32</sup> 个数</strong></p>\n<p>双精度 64 位（1+11+52）</p>\n<p>基底为 2（也存在基底为 16 的情况）—— 基数越大，范围越大，精度越低</p>\n<h4 id=\"表示方法\"><a class=\"anchor\" href=\"#表示方法\">#</a> 表示方法</h4>\n<p>S E M</p>\n<ol>\n<li>\n<p>符号位</p>\n</li>\n<li>\n<p>8 位移码表示阶码（指数） —— 范围为 - 126~127，全 0 和全 1 为特殊值</p>\n</li>\n<li>\n<p>23 位原码表示 24 位尾数，最高位总为 1</p>\n</li>\n</ol>\n<h4 id=\"表示的数\"><a class=\"anchor\" href=\"#表示的数\">#</a> 表示的数</h4>\n<p><strong>规格化数</strong>，关注上溢出和下溢出，</p>\n<p>下溢出部分用<strong>非格式化数</strong>表示，它的间距是等距的</p>\n<p>越靠近原点，数越密集；越远离原点，数越稀疏</p>\n<p><strong>静默式和通知式非数</strong> —— 静默式表示未定义的算数结果，通知式非数表示未初始化的值。</p>\n<h2 id=\"计算机组成与体系结构性能设计\"><a class=\"anchor\" href=\"#计算机组成与体系结构性能设计\">#</a> 计算机组成与体系结构：性能设计</h2>\n<h3 id=\"整数的加法与减法补码\"><a class=\"anchor\" href=\"#整数的加法与减法补码\">#</a> 整数的加法与减法（补码）</h3>\n<p>上溢规则</p>\n<p>减法规则 —— 减法，即加上减数的 2 的补</p>\n<p>在实际的操作中，有 OF 溢出位记录是否溢出</p>\n<h3 id=\"整数的乘法\"><a class=\"anchor\" href=\"#整数的乘法\">#</a> 整数的乘法</h3>\n<h4 id=\"无符号整数的乘法\"><a class=\"anchor\" href=\"#无符号整数的乘法\">#</a> 无符号整数的乘法</h4>\n<p>两个 n 为二进制整数的乘法可产生最大长度为 2n 位的积</p>\n<p>乘</p>\n<p>移位</p>\n<p>计数 - 1</p>\n<h4 id=\"有符号整数的乘法\"><a class=\"anchor\" href=\"#有符号整数的乘法\">#</a> 有符号整数的乘法</h4>\n<p>只要有一个是负数，原来的方法就不奏效</p>\n<ol>\n<li>\n<p>把被乘数和乘数都转变成正数再相乘，当两者初始的符号不相同时，结果取 2 的补</p>\n</li>\n<li>\n<p>布斯（Booth）算法</p>\n<p>分为 10 01 【00 11】三种情况讨论</p>\n<p>运用公式，   <strong>2 <sup>n</sup> + 2 <sup>n-1</sup> + ... + 2 <sup>n-k</sup> = 2 <sup>n+1</sup> - 2 <sup>n-k</sup></strong></p>\n<p>很巧妙，优雅，实在是太优雅了！</p>\n</li>\n</ol>\n<h3 id=\"整数的除法\"><a class=\"anchor\" href=\"#整数的除法\">#</a> 整数的除法</h3>\n<p>搞来搞去，也很优雅</p>\n<h3 id=\"浮点数加法和减法\"><a class=\"anchor\" href=\"#浮点数加法和减法\">#</a> 浮点数加法和减法</h3>\n<ol>\n<li>检查 0</li>\n<li>对齐有效值</li>\n<li>加法</li>\n<li>规格化</li>\n</ol>\n<p>注意时时检查是否有效值为 0，以及是否溢出</p>\n<p>若两个数的阶值差别非常大，则较小的数丢失</p>\n<h3 id=\"浮点数乘法和除法\"><a class=\"anchor\" href=\"#浮点数乘法和除法\">#</a> 浮点数乘法和除法</h3>\n<p>由于阶值是移码的形式，相乘的时候，两个阶值的和要减去一个偏移量，相除的时候，两个阶值的差要加上一个偏移量</p>\n<h4 id=\"精度考虑\"><a class=\"anchor\" href=\"#精度考虑\">#</a> 精度考虑</h4>\n<ol>\n<li>\n<p>保护位</p>\n<p>对齐的时候会导致丢失，在末尾增加保护位，可以扩展有效值的右端</p>\n</li>\n<li>\n<p>舍入（不懂）</p>\n</li>\n</ol>\n<h2 id=\"计算机组成与系统结构习题解答和教学指导\"><a class=\"anchor\" href=\"#计算机组成与系统结构习题解答和教学指导\">#</a> 计算机组成与系统结构习题解答和教学指导</h2>\n<h3 id=\"数据的表示\"><a class=\"anchor\" href=\"#数据的表示\">#</a> 数据的表示</h3>\n<ul>\n<li>\n<p>数值数据 —— 二进制、十进制（BCD binary coded decimal）</p>\n</li>\n<li>\n<p>非数值数据</p>\n</li>\n</ul>\n<h3 id=\"数据的宽度\"><a class=\"anchor\" href=\"#数据的宽度\">#</a> 数据的宽度</h3>\n<p>数据容量和宽度</p>\n<p>比特</p>\n<p>字节</p>\n<p>字（2 个 / 4 个 / 8 个 / 16 个字节）</p>\n<h3 id=\"数据的排列\"><a class=\"anchor\" href=\"#数据的排列\">#</a> 数据的排列</h3>\n<ul>\n<li>大端排列 —— 最低有效字节 LSB 存放在大地址单元中，MSB 所在地址为数据的地址</li>\n<li>小端排列 —— 最低有效字节 LSB 存放在小地址单元中，LSB 所在地址为数据的地址</li>\n</ul>\n<h3 id=\"数据校验方式\"><a class=\"anchor\" href=\"#数据校验方式\">#</a> 数据校验方式</h3>\n<ul>\n<li>\n<p>奇偶校验</p>\n</li>\n<li>\n<p>海明校验</p>\n</li>\n<li>\n<p>循环冗余码校验</p>\n</li>\n</ul>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/22/cpp/105-STL/",
            "url": "https://quas-modo.github.io/2022/09/22/cpp/105-STL/",
            "title": "105 STL",
            "date_published": "2022-09-21T23:56:44.000Z",
            "content_html": "<p>STL 算法概述<br />\n<span id=\"more\"></span></p>\n<h1 id=\"stl-standard-template-library\"><a class=\"anchor\" href=\"#stl-standard-template-library\">#</a> STL Standard Template Library</h1>\n<p>roil expressive codes<br />\nSpectacular</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmx1ZW50Y3BwLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy93b3JsZF9tYXBfODAwLmpwZw==\">img</span></p>\n<p><img data-src=\"https://www.fluentcpp.com/wp-content/uploads/2018/03/world_map_800.jpg\" alt=\"img\" /></p>\n<h2 id=\"heap\"><a class=\"anchor\" href=\"#heap\">#</a> Heap</h2>\n<p>the parent is bigger<br />\nMake_heap<br />\nPush_heap<br />\nPop_heap</p>\n<h2 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> Sort</h2>\n<p>Partial_sort<br />\nNth_element<br />\nSort_heap<br />\nInplace_merge</p>\n<h2 id=\"partition\"><a class=\"anchor\" href=\"#partition\">#</a> Partition</h2>\n<p>boolean<br />\nPartition_point</p>\n<h2 id=\"permutations\"><a class=\"anchor\" href=\"#permutations\">#</a> Permutations</h2>\n<p>Rotate</p>\n<p>​\t  put the last to the first<br />\nShuffle</p>\n<p>​\tdo randomly<br />\nNext_permutation<br />\nPrev_permutation<br />\nReverse</p>\n<h2 id=\"secret-runes\"><a class=\"anchor\" href=\"#secret-runes\">#</a> Secret runes</h2>\n<p>Stable_*<br />\nRelative order<br />\nIs_*\t<br />\nIs_*_until<br />\nDon’t hold anymore</p>\n<h2 id=\"queries\"><a class=\"anchor\" href=\"#queries\">#</a> Queries</h2>\n<h3 id=\"numeric-algorithms\"><a class=\"anchor\" href=\"#numeric-algorithms\">#</a> Numeric algorithms</h3>\n<p>Count<br />\nAccumulate<br />\nPartial_sum<br />\nInner_product<br />\nAdjacent_difference<br />\nSample<br />\nselect randomly</p>\n<h3 id=\"querying-a-property\"><a class=\"anchor\" href=\"#querying-a-property\">#</a> Querying a property</h3>\n<p>All_of<br />\nAny_of<br />\nNone_of</p>\n<h3 id=\"querying-a-property-on-2-ranges\"><a class=\"anchor\" href=\"#querying-a-property-on-2-ranges\">#</a> Querying a property on 2 ranges</h3>\n<p>Equal<br />\nSame size<br />\nEach equal<br />\nLexicographical_compare<br />\nMismatch<br />\nReturn pair&lt;iterator, iterator&gt;</p>\n<h3 id=\"searching-a-value\"><a class=\"anchor\" href=\"#searching-a-value\">#</a> Searching a value</h3>\n<p>Not sorted<br />\nFind<br />\nAdjacent_find<br />\nSorted<br />\nEqual_range<br />\nUpper_bound<br />\nBinary_search</p>\n<h3 id=\"searching-a-range\"><a class=\"anchor\" href=\"#searching-a-range\">#</a> Searching a range</h3>\n<p>Search<br />\nFind_end<br />\nFind_first_of</p>\n<h3 id=\"searching-a-relative-value\"><a class=\"anchor\" href=\"#searching-a-relative-value\">#</a> Searching a relative value</h3>\n<p>Max_element<br />\nMin_element<br />\nMinmax_element</p>\n<h2 id=\"glorious-county-of-lagos-on-sets\"><a class=\"anchor\" href=\"#glorious-county-of-lagos-on-sets\">#</a> Glorious county of Lagos on sets</h2>\n<p>Set_difference<br />\nSet_intersection<br />\nSet_union<br />\nSet_symmetric_difference<br />\nIncludes<br />\nMerge</p>\n<h2 id=\"movers\"><a class=\"anchor\" href=\"#movers\">#</a> Movers</h2>\n<p>Copy<br />\nMove<br />\nSwap_ranges<br />\nCopy_backward<br />\nMove_backward</p>\n<p>##Value Modifiers</p>\n<p>Fill<br />\nFill the same number<br />\nGenerate<br />\nIota<br />\nIncrement number<br />\nReplace</p>\n<h2 id=\"structure-changes\"><a class=\"anchor\" href=\"#structure-changes\">#</a> Structure changes</h2>\n<p>Remove<br />\nErase<br />\nUnique<br />\nRemove the adjacent same element, and move the element forward</p>\n<h3 id=\"_copy\"><a class=\"anchor\" href=\"#_copy\">#</a> *_copy</h3>\n<p>Remove_copy<br />\nUnique_copy<br />\nReverse_copy<br />\nRotate_copy<br />\nReplace_copy<br />\nPartition_copy<br />\nPartial_sort_copy</p>\n<h3 id=\"_if\"><a class=\"anchor\" href=\"#_if\">#</a> *_if</h3>\n<p>Find_if<br />\nFind_if_not<br />\nCount_if<br />\nRemove_if<br />\nRemove_copy_if<br />\nReplace_if<br />\nReplace_copy_if<br />\nCopy_if</p>\n<h2 id=\"lone-islnad\"><a class=\"anchor\" href=\"#lone-islnad\">#</a> lone islnad</h2>\n<p>Transform<br />\nIt can has more than one collection(parameters) to transform.</p>\n<p>For_each</p>\n<h2 id=\"raw-memory\"><a class=\"anchor\" href=\"#raw-memory\">#</a> Raw memory</h2>\n<p>Uninitialized_fill<br />\nUninitialized_copy<br />\nUninitialized_move<br />\nDestroy</p>\n<p>_n<br />\nFill_n<br />\nSearch_n<br />\n…</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/21/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/",
            "url": "https://quas-modo.github.io/2022/09/21/cpp/Lecture04-%E7%AC%AC%E4%B8%80%E6%AC%A1cpp%E7%BC%96%E7%A8%8B/",
            "title": "Lecture04-第一次cpp编程",
            "date_published": "2022-09-21T15:02:26.000Z",
            "content_html": "<p>主要整理了第一次 cpp 作业的问题和想法，以及一些函数和 io。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture04\"><a class=\"anchor\" href=\"#lecture04\">#</a> Lecture04</h1>\n<h1 id=\"课程\"><a class=\"anchor\" href=\"#课程\">#</a> 课程</h1>\n<h2 id=\"imperative-programming-paradigm\"><a class=\"anchor\" href=\"#imperative-programming-paradigm\">#</a> Imperative Programming Paradigm</h2>\n<p>structure programming</p>\n<p>单入口单出口</p>\n<p>Object-Oriented Programming</p>\n<p>并没有改变 imperative programming 状态转换的思想</p>\n<h2 id=\"declarative-programming-paradigm\"><a class=\"anchor\" href=\"#declarative-programming-paradigm\">#</a> Declarative Programming Paradigm</h2>\n<p>Functional Programming</p>\n<p>Logical Programming</p>\n<h1 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h1>\n<h2 id=\"作业1复盘binary2decimal\"><a class=\"anchor\" href=\"#作业1复盘binary2decimal\">#</a> 作业 1 复盘：binary2decimal</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 一开始没有注意到边界条件，如果 b 是 0 的话，ans 为 a 不是 1，会导致返回值的错误。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str:\"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 问题出在这里，弄错了 substr 的参数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cur <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> cur <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    ans <span class=\"token operator\">+=</span> cur <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>输入：1001</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>输出：str:1</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>str:00</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>str:01</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>str:1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>**/</span></pre></td></tr></table></figure><h2 id=\"作业3完成汉诺塔的最小移动次数\"><a class=\"anchor\" href=\"#作业3完成汉诺塔的最小移动次数\">#</a> 作业 3：完成汉诺塔的最小移动次数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  n <span class=\"token operator\">-=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：超时，建议用通项解决</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Created by QUAS on 2022/9/20.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 错误原因，没有及时返回 return 0，也就是遗漏讨论了三种情况</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 不用打表，通项是一样的</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"作业4倒数第i个单词的长度\"><a class=\"anchor\" href=\"#作业4倒数第i个单词的长度\">#</a> 作业 4：倒数第 i 个单词的长度</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 学习一下 split 自制函数的写法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delimiter<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> end <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    begin <span class=\"token operator\">=</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 不要忘记处理末尾部分</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  string inp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">,</span><span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"作业5\"><a class=\"anchor\" href=\"#作业5\">#</a> 作业 5：</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> ch_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> words <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ch_num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span> ret <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">></span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      flag <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> words<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ch_num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span> words <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：最大的问题是出在，我没有认真看清楚题目。</p>\n<blockquote>\n<p>实现如下功能：给出一段文本，输出这段文本包含的字符数、单词数（以空格和换行符为界）和行数。</p>\n<p>输入描述 —— 保证输入中只<strong>会出现英文字母、空格（ <code>' '</code> ）和换行符（ <code>'\\n'</code> ）</strong>。输入保证每行末尾都有一个换行符。</p>\n<p>输出描述 ——<strong> 字符数、单词数和行数</strong>，用空格分隔。</p>\n</blockquote>\n<p>只会出现空格和换行符，我却企图讨论制表符等其他空字符。</p>\n<p>要求输出字符数、单词数和行数，我却在纠结空格如何计算。</p>\n<p>收获是<strong>明白了如何使用 cin.get () 和自制的 split</strong></p>\n<h2 id=\"作业6复盘找出唯一只出现一次的数其他均出现两次\"><a class=\"anchor\" href=\"#作业6复盘找出唯一只出现一次的数其他均出现两次\">#</a> 作业 6 复盘：找出唯一只出现一次的数（其他均出现两次）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> inp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">^</span> inp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意如何输入不定个数<strong> cin&gt;&gt;inp</strong>，另外可以用 **^** 操作解决</p>\n<h2 id=\"作业7复盘\"><a class=\"anchor\" href=\"#作业7复盘\">#</a> 作业 7 复盘：</h2>\n<p>INT_MAX 在 &lt;limits.h&gt; 头文件中</p>\n<h2 id=\"作业8复盘\"><a class=\"anchor\" href=\"#作业8复盘\">#</a> 作业 8 复盘：</h2>\n<p>翻转数字</p>\n<p>给定一个  <code>int</code>  类型的整数  <code>N</code> ，请你将它<em>数字部分</em> 翻转，正负性不变，并输出。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> negative <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 判断是不是 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 判断是不是负数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    negative <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>negative<span class=\"token punctuation\">)</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    l<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 防止开头是 0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      l<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 判断数值有没有溢出</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">10</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 计算答案</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">==</span> INT_MIN <span class=\"token operator\">&amp;&amp;</span> negative <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>negative<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>错误原因：</p>\n<ol>\n<li>未区分 0 与 '0'</li>\n<li>没有考虑到原来<strong>数字末尾有 0</strong> 的情况</li>\n<li>没有考虑到<strong>数字 0</strong> 的特殊情况</li>\n<li>因为题目要求倒序，所以在代码逻辑中有一部分比较绕（就是到底哪边是大的），然后被绕进去了，导致判断越界错误</li>\n<li>可以略略记忆一下 INT_MAX（<strong>2^31-1=2147483647</strong>）和 INT_MIN（ <strong>-2^31=-2147483648</strong>）</li>\n</ol>\n<h2 id=\"作业9复盘最大单词后缀\"><a class=\"anchor\" href=\"#作业9复盘最大单词后缀\">#</a> 作业 9 复盘：最大单词后缀</h2>\n<p>好像没什么好复盘的（</p>\n<p>一道很常见的简单算法题</p>\n<h2 id=\"作业10复盘matrix的加法-减法-乘法-卷积操作\"><a class=\"anchor\" href=\"#作业10复盘matrix的加法-减法-乘法-卷积操作\">#</a> 作业 10 复盘：matrix 的加法、减法、乘法、卷积操作</h2>\n<p>思考如何设计并简化代码</p>\n<p>呃呃一遍过，把输入写了一个函数，把 add、sub 和 mul 进行了合并，conv 没想出来怎么合并。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    item<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>elem <span class=\"token operator\">:</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      cin <span class=\"token operator\">>></span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">operateMatrix</span><span class=\"token punctuation\">(</span>string operation<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>mat1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>mat2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span> <span class=\"token operator\">||</span> operation <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span> <span class=\"token operator\">||</span> operation <span class=\"token operator\">==</span> <span class=\"token string\">\"mul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 命令为 add sub mul 的情况</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>operation <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          ans <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> mat2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 命令为 conv 的情况</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> hei <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span> wid <span class=\"token operator\">=</span> mat1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hei<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> wid<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> q <span class=\"token operator\">&lt;</span> mat2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              ans <span class=\"token operator\">+=</span> mat1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> mat2<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> mat1<span class=\"token punctuation\">,</span> mat2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  string operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    cin <span class=\"token operator\">>></span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    cin <span class=\"token operator\">>></span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  height<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    cin <span class=\"token operator\">>></span> operation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cin <span class=\"token operator\">>></span> mat1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    cin <span class=\"token operator\">>></span> mat2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">operateMatrix</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>mat1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>mat2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>顺带贴一贴 sa 酱的 60 行代码（</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bitsdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> hw<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cin <span class=\"token operator\">>></span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cin <span class=\"token operator\">>></span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cin <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        string cmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cin <span class=\"token operator\">>></span> cmd <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">!=</span> <span class=\"token string\">\"conv\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        cout <span class=\"token operator\">&lt;&lt;</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"error\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> hw<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> hw<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            res <span class=\"token operator\">+=</span> matrix<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关于我不会同时输入多个，和把某些值嵌入表达式中求解这件事</p>\n<h2 id=\"函数用法\"><a class=\"anchor\" href=\"#函数用法\">#</a> 函数用法</h2>\n<h3 id=\"关于substr的用法\"><a class=\"anchor\" href=\"#关于substr的用法\">#</a> 关于 substr 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">substr</span> <span class=\"token punctuation\">(</span>size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_t len <span class=\"token operator\">=</span> npos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"关于find的用法\"><a class=\"anchor\" href=\"#关于find的用法\">#</a> 关于 find 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InputIterator <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span>InputIterator first<span class=\"token punctuation\">,</span> InputIterator last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中，first 和 last 为输入迭代器，[first, last) 用于指定该函数的查找范围；val 为要查找的目标元素。</p>\n<blockquote>\n<p>正因为 first 和 last 的类型为输入迭代器，因此该函数适用于所有的序列式容器。</p>\n</blockquote>\n<p>另外，该函数会返回一个输入迭代器，当 find () 函数查找成功时，其指向的是在 [first, last) 区域内查找到的第一个目标元素；如果查找失败，则该迭代器的指向和 last 相同。</p>\n<p>值得一提的是，find () 函数的底层实现，其实就是用 <code>==</code>  运算符将 val 和 [first, last) 区域内的元素逐个进行比对。这也就意味着，[first, last) 区域内的元素必须支持 <code>==</code>  运算符。</p>\n<h3 id=\"关于自制split\"><a class=\"anchor\" href=\"#关于自制split\">#</a> 关于自制 split</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">split</span> <span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delimiter<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">!=</span> string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end<span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    begin <span class=\"token operator\">=</span> end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在我的实验（debug）中发现，如果两个字符串之间有 n（n&gt;=1）个空格，那么 vector 会插入 n-1 个空的数据。自制 split 并不能排除掉连续的多个空格。</p>\n<h3 id=\"关于自制pow\"><a class=\"anchor\" href=\"#关于自制pow\">#</a> 关于自制 pow</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ans <span class=\"token operator\">*=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>今天看数据结构，递归处理貌似更快，试一下（</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 处理边界条件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"关于vector构建多维数组-初始化-访问的方法\"><a class=\"anchor\" href=\"#关于vector构建多维数组-初始化-访问的方法\">#</a> 关于 vector 构建多维数组、初始化、访问的方法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inputMatrix</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  v<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item <span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    item<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>elem <span class=\"token operator\">:</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      cin <span class=\"token operator\">>></span> elem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> vec1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">vec1_2D</span> <span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">vec1_3D</span><span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WIDTH<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>DEPTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zaXRpb25pc2V2ZXJ5dGhpbmcubmV0L2NwcC1tdWx0aWRpbWVuc2lvbmFsLXZlY3Rvci8=\">讲得很清楚的链接</span></p>\n<h3 id=\"关于cpp中的一些类型转换\"><a class=\"anchor\" href=\"#关于cpp中的一些类型转换\">#</a> 关于 cpp 中的一些类型转换</h3>\n<ul>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoi/\"><strong>stoi</strong></a></p>\n<p>Convert string to integer (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stol/\"><strong>stol</strong></a></p>\n<p>Convert string to long int (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoul/\"><strong>stoul</strong></a></p>\n<p>Convert string to unsigned integer (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoll/\"><strong>stoll</strong></a></p>\n<p>Convert string to long long (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stoull/\"><strong>stoull</strong></a></p>\n<p>Convert string to unsigned long long (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stof/\"><strong>stof</strong></a></p>\n<p>Convert string to float (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stod/\"><strong>stod</strong></a></p>\n<p>Convert string to double (function template)</p>\n</li>\n<li>\n<p><a href=\"https://cplusplus.com/reference/string/stold/\"><strong>stold</strong></a></p>\n<p>Convert string to long double (function template)</p>\n</li>\n</ul>\n<h4 id=\"stoi\"><a class=\"anchor\" href=\"#stoi\">#</a> stoi</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> wstring<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>str</li>\n</ul>\n<p>​\t\tString object with the representation of an integral number.</p>\n<ul>\n<li>\n<p>idx</p>\n<p>Pointer to an object of type <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3NpemVfdA==\">size_t</span>, whose value is set by the function to position of the next character in <em>str</em> after the numerical value.</p>\n<p>This parameter can also be a null pointer, in which case it is not used.</p>\n</li>\n<li>\n<p>base</p>\n<p>Numerical base (radix) that determines the valid characters and their interpretation.</p>\n<p>If this is  <code>0</code> , the base used is determined by the format in the sequence (see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcGx1c3BsdXMuY29tL3N0cnRvbA==\">strtol</span> for details). Notice that by default this argument is  <code>10</code> , not  <code>0</code> .</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// stoi example</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>   <span class=\"token comment\">// std::cout</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span>     <span class=\"token comment\">// std::string, std::stoi</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_dec <span class=\"token operator\">=</span> <span class=\"token string\">\"2001, A Space Odyssey\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_hex <span class=\"token operator\">=</span> <span class=\"token string\">\"40c3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_bin <span class=\"token operator\">=</span> <span class=\"token string\">\"-10010110001\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string str_auto <span class=\"token operator\">=</span> <span class=\"token string\">\"0x7f\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// alias of size_t</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> i_dec <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_dec<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> i_hex <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_hex<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> i_bin <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_bin<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> i_auto <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stoi</span> <span class=\"token punctuation\">(</span>str_auto<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_dec <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and [\"</span> <span class=\"token operator\">&lt;&lt;</span> str_dec<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_hex <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_bin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_bin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str_auto <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> i_auto <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"stof\"><a class=\"anchor\" href=\"#stof\">#</a> stof</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">float</span> <span class=\"token function\">stof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">float</span> <span class=\"token function\">stof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> wstring<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> size_t<span class=\"token operator\">*</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> IO</h2>\n<h3 id=\"关于读入int\"><a class=\"anchor\" href=\"#关于读入int\">#</a> 关于读入 int</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>cin &gt;&gt; n 不会读取‘\\n' ， 需要另外做处理</strong></p>\n<h3 id=\"关于ch-cinget的用法\"><a class=\"anchor\" href=\"#关于ch-cinget的用法\">#</a> 关于 ch = cin.get（）的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ch <span class=\"token operator\">=</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这样写返回字符编码（整型），其中 32 为空格，10 为换行符，小于 32 不是一般意义上的字符。</span></pre></td></tr></table></figure><h3 id=\"关于cingetch的用法\"><a class=\"anchor\" href=\"#关于cingetch的用法\">#</a> 关于 cin.get (ch) 的用法</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这样写赋值给参数 ch</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 会读入空白符</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>cin.get(ch)</th>\n<th>ch = cin.get()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>传递输入字符的方式</td>\n<td>赋值给参数 ch</td>\n<td>将函数返回值赋给 ch</td>\n</tr>\n<tr>\n<td>用于字符输入时函数的返回值</td>\n<td>istream 对象（执行 bool 转换后为 true  ）</td>\n<td>int 类型的字符编码</td>\n</tr>\n<tr>\n<td>到达 EOF 时函数的返回值</td>\n<td>istream 对象（执行 bool 转换后为 false  ）</td>\n<td>EOF</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"输入string\"><a class=\"anchor\" href=\"#输入string\">#</a> 输入 string</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 以空白符或 EOF 为终止</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 以换行符为终止</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 以 delimiter 为终止</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"关于getline的用法\"><a class=\"anchor\" href=\"#关于getline的用法\">#</a> 关于 getline 的用法</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">getline</span> <span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">getline</span> <span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>成功读取时返回 true，错误读取时返回 false</p>\n<p><strong>delim 会被读取！注意区分 cin 和 getline 的用法</strong></p>\n<h1 id=\"todo\"><a class=\"anchor\" href=\"#todo\">#</a> todo</h1>\n<p>复习各种数据结构的基本函数</p>\n<p>学习 template 等 cpp 中不懂的名词（孩子一无所知</p>\n",
            "tags": [
                "NJUSE",
                "cpp",
                "cpp"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/",
            "url": "https://quas-modo.github.io/2022/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/",
            "title": "Lecture04-网络层：数据平面",
            "date_published": "2022-09-21T12:00:27.000Z",
            "content_html": "<p>掌握 IP 编址就是掌握因特网的网络层！（雾）<br />\nBulter Lampson—— 在一个时刻做一件事，将他做好。一个接口应当俘获一个抽象的最低限度的要件。不要进行一般化，一般化通常是错误的。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"第四章-网络层数据平面\"><a class=\"anchor\" href=\"#第四章-网络层数据平面\">#</a> 第四章 网络层：数据平面</h1>\n<h2 id=\"网络层概述\"><a class=\"anchor\" href=\"#网络层概述\">#</a> 网络层概述</h2>\n<h3 id=\"数据平面\"><a class=\"anchor\" href=\"#数据平面\">#</a> <strong>数据平面</strong>：</h3>\n<p>网络层中每台路由器的功能，决定到达路由器输入链路之一的数据报如何转发到该路由器的输出链路之一，每台路由器如何选择。</p>\n<p>传统方式的转发功能基于目标地址和转发表，SDN 方式基于多个字段和流表。</p>\n<h3 id=\"控制平面\"><a class=\"anchor\" href=\"#控制平面\">#</a> <strong>控制平面</strong>：</h3>\n<p>网络范围的逻辑，控制数据报沿着源主机到目的主机的端到端路径中路由器的路由方式，协调本地路由器的转发动作。</p>\n<p>传统的路由方法在路由器中实现，SDN 方法在远程的服务器中实现。</p>\n<p>传统方式，分布式的去做，控制平面和数据平面在一起完成。</p>\n<p>SND 有一个统一的服务器，实现解耦合的功能。</p>\n<h3 id=\"网络层功能\"><a class=\"anchor\" href=\"#网络层功能\">#</a> <strong>网络层功能</strong>：</h3>\n<ol>\n<li>转发，在数据平面实现</li>\n<li>路由选择，在控制平面中实现</li>\n</ol>\n<h3 id=\"网络服务模型\"><a class=\"anchor\" href=\"#网络服务模型\">#</a> <strong>网络服务模型</strong></h3>\n<h4 id=\"对于单个数据报服务\"><a class=\"anchor\" href=\"#对于单个数据报服务\">#</a> 对于单个数据报服务</h4>\n<ol>\n<li>可靠传送</li>\n<li>延迟保证</li>\n</ol>\n<h4 id=\"对于数据报流的服务\"><a class=\"anchor\" href=\"#对于数据报流的服务\">#</a> 对于数据报流的服务</h4>\n<ol>\n<li>保序数据报传送</li>\n<li>保证流的最小宽带</li>\n<li>分组之间的延迟差</li>\n</ol>\n<h2 id=\"路由器工作原理\"><a class=\"anchor\" href=\"#路由器工作原理\">#</a> 路由器工作原理</h2>\n<p>路由器包括<strong>输入端口、交换结构、输出端口和路由选择处理器</strong>。</p>\n<p>基于目标的转发：仅仅依赖于 IP 数据报的目标 IP 地址。</p>\n<p>通用转发：基于头部字段的任意集合进行转发。</p>\n<p><strong>“匹配” 加 “动作”</strong></p>\n<h3 id=\"输入端口和基于目的地转发\"><a class=\"anchor\" href=\"#输入端口和基于目的地转发\">#</a> 输入端口和基于目的地转发</h3>\n<h4 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h4>\n<p>使用转发表来查找输出端口</p>\n<p>路由器用分组目的地址的前缀与该表中的表项进行匹配。当有多个匹配时，使用<strong>最长前缀匹配规则</strong>。</p>\n<h4 id=\"其他动作\"><a class=\"anchor\" href=\"#其他动作\">#</a> 其他动作</h4>\n<ul>\n<li>出现物理层和链路层处理</li>\n<li>检查分组的版本号、检验和以及寿命字段</li>\n<li>必须更新用于网络管理的计数器</li>\n</ul>\n<h4 id=\"输入端口缓存\"><a class=\"anchor\" href=\"#输入端口缓存\">#</a> 输入端口缓存</h4>\n<p>排队延迟以及由于输入缓存溢出造成丢失</p>\n<h3 id=\"交换\"><a class=\"anchor\" href=\"#交换\">#</a> 交换</h3>\n<ol>\n<li>\n<p>经内存交换</p>\n<p>先将分组存入内存，再将分组复制到输出端口</p>\n</li>\n<li>\n<p>经总线交换</p>\n<p>一次只有一个分组能够快约总线，路由器的交换带宽受总线速率的限制。</p>\n</li>\n<li>\n<p>经互联网络交换</p>\n<p>使用更复杂的互联网络，例如使用纵横式交换机、榕树网络，纵横式交换机就是一种由 2N 条总线组成的互联网络。</p>\n</li>\n</ol>\n<h3 id=\"输出端口处理\"><a class=\"anchor\" href=\"#输出端口处理\">#</a> 输出端口处理</h3>\n<p>取出排队的分组进行传输，执行所需的链路层和物理层传输功能。</p>\n<h3 id=\"何处出现排队\"><a class=\"anchor\" href=\"#何处出现排队\">#</a> 何处出现排队</h3>\n<h4 id=\"输入排队\"><a class=\"anchor\" href=\"#输入排队\">#</a> 输入排队</h4>\n<p>HOL 阻塞 Head-Of-the-Line 线路前端阻塞</p>\n<p>只要输入链路上的分组到达速率达到其容量的 58%，在某些假设前提下，输入队列长度就会无限制地增大。</p>\n<h4 id=\"输出排队\"><a class=\"anchor\" href=\"#输出排队\">#</a> 输出排队</h4>\n<p>如何丢弃？</p>\n<ul>\n<li>弃尾</li>\n<li>根据优先权</li>\n<li>随机丢弃</li>\n</ul>\n<h4 id=\"分组调度\"><a class=\"anchor\" href=\"#分组调度\">#</a> 分组调度</h4>\n<ol>\n<li>\n<p>先进先出</p>\n<p>FIFO first in first out</p>\n<p>FCFS first come first service</p>\n</li>\n<li>\n<p>优先权排队</p>\n<p>优先权高的先进行传输</p>\n<p>非抢占式优先权排队：一旦分组开始传输，就不能打断</p>\n</li>\n<li>\n<p>循环和加权公平排队</p>\n<p>保持工作排队，不允许链路保持空闲</p>\n<p>类 n 的分组传输完毕后，就传输类 n+1 的分组，如果该类暂时没有分组，就跳到下一个类进行传输。</p>\n<p>每类的服务时间可能是带有权重的。</p>\n</li>\n</ol>\n<h2 id=\"网络协议\"><a class=\"anchor\" href=\"#网络协议\">#</a> 网络协议</h2>\n<p>以网络为单位来访问和向外传输</p>\n<p>掌握 IP 编址就是掌握因特网的网络层！</p>\n<h3 id=\"ipv4数据报格式\"><a class=\"anchor\" href=\"#ipv4数据报格式\">#</a> IPv4 数据报格式</h3>\n<p>版本</p>\n<p>首部长度</p>\n<p>服务类型</p>\n<p>数据报长度</p>\n<p>16 比特标识</p>\n<p>标志</p>\n<p>13 比特片偏移</p>\n<p>寿命</p>\n<p>上层协议</p>\n<p>首部检验和</p>\n<p>32 位比特源 IP 地址</p>\n<p>32 比特目标 IP 地址</p>\n<p>数据</p>\n<h3 id=\"数据报分片\"><a class=\"anchor\" href=\"#数据报分片\">#</a> 数据报分片</h3>\n<p>因为<strong>最大传送单元（MTU Maximum Transmission Unit）在链路层</strong>的限制，IP 数据报的长度有限，并且，不同链路也许会有不同的链路层协议，有不同的 MTU，所以要对于数据报做一些调整。</p>\n<p>分片，重新组装，标记<strong>表示、标志和片偏移字段</strong>【20 字节头部、数据、偏移量、最后一片的标志比特为 0】</p>\n<h3 id=\"ipv4编址\"><a class=\"anchor\" href=\"#ipv4编址\">#</a> IPv4 编址</h3>\n<p>32 比特（4 字节），共有约 40 亿个。</p>\n<p>点分十进制记法</p>\n<p>无类别域间路由选择 a.b.c.d/x</p>\n<p>为了确定子网，分开主机和路由器的每个接口，产生几个隔离的网络岛，使用接口端接这些隔离的网络的端点。这些隔离的网络中的每一个都叫作一个子网。</p>\n<h4 id=\"分类编址\"><a class=\"anchor\" href=\"#分类编址\">#</a> 分类编址：</h4>\n<ol>\n<li>A 类 1/7/24</li>\n<li>B 类 2/14/16</li>\n<li>C 类 3/21/8</li>\n</ol>\n<h4 id=\"特殊的地址\"><a class=\"anchor\" href=\"#特殊的地址\">#</a> 特殊的地址：</h4>\n<ol>\n<li>\n<p>全 0 - 本网络、本主机</p>\n</li>\n<li>\n<p>全 1 - 广播</p>\n</li>\n<li>\n<p>127.x.x.x 回路地址</p>\n</li>\n<li>\n<p>专用网络地址</p>\n<ul>\n<li>A 10.0.0.0-10.255.255.255</li>\n<li>B 172.16.0.0-172.31.255.255</li>\n<li>C 192.168.0.0-192.168.255.255</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"主机如何获得ip地址\"><a class=\"anchor\" href=\"#主机如何获得ip地址\">#</a> 主机如何获得 IP 地址？</h4>\n<ol>\n<li>\n<p>获取一块地址</p>\n<p>从一个 ISP 获取一组地址，例如该 ISP 被分配了地址 200.23.16.0/20，ISP 可以将地址块分成八个长度相等的连续地址块</p>\n<p>ICANN Internet Corporation for Assigned Names and Numbers 分配地址的机构</p>\n</li>\n<li>\n<p>获取主机地址：动态主机配置协议</p>\n<p>DHCP Dynamic Host Configuration 动态主机配置协议 即插即用协议 零配置协议</p>\n<p>DHCP 建立在 UDP 上</p>\n<ol>\n<li>DHCP 服务器发现</li>\n<li>DHCP 服务器提供</li>\n<li>DHCP 请求</li>\n<li>DHCP ACK</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"网络地址转换\"><a class=\"anchor\" href=\"#网络地址转换\">#</a> 网络地址转换</h3>\n<p>NAT Network Address Translation 网络地址转换</p>\n<p>专用网络 / 具有专用地址的网络 —— 其地址仅对该网络中的设备有意义的网络</p>\n<p>局域网的地址仅在自己内部有效。</p>\n<p>与外界通信利用<strong> NAT 转换表</strong>，记录对应的 WAN 端和 LAN 端的 IP 地址和端口号。</p>\n<p>但是会造成 NAT 穿越问题（客户端如何和网络内部的端系统建立链接）。</p>\n<h3 id=\"安全性\"><a class=\"anchor\" href=\"#安全性\">#</a> 安全性</h3>\n<h4 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h4>\n<p>阻挡所有的 ICMP 回显请求分组</p>\n<p>基于源和目标 IP 端口号阻挡</p>\n<p>跟踪 TCP 连接</p>\n<h4 id=\"入侵检测系统\"><a class=\"anchor\" href=\"#入侵检测系统\">#</a> 入侵检测系统</h4>\n<p>检查数据报的首部字段和有效载荷，匹配数据库中的特征，如果发现匹配，则产生告警。</p>\n<h3 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> IPv6</h3>\n<p>IP 地址更新为 128 比特</p>\n<p>删去的字段：取消分片与重新组装（丢给端系统）、取消首部检验和（丢给链路层和运输层），这些都是为了加快网络中的 IP 转发速度，除去（甩锅）冗余的步骤</p>\n<h4 id=\"ipv4和ipv6之间如何通信\"><a class=\"anchor\" href=\"#ipv4和ipv6之间如何通信\">#</a> IPv4 和 IPv6 之间如何通信</h4>\n<p>采用<strong>隧道</strong>，比如说，两个 IPv6 的地址进行通信，可以把整个 IPv6 的数据报放到 IPv4 数据报的有效载荷字段当中。</p>\n<h2 id=\"通用转发和sdn\"><a class=\"anchor\" href=\"#通用转发和sdn\">#</a> 通用转发和 SDN</h2>\n<p>匹配 + 动作</p>\n<p>通用转发基于<strong> OpenFlow</strong> 的讨论，匹配加动作转发表在 OpenFlow 中称为<strong>流表（flow table）</strong>，它的每个表项包括：</p>\n<ol>\n<li>首部字段值的集合</li>\n<li>计数器集合</li>\n<li>当分组匹配流表项时采取的动作集合</li>\n</ol>\n<h3 id=\"匹配\"><a class=\"anchor\" href=\"#匹配\">#</a> 匹配</h3>\n<p>OpenFlow 匹配入端口、链路层字段、网络层字段、运输层字段</p>\n<h3 id=\"动作\"><a class=\"anchor\" href=\"#动作\">#</a> 动作</h3>\n<ul>\n<li>转发</li>\n<li>丢弃</li>\n<li>修改字段</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<p>网络层中的设备过多</p>\n<p>数量众多、功能各异的中间盒</p>\n<h3 id=\"传统方式实现网络功能的问题\"><a class=\"anchor\" href=\"#传统方式实现网络功能的问题\">#</a> 传统方式实现网络功能的问题</h3>\n<ol>\n<li>\n<p>垂直集成》昂贵，不利于创造新的生态</p>\n</li>\n<li>\n<p>分布式、固化设备功能、网络设备朱磊繁多</p>\n</li>\n<li>\n<p>管理困难</p>\n</li>\n<li>\n<p>流量工程较为困难</p>\n</li>\n</ol>\n<h3 id=\"sdn\"><a class=\"anchor\" href=\"#sdn\">#</a> SDN</h3>\n<p>SDN 远程集中，将数据平面和控制平面分离</p>\n<ol>\n<li>\n<p>水平集成</p>\n</li>\n<li>\n<p>业界生态开放，快速创新</p>\n</li>\n<li>\n<p>产业巨大</p>\n</li>\n</ol>\n",
            "tags": [
                "专业书籍",
                "计算机网络自顶向下",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/",
            "url": "https://quas-modo.github.io/2022/09/20/%E8%A5%BF%E6%96%B9%E7%BE%8E%E6%9C%AF%E5%8F%B2/Lecture01-%E5%8F%B2%E5%89%8D%E5%8F%8A%E5%9F%83%E5%8F%8A%E7%BE%8E%E6%9C%AF/",
            "title": "Lecture01 史前及埃及美术",
            "date_published": "2022-09-19T16:19:56.000Z",
            "content_html": "<p>整个艺术发展史不是技术熟练程度的发展史，而是观念和要求的变化史。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"lecture01\"><a class=\"anchor\" href=\"#lecture01\">#</a> Lecture01</h1>\n<p>并非越像越好，每个时代都是观念先行。比如威尼斯喜欢华丽精美的画作，掌权者喜欢美人；荷兰画派的画作购买者是贩夫走卒，喜欢热闹的宴席、花卉（荷兰人民的收入来源之一）等。</p>\n<h2 id=\"什么是艺术\"><a class=\"anchor\" href=\"#什么是艺术\">#</a> 什么是艺术</h2>\n<h3 id=\"艺术作为替代物\"><a class=\"anchor\" href=\"#艺术作为替代物\">#</a> 艺术作为替代物</h3>\n<p>法国拉斯科洞窟壁画中描绘中箭的马、受伤的动物 =》人们希望在狩猎中有所收获</p>\n<p>古埃及艺术中的雕塑 -》雕塑替代灵魂回归的载体</p>\n<p>《拉霍太普夫妇坐像》</p>\n<p>两尊人物雕像都通体着色，形象安详而庄重，同一些理想化的法老雕像相比，这对夫妇的脸部显得更<strong>富有个性</strong>。两人手按在胸前，显示着虔诚和尊严。为了追求相貌逼真，两尊雕像的眼睛都用宝石镶嵌而成，使雕像更加栩栩如生。这尊雕像虽然从形式上恪守古埃及传统的雕塑模式，但人物生动的表情由于<strong>表面的色彩、镶嵌的眼睛和细节的强调</strong>，显得特别逼真而且富有神采。</p>\n<p><img data-src=\"https://bkimg.cdn.bcebos.com/pic/a71ea8d3fd1f41347249ff71251f95cad1c85e47?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto\" alt=\"img\" /></p>\n<p>阿尔诺芬尼夫妇像 -》结婚证，防止有人不认帐，记录下此刻</p>\n<h3 id=\"艺术作为工具\"><a class=\"anchor\" href=\"#艺术作为工具\">#</a> 艺术作为工具</h3>\n<p>殉教的教徒、遗迹</p>\n<p>辉煌的教堂 -》象征天国的荣耀，吸引教徒遵守教义</p>\n<h3 id=\"艺术作为有意味的形式\"><a class=\"anchor\" href=\"#艺术作为有意味的形式\">#</a> 艺术作为有意味的形式</h3>\n<p>门克 呐喊</p>\n<p>蒙德里安 几何抽象画</p>\n<p><img data-src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fss2.meipian.me%2Fusers%2F67937254%2F439c86c193d84d88a3a8d306681ee932.jpeg%3Fmeipian-raw%2Fbucket%2Fivwen%2Fkey%2FdXNlcnMvNjc5MzcyNTQvNDM5Yzg2YzE5M2Q4NGQ4OGEzYThkMzA2NjgxZWU5MzIuanBlZw%3D%3D%2Fsign%2F072299bb99bfa93c28775beb1be5e419.jpg&amp;refer=http%3A%2F%2Fss2.meipian.me&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1666193539&amp;t=d4736f50491bff759c73c304298bb613\" alt=\"img\" /></p>\n<h2 id=\"史前美术\"><a class=\"anchor\" href=\"#史前美术\">#</a> 史前美术</h2>\n<h3 id=\"洞窟壁画\"><a class=\"anchor\" href=\"#洞窟壁画\">#</a> 洞窟壁画</h3>\n<p>多以动物为主，几乎都是巨大的食草动物。</p>\n<h4 id=\"阿尔太米拉洞窟\"><a class=\"anchor\" href=\"#阿尔太米拉洞窟\">#</a> 阿尔太米拉洞窟</h4>\n<p>绘画分布在侧洞，即有名的 “公牛大厅”，最有名的画作是《受伤的野牛》。</p>\n<p><img data-src=\"https://pic.baike.soso.com/p/20090107/20090107120000-105252.jpg\" alt=\"img\" /></p>\n<h4 id=\"阿斯科洞窟\"><a class=\"anchor\" href=\"#阿斯科洞窟\">#</a> 阿斯科洞窟</h4>\n<p>绘画多为牛、马、熊、狼、鹿等动物</p>\n<p>位于法国多尔多涅省蒙蒂尼亚克镇的韦泽尔峡谷</p>\n<p>画面已经形成了构图，与阿尔塔米拉的静态形成强烈的对比</p>\n<h3 id=\"母神雕塑\"><a class=\"anchor\" href=\"#母神雕塑\">#</a> 母神雕塑</h3>\n<p>夸张强调女性特征 —— 胸部和腹部</p>\n<p>体现母系社会中，人们对女性和生殖的崇拜</p>\n<p>《沃尔道夫的维纳斯》</p>\n<p><img data-src=\"https://p1.ssl.qhimg.com/dr/270_500_/t011e9c54fb60fe2152.jpg?size=816x1200\" alt=\"img\" /></p>\n<h3 id=\"岩画\"><a class=\"anchor\" href=\"#岩画\">#</a> 岩画</h3>\n<p>主要分布在北欧和西班牙的拉文特地区，描绘狩猎、劳动等场面，把运动中的人物表现为剪影效果，强调动态，忽略细节。</p>\n<h3 id=\"巨石建筑\"><a class=\"anchor\" href=\"#巨石建筑\">#</a> 巨石建筑</h3>\n<p>新时期时代</p>\n<p>对巨大的石头的崇拜</p>\n<h4 id=\"斯通亨治怪石圈\"><a class=\"anchor\" href=\"#斯通亨治怪石圈\">#</a> 斯通亨治怪石圈</h4>\n<p>也许和墓葬或者是天文</p>\n<h2 id=\"古埃及美术\"><a class=\"anchor\" href=\"#古埃及美术\">#</a> 古埃及美术</h2>\n<p>与埃及人的<strong>生死观念</strong>相关，多数保留下来的艺术品出土于坟墓和纪念碑。</p>\n<p>在古埃及的壁画中，不同的人物姿势有着不同的含义。</p>\n<p><img data-src=\"https://tse1-mm.cn.bing.net/th/id/OIP-C.g0ZPDbyTIe_YGb7B-34a9gHaFj?pid=ImgDet&amp;rs=1\" alt=\"img\" /></p>\n<h3 id=\"古埃及美术的特征anonymity-匿名性-symbolism象征性\"><a class=\"anchor\" href=\"#古埃及美术的特征anonymity-匿名性-symbolism象征性\">#</a> 古埃及美术的特征 ——anonymity 匿名性 symbolism 象征性</h3>\n<h4 id=\"anonymity\"><a class=\"anchor\" href=\"#anonymity\">#</a> Anonymity</h4>\n<p><a href=\"https://en.wikipedia.org/wiki/File:Craftsmen,_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg\"><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg/440px-Craftsmen%2C_Tomb_of_Nebamun_and_Ipuky_MET_DT10888.jpg\" alt=\"img\" /></a></p>\n<p>Depiction of craftworkers in ancient Egypt</p>\n<p>Ancient Egyptian artists rarely left their names. The Egyptian artwork is anonymous also because most of the time it was collective. Diodorus of Sicily, who traveled and lived in Egypt, has written: &quot;So, after the craftsmen have decided the height of the statue, they all go home to make the parts which they have chosen&quot; (I, 98).</p>\n<h3 id=\"罗塞塔石碑\"><a class=\"anchor\" href=\"#罗塞塔石碑\">#</a> 罗塞塔石碑</h3>\n<h3 id=\"荷鲁斯horus鹰头\"><a class=\"anchor\" href=\"#荷鲁斯horus鹰头\">#</a> 荷鲁斯 Horus（鹰头）</h3>\n<p>—— 荷鲁斯之眼，荷鲁斯的右眼象征太阳</p>\n<p>法老的守护神，王权的象征</p>\n<h3 id=\"阿努比斯anubis犬头\"><a class=\"anchor\" href=\"#阿努比斯anubis犬头\">#</a> 阿努比斯 Anubis（犬头）</h3>\n<h3 id=\"伊西斯\"><a class=\"anchor\" href=\"#伊西斯\">#</a> 伊西斯</h3>\n<p>儿童的守护神</p>\n<h3 id=\"金字塔\"><a class=\"anchor\" href=\"#金字塔\">#</a> 金字塔</h3>\n<p>法老陵墓</p>\n<p>巴斯塔巴</p>\n<p>左塞金字塔 —— 埃及历史上第一座金字塔</p>\n<h3 id=\"门图霍特普享殿\"><a class=\"anchor\" href=\"#门图霍特普享殿\">#</a> 门图霍特普享殿</h3>\n<p>方尖碑</p>\n<p>柱形建筑，造成威严的形象</p>\n<h3 id=\"哈特谢普苏特hatshepsut\"><a class=\"anchor\" href=\"#哈特谢普苏特hatshepsut\">#</a> 哈特谢普苏特<strong> Hatshepsut</strong></h3>\n<p>她是<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvd2lraS8lRTUlOUYlODMlRTUlOEYlOEElRTclQUMlQUMlRTUlOEQlODElRTUlODUlQUIlRTclOEUlOEIlRTYlOUMlOUQ=\">第十八王朝</span>法老（约公元前 1479 年－约公元前 1458 年在位）也是古埃及首位可考的女性法老，是古埃及一位著名的女法老。</p>\n<p>哈特谢普苏特宣称，她的统治不需经由和图特摩斯二世的婚姻，因为她就是尊贵的阿蒙神之女，这也影响到她至今所保留下来的雕刻都是以男性的形象出现。</p>\n<h3 id=\"雕塑versus绘画\"><a class=\"anchor\" href=\"#雕塑versus绘画\">#</a> 雕塑 versus 绘画</h3>\n<p>古希腊的时候，雕塑其实是着色的。但是在文艺复兴时期已经掉色，但当时的人误会了，以为古希腊的雕像不着色，他们大肆赞美着洁白的大理石，效仿古希腊也不为雕像着色，但不知是误会。</p>\n<h3 id=\"斯芬克斯\"><a class=\"anchor\" href=\"#斯芬克斯\">#</a> 斯芬克斯</h3>\n<p>狮身人面像</p>\n<h3 id=\"拉霍太普夫妇坐像\"><a class=\"anchor\" href=\"#拉霍太普夫妇坐像\">#</a> 拉霍太普夫妇坐像</h3>\n<h3 id=\"卡培尔王子像村长像\"><a class=\"anchor\" href=\"#卡培尔王子像村长像\">#</a> 卡培尔王子像（村长像）</h3>\n<p>描绘了一个掌管农业的王子，有小肚腩，但是生动</p>\n<p><img data-src=\"https://pic3.zhimg.com/v2-ec67bc9920cd306c634621edcb6d55da_b.jpg\" alt=\"img\" /></p>\n<h3 id=\"书吏凯伊像\"><a class=\"anchor\" href=\"#书吏凯伊像\">#</a> 书吏凯伊像</h3>\n<p><img data-src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fbkimg.cdn.bcebos.com%2Fpic%2F562c11dfa9ec8a13154aca95fb03918fa0ecc077&amp;refer=http%3A%2F%2Fbkimg.cdn.bcebos.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1666195095&amp;t=f9d2e0634523097f6a3875091f179738\" alt=\"img\" /></p>\n<h3 id=\"阿蒙霍特普四世\"><a class=\"anchor\" href=\"#阿蒙霍特普四世\">#</a> 阿蒙霍特普四世</h3>\n<p>雕像增加人性的、世俗化的一面</p>\n<h3 id=\"纳菲尔提提王后像\"><a class=\"anchor\" href=\"#纳菲尔提提王后像\">#</a> 纳菲尔提提王后像</h3>\n<p>注重表现人间美貌的一面，刻画着精巧的五官，少了很多程式化的东西。</p>\n<p><img data-src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.Y7N7fcEA9xVKYs9SWPRFVQHaLI?pid=ImgDet&amp;rs=1\" alt=\"img\" /></p>\n",
            "tags": [
                "其他",
                "西方美术史",
                "美术"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/",
            "url": "https://quas-modo.github.io/2022/09/17/thoughts/%E4%B8%89%E5%92%8C/",
            "title": "三和",
            "date_published": "2022-09-17T14:44:18.000Z",
            "content_html": "<p>躲进黑匣子里的两小时。</p>\n<p>深夜胡言乱语。</p>\n<p><span id=\"more\"></span></p>\n<p>虽然我还是个每个月向家里要钱的不懂事的大学生，但是” 三和大神 “的处境倒是可以略懂一二。说实在的，白领除了看上去体面一些、办公环境好一点，本质上和他们又有什么区别呢。</p>\n<p>初入社会，不懂规则，被骗、被抢，分不清假意与真心，被社会的老人们暗戳戳地玩弄和笑话。抓住一个幻想就像是救命稻草，用想象蒙蔽现实的红姐形象，沉溺于一个虚幻的、温暖的世界。曹一句句幼稚的、低微的请求，红姐一次次震惊的、老练的回答。</p>\n<p>” 工作是累赘，工作是枷锁。“” 干一天玩三天。“” 谁干长期啊，那个日薪就走了。“</p>\n<p>” 弟弟，我每天和很多人打交道，没那么多情感。“” 红姐只爱钱。“</p>\n<p>你说他们懒散、堕落、一身穷病，其实未尝不是一种对生活的对抗。都说码农薪酬高，其实是拿命换，谁喜欢 996、007 的生活呢，更期待悠闲一点放松一点的生活。细想自己，未尝不喜欢堕落，下坡总是比上坡要容易很多的。只不过在时常警醒自己，平常人家出身的孩子，没有什么背景，没有什么支撑，唯一能靠的是自己的实力，并不能常常放松，也时时害怕、时时惊惶。</p>\n<p>光影的切换，现实与曹的故事、小波的手机屏幕的转换，父母的反转饰演，穿插的歌舞，不同的方言，与观众的互动倒是给《三和》增加了不少趣味。</p>\n<p>希望下次可以和朋友一起去看剧 ww</p>\n",
            "tags": [
                "杂谈",
                "书影音",
                "杂谈",
                "书影音"
            ]
        }
    ]
}