{
    "version": "https://jsonfeed.org/version/1",
    "title": "Carpe diem",
    "subtitle": "pluck the day",
    "icon": "https://quas-modo.github.io/images/favicon.ico",
    "description": "notes/thoughts/nonsense",
    "home_page_url": "https://quas-modo.github.io",
    "items": [
        {
            "id": "https://quas-modo.github.io/2023/06/21/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E7%AE%80%E7%AD%94%E6%95%B4%E7%90%86/",
            "url": "https://quas-modo.github.io/2023/06/21/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E7%AE%80%E7%AD%94%E6%95%B4%E7%90%86/",
            "title": "数据管理基础简答整理",
            "date_published": "2023-06-21T06:49:06.000Z",
            "content_html": "<p>数据库简答题押题整理，主要来源是课后习题。</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"数据管理基础简答题整理\"><a class=\"anchor\" href=\"#数据管理基础简答题整理\">#</a> 《数据管理基础》简答题整理</h2>\n<h3 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h3>\n<h4 id=\"什么是数据库有什么基本特点\"><a class=\"anchor\" href=\"#什么是数据库有什么基本特点\">#</a> 什么是数据库，有什么基本特点</h4>\n<p>数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。</p>\n<ul>\n<li><strong>基本特点</strong>\n<ul>\n<li>\n<p>数据结构化</p>\n<ul>\n<li>数据内部结构化</li>\n<li>数据之间具有联系，整体是结构化的</li>\n</ul>\n</li>\n<li>\n<p>数据的共享性高，冗余度低且易扩充</p>\n</li>\n<li>\n<p>数据独立性高</p>\n<ul>\n<li>数据和程序相互不依赖</li>\n<li>物理独立性\n<ul>\n<li>数据库存储结构（物理结构）改变，管理员对模式 / 内模式映像作改变，可以使模式不变、外模式不变</li>\n</ul>\n</li>\n<li>逻辑独立性\n<ul>\n<li>模式（逻辑结构）改变，管理员对各个外模式 / 模式的映像作相应改变，可以使外模式保持不变，应用程序不变。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据由数据管理系统（DBMS）统一管理和控制</p>\n<ul>\n<li>安全性保护</li>\n<li>完整性检查</li>\n<li>并发控制</li>\n<li>数据库恢复</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"为什么要使用数据库系统使用数据库系统的而好处\"><a class=\"anchor\" href=\"#为什么要使用数据库系统使用数据库系统的而好处\">#</a> 为什么要使用数据库系统？/ 使用数据库系统的而好处</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612194832083.png\" alt=\"image-20230612194832083\" /></p>\n<h4 id=\"跟人工管理和文件系统比较说明数据库管理数据的特点\"><a class=\"anchor\" href=\"#跟人工管理和文件系统比较说明数据库管理数据的特点\">#</a> 跟人工管理和文件系统比较，说明数据库管理数据的特点。</h4>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618151823240.png\" alt=\"image-20220618151823240\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20220618151837106.png\" alt=\"image-20220618151837106\" /></p>\n<h4 id=\"逻辑模型的分类-特点以及优缺点\"><a class=\"anchor\" href=\"#逻辑模型的分类-特点以及优缺点\">#</a> 逻辑模型的分类、特点以及优缺点</h4>\n<ol>\n<li>\n<p>层次模型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200708933.png\" alt=\"image-20230612200708933\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200848830.png\" alt=\"image-20230612200848830\" /></p>\n</li>\n<li>\n<p>网状模型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200735665.png\" alt=\"image-20230612200735665\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200909254.png\" alt=\"image-20230612200909254\" /></p>\n</li>\n<li>\n<p>关系模型</p>\n<p>关系模型必须是规范化的：比如，关系的每个分量必须是一个不可分的数据项</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612201155877.png\" alt=\"image-20230612201155877\" /></p>\n<p><strong>关系模型的优缺点</strong></p>\n<p>（要知道，可能会考简答，后面的 nosql 跟关系型数据库的对比也提到了这个知识点）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612201118327.png\" alt=\"image-20230612201118327\" /></p>\n</li>\n</ol>\n<h4 id=\"简述数据库三级模式和两级映像的作用和地位\"><a class=\"anchor\" href=\"#简述数据库三级模式和两级映像的作用和地位\">#</a> 简述数据库三级模式和两级映像的作用和地位。</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613155433985.png\" alt=\"image-20230613155433985\" /></p>\n<p>分别阐释意思，且强调保证了逻辑独立性和物理独立性，外模式保证了一定的数据库安全性。</p>\n<h4 id=\"数据库系统组成\"><a class=\"anchor\" href=\"#数据库系统组成\">#</a> 数据库系统组成</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613160301035.png\" alt=\"image-20230613160301035\" /></p>\n<h3 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h3>\n<h4 id=\"关系模型的三个组成部分\"><a class=\"anchor\" href=\"#关系模型的三个组成部分\">#</a> 关系模型的三个组成部分</h4>\n<ol>\n<li>关系数据结构</li>\n<li>关系操作集合</li>\n<li>关系完整性约束</li>\n</ol>\n<h4 id=\"关系的5种基本操作是什么表示其他运算\"><a class=\"anchor\" href=\"#关系的5种基本操作是什么表示其他运算\">#</a> 关系的 5 种基本操作是什么，表示其他运算</h4>\n<p>选择、投影、并、差、笛卡尔积</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161848201.png\" alt=\"image-20230613161848201\" /></p>\n<h4 id=\"关系模型的完整性约束\"><a class=\"anchor\" href=\"#关系模型的完整性约束\">#</a> 关系模型的完整性约束</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161727700.png\" alt=\"image-20230613161727700\" /></p>\n<h4 id=\"等值连接与自然连接的区别与联系\"><a class=\"anchor\" href=\"#等值连接与自然连接的区别与联系\">#</a> 等值连接与自然连接的区别与联系</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161822008.png\" alt=\"image-20230613161822008\" /></p>\n<h3 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h3>\n<h4 id=\"什么是基本表什么是视图两者的区别与联系\"><a class=\"anchor\" href=\"#什么是基本表什么是视图两者的区别与联系\">#</a> 什么是基本表，什么是视图，两者的区别与联系</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161253604.png\" alt=\"image-20230613161253604\" /></p>\n<h4 id=\"restrictcascade\"><a class=\"anchor\" href=\"#restrictcascade\">#</a> RESTRICT/CASCADE</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161329718.png\" alt=\"image-20230613161329718\" /></p>\n<h4 id=\"视图有什么作用\"><a class=\"anchor\" href=\"#视图有什么作用\">#</a> 视图有什么作用</h4>\n<ol>\n<li>视图能简化用户的操作</li>\n<li>视图使用户能以多种视角看待同一数据</li>\n<li>视图对重构数据库提供了一定程度的逻辑独立性</li>\n<li>视图能够对机密数据提供安全保护</li>\n<li>适当的利用视图可以更清晰地表达查询</li>\n</ol>\n<h4 id=\"哪些视图可以被更新\"><a class=\"anchor\" href=\"#哪些视图可以被更新\">#</a> 哪些视图可以被更新</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161355686.png\" alt=\"image-20230613161355686\" /></p>\n<h3 id=\"第四章\"><a class=\"anchor\" href=\"#第四章\">#</a> 第四章</h3>\n<h4 id=\"实现数据库安全性的常用技术和方法\"><a class=\"anchor\" href=\"#实现数据库安全性的常用技术和方法\">#</a> 实现数据库安全性的常用技术和方法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613160948885.png\" alt=\"image-20230613160948885\" /></p>\n<h4 id=\"什么是数据库的自主存取控制方法dac-discretionary-access-control和强制存取控制方法mac\"><a class=\"anchor\" href=\"#什么是数据库的自主存取控制方法dac-discretionary-access-control和强制存取控制方法mac\">#</a> 什么是数据库的自主存取控制方法（DAC Discretionary Access Control）和强制存取控制方法 MAC</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621145015033.png\" alt=\"image-20230621145015033\" /></p>\n<h4 id=\"解释mac机制中的主体-客体-敏感度标记\"><a class=\"anchor\" href=\"#解释mac机制中的主体-客体-敏感度标记\">#</a> 解释 MAC 机制中的主体、客体、敏感度标记</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613161044991.png\" alt=\"image-20230613161044991\" /></p>\n<h4 id=\"什么是数据库的审计功能为什么要提供审计功能\"><a class=\"anchor\" href=\"#什么是数据库的审计功能为什么要提供审计功能\">#</a> 什么是数据库的审计功能，为什么要提供审计功能</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621145028463.png\" alt=\"image-20230621145028463\" /></p>\n<h3 id=\"第五章\"><a class=\"anchor\" href=\"#第五章\">#</a> 第五章</h3>\n<h4 id=\"安全性vs完整性\"><a class=\"anchor\" href=\"#安全性vs完整性\">#</a> 安全性 vs 完整性</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162228256.png\" alt=\"image-20230613162228256\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162233873.png\" alt=\"image-20230613162233873\" /></p>\n<h4 id=\"dbms完整性控制体现在哪三个方面\"><a class=\"anchor\" href=\"#dbms完整性控制体现在哪三个方面\">#</a> DBMS 完整性控制体现在哪三个方面</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162255287.png\" alt=\"image-20230613162255287\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162310887.png\" alt=\"image-20230613162310887\" /></p>\n<h3 id=\"第六章\"><a class=\"anchor\" href=\"#第六章\">#</a> 第六章</h3>\n<h4 id=\"简述规范化理论对数据库设计的指导意义\"><a class=\"anchor\" href=\"#简述规范化理论对数据库设计的指导意义\">#</a> 简述规范化理论对数据库设计的指导意义</h4>\n<p><strong>习题解答</strong>：规范化理论为数据库设计人员判断关系模式优劣提供了理论标准，可用以指导关系数据模型的优化，用来预测模式可能出现的问题，为设计人员提供了自动产生各种模式的算法工具，使数据库设计工作有了严格的理论基础。</p>\n<ol>\n<li>\n<p>在数据分析阶段，用数据依赖的概念分析和表示各项数据项之间的关系；</p>\n</li>\n<li>\n<p>在设计概念结构阶段，用规范化理论消除初步 E-R 图冗余的联系。</p>\n</li>\n<li>\n<p>在 E-R 图向数据模型转化阶段，用模式分解的概念和方法指导设计。</p>\n</li>\n</ol>\n<h3 id=\"第七章-数据库设计\"><a class=\"anchor\" href=\"#第七章-数据库设计\">#</a> 第七章 数据库设计</h3>\n<h4 id=\"简要描述数据库设计的6个阶段\"><a class=\"anchor\" href=\"#简要描述数据库设计的6个阶段\">#</a> 简要描述数据库设计的 6 个阶段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20220613220014932.png\" alt=\"image-20220613220014932\" /></p>\n<ol>\n<li>\n<p>需求分析</p>\n</li>\n<li>\n<p>概念结构设计</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162629829.png\" alt=\"image-20230613162629829\" /></p>\n</li>\n<li>\n<p>逻辑结构设计</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162657428.png\" alt=\"image-20230613162657428\" /></p>\n</li>\n<li>\n<p>物理结构设计</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162711134.png\" alt=\"image-20230613162711134\" /></p>\n</li>\n<li>\n<p>数据库实施</p>\n</li>\n<li>\n<p>数据库运行和维护</p>\n</li>\n</ol>\n<h4 id=\"尝试叙述数据库设计过程中形成的数据库模式\"><a class=\"anchor\" href=\"#尝试叙述数据库设计过程中形成的数据库模式\">#</a> 尝试叙述数据库设计过程中形成的数据库模式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20220615194236256.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162454170.png\" alt=\"image-20230613162454170\" /></p>\n<h4 id=\"简述逻辑模型设计中水平分解和垂直分解的原理\"><a class=\"anchor\" href=\"#简述逻辑模型设计中水平分解和垂直分解的原理\">#</a> 简述逻辑模型设计中，水平分解和垂直分解的原理。</h4>\n<p>水平分解</p>\n<ul>\n<li>把（基本）关系的元组分为若干子集合，定义每个子集合为一个子关系</li>\n<li>对符合”80/20“原则的，把经常被使用的数据分解出来，形成一个子关系</li>\n<li>水平分解为若干子关系，使每个事务存取的数据对应于一个子关系</li>\n</ul>\n<p>垂直分解</p>\n<ul>\n<li>经常在一起使用的属性从 R 中分解出来形成一个子关系模式</li>\n<li>优点：提高某些事物的效率</li>\n<li>缺点：连接操作可能降低效率</li>\n</ul>\n<h4 id=\"数据字典中都存放了哪些内容需求分析阶段\"><a class=\"anchor\" href=\"#数据字典中都存放了哪些内容需求分析阶段\">#</a> 数据字典中都存放了哪些内容（需求分析阶段）</h4>\n<ol>\n<li>数据项</li>\n<li>数据结构</li>\n<li>数据流</li>\n<li>数据存储</li>\n<li>处理过程</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162606339.png\" alt=\"image-20230613162606339\" /></p>\n<h4 id=\"数据库的再组织和重构造\"><a class=\"anchor\" href=\"#数据库的再组织和重构造\">#</a> 数据库的再组织和重构造</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613162919785.png\" alt=\"image-20230613162919785\" /></p>\n<h3 id=\"第十章-数据库恢复技术\"><a class=\"anchor\" href=\"#第十章-数据库恢复技术\">#</a> 第十章 数据库恢复技术</h3>\n<h4 id=\"什么是事务的acid特性\"><a class=\"anchor\" href=\"#什么是事务的acid特性\">#</a> 什么是事务的 ACID 特性</h4>\n<ol>\n<li>原子性 (Atomicity)</li>\n<li>一致性 (Consistency)</li>\n<li>隔离性 (Isolation)</li>\n<li>持续性 (Durability)</li>\n</ol>\n<p>故障恢复可以保证事物的原子性和持续性</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163046626.png\" alt=\"image-20230613163046626\" /></p>\n<h4 id=\"什么是日志文件有什么用途\"><a class=\"anchor\" href=\"#什么是日志文件有什么用途\">#</a> 什么是日志文件，有什么用途</h4>\n<p>日志文件是用来记录事务对数据库更新操作的文件</p>\n<p>用途：</p>\n<ol>\n<li>进行事务故障恢复</li>\n<li>进行系统故障恢复</li>\n<li>协助后备副本进行介质故障恢复</li>\n</ol>\n<h4 id=\"登记日志文件时为什么要先写日志文件再写数据库\"><a class=\"anchor\" href=\"#登记日志文件时为什么要先写日志文件再写数据库\">#</a> 登记日志文件时，为什么要先写日志文件再写数据库</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163154594.png\" alt=\"image-20230613163154594\" /></p>\n<ul>\n<li>写数据库和写日志文件是两个不同的操作</li>\n<li>在这两个操作之间可能发生故障</li>\n<li>如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了</li>\n<li>如果先写日志，但没有修改数据库，按日志文件恢复时只不过多执行了一次不必要的 UNDO 操作，并不会影响数据库的正确性</li>\n</ul>\n<h4 id=\"针对不同的故障试给出恢复的策略和方法\"><a class=\"anchor\" href=\"#针对不同的故障试给出恢复的策略和方法\">#</a> 针对不同的故障，试给出恢复的策略和方法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621145111957.png\" alt=\"image-20230621145111957\" /></p>\n<h4 id=\"什么是检查点记录\"><a class=\"anchor\" href=\"#什么是检查点记录\">#</a> 什么是检查点记录</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163233337.png\" alt=\"image-20230613163233337\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163240311.png\" alt=\"image-20230613163240311\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230614090130363.png\" alt=\"image-20230614090130363\" /></p>\n<h4 id=\"具有检查点的恢复技术有什么优点\"><a class=\"anchor\" href=\"#具有检查点的恢复技术有什么优点\">#</a> 具有检查点的恢复技术有什么优点</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163258781.png\" alt=\"image-20230613163258781\" /></p>\n<h4 id=\"试述使用检查点方法进行恢复的步骤\"><a class=\"anchor\" href=\"#试述使用检查点方法进行恢复的步骤\">#</a> 试述使用检查点方法进行恢复的步骤</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163328204.png\" alt=\"image-20230613163328204\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163338578.png\" alt=\"image-20230613163338578\" /></p>\n<h4 id=\"什么是数据库镜像它有什么用途\"><a class=\"anchor\" href=\"#什么是数据库镜像它有什么用途\">#</a> 什么是数据库镜像？它有什么用途？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163400447.png\" alt=\"image-20230613163400447\" /></p>\n<h3 id=\"第十一章-并发控制\"><a class=\"anchor\" href=\"#第十一章-并发控制\">#</a> 第十一章 并发控制</h3>\n<h4 id=\"为什么要并发控制并发控制技术能保证事物的哪些特性\"><a class=\"anchor\" href=\"#为什么要并发控制并发控制技术能保证事物的哪些特性\">#</a> 为什么要并发控制？并发控制技术能保证事物的哪些特性？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163524111.png\" alt=\"image-20230613163524111\" /></p>\n<h4 id=\"并发导致哪几种数据不一致如何避免\"><a class=\"anchor\" href=\"#并发导致哪几种数据不一致如何避免\">#</a> 并发导致哪几种数据不一致？如何避免？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163601955.png\" alt=\"image-20230613163601955\" /></p>\n<h4 id=\"什么是封锁锁的类型有哪几种\"><a class=\"anchor\" href=\"#什么是封锁锁的类型有哪几种\">#</a> 什么是封锁？锁的类型有哪几种？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163648322.png\" alt=\"image-20230613163648322\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163652599.png\" alt=\"image-20230613163652599\" /></p>\n<h4 id=\"什么是活锁试述活锁的产生原因和解决方法\"><a class=\"anchor\" href=\"#什么是活锁试述活锁的产生原因和解决方法\">#</a> 什么是活锁？试述活锁的产生原因和解决方法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202022484.png\" alt=\"image-20230613202022484\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202034971.png\" alt=\"image-20230613202034971\" /></p>\n<h4 id=\"什么是死锁请给出预防死锁的若干方法\"><a class=\"anchor\" href=\"#什么是死锁请给出预防死锁的若干方法\">#</a> 什么是死锁？请给出预防死锁的若干方法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202106810.png\" alt=\"image-20230613202106810\" /></p>\n<h4 id=\"请给出检测死锁的一种方法当发生死锁后如何解除死锁\"><a class=\"anchor\" href=\"#请给出检测死锁的一种方法当发生死锁后如何解除死锁\">#</a> 请给出检测死锁的一种方法，当发生死锁后如何解除死锁？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202151951.png\" alt=\"image-20230613202151951\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202159150.png\" alt=\"image-20230613202159150\" /></p>\n<h4 id=\"什么样的并发调度是正确的调度\"><a class=\"anchor\" href=\"#什么样的并发调度是正确的调度\">#</a> 什么样的并发调度是正确的调度？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613202227437.png\" alt=\"image-20230613202227437\" /></p>\n<h4 id=\"为什么要引进意向锁意向锁的含义是什么\"><a class=\"anchor\" href=\"#为什么要引进意向锁意向锁的含义是什么\">#</a> 为什么要引进意向锁？意向锁的含义是什么</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621145153220.png\" alt=\"image-20230621145153220\" /></p>\n<h4 id=\"常用意向锁及相容矩阵\"><a class=\"anchor\" href=\"#常用意向锁及相容矩阵\">#</a> 常用意向锁及相容矩阵</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230613163812552.png\" alt=\"image-20230613163812552\" /></p>\n<h3 id=\"nosql相关\"><a class=\"anchor\" href=\"#nosql相关\">#</a> nosql 相关</h3>\n<h4 id=\"关系型数据库的优缺点\"><a class=\"anchor\" href=\"#关系型数据库的优缺点\">#</a> 关系型数据库的优缺点</h4>\n<p>ppt62</p>\n<p>优点：</p>\n<ol>\n<li>建立在严格的数学概念的基础上</li>\n<li>概念单一\n<ol>\n<li>实体和各类联系都用关系来表示</li>\n<li>对数据的检索结果也是关系</li>\n</ol>\n</li>\n<li>关系模型的存取路径对用户透明\n<ol>\n<li>具有更高的数据独立性，更好的安全保密性</li>\n<li>简化了程序员的工作和数据库开发建立的工作</li>\n</ol>\n</li>\n<li>获取持久化数据\n<ul>\n<li>持久存储大量数据</li>\n</ul>\n</li>\n<li>集成\n<ul>\n<li>并能<strong>共享数据库集成</strong>，<strong>多个应用程序都将数据保存在同一个数据库中</strong>。这样一来，所有应用程序很容易就能使用彼此的数据了</li>\n</ul>\n</li>\n<li>并发\n<ul>\n<li>在面对并发操作时，关系型数据库<strong>提供了 “事务” 机制来控制对其数据的访问</strong></li>\n<li><strong>事务在处理错误时也起到作用</strong>。比如如果事务中途出错，可以通过回滚保证数据不受破坏</li>\n</ul>\n</li>\n<li>近乎标准的模型\n<ul>\n<li>关系型数据库以<strong>近乎标准的方式</strong>提供了<strong>数据模型</strong>。规定了模式，具有更高的数据独立性和安全保密性。</li>\n</ul>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>存取路径对用户透明，查询效率往往不如格式化数据模型（NoSQL）</li>\n<li>为提高性能，必须对用户的查询请求进行优化，增加了开发 DBMS 的难度</li>\n</ol>\n<h4 id=\"为什么要引入nosqlnosql的由来\"><a class=\"anchor\" href=\"#为什么要引入nosqlnosql的由来\">#</a> 为什么要引入 NoSQL/NoSQL 的由来</h4>\n<ol>\n<li>NoSQL 在集群问题上，让用户自行决定可用性和一致性的平衡\n<ul>\n<li>关系型数据库使用 ACID 事务来保持整个数据库的一致性，而这种方式本身与集群环境相冲突</li>\n<li>NoSQL 数据库为处理并发及分布问题提供了众多选项。</li>\n</ul>\n</li>\n<li>NoSQL 是无模式的，不需要预先定义值和型，不会发生阻抗失谐的问题\n<ul>\n<li>使用的数据组织形式比 “关系” 更丰富，可包括 &quot;嵌套记录&quot; 或列表等</li>\n<li>阻抗失谐：内存中的数据结构和关系型数据不匹配，每次处理的过程很麻烦</li>\n</ul>\n</li>\n<li>NoSQL 是应用数据库，MySQL 是集成数据库\n<ul>\n<li>应用数据库：内容只由一个应用数据代码库直接访问，可直接管理数据库，与外部通信服务解耦</li>\n<li>集成数据库：集成多个应用程序，操作内容一致的持久数据，需要相互协调，更新数据由数据库负责</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"各种nosql数据库的共同特性\"><a class=\"anchor\" href=\"#各种nosql数据库的共同特性\">#</a> 各种 NoSQL 数据库的共同特性</h4>\n<ol>\n<li>开源分布式的非关系型数据库</li>\n<li>不使用关系模型</li>\n<li>在集群中运行良好</li>\n<li>适用于 21 世纪的互联网公司</li>\n<li>无模式\n<ul>\n<li>不用事先修改结构定义，即可自由添加字段了</li>\n<li>这在处理不规则数据和自定义字段时 非常有用</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"key-value数据库\"><a class=\"anchor\" href=\"#key-value数据库\">#</a> key-value 数据库</h4>\n<ul>\n<li>数据库是如何完成基本存放的想法 / 数据库存放的是什么东西，怎么存的\n<ul>\n<li>是一张简单的哈希表，数据库访问均通过主键来操作</li>\n<li>将聚合看做不透明的整体，只能通过键来查出整个聚合</li>\n</ul>\n</li>\n<li>特点：性能较高，易于扩展</li>\n<li>适合做什么，不适合做什么\n<ul>\n<li>非常适合\n<ul>\n<li>保存会话 (用会话 ID 作为键)</li>\n<li>购物车数据（用 userid 绑定）</li>\n<li>用户配置等信息（本质是因为键值数据库可以存放任意数据结构的数据）</li>\n</ul>\n</li>\n<li>不适合\n<ul>\n<li>数据间（建立）关系</li>\n<li>含有多项操作的事务（kv 数据库不擅长回滚恢复等操作）</li>\n<li>查询数据（无法搜索 value）</li>\n<li>操作关键字集合（一次只能操作一个键）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文档数据库\"><a class=\"anchor\" href=\"#文档数据库\">#</a> 文档数据库</h4>\n<ul>\n<li>\n<p>文档格式：XML、JSON、BSON</p>\n</li>\n<li>\n<p>具有自述性、分层的树状数据结构</p>\n</li>\n<li>\n<p>文档彼此相似，但不必完全相同。文档数据库所存放的文档，就相当于键值数据库所存放的 “值”。</p>\n</li>\n<li>\n<p>文档数据库可视为其值可查的键值数据库。</p>\n</li>\n<li>\n<p>特点：性能高，灵活性高</p>\n</li>\n<li>\n<p>适合做什么，不适合做什么</p>\n<ul>\n<li>适用：\n<ul>\n<li>事件记录（数据结构灵活）</li>\n<li>内容管理系统及博客平台（数据结构灵活，支持 JSON）</li>\n<li>网站分析与实时分析（可以只更新部分数据，方便保存浏览量等信息）</li>\n<li>电子商务应用程序（适应较为灵活的模式）</li>\n</ul>\n</li>\n<li>不适用：\n<ul>\n<li>包含多项操作的复杂事务（不适合执行跨文档的原子操作）</li>\n<li>查询持续变化的聚合结构</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"列族数据库\"><a class=\"anchor\" href=\"#列族数据库\">#</a> 列族数据库</h4>\n<ul>\n<li>\n<p>列族数据库，可以存储关键字及其映射值，并且可以把值分成多个列族，让每个列族代表一张数据映射表 (map of data)。</p>\n</li>\n<li>\n<p>每个键值对都占据一列，并且都存有一个 “时间戳” 值。</p>\n</li>\n<li>\n<p>列族数据库的各行不一定要具备完全相同的列，并且可以随意向其中某行加入一列，而不用把它添加到其他行中。</p>\n</li>\n<li>\n<p>特点：易于扩展，易于访问</p>\n</li>\n<li>\n<p>适合做什么，不适合做什么</p>\n<ul>\n<li>适合：事件记录、内容管理系统与博客平台、计数器、限期（利用时间戳 TTL）</li>\n<li>不适合：\n<ul>\n<li><strong>需要以 “ACID 事务” 执行写入及读取操作的系统。</strong></li>\n<li><strong>根据查询结果聚合数据（需要把每一行读到客户端，成本高）</strong></li>\n<li><strong>开发早期或试探某个技术方案（改变查询模式成本高）</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"图数据库\"><a class=\"anchor\" href=\"#图数据库\">#</a> 图数据库</h4>\n<ul>\n<li>\n<p>数据库是如何完成基本存放的想法</p>\n<ul>\n<li>图数据库可存放实体及实体间关系。</li>\n</ul>\n</li>\n<li>\n<p>数据库存放的是什么东西，怎么存的</p>\n<ul>\n<li>实体也叫 “节点”(node)，它们具有属性 (property)。可将节点视为应用程序中某对象的实例。</li>\n<li>关系又叫 “边”(edge)，它们也有属性，有类型。边具备方向性 ( directional significance)，而节点则按关系组织起来，以便在其中查找所需模式。</li>\n<li>实体和实体间关系组成的有向图（实体作为结点，实体间关系作为边）</li>\n</ul>\n</li>\n<li>\n<p>特点：支持复杂的图形算法，可用于构建复杂的关系图谱</p>\n</li>\n<li>\n<p>适合做什么，不适合做什么</p>\n<ul>\n<li>适合：\n<ul>\n<li>互联数据</li>\n<li>安排运输路线</li>\n<li>分派货物和基于位置的服务</li>\n<li>推荐引擎（结点间关系）</li>\n</ul>\n</li>\n<li>不适合：\n<ul>\n<li>更新全部或某子集内的实体</li>\n<li>图数据库可能没有办法处理数据量过大的场合，即便模型适合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "NJUSE",
                "数据管理基础",
                "数据管理基础"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/06/21/NJU/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97%E4%BA%8C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "url": "https://quas-modo.github.io/2023/06/21/NJU/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97%E4%BA%8C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "title": "软件工程与计算二期末复习",
            "date_published": "2023-06-21T06:44:20.000Z",
            "content_html": "<p>整理了软工二除了名词解释以外的重点 ww</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"软件工程发展历史\"><a class=\"anchor\" href=\"#软件工程发展历史\">#</a> 软件工程发展历史</h2>\n<p>1950s：科学计算；以机器为中心进行编程；像生产硬件一样生产软件。</p>\n<p>1960s：业务应用 (批量数据处理和事物计算)；软件不同于硬件；用软件工艺的方式生产软件。</p>\n<p>1970s：结构化方法；瀑布模型；强调规则和纪律。它们奠定了软件工程的基础，是后续年代软件工程发展的支撑。</p>\n<p>1980s：追求生产力最大化；现代结构化方法 / 面向对象编程广泛应用；重视过程的作用。</p>\n<p>1990s：企业为中心的大规模软件系统开发；追求快速开发、可变更性和用户价值；web 应用出现</p>\n<p>2000s：大规模 web 应用；大量面向大众的 web 产品；追求快速开发、可变更性、用户价值和创新。</p>\n<h2 id=\"项目启动\"><a class=\"anchor\" href=\"#项目启动\">#</a> 项目启动</h2>\n<h3 id=\"如何管理团队\"><a class=\"anchor\" href=\"#如何管理团队\">#</a> 如何管理团队</h3>\n<ol>\n<li>建立团队章程</li>\n<li>持续成功</li>\n<li>和谐沟通</li>\n<li>避免团队杀手</li>\n</ol>\n<h3 id=\"团队结构有几种\"><a class=\"anchor\" href=\"#团队结构有几种\">#</a> 团队结构有几种？</h3>\n<ol>\n<li>主程序员</li>\n<li>民主团队</li>\n<li>开放团队</li>\n</ol>\n<h2 id=\"质量保障配置管理\"><a class=\"anchor\" href=\"#质量保障配置管理\">#</a> 质量保障 / 配置管理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144808777.png\" alt=\"image-20230617144808777\" /></p>\n<h3 id=\"质量保障有哪些措施\"><a class=\"anchor\" href=\"#质量保障有哪些措施\">#</a> 质量保障有哪些措施？</h3>\n<ol>\n<li>需求开发 —— 需求评审和需求度量</li>\n<li>体系结构 —— 体系结构评审和集成测试 (持续集成)；</li>\n<li>详细设计 —— 详细设计评审、设计度量和集成测试 (持续集成)</li>\n<li>构造阶段 —— 代码评审、代码度量、测试（测试驱动和持续集成）</li>\n<li>测试阶段 —— 测试、测试度量</li>\n</ol>\n<p>＊要及时的根据保障计划进行质量验证，质量验证的方法主要有<strong>评审、度量、测试</strong>三种。</p>\n<h3 id=\"配置管理有哪些活动\"><a class=\"anchor\" href=\"#配置管理有哪些活动\">#</a> 配置管理有哪些活动？</h3>\n<ol>\n<li>标识配置项：确定应该被保留的部分，并且给予他们确定标识，包含配置项的特征，包括生产者、基线建立时间、使用者等。</li>\n<li>版本管理：为配置项赋予版本号，管理分支和多版本情况。</li>\n<li>变更控制：以可控、一致的方式进行变更处理，包括对变更的评估、协调、批准或拒绝、实现和验证。</li>\n<li>配置审计：验证配置项的完整性、正确性、一致性和可追踪性。</li>\n<li>状态报告：反映当前的配置状态。</li>\n<li>软件发布管理：将配置项发布到开发活动之外，例如发布给客户。</li>\n</ol>\n<h2 id=\"需求层次需求类型1\"><a class=\"anchor\" href=\"#需求层次需求类型1\">#</a> 需求层次 / 需求类型，1</h2>\n<h3 id=\"如何书写用例\"><a class=\"anchor\" href=\"#如何书写用例\">#</a> 如何书写用例</h3>\n<p><strong>用例正常流程：在常见和符合预期的条件下，系统与外界的行为交互序列</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617182637596.png\" alt=\"image-20230617182637596\" /></p>\n<p>名称：</p>\n<p>参与者：</p>\n<p>触发条件：（可以为空）</p>\n<p>前置条件：（可以为空）</p>\n<p><strong>正常流程：</strong></p>\n<ul>\n<li>用户行为 + 系统行为形成的行为交互序列</li>\n<li>用户：选择、输入、结束……</li>\n<li>系统：提示、显示、记录、计算、更新……</li>\n</ul>\n<p>后置条件：（可以为空）</p>\n<h3 id=\"区分需求的三个层次\"><a class=\"anchor\" href=\"#区分需求的三个层次\">#</a> 区分需求的三个层次</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617163010545.png\" alt=\"image-20230617163010545\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617163331987.png\" alt=\"image-20230617163331987\" /></p>\n<ol>\n<li><strong>业务需求</strong>（Business Requirement）\n<ol>\n<li>业务需求是高层次的<strong>解决方案和系统特性</strong>、系统开发的战略出发点、<strong>高层次的需求</strong>，描述为什么要开发系统。</li>\n<li>Eg. 在系统使用 3 个月后，销售额度应该提高 20%（期望，没有从软件角度进行描述，业务需求）</li>\n</ol>\n</li>\n<li><strong>用户需求</strong>（User Requirement）\n<ol>\n<li>执行具体任务的<strong>用户对系统所能完成任务的期望</strong>，描述了系统能帮用户做什么（直接用户、间接用户）</li>\n<li>Eg. 在系统要帮助收银员完成销售处理</li>\n</ol>\n</li>\n<li><strong>系统级需求</strong>（System Requirement）\n<ol>\n<li>需求分析模型：用户对<strong>系统行为的期望</strong>，每个系统级需求反映了<strong>一次外界与系统的交互行为</strong>，或者<strong>系统的一个实现细节</strong>（和用户需求有着很大的区别）</li>\n<li>Eg. 在接到客户经理的请求后，系统应该为客户经理提供所有会员的个人信息。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"判断需求的类型\"><a class=\"anchor\" href=\"#判断需求的类型\">#</a> 判断需求的类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617163016932.png\" alt=\"image-20230617163016932\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617163833524.png\" alt=\"image-20230617163833524\" /></p>\n<p><strong>功能需求</strong>：和系统主要共作相关的需求，即在不考虑物理约束的情况下，用户希望系统所能够执行的活动，这些活动可以帮助用户完成任务。<strong>功能需求主要表现为系统和环境之间的行为交互</strong>。</p>\n<ol>\n<li>Eg. 在接到客户经理的请求后，系统应该为客户经理提供所有会员的个人信息。</li>\n</ol>\n<p><strong>数据需求</strong>（属于功能需求的一种，DR）：<strong>功能需求</strong>的补充：如果在功能需求部分明确定义了<strong>相关的数据结构</strong>，那么就不需要再行定义数据需求。数据需求是需要在数据库、文件或者其他介质中存储的数据描述，通常包括下列内容：</p>\n<ul>\n<li>各个功能使用的<strong>数据信息</strong>；</li>\n<li>使用频率；</li>\n<li>可访问性要求；</li>\n<li><strong>数据实体及其关系</strong>；</li>\n<li>完整性约束；</li>\n<li><strong>数据保持</strong>要求。</li>\n<li>Eg. 系统需要存储的数据实体及其关系为图 6-14 的内容。（数据实体及其关系）</li>\n<li>Eg. 系统需要存储 1 年内的销售记录和退货记录。（数据保持）</li>\n</ul>\n<p><strong>性能需求</strong>：系统整体或系统组成部分应该拥有的性能特征，例如 CPU 使用率、内存使用率等。</p>\n<ol>\n<li>速度：系统完成任务的时间（所有用户查询必须在 10s 内完成）</li>\n<li>容量：系统能存储的数据量（系统因该能够存储至少 100 万个销售信息）</li>\n<li>吞吐量：系统在连续的时间内完成的事务数量（解释器每分钟应该能够至少解析 5000 条没有错误的语句）</li>\n<li>负载：系统可以承载的并发工作量（系统应该允许 50 个营业服务器同时从集中服务器上进行数据的上传或下载）</li>\n<li>实时性：严格的实时要求（系统监测到异常时，监视器必须在 0.5s 内发出警报，和故障警报不一样，故障不是系统的正常功能）</li>\n</ol>\n<p><strong>质量需求</strong>（QA）：系统为了满足<strong>规定的及隐含</strong>的所有要求而需要具备的要素称为质量</p>\n<ol>\n<li>可靠性：在规格时间间隔内和规定条件下，系统或部件执行所要求能力的能力。（在进行数据的下载和上传中，如果网络故障，系统不能出现故障。能不能检测网络中断，并且进行恢复）</li>\n<li>可用性：软件系统在投入使用时可操作和可访问的程度或能实现其指定系统功能的概率。（系统的可用性要达到 98%）</li>\n<li>安全性：软件组织对其程序和数据进行未授权访问的能力，未授权的访问可能是有意，也可能是无意的。（VIP 顾客只能查看自己的个人信息和购买记录）</li>\n<li>可维护性：软件系统或部件能修改以排除故障、改进性能或其他属性或适应变更了的环境的容易程度，包括可修改性（Modifiability）和可扩展性（Extensibility）。（如果系统要增加新的特价类型，要能够在 2 个人月内完成）</li>\n<li>可移植性：系统或部件能从一种硬件或软件环境转换至另外一种环境的特性。（集中服务器要能够在 1 人月内从 Window 7 操作系统更换到 Solaris 10 操作系统。）</li>\n<li>易用性：与用户使用软件所花费的努力及其对使用的评价相关的特性。（使用系统 1 个月的收银员进行销售处理的效率要达到 10 件商品 / 分钟。）</li>\n<li>往往会有形容词和副词</li>\n</ol>\n<p><strong>对外接口</strong>：系统和环境中其他系统之间需要建立的接口，包括硬件接口、软件接口、数据库接口等等。</p>\n<ol>\n<li>接口的用途</li>\n<li>接口的输入输出</li>\n<li>数据格式</li>\n<li>命令格式</li>\n<li>异常处理要求</li>\n<li>Eg. 注册使用 Google Maps API</li>\n</ol>\n<p><strong>约束</strong>：进行系统构造时需要遵守的约束，例如<strong>编程语言、硬件设施</strong>等</p>\n<ol>\n<li>系统开发及运行的环境（包括目标机器、操作系统、网络环境、编程语言、数据库管理系统等，Eg. 系统使用 Java 语言进行开发）</li>\n<li>问题域内的相关标准（包括法律法规、行业协定、企业规章等。）</li>\n<li>商业规则：（用户在任务执行中的一些潜在规则也会限制开发人员设计和构建系统的选择范围）</li>\n<li>Eg. 已过保质期的食品不能销售</li>\n<li>Eg. 顾客可以使用美元付款</li>\n</ol>\n<h3 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h3>\n<h4 id=\"写用例t1\"><a class=\"anchor\" href=\"#写用例t1\">#</a> 写用例 T1</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617163659223.png\" alt=\"image-20230617163659223\" /></p>\n<p>（1）</p>\n<p>以 ATM 存款功能为例</p>\n<ul>\n<li>业务需求：提供存款功能</li>\n<li>用户需求：系统允许用户存入现金并记录在对应银行卡中</li>\n<li>系统级需求：在用户放入现金后，系统应该能够清点现金数额，并在清点完毕后，显示数额，请用户核对</li>\n</ul>\n<p>（2）</p>\n<p>性能需求：</p>\n<ul>\n<li>速度：系统应该在 3s 内完成单个操作，查询操作响应速度不得超过 1s</li>\n<li>负载：系统应该允许地区内所有 ATM 及同时从服务器上进行运作</li>\n<li>实时性：系统应该在 0.5 秒内同步数据</li>\n</ul>\n<p>质量属性：</p>\n<ul>\n<li>安全性：系统应该保护用户的存取款信息不被非法用户获取；</li>\n<li>易用性：系统应该保证操作界面容易上手</li>\n</ul>\n<p>对外接口：</p>\n<ul>\n<li>系统与数据库接口：如果发生异常，要抛出异常并回滚</li>\n</ul>\n<p>约束：用 java 开发</p>\n<p>数据需求：系统需要存储用户 3 年以内的详细存取款记录信息</p>\n<h4 id=\"写用例t2\"><a class=\"anchor\" href=\"#写用例t2\">#</a> 写用例 T2</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617172608167.png\" alt=\"image-20230617172608167\" /></p>\n<p>功能需求，与系统主要功能相关</p>\n<p>数据需求，规定了数据描述和数据的输入格式</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617181931604.png\" alt=\"image-20230617181931604\" /></p>\n<p>该功能涉及 2 个用例</p>\n<ol>\n<li>用例 1：手工创建询价单\n<ul>\n<li>参与者：采购人员</li>\n<li>主要流程：\n<ol>\n<li>采购人员登入系统，输入供应商、产品等信息</li>\n<li>系统记录供应商、产品、库存等信息</li>\n<li>采购人员结束创建过程</li>\n<li>系统生成并展示采购询价单</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>用例 2：自动生成询价单\n<ul>\n<li>参与者：库管员</li>\n<li>前置条件：仓库经理已设置产品的再订货规则</li>\n<li>主要流程：\n<ol>\n<li>库管员登录系统</li>\n<li>系统确认权限</li>\n<li>库管员点击运行排程</li>\n<li>系统按照再订货规则和销售订单及库存情况自动生成采购询价单，并显示</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"判断需求类型\"><a class=\"anchor\" href=\"#判断需求类型\">#</a> 判断需求类型</h4>\n<table>\n<thead>\n<tr>\n<th>需求描述</th>\n<th>需求类别</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>系统<strong>需要</strong>存储一年内的销售记录</td>\n<td>数据需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>系统<strong>应该能够</strong>存储 3 年的交易数据</td>\n<td>性能需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>系统使用之前，需要对收银员进行 10 天的专门培训</td>\n<td>其他需求（包括硬件需求、人力需求。）</td>\n<td>在交付之前</td>\n</tr>\n<tr>\n<td>经过 10 天培训的收银员就能够熟练使用系统</td>\n<td>质量需求（易用性）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>反映了用户与系统的<strong>交互细节</strong></td>\n<td>系统需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>反映了用户与系统的<strong>交互</strong></td>\n<td>用户需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>在存储设备发生故障时，系统要在 10 秒内发现</td>\n<td>质量需求（可靠性需求）</td>\n<td>故障是非正常状态，还一种系统需求。</td>\n</tr>\n<tr>\n<td>在存储设备发生故障时，系统要在 0.5 秒内向用户发出<strong>警报</strong></td>\n<td>功能需求</td>\n<td>故障不是系统的正常状态</td>\n</tr>\n<tr>\n<td>检测到病人异常后，监控器必须在 0.5 秒内发出警报</td>\n<td>性能需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>该软件管理工具的开发过程<strong>自身</strong>必须符合 CMMI-4 的评估</td>\n<td>过程需求</td>\n<td>是软件自身</td>\n</tr>\n<tr>\n<td>该软件管理工具软件必须<strong>帮助</strong>项目管理者进行开发管理工作，以通过 CMMI-4 的评估</td>\n<td>用户需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>系统能够为用户提供库存分析报告、商品 / 利润报告和过期商品报告</td>\n<td>用户需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>产品在发布 1 年之后内，必须在出版的 A、B、C 三个产品评论刊物中被评为最可靠产品。</td>\n<td>业务需求</td>\n<td>相当与一个目的</td>\n</tr>\n<tr>\n<td>系统必须能够与 Oracle 数据库交互。</td>\n<td>约束</td>\n<td>Oracle 是系统的一个环境，环境本身在约束部分，比如 Tomcat 等等</td>\n</tr>\n<tr>\n<td>开发团队需要给出 SRS 文档。</td>\n<td>过程需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>使用扫描仪扫描文件，传递回的数据为 pdf 格式文件。</td>\n<td>对外接口</td>\n<td>软件和扫描仪之间的交互</td>\n</tr>\n<tr>\n<td>商品的标识由 0-24 位字母、数字混合组成的字符串。</td>\n<td>数据需求</td>\n<td>-</td>\n</tr>\n<tr>\n<td>商品标识的类型要能够在 0.5 个人月内更改为长整型。</td>\n<td>质量需求</td>\n<td>可移植性</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"需求题1\"><a class=\"anchor\" href=\"#需求题1\">#</a> 需求题，1</h2>\n<h3 id=\"知识点\"><a class=\"anchor\" href=\"#知识点\">#</a> 知识点</h3>\n<h4 id=\"用例图\"><a class=\"anchor\" href=\"#用例图\">#</a> 用例图</h4>\n<p>用例、参与者、关系、系统边界</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcxODQzMTU2NjgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617184315668.png</span>&quot; alt=&quot;image-20230617184315668&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<h4 id=\"分析类图概念类图\"><a class=\"anchor\" href=\"#分析类图概念类图\">#</a> 分析类图（概念类图）</h4>\n<ol>\n<li>\n<p>根据用例的文本描述，识别候选类</p>\n<ul>\n<li>名词分析、行为分析</li>\n</ul>\n</li>\n<li>\n<p>筛选候选类，确定概念类</p>\n<ul>\n<li>根据系统需求</li>\n<li>是否有状态 + 行为\n<ul>\n<li>只有行为：</li>\n<li>只有状态：其他概念类的属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>识别关联</p>\n<ul>\n<li>\n<p>继承</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcxOTAxMjI5OTUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617190122995.png</span>&quot; alt=&quot;image-20230617190122995&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n</li>\n<li>\n<p>依赖</p>\n<p>人靠船渡河</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjAyMDAyMjQxMDU0MzgzMjUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20200224105438325.png</span>&quot; alt=&quot;20200224105438325&quot;  /&gt;</p>\n</li>\n<li>\n<p>关联</p>\n</li>\n<li>\n<p>聚合 - has a</p>\n</li>\n<li>\n<p>组合 - contains a</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617190052208.png\" alt=\"image-20230617190052208\" /></p>\n</li>\n<li>\n<p>实现</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20200224104937159.png\" alt=\"20200224104937159\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcxOTA0NDI1NDYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617190442546.png</span>&quot; alt=&quot;image-20230617190442546&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n</li>\n</ul>\n</li>\n<li>\n<p>识别重要属性</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/593F8D4DBCC2106DA87098122BA9DFD1.png\" alt=\"593F8D4DBCC2106DA87098122BA9DFD1\" /></p>\n<h4 id=\"系统顺序图\"><a class=\"anchor\" href=\"#系统顺序图\">#</a> 系统顺序图</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616110005374.png\" alt=\"image-20230616110005374\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMDI4MDc2MjgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617202807628.png</span>&quot; alt=&quot;image-20230617202807628&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<h4 id=\"状态图\"><a class=\"anchor\" href=\"#状态图\">#</a> 状态图</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617202834984.png\" alt=\"image-20230617202834984\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617203052895.png\" alt=\"image-20230617203052895\" /></p>\n<h3 id=\"题型\"><a class=\"anchor\" href=\"#题型\">#</a> 题型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144921876.png\" alt=\"image-20230617144921876\" /></p>\n<h4 id=\"为什么需要需求规格文档结合实验说明\"><a class=\"anchor\" href=\"#为什么需要需求规格文档结合实验说明\">#</a> 为什么需要需求规格文档？结合实验说明</h4>\n<ol>\n<li><strong>方便交流</strong>：软件开发过程中，<strong>子任务与人员</strong>之间存在错综复杂的关系，存在大量的沟通和交流，所以要编写软件开发中要编写不同类型的文档，每种文档都是针对项目中需要广泛交流的内容。因为<strong>软件需求</strong>需要进行<strong>广泛交流</strong>，所以要把需求文档化。</li>\n<li><strong>跟踪和度量</strong>：需求规格说明是在<strong>软件产品的角度以系统级需求列表的方式</strong>描述软件系统解决方案，书写需求规格说明，可以建立管理控制的基线，方便任务分配，制定工作计划，进行跟踪和度量。</li>\n<li><strong>过程管理</strong>：在实验中，需求规格的重要性不只体现在结果上，还包括中间过程，在书写需求规格过程中，才真正把问题域的问题和分析模型的成果转化为系统级需求，方便小组成员真正明确需求，个人认为在这个阶段包含一部分的需求在发现和完整化。</li>\n</ol>\n<h4 id=\"需求示例修改\"><a class=\"anchor\" href=\"#需求示例修改\">#</a> 需求示例修改</h4>\n<h5 id=\"用例选择错误\"><a class=\"anchor\" href=\"#用例选择错误\">#</a> 用例选择错误</h5>\n<ol>\n<li>用例粒度\n<ol>\n<li>不要将用例细化为单个操作，如将用户管理细化为增加、修改和删除，需要联合才能体现业务价值</li>\n<li>不要将同一个业务目标细化为不同用例，比如特价策略制定和赠送策略制定，合并为销售策略制定</li>\n<li>将明显不同的业务事件分开，如会员管理用例应该细化为发展会员和礼品赠送</li>\n</ol>\n</li>\n<li>用例价值\n<ol>\n<li>登录、数据验证、连接数据库没有价值，不作为用例</li>\n</ol>\n</li>\n<li>是否和系统产生交互\n<ol>\n<li>顾客不是参与者，不与系统产生交互</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"技术文档撰写错误\"><a class=\"anchor\" href=\"#技术文档撰写错误\">#</a> 技术文档撰写错误</h5>\n<ol>\n<li>技术文档写作要点（简洁，精确，易读，易修改）\n<ol>\n<li>简洁：动词名词 + 辅助词，不要使用复杂长句、形容词和副词。</li>\n<li>精确：避免歧义。</li>\n<li>易读（查询）：有效使用引言、目录、索引等能够增强文档易读性的方法，使用系统化的方式组织内容信息，提供文档内容的可读性。</li>\n<li>易修改：使用相同的语句格式组织相关联或相似的信息；使用列表组织独立、并列的信息；使用编号表达繁杂信息之间的关系。引用而不是重复</li>\n</ol>\n</li>\n<li>需求书写要点（使用用户术语，可验证，可行性）</li>\n<li>需求规格说明文档书写要点（充分利用标准的文档模板，保持所以内容位置得当；保持文档内的需求集具有完备性和一致性；为需求划分优先级）</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgyMzA4MzIwMzMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618230832033.png</span>&quot; alt=&quot;image-20230618230832033&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<h4 id=\"设计功能测试用例\"><a class=\"anchor\" href=\"#设计功能测试用例\">#</a> 设计功能测试用例</h4>\n<p>以需求为线索，开发测试用例套件，确定输入 / 输出，开发测试用例。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgyMzEwMzk5NTQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618231039954.png</span>&quot; alt=&quot;image-20230618231039954&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<h3 id=\"例题-2\"><a class=\"anchor\" href=\"#例题-2\">#</a> 例题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144900733.png\" alt=\"image-20230617144900733\" /></p>\n<p>画用例图</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144909928.png\" alt=\"image-20230617144909928\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMTM3MTU4MjUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619213715825.png</span>&quot; alt=&quot;image-20230619213715825&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617194537437.png\" alt=\"image-20230617194537437\" /></p>\n<h2 id=\"软件设计1\"><a class=\"anchor\" href=\"#软件设计1\">#</a> 软件设计，1</h2>\n<h3 id=\"软件设计的核心思想\"><a class=\"anchor\" href=\"#软件设计的核心思想\">#</a> 软件设计的核心思想</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxODA5MTY4MzEucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619180916831.png</span>&quot; alt=&quot;image-20230619180916831&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p><strong>抽象</strong>：横向上将系统分解为几个相对简单的子系统以及各子系统之间的关系</p>\n<p><strong>分解</strong>：纵向上聚焦各子系统的接口（区别于实现，各子系统之间交互的契约），可以分离接口和实现，使得人们更好地关注软件系统本质，降低复杂度</p>\n<h3 id=\"软件工程有哪三个层次各层的主要思想是什么\"><a class=\"anchor\" href=\"#软件工程有哪三个层次各层的主要思想是什么\">#</a> 软件工程有哪三个层次？各层的主要思想是什么？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619180923023.png\" alt=\"image-20230619180923023\" /></p>\n<p><strong>高层设计</strong>：基于反映软件高层抽象的构建层次，描述系统的高层结构、关注点和设计决策</p>\n<p><strong>中层设计</strong>：更加关注组成构件的模块的划分、导入 / 导出、过程之间的调用关系或者类之间的协作</p>\n<p><strong>低层设计</strong>：深入模块和类的内部，关注具体的数据结构、算法、类型、语句和控制结构等体系结构</p>\n<h3 id=\"体系结构风格的优缺点\"><a class=\"anchor\" href=\"#体系结构风格的优缺点\">#</a> 体系结构风格的优缺点</h3>\n<h4 id=\"主程序子程序\"><a class=\"anchor\" href=\"#主程序子程序\">#</a> 主程序子程序</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxODA5NDQ1NzAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619180944570.png</span>&quot; alt=&quot;image-20230619180944570&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>优点：</p>\n<ol>\n<li>流程清晰，易于理解</li>\n<li>强控制性</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>程序调用是一种<strong>强耦合的连接方式</strong>，非常依赖交互方的接口规格，这会使得系统难以修改和复用</li>\n<li>程序调用的连接方式<strong>限制了各部件之间的数据交互</strong>，可能会使得不同部件使用隐含的共享数据交流，产生不必要的公共耦合，进而破坏它的 “正确性” 控制能力</li>\n</ol>\n<p>应用：</p>\n<ol>\n<li>系统功能依层次分解为多个顺序执行步骤的系统</li>\n<li>结构化分析（自顶向下或自底向上）建立的软件系统</li>\n</ol>\n<h4 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxODA5NTU4MTAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619180955810.png</span>&quot; alt=&quot;image-20230619180955810&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>优点：</p>\n<ol>\n<li>内部实现的可修改性</li>\n<li>易开发、易理解、易复用的结构组织</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>接口的耦合性</li>\n<li>标识的耦合性</li>\n<li>副作用 P155\n<ol>\n<li>对象的重入问题</li>\n<li>A\\B 均使用 C，B 对 C 的修改可能产生对 A 未预期的影响</li>\n</ol>\n</li>\n</ol>\n<p>应用：</p>\n<ol>\n<li>基于数据分解和组织的软件系统</li>\n<li>基于抽象类型建立起来的软件系统</li>\n</ol>\n<h4 id=\"分层\"><a class=\"anchor\" href=\"#分层\">#</a> 分层</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxODEwMjQwMTUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619181024015.png</span>&quot; alt=&quot;image-20230619181024015&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>优点：</p>\n<ol>\n<li>设计机制清晰，易于理解（网络通信协议的分层）</li>\n<li>支持并行开发</li>\n<li>更好的可复用性与内部可修改性</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>交互协议难以修改</li>\n<li>性能损失</li>\n<li>难以确定层次数量和粒度</li>\n</ol>\n<p>应用：</p>\n<ol>\n<li>ISO 网络通信模型</li>\n<li>TCP/IP 网络通信模型</li>\n</ol>\n<h4 id=\"mvc\"><a class=\"anchor\" href=\"#mvc\">#</a> MVC</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxODEwMzE3MTYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619181031716.png</span>&quot; alt=&quot;image-20230619181031716&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>模型、视图、控制分别是业务逻辑、表现、控制的三种不同内容抽象<br />\n优点：</p>\n<p>1）易开发性</p>\n<p>2）视图和控制的可修改性</p>\n<p>3）适宜于网络系统开发的特征</p>\n<p>缺点：</p>\n<p>1）复杂性</p>\n<p>2）模型修改困难</p>\n<h3 id=\"包的原则\"><a class=\"anchor\" href=\"#包的原则\">#</a> 包的原则</h3>\n<p><strong>内聚</strong></p>\n<ol>\n<li>\n<p>重用发布等价原则 (REP)：</p>\n<p>重用的粒度就是发布的粒度</p>\n<p>相关联的包一起发布，几个协作类组成一个包</p>\n</li>\n<li>\n<p>共同封闭原则 (CCP)</p>\n<ol>\n<li>包中所有类对于同一类性质的变化应该是共同封闭的，一个变化若对一个包产生影响，则对该包中的所有类产生影响，而对于其他包不造成任何影响。</li>\n<li>包尽可能大，和 CRP 互斥</li>\n</ol>\n</li>\n<li>\n<p>共同重用原理 (CRP)</p>\n<ol>\n<li>一个包中的所有类应该是能够共同重用（用到）的</li>\n</ol>\n</li>\n</ol>\n<p><strong>耦合</strong></p>\n<ol>\n<li>\n<p>无环依赖原则 (ADP): 在包的依赖关系图中不能存在环。必须是有向无环图。</p>\n<p>修改方式：</p>\n<ol>\n<li>DIP，依赖接口，实现接口</li>\n<li>分离包</li>\n</ol>\n</li>\n<li>\n<p>稳定依赖原则 (SDP): 朝着稳定 (别人的修改不影响我) 的方向进行依赖</p>\n<ol>\n<li>尽可能减少对别人的依赖</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDAzNDcyNTMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619000347253.png</span>&quot; alt=&quot;image-20230619000347253&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n</li>\n<li>\n<p>稳定抽象原则 (SAP): 包的抽象程度应该和其稳定程度一致</p>\n<p>（再根据图理解）</p>\n</li>\n</ol>\n<h3 id=\"体系结构开发集成测试用例\"><a class=\"anchor\" href=\"#体系结构开发集成测试用例\">#</a> 体系结构开发集成测试用例</h3>\n<ol>\n<li>大爆炸式集成</li>\n<li>增量式\n<ol>\n<li>自顶向下集成</li>\n<li>自底向上集成</li>\n<li>三明治式</li>\n<li>持续集成\n<ol>\n<li>尽早集成</li>\n<li>频繁集成</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>持续集成需要用到版本控制工具和持续集成工具</li>\n</ul>\n<p><strong>桩模仿的是下层模块，用来测试上层；</strong></p>\n<p><strong>而驱动则模仿的是上层模块，用来测试下层。</strong></p>\n<p>所以，驱动需要利用下层提供的接口，来实现其模仿的模块的功能</p>\n<h3 id=\"包图\"><a class=\"anchor\" href=\"#包图\">#</a> 包图</h3>\n<p>分层风格，分为 presentation, logic, data 三层</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTA5MDQ1NDMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617210904543.png</span>&quot; alt=&quot;image-20230617210904543&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h4 id=\"逻辑设计\"><a class=\"anchor\" href=\"#逻辑设计\">#</a> 逻辑设计</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTA2NDQ0NDAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617210644440.png</span>&quot; alt=&quot;image-20230617210644440&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>增加登录 logicController</p>\n<p>增加 RMI，分离服务端和客户端</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTA5NTEzMzcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617210951337.png</span>&quot; alt=&quot;image-20230617210951337&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h4 id=\"物理设计\"><a class=\"anchor\" href=\"#物理设计\">#</a> 物理设计</h4>\n<ul>\n<li>presentation\n<ul>\n<li>建立界面\n<ul>\n<li>界面类库包</li>\n</ul>\n</li>\n<li>跳转逻辑\n<ul>\n<li><code>mainui</code>  包</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>logic\n<ul>\n<li>不希望高层直接依赖低层\n<ul>\n<li>增加 <code>businesslogicservice</code>  包：ui 和 logic 都会依赖，前者调用，后者实现</li>\n</ul>\n</li>\n<li>一些初始化与业务逻辑层上下文工作\n<ul>\n<li>增加 <code>utilitybl</code>  包，其他 bl 包均会依赖</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>data\n<ul>\n<li>持久化，会导致重复代码\n<ul>\n<li>增加 <code>databaseutility</code>  包，依赖 <code>JDBC</code>  类库包或 <code>IO</code>  类库包</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>层间\n<ul>\n<li>logic 与 data\n<ul>\n<li>数据问题：将 data 分为<strong>客户端</strong>的 <code>daraservice</code>  与<strong>服务器端</strong>的 <code>data</code> ，都依赖于 <code>RMI</code>  类库包</li>\n<li>传递问题： <code>PO</code>  包， persistent object</li>\n</ul>\n</li>\n<li>presentation 与 logic\n<ul>\n<li>传递问题： <code>VO</code>  包， value object</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无环依赖原则\n<ul>\n<li>消除互环\n<ul>\n<li>实现接口和调用：将 commodity 和 member 的抽象接口放入 sales</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617211817834.png\" alt=\"image-20230617211817834\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617211833346.png\" alt=\"image-20230617211833346\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212617519.png\" alt=\"image-20230617212617519\" /></p>\n<h3 id=\"进程图\"><a class=\"anchor\" href=\"#进程图\">#</a> 进程图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212557635.png\" alt=\"image-20230617212557635\" /></p>\n<h3 id=\"关键类图\"><a class=\"anchor\" href=\"#关键类图\">#</a> 关键类图</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTI1Mzg4ODUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212538885.png</span>&quot; alt=&quot;image-20230617212538885&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<h3 id=\"持久化po\"><a class=\"anchor\" href=\"#持久化po\">#</a> 持久化 PO</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTI2Mzk4MzQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212639834.png</span>&quot; alt=&quot;image-20230617212639834&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTI2Mjk0OTYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212629496.png</span>&quot; alt=&quot;image-20230617212629496&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDI1NTE4MTkucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619002551819.png</span>&quot; alt=&quot;image-20230619002551819&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDI2MTY0NzIucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619002616472.png</span>&quot; alt=&quot;image-20230619002616472&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMTI4MTU1MjMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617212815523.png</span>&quot; alt=&quot;image-20230617212815523&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDE5NDgyMzQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619001948234.png</span>&quot; alt=&quot;image-20230619001948234&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDIwMTk3MTMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619002019713.png</span>&quot; alt=&quot;image-20230619002019713&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h3 id=\"题型-2\"><a class=\"anchor\" href=\"#题型-2\">#</a> 题型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618235532418.png\" alt=\"image-20230618235532418\" /></p>\n<h3 id=\"例题-3\"><a class=\"anchor\" href=\"#例题-3\">#</a> 例题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617145000599.png\" alt=\"image-20230617145000599\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvQjY1NjAyMzNFMEVDMjg0MDEwRDE1RkJFMDk1OEU2NTkucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/B6560233E0EC284010D15FBE0958E659.png</span>&quot; alt=&quot;B6560233E0EC284010D15FBE0958E659&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjI4RkNFNDUxNjE4QkU0OUFBMjRCQTY0RDE3NjNDMjcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/228FCE451618BE49AA24BA64D1763C27.png</span>&quot; alt=&quot;228FCE451618BE49AA24BA64D1763C27&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvN0VBRDRBQjhFMjk2MDg2Njk0NDNBNTMyNURGQ0E5QjQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/7EAD4AB8E29608669443A5325DFCA9B4.png</span>&quot; alt=&quot;7EAD4AB8E29608669443A5325DFCA9B4&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>展示层和逻辑层的数据交互用 VO，函数名诸如 <code>addXXXX</code>   <code>getXXXXbyId</code></p>\n<p>逻辑层和数据层的交互用 PO，函数名诸如 <code>get</code> 、 <code>insert</code> 、 <code>find</code></p>\n<p>（都是我猜的）</p>\n<h2 id=\"人机交互界面设计1\"><a class=\"anchor\" href=\"#人机交互界面设计1\">#</a> 人机交互（界面设计），1</h2>\n<h3 id=\"知识点-2\"><a class=\"anchor\" href=\"#知识点-2\">#</a> 知识点</h3>\n<ol>\n<li>\n<p><strong>简洁设计</strong>：</p>\n<ol>\n<li>7+-2 原则</li>\n<li>不在一个窗口展示过多信息，功能清晰明确</li>\n<li>摘要图片优于文字描述</li>\n<li>不要大菜单，不要过多的信息类别，不要太多的颜色和字体</li>\n</ol>\n</li>\n<li>\n<p><strong>一致性设计</strong>：</p>\n<ol>\n<li>依据<strong>精神模型</strong>，让系统中相似的任务有一致的交互机制（按钮位置等等）</li>\n</ol>\n</li>\n<li>\n<p><strong>低出错率设计</strong>：</p>\n<ol>\n<li>\n<p>避免犯错</p>\n<p>数值域不可输入字符</p>\n</li>\n<li>\n<p>友好建议：</p>\n<p>提供简洁的指导帮助⽤户消除错误，用户输入错误信息，系统会标注出来，而不是让用户重写整段代码</p>\n<p>语言清晰，表达准确，建设性帮助，友好，不应责备</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>易记性</strong></p>\n<ol>\n<li>减少用户的记忆负担</li>\n<li>使用逐层递进的范式展示信息</li>\n<li>使用直观的快捷方式</li>\n<li>设置有意义的默认值</li>\n</ol>\n</li>\n<li>\n<p><strong>所见即所得</strong></p>\n</li>\n<li>\n<p><strong>使用导航</strong></p>\n<ol>\n<li>\n<p>导航的目的就是为用户提供一个很好的完成<strong>任务的入口</strong>，好的导航会让这个入口非常符合人的精神模型</p>\n</li>\n<li>\n<p>全局导航控件包括窗口、菜单、列表、快捷方式、热键等等。</p>\n<p>局部导航通过安排布局细节，制造视觉上的线索来提供导航。</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>反馈</strong></p>\n<p>按钮点击等在视觉（声音）上给用户反馈，让用户意识到<strong>行为的结果</strong></p>\n<p>反馈的目的是提示用户交互行为的结果，但不能打断用户工作时的意识流。对用户思考和反应时间的把握。</p>\n</li>\n<li>\n<p><strong>协作式设计</strong></p>\n<p>人和计算机是人机交互的两方，其中人的因素是比较固定的，一定时期内不会发生大的变化，所以要让两者交互顺畅，就需要让计算机更多地适应人的因素，这也是人机交互设计以用户为中心的根本原因。这种<strong>调整计算机因素以更好地适应并帮助用户的设计方式</strong>被称作为协作式设计。</p>\n</li>\n<li>\n<p>** 精神模型：** 就是用户进行人机交互时头脑中的任务模型。人机交互设计需要依据精神模型进行隐喻设计，依据隐喻将控件功能与已知的熟悉事物联系起来，实现界面视觉提示和系统功能之间的知觉联系</p>\n</li>\n<li>\n<p><strong>差异性</strong>：对不同用户群体的任务模型是有差异的，所以对他们的人机交互设计也要有差异。按照用户群体自身的特点，可以将其划分为新手用户、专家用户和熟练用户</p>\n</li>\n</ol>\n<h3 id=\"题型-3\"><a class=\"anchor\" href=\"#题型-3\">#</a> 题型</h3>\n<ul>\n<li>\n<p>能够列出 5 个界面设计的注意事项，并加以解释</p>\n</li>\n<li>\n<p>例子违反了哪些条界面设计原则</p>\n</li>\n<li>\n<p>分析上图，它们分别体现（或违反）了哪些人机交互设计原则？请详细解释这些原则（10 分）</p>\n</li>\n</ul>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144952956.png\" alt=\"image-20230617144952956\" /></p>\n<p>对左图：</p>\n<ol>\n<li>违反了简洁设计，交互信息过多，摘要图片比描述文字更清晰</li>\n<li>违反了一致性原则，按钮位置不一致，如 cancel 和 ok 的位置，不符合精神模型（已存在相似系统）</li>\n<li>违反了低出错率原则，选择的进度条不明显</li>\n<li>违反了易记性原则，没有清晰的导航或直观的快捷方式，没有减少记忆负担，将所有 certificate 列出，用户不容易记住</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617155938257.png\" alt=\"image-20230617155938257\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617170644993.png\" alt=\"image-20230617170644993\" /></p>\n<ol>\n<li>符合简洁设计原则，模块结构清晰，没有提供过多的信息，符合 7+2 的原则，颜色简单</li>\n<li>符合一致性原则，符合用户的精神模型，与已有类似的界面相似</li>\n<li>符合易用性原则，递进式地展示菜单，使用直观的快捷方式，减轻用户的记忆负担</li>\n<li>所见即所得</li>\n</ol>\n<h2 id=\"详细设计\"><a class=\"anchor\" href=\"#详细设计\">#</a> 详细设计</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617170624416.png\" alt=\"image-20230617170624416\" /></p>\n<h3 id=\"知识点-3\"><a class=\"anchor\" href=\"#知识点-3\">#</a> 知识点</h3>\n<h4 id=\"详细设计的出发点\"><a class=\"anchor\" href=\"#详细设计的出发点\">#</a> 详细设计的出发点</h4>\n<p>软件详细设计是在软件体系结构设计之后进行，<strong>以需求开发的结果</strong> (需求规格说明和需求分析模型) 和<strong>软件体系结构的结果</strong> (软件体系结构设计方案与原型) 为出发点。</p>\n<h4 id=\"职责分配\"><a class=\"anchor\" href=\"#职责分配\">#</a> 职责分配</h4>\n<p>职责是执行任务（操作职责）或维护某些数据（数据职责）的义务。</p>\n<ol>\n<li>行为职责通常由方法来履行。</li>\n<li>数据职责通常由属性来完成。</li>\n<li>可能会涉及到类之间的协作。</li>\n</ol>\n<p>职责分类</p>\n<ol>\n<li>属性职责：对象的状态</li>\n<li>行为职责：对象的行为</li>\n</ol>\n<p>通过职责建立<strong>静态设计模型</strong></p>\n<p>职责分配可以从不同的抽象层次开始：职责是可以被分解的，职责分解是组件分解的基础<br />\n职责分配可以帮助实现高内聚，低耦合，确保不同模块职责没有重合，当且仅当数据和方法有利于模块职责时才添加。</p>\n<p>（关系）依赖 &lt; 关联 &lt; 聚合 &lt; 组合 &lt; 继承</p>\n<h4 id=\"grasp一般职责分配软件模式\"><a class=\"anchor\" href=\"#grasp一般职责分配软件模式\">#</a> GRASP 一般职责分配软件模式</h4>\n<ol>\n<li>特点：\n<ol>\n<li>低耦合：分配一个职责要保证低耦合度</li>\n<li>高聚合：分配一个职责的时候要保持类的高聚合度</li>\n<li>信息专家：将一个职责分配给专家 - 拥有履行职责所必须的信息的类</li>\n<li>创建者：创建规则在后面</li>\n<li>控制者：控制规则在后面（避免大多数信息由一个类发出、组件相对较小、行为职责和数据绑定、职责单一）</li>\n</ol>\n</li>\n<li>拇指原则：当有替代设计选择时，请仔细研究替代方案的内聚和耦合影响，以及未来可能对替代方案的演变压力。选择具有良好内聚性、耦合性和稳定性的替代方案。</li>\n<li>信息专家：统一提供对外的接口，而不是某一个具体的接口，数据和行为不要分开</li>\n<li>创建规则：如果有以下情况，则由创建者分配 B 类创建 A 类实例的职责：\n<ol>\n<li>B 聚合了 A 对象</li>\n<li>B 包含了 A 对象</li>\n<li>B 记录了 A 的实例</li>\n<li>B 要经常使用 A 对象</li>\n<li>当 A 的实例被创建，B 具有传递给 A 的初始化数据（也就是 B 是创建 A 的实例这项任务的信息专家）</li>\n<li>在有选择的地方，更喜欢 B 聚合或包含 A 对象</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"协作\"><a class=\"anchor\" href=\"#协作\">#</a> 协作</h4>\n<p>从小到大，将对象的小职责聚合成大职责</p>\n<p>从大到小，将大职责分配给每个小对象</p>\n<p>同时运用这两种方法，共同来完成对协作的抽象</p>\n<p>绘制顺序图</p>\n<p>表达软件的动态模型</p>\n<h4 id=\"控制风格\"><a class=\"anchor\" href=\"#控制风格\">#</a> 控制风格</h4>\n<ol>\n<li>集中式控制风格：做决策的只有一个对象</li>\n<li>委托式控制风格：做出决策的对象不只有一个，<strong>职责的分解决定了控制对象的层次</strong>。</li>\n<li>分散式控制风格：无明确的控制对象，每个对象只承担想对较小的职责，完全靠各个对象自治的方式来实现大的职责</li>\n</ol>\n<p>可查看书上类图</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619180139238.png\" alt=\"image-20230619180139238\" /></p>\n<h4 id=\"协作的测试\"><a class=\"anchor\" href=\"#协作的测试\">#</a> 协作的测试</h4>\n<ul>\n<li>Mock Object：类间协作的桩程序</li>\n<li>与体系结构集成的 stub 类型桩程序不同，Mock Object 要求自身的测试代码更简单，不用测试就能保证正确性</li>\n</ul>\n<h4 id=\"设计类图\"><a class=\"anchor\" href=\"#设计类图\">#</a> 设计类图</h4>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkwMDIzMDQ1NDYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619002304546.png</span>&quot; alt=&quot;image-20230619002304546&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<h4 id=\"详细顺序图\"><a class=\"anchor\" href=\"#详细顺序图\">#</a> 详细顺序图</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619185109209.png\" alt=\"image-20230619185109209\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/46232BBCC2798A511945CAF26C596D3C.jpg\" alt=\"46232BBCC2798A511945CAF26C596D3C\" /></p>\n<h3 id=\"例题-4\"><a class=\"anchor\" href=\"#例题-4\">#</a> 例题</h3>\n<h2 id=\"耦合内聚1\"><a class=\"anchor\" href=\"#耦合内聚1\">#</a> 耦合 / 内聚，1</h2>\n<h3 id=\"知识点-4\"><a class=\"anchor\" href=\"#知识点-4\">#</a> 知识点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144725911.png\" alt=\"image-20230617144725911\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617144738739.png\" alt=\"image-20230617144738739\" /></p>\n<p>判断是哪种耦合 / 内聚，可以接受吗？如何修改？</p>\n<p>耦合：内容、公共、重复不可接受，控制、印记可以接受，数据最理想</p>\n<p>内聚：偶然和逻辑不可接受，时间、过程、通信可以接受且不可避免，功能和信息最理想</p>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<h4 id=\"内聚\"><a class=\"anchor\" href=\"#内聚\">#</a> 内聚</h4>\n<p>偶然内聚：完全不相关</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcxNTA2MDQyNzgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617150604278.png</span>&quot; alt=&quot;image-20230617150604278&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>逻辑内聚：执行一系列操作，具体操作交给具体模块（如 swtich），解决控制耦合的方法</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zNi0xNjU0ODcyMDQ5MzY3Ny5wbmc=\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 36-16548720493677.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>时间内聚：执行一系列和时间有关的操作，比如构造方法和析构方法</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zNy0xNjU0ODcyMDQ5MzY3OC5wbmc=\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 37-16548720493678.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p>过程内聚：执行一系列与步骤顺序有关的操作</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zOC0xNjc2NTI5NDk0ODUwLTIyMTQucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 38-1676529494850-2214.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot; /&gt;</p>\n<p>通信内聚：执行一系列与步骤顺序有关的操作，并且这些操作是在相同的数据结构上。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zOS0xNjc2NTI5NDk0ODUwLTIyMTUucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 39-1676529494850-2215.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>功能内聚：模块只执行一个操作或达到一个单一目的</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80MC0xNjU0ODcyMDQ5MzY4OS5wbmc=\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 40-16548720493689.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>信息内聚：模块进行许多操作，各自有各自的入口，相互独立，且在相同的数据结构上完成操作。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80MS0xNjU0ODcyMDQ5MzY4MTAucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 41-165487204936810.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h4 id=\"耦合\"><a class=\"anchor\" href=\"#耦合\">#</a> 耦合</h4>\n<p>数据耦合：两个模块的所有参数是同类型的数据项（发送正好）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80NS0xNjc2NTI5NDk0ODUwLTIyMTYucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 45-1676529494850-2216.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>印记耦合：两个模块共享一个数据结构，但是只用了其中一个部分（发送多了）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8yOS0xNjU0ODcyMDQ5MzY5MTEucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 29-165487204936911.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zMC0xNjc2NTI5NDk0ODUxLTIyMTcucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 30-1676529494851-2217.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80NC0xNjc2NTI5NDk0ODUxLTIyMTgucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 44-1676529494851-2218.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>控制耦合：一个模块给另一个模块传递了控制信息（除了数据还有控制信号，并且违反了单一职责原则）</p>\n<ol>\n<li>主要是 case 中不应该出现具体实现的代码，应该抽象成方法</li>\n</ol>\n<p><img data-src=\"https://eaglebear2002.github.io/2022Spring-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-24-%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/31-165487204937012.png\" alt=\"img\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80My0xNjc2NTI5NDk0ODUxLTIyMTkucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 43-1676529494851-2219.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>重复耦合：一个模块有逻辑上相同的重复代码</p>\n<p><img data-src=\"https://eaglebear2002.github.io/2022Spring-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-24-%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/34-1676529494851-2220.png\" alt=\"img\" /></p>\n<p>公共耦合：模块之间共享全局数据结构</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi8zMi0xNjU0ODcyMDQ5MzcwMTMucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 32-165487204937013.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYWdsZWJlYXIyMDAyLmdpdGh1Yi5pby8yMDIyU3ByaW5nLSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLyVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCNyVBNSVFNyVBOCU4QiVFNCVCOCU4RSVFOCVBRSVBMSVFNyVBRSU5N0lJLTI0LSVFNSVBNCU4RCVFNCVCOSVBMCVFNiU4RiU5MCVFNyVCQSVCMi80Ni0xNjc2NTI5NDk0ODUxLTIyMjEucG5n\">https://eaglebear2002.github.io/2022Spring - 软件工程与计算 II / 软件工程与计算 II-24 - 复习提纲 / 46-1676529494851-2221.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>内容耦合：一个模块直接修改另一个模块的内容（成员变量、函数等）</p>\n<h3 id=\"p226-227习题\"><a class=\"anchor\" href=\"#p226-227习题\">#</a> p226-227 习题</h3>\n<ol start=\"6\">\n<li>\n<p>功能内聚</p>\n</li>\n<li>\n<p>印记耦合，（通信内聚？）</p>\n</li>\n<li>\n<p>通信内聚，数据耦合</p>\n</li>\n<li>\n<p>控制耦合</p>\n</li>\n<li>\n<p>时间内聚，拆成三个函数，在 init 当中调用</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617161725358.png\" alt=\"image-20230617161725358\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/fbeacb1eb626519ad68930d40346622.png\" alt=\"fbeacb1eb626519ad68930d40346622\" /></p>\n</li>\n</ol>\n<h2 id=\"信息隐藏\"><a class=\"anchor\" href=\"#信息隐藏\">#</a> 信息隐藏</h2>\n<h3 id=\"基本思想\"><a class=\"anchor\" href=\"#基本思想\">#</a> 基本思想</h3>\n<p>每个模块都隐藏了重要设计决策的实现，因此只有该模块的组成部分才知道详细信息：特别是如果存在所有可能的设计更改的列表，则隐藏假设列表</p>\n<h3 id=\"两种常见的信息隐藏决策\"><a class=\"anchor\" href=\"#两种常见的信息隐藏决策\">#</a> 两种常见的信息隐藏决策</h3>\n<ol>\n<li><strong>按职责分解</strong> - 根据需求分配的职责，因为实践表明，需求是经常变化的，频率和幅度都很大；</li>\n<li><strong>按算法分解</strong> - 内部实现机制，常见的变化主题包括硬件依赖，输入输出形式，非标准语言特征和库，负责的设计和实现，复杂的数据结构，复杂的逻辑，全局变量。数据大小限制等。</li>\n</ol>\n<h3 id=\"对例子说明其信息隐藏程度的好坏\"><a class=\"anchor\" href=\"#对例子说明其信息隐藏程度的好坏\">#</a> 对例子 ***，说明其信息隐藏程度的好坏</h3>\n<ol>\n<li>封装数据和行为</li>\n<li>封装内部结构</li>\n<li>封装对象的引用</li>\n<li>委托隐藏了与其他对象的协作</li>\n<li>封装类型信息</li>\n<li>封装可能存在的变更</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/RM@ESVVEG_%60$_6KDF7$B7QG.JPG\" alt=\"RM@ESVVEG_B7QG\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620002654223.png\" alt=\"image-20230620002654223\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620002711981.png\" alt=\"image-20230620002711981\" /></p>\n<h3 id=\"题型-4\"><a class=\"anchor\" href=\"#题型-4\">#</a> 题型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619005242633.png\" alt=\"image-20230619005242633\" /></p>\n<h3 id=\"例题-5\"><a class=\"anchor\" href=\"#例题-5\">#</a> 例题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/AgAABYrp6Svfn23qG8RFnZ9oI5VWkE5E.png\" alt=\"img\" /></p>\n<p>View 负责了展示，Logic 负责了统计求和。Data 负责各个数据的存储。</p>\n<h2 id=\"设计规则1例题\"><a class=\"anchor\" href=\"#设计规则1例题\">#</a> 设计规则，1，例题</h2>\n<h3 id=\"规则罗列及详解\"><a class=\"anchor\" href=\"#规则罗列及详解\">#</a> 规则罗列及详解</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617232303090.png\" alt=\"image-20230617232303090\" /></p>\n<h4 id=\"降低隐式耦合\"><a class=\"anchor\" href=\"#降低隐式耦合\">#</a> 降低隐式耦合</h4>\n<ol>\n<li><strong>全局变量是有害的</strong></li>\n<li><strong>简洁</strong></li>\n<li><strong>不要有代码重复</strong></li>\n</ol>\n<h4 id=\"降低访问耦合\"><a class=\"anchor\" href=\"#降低访问耦合\">#</a> 降低访问耦合</h4>\n<ol>\n<li>\n<p><strong>面对接口编程</strong></p>\n</li>\n<li>\n<p><strong>接口分离原则（ISP)/ 也叫接口最小化原则</strong></p>\n<ol>\n<li>\n<p>将大的接口拆解成几个小的接口。</p>\n</li>\n<li>\n<p>这样可以有效避免出现不必要的依赖。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMzI2MDYxOTMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619232606193.png</span>&quot; alt=&quot;image-20230619232606193&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMzI2MjQ4NzIucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619232624872.png</span>&quot; alt=&quot;image-20230619232624872&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>迪米特法则</strong></p>\n<p>​\t&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMzI2NDkyOTcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619232649297.png</span>&quot; alt=&quot;image-20230619232649297&quot; style=&quot;zoom: 25%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMzI4MTE3MTgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619232811718.png</span>&quot; alt=&quot;image-20230619232811718&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n</li>\n</ol>\n<h4 id=\"降低继承耦合\"><a class=\"anchor\" href=\"#降低继承耦合\">#</a> 降低继承耦合</h4>\n<ol>\n<li>\n<p><strong>LSP 里氏替换原则</strong></p>\n<p>子类型必须能够替换掉基类型而起同样的作用。</p>\n<p>保持父类的方法接口不变；保持父类方法的实现语义不变；（不能用 vector 实现 stack）</p>\n<p>只要调用一个接口，不论哪种子类或者父类本身，都可以完成相同语义的工作</p>\n<p>解决方案：在父类中添加方法或者函数，或者拆分接口</p>\n</li>\n<li>\n<p><strong>使用组合代替继承</strong></p>\n</li>\n</ol>\n<h4 id=\"提高内聚\"><a class=\"anchor\" href=\"#提高内聚\">#</a> 提高内聚</h4>\n<ol>\n<li><strong>集中信息和行为</strong></li>\n<li><strong>单一职责原则</strong></li>\n</ol>\n<p>&lt;img src=&quot;C:/Users/QUAS/AppData/Roaming/Typora/typora-user-images/image-20230620083444560.png&quot; alt=&quot;image-20230620083444560&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h4 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h4>\n<ol>\n<li>\n<p>封装 —— 分离接口与实现</p>\n<p>含义：</p>\n<ol>\n<li>将数据和行为同时包含在类中</li>\n<li>分离对外接口与内部实现</li>\n</ol>\n<p>实现细节：</p>\n<ol>\n<li>封装数据和行为（不要每个私有数据都有 getter 和 setter，也不要暴露存储数据和推导数据 calculateAge）</li>\n<li>封装内部结构（public Position getPosition 代替 public Position [] getPositions）</li>\n<li>封装其他对象的引用（新对象的引用返回）</li>\n<li>封装类型信息（隐藏子类，只知道共性类别）</li>\n<li>封装潜在变更</li>\n</ol>\n</li>\n<li>\n<p><strong>OCP 开闭原则</strong></p>\n<p>对扩展开放，对修改关闭，添加新的代码而不需要修改原来的代码就能实现变更</p>\n<p><strong>只要是发生了需求变更需要修改原有代码，则违反此原则</strong></p>\n</li>\n<li>\n<p><strong>DIP 依赖倒置</strong></p>\n<p>高级模块不应该依赖于低级模块，两者都应该依赖于抽象</p>\n<p><strong>为具体类建立抽象接口并分离该接口</strong>是中实现 DIP 的基本手段</p>\n</li>\n</ol>\n<h3 id=\"例题-6\"><a class=\"anchor\" href=\"#例题-6\">#</a> 例题</h3>\n<p>对给定的示例，发现其所违反的原则，并进行修正</p>\n<h4 id=\"里氏替换\"><a class=\"anchor\" href=\"#里氏替换\">#</a> 里氏替换</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616110140558.png\" alt=\"image-20230616110140558\" /></p>\n<p>里氏替换原则例题<br />\n（1）指出两个关于继承的设计是否合理？是否违反设计原则？<br />\n（2）对两段代码，如果合理，请解释其合理性，如果违反，请解释该原则，并修改</p>\n<p>第一个不合理，栈不能继承向量，向量很多方法栈用不到</p>\n<p>第二个合理，雇员继承人</p>\n<h2 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h2>\n<h3 id=\"如何实现可修改性-可扩展性-灵活性\"><a class=\"anchor\" href=\"#如何实现可修改性-可扩展性-灵活性\">#</a> 如何实现可修改性、可扩展性、灵活性</h3>\n<ol>\n<li>实现的<strong>可修改性</strong>：涉及到大的场景的修改\n<ol>\n<li>对已有实现的修改</li>\n<li>例如：修改现有促销策略</li>\n</ol>\n</li>\n<li>实现的<strong>可扩展性</strong>（DIP &amp; OCP）\n<ol>\n<li>对新的实现的扩展</li>\n<li>例如：增加一条新的促销策略（策略模式）</li>\n</ol>\n</li>\n<li>实现的<strong>灵活性</strong>\n<ol>\n<li>对实现的动态配置</li>\n<li>例如：动态修改更改某商品对应促销策略</li>\n</ol>\n</li>\n</ol>\n<p>将接口和实现分离的实现方法：</p>\n<ol>\n<li>通过接口和实现该接口的类完成接口与实现的分离</li>\n<li>通过子类继承父类，将父类的接口和子类的实现分离</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkyMTM4MzQ0OTcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619213834497.png</span>&quot; alt=&quot;image-20230619213834497&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<h3 id=\"模式体现的设计原则\"><a class=\"anchor\" href=\"#模式体现的设计原则\">#</a> 模式体现的设计原则</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616110233164.png\" alt=\"image-20230616110233164\" /></p>\n<p>策略模式：</p>\n<ul>\n<li><strong>减少耦合</strong> - 减少策略的使用类和策略的实现类的直接的耦合</li>\n<li><strong>依赖倒置</strong> - 策略的使用类依赖的是策略的接口，而非策略的实现类</li>\n</ul>\n<p>迭代器：</p>\n<ul>\n<li><strong>减少耦合</strong> - 减少遍历的使用类和遍历的实现类直接的耦合</li>\n<li><strong>依赖倒置</strong> - 遍历的使用类依赖的是策略的接口，而非遍历的实现类</li>\n</ul>\n<h3 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h3>\n<p>p266</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220043789.png\" alt=\"image-20230617220043789\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220107422.png\" alt=\"image-20230617220107422\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220423371.png\" alt=\"image-20230617220423371\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220512228.png\" alt=\"image-20230617220512228\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220533526.png\" alt=\"image-20230617220533526\" /></p>\n<h3 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjAwODEwMTUzNzAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620081015370.png</span>&quot; alt=&quot;image-20230620081015370&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h3 id=\"单件模式\"><a class=\"anchor\" href=\"#单件模式\">#</a> 单件模式</h3>\n<h3 id=\"迭代器模式\"><a class=\"anchor\" href=\"#迭代器模式\">#</a> 迭代器模式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220719437.png\" alt=\"image-20230617220719437\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617220949398.png\" alt=\"image-20230617220949398\" /></p>\n<h2 id=\"构造1\"><a class=\"anchor\" href=\"#构造1\">#</a> 构造，1</h2>\n<h3 id=\"构造包含的活动\"><a class=\"anchor\" href=\"#构造包含的活动\">#</a> 构造包含的活动</h3>\n<p>详细设计、编程、测试、调试、代码评审、集成与构建、构造管理</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxNzQ4MjY2MDgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619174826608.png</span>&quot; alt=&quot;image-20230619174826608&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<h3 id=\"契约式编程\"><a class=\"anchor\" href=\"#契约式编程\">#</a> 契约式编程</h3>\n<p>如果一个函数或方法，在前置条件满足的情况下开始执行，完成后能够满足后置条件。</p>\n<p>异常和断言</p>\n<h3 id=\"防御式编程\"><a class=\"anchor\" href=\"#防御式编程\">#</a> 防御式编程</h3>\n<p>当一个方法与其他方法、操作系统、硬件等外界环境发生交互时，不能保证外界环境都是正确的，外界发生错误时，保护方法内部不受损害。</p>\n<p>异常和断言</p>\n<p>常见问题有：</p>\n<ol>\n<li>输入参数</li>\n<li>其他对象初始化</li>\n<li>是否为 null</li>\n<li>网络连接是否正常</li>\n</ol>\n<h3 id=\"表驱动\"><a class=\"anchor\" href=\"#表驱动\">#</a> 表驱动</h3>\n<ul>\n<li>数据的保存一定要能够<strong>节省计算（核心思想）</strong>，用空间换取时间</li>\n<li>eg：包括所得税中的速算</li>\n<li>声明多个一维数组，存储系列同类型的边界条件</li>\n<li>然后通过 for 循环，统一用一个下标 i 访问所有数组的值</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMzQ3NTk1NjgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617234759568.png</span>&quot; alt=&quot;image-20230617234759568&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617234851170.png\" alt=\"image-20230617234851170\" /></p>\n<h3 id=\"代码问题\"><a class=\"anchor\" href=\"#代码问题\">#</a> 代码问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617235717836.png\" alt=\"image-20230617235717836\" /></p>\n<p><strong>易维护性</strong>：</p>\n<ol>\n<li>缩进表达逻辑结构</li>\n<li>将相关逻辑组织在一起</li>\n<li>用<strong>空行</strong>分割逻辑</li>\n<li>语句分行</li>\n<li><strong>命名</strong>要规范要有意义</li>\n<li>要有<strong>注释</strong></li>\n<li><strong>不要硬编码</strong></li>\n<li><strong>减少重复代码</strong></li>\n</ol>\n<p><strong>可靠的代码</strong>：</p>\n<ol start=\"7\">\n<li>\n<p>小型任务分解</p>\n</li>\n<li>\n<p><strong>复杂决策</strong>的转化</p>\n<p>- 使用新的布尔变量简化复杂决策</p>\n</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjAwMDExMjAyMDIucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620001120202.png</span>&quot; alt=&quot;image-20230620001120202&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>- 使用有意义的名词简化复杂决策 （抽象成判断的函数）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjAwMDExNDU4MTcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620001145817.png</span>&quot; alt=&quot;image-20230620001145817&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>- 表驱动</p>\n<ol start=\"9\">\n<li>\n<p>数据使用</p>\n<p>- 变量与命名相符、单变量单目的、限制全局变量、不要用突兀的数字</p>\n</li>\n<li>\n<p>明确依赖关系（可以写到注释里面 @see）</p>\n</li>\n</ol>\n<h3 id=\"例题-7\"><a class=\"anchor\" href=\"#例题-7\">#</a> 例题</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxNzQwNDUwODYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619174045086.png</span>&quot; alt=&quot;image-20230619174045086&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxNzQyMjQ5ODEucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619174224981.png</span>&quot; alt=&quot;image-20230619174224981&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTkxNzQyNTUyMDAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619174255200.png</span>&quot; alt=&quot;image-20230619174255200&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvQWdBQUJZcnA2U3V3R0RucWZXOURqS3B3ZDhoNnluM0oucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/AgAABYrp6SuwGDnqfW9DjKpwd8h6yn3J.png</span>&quot; alt=&quot;AgAABYrp6SuwGDnqfW9DjKpwd8h6yn3J&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>代码缺点：</p>\n<ol>\n<li>直接通过字符串来返回结果，硬编码不利于修改，复用。</li>\n<li>即使使用字符串是合理，也应该在 ifelse 中设置 output 的值。再统一调用 writer.print (output)。</li>\n</ol>\n<h2 id=\"测试1其他\"><a class=\"anchor\" href=\"#测试1其他\">#</a> 测试，1，其他</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616110350978.png\" alt=\"image-20230616110350978\" /></p>\n<p><strong>书写格式：ID 输入 输出</strong></p>\n<h3 id=\"黑盒测试\"><a class=\"anchor\" href=\"#黑盒测试\">#</a> 黑盒测试</h3>\n<ol>\n<li>\n<p>等价类</p>\n<ul>\n<li>分为若干子集，选取少量具有代表性的数据作为测试用例</li>\n</ul>\n</li>\n<li>\n<p>边界值</p>\n<ul>\n<li>错误往往发生在等价类的边界</li>\n</ul>\n</li>\n<li>\n<p>决策表</p>\n</li>\n<li>\n<p>状态转换</p>\n<p>根据状态转换图，建立测试对象的转换表，状态转换的每一类都应该被设计为测试用例</p>\n<ul>\n<li>输入：方法 + 当前状态</li>\n<li>输出</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"黑白盒比较\"><a class=\"anchor\" href=\"#黑白盒比较\">#</a> 黑白盒比较</h3>\n<p>白盒优点：覆盖率高；发现的缺陷较多<br />\n白盒缺点：测试开销大；不能检验需求规格<br />\n黑盒优点：测试效率高；可以检验需求规格<br />\n黑盒缺点：覆盖率低：发现的缺陷少</p>\n<h3 id=\"白盒测试-分支覆盖的测试用例设计\"><a class=\"anchor\" href=\"#白盒测试-分支覆盖的测试用例设计\">#</a> 白盒测试 - 分支覆盖的测试用例设计</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgwMDAzNDcwOTQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618000347094.png</span>&quot; alt=&quot;image-20230618000347094&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMjEzMjA2MjEucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617221320621.png</span>&quot; alt=&quot;image-20230617221320621&quot; style=&quot;zoom: 80%;&quot; /&gt;</p>\n<h4 id=\"语句覆盖\"><a class=\"anchor\" href=\"#语句覆盖\">#</a> 语句覆盖</h4>\n<p>确保测试用例的每一行代码都被覆盖到</p>\n<h4 id=\"条件覆盖\"><a class=\"anchor\" href=\"#条件覆盖\">#</a> 条件覆盖</h4>\n<p>每个判断的每个结果都被至少满足一次</p>\n<h4 id=\"路径覆盖\"><a class=\"anchor\" href=\"#路径覆盖\">#</a> 路径覆盖</h4>\n<p>确保程序每条独立的路径都被执行一次</p>\n<h3 id=\"圈复杂度计算\"><a class=\"anchor\" href=\"#圈复杂度计算\">#</a> 圈复杂度计算</h3>\n<p>p316</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTcyMzQ1NDgwMDIucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617234548002.png</span>&quot; alt=&quot;image-20230617234548002&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>法一：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617234341854.png\" alt=\"image-20230617234341854\" /></p>\n<p>法二：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617234353586.png\" alt=\"image-20230617234353586\" /></p>\n<p>评判：</p>\n<ol>\n<li>0-5：子程序还不错</li>\n<li>6-10：简化子程序</li>\n<li>大于 10：拆分子程序并调用<img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619010607697.png\" alt=\"image-20230619010607697\" /></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619010616555.png\" alt=\"image-20230619010616555\" /></p>\n<h3 id=\"例题-8\"><a class=\"anchor\" href=\"#例题-8\">#</a> 例题</h3>\n<h2 id=\"软件生命周期模型\"><a class=\"anchor\" href=\"#软件生命周期模型\">#</a> 软件生命周期模型</h2>\n<h3 id=\"知识点-5\"><a class=\"anchor\" href=\"#知识点-5\">#</a> 知识点</h3>\n<h4 id=\"瀑布模型\"><a class=\"anchor\" href=\"#瀑布模型\">#</a> 瀑布模型</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619010913052.png\" alt=\"image-20230619010913052\" /></p>\n<p><strong>瀑布模型</strong>是按照软件生命周期模型将软件开发活动组织为<strong>需求开发、软件设计、软件实现、软件测试、软件交付和软件维护</strong>等活动，并且规定了它们自上而下、相互邻接的次序。</p>\n<p>优点：为软件开发活动定义了<strong>清晰的阶段划分</strong>（包括输入 / 输出、主要工作及其关注点），这让开发者能够以关注点分离的方式更好地进行那些复杂度超越个人能力的软件项目的开发活动。</p>\n<p>缺点：</p>\n<ol>\n<li>对文档的过高的期望具有局限性</li>\n<li>对开发活动的线性顺序假设具有局限性</li>\n<li>客户、用户的参与具有局限性：成功的项目开发需要客户、用户从始至终的参与，而不仅仅是一个阶段。</li>\n<li>里程碑粒度具有局限性：里程碑粒度过粗，基本丧失了 “早发现缺陷早修复” 这一思想</li>\n</ol>\n<p>适用于比较成熟，没有技术难点的软件</p>\n<h4 id=\"增量迭代模型\"><a class=\"anchor\" href=\"#增量迭代模型\">#</a> 增量迭代模型</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619011020595.png\" alt=\"image-20230619011020595\" /></p>\n<p>增量迭代模型是在项目开始时，通过<strong>系统需求开发和核心体系结构设计活动</strong>完成项目对前景和范围的界定，然后再将后续开发活动组织为<strong>多个迭代、并行的瀑布式开发模型</strong>。</p>\n<p>少量的不确定性和影响不大的需求变更通过迭代的方式加以解决。</p>\n<p>优点：</p>\n<ol>\n<li>迭代式开发更加符合软件开发的实践情况，具有更好的适用性；</li>\n<li>并行开发可以帮助缩短软件产品的开发时间；</li>\n<li>渐进交付可以加强用户反馈，降低开发风险。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>由于各个构件是逐渐并入已有的软件体系结构中的，所以加入构件必须不破坏已构造好的系统部分，这需要软件具备开放式的体系结构。</li>\n<li>增量交付模型需要一个完备、清晰的项目前景和范围以进行并发开发规划，但是在一些不稳定的领域，不确定性太多或者需求变化非常频繁，很难在项目开始就确定前景和范围。</li>\n</ol>\n<p>适用范围：适用于大规模软件系统的开发。</p>\n<h4 id=\"演化模型\"><a class=\"anchor\" href=\"#演化模型\">#</a> 演化模型</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230619011031067.png\" alt=\"image-20230619011031067\" /></p>\n<p>演化模型将软件开发活动组织为<strong>多个迭代、并行的瀑布式开发活动</strong>。演化模型能够更好地应对需求变更，更适用于需求变更比较频繁或不确定性较多的领域。</p>\n<p>优点：</p>\n<ol>\n<li><strong>使用了迭代式开发，具有更好的适用性</strong>，尤其是其演化式迭代安排能够适用于那些需求变更比较频繁或不确定性较多的软件系统的开发；</li>\n<li>并行开发可以帮助<strong>缩短</strong>软件产品的开发时间；</li>\n<li>渐进交付可以<strong>加强用户反馈</strong>，降低开发风险。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>无法在项目早期阶段建立项目范围，所以项目的整体计划、进度调度、尤其是商务协商事宜无法准确把握；</li>\n<li>后续迭代的开发活动是在前导迭代基础上进行修改和扩展的，这容易让后续迭代忽略设计分析与设计工作，蜕变为构建 - 修复方式。</li>\n</ol>\n<p>适用与不稳定领域的大规模软件系统开发</p>\n<h3 id=\"题型-5\"><a class=\"anchor\" href=\"#题型-5\">#</a> 题型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616110333210.png\" alt=\"image-20230616110333210\" /></p>\n<h3 id=\"例题-9\"><a class=\"anchor\" href=\"#例题-9\">#</a> 例题</h3>\n",
            "tags": [
                "NJUSE",
                "软件工程与计算二",
                "软件工程与计算二"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/06/21/NJU/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "url": "https://quas-modo.github.io/2023/06/21/NJU/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "title": "计算机操作系统期末复习",
            "date_published": "2023-06-21T06:43:47.000Z",
            "content_html": "<p>整理了一些 os 的选择题知识点、大题的重要知识点，还有一些简答的梳理。</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"单元1-操作系统概论\"><a class=\"anchor\" href=\"#单元1-操作系统概论\">#</a> 单元 1 操作系统概论</h2>\n<h3 id=\"操作系统分类\"><a class=\"anchor\" href=\"#操作系统分类\">#</a> 操作系统分类</h3>\n<h4 id=\"批处理系统\"><a class=\"anchor\" href=\"#批处理系统\">#</a> 批处理系统</h4>\n<p>** 多道：** 在内存中同时存放多个作业，一个时刻只有一个作业运行，这些作业共享 CPU 和外部设备等资源。</p>\n<p>** 成批：** 用户和作业之间没有交互性。用户自己不能干预自己的作业的运行，发现作业错误不能及时改正。</p>\n<h4 id=\"分时操作系统\"><a class=\"anchor\" href=\"#分时操作系统\">#</a> 分时操作系统</h4>\n<p>它能很好地将一台计算机提供给多个用户同时使用，提高计算机的利用率。分时系统是指，<strong>在一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户通过自己的终端，以交互方式使用计算机</strong>，共享主机中的资源。</p>\n<ol>\n<li>同时性：计算机系统能被多个用户同时使用；</li>\n<li>独立性：用户和用户之间都是独立操作系统的，在同时操作时并不会发生冲突，破坏，混淆等现象；</li>\n<li>及时性：系统能以最快的速度将结果显示给用户；</li>\n<li><strong>交互作用性</strong>：用户能和电脑进行人机对话。</li>\n</ol>\n<h4 id=\"实时操作系统\"><a class=\"anchor\" href=\"#实时操作系统\">#</a> 实时操作系统</h4>\n<p>所谓 “实时”，是表示 “及时”，而<strong>实时系统是指系统能及时响应外部事件的请求</strong>，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致的运行。其应用需求主要在实时控制和实时信息处理。</p>\n<p><strong>实时操作系统必须在规定时间内处理来自外部的事件</strong></p>\n<p>特点：</p>\n<p>高精度计时系统：计时精度是影响实时性的一个重要因素。在实时应用系统中，经常需要精确确定实时地操作某个设备或执行某个任务，或精确的计算一个时间函数。这些不仅依赖于一些硬件提供的时钟精度，也依赖于实时操作系统实现的高精度计时功能。<br />\n多级中断机制：一个实时应用系统通常需要处理多种外部信息或事件，但处理的紧迫程度有轻重缓急之分。有的必须立即作出反应，有的则可以延后处理。因此，需要建立多级中断嵌套处理机制，以确保对紧迫程度较高的实时事件进行及时响应和处理。<br />\n实时调度机制：实时操作系统不仅要及时响应实时事件中断，同时也要及时调度运行实时任务。但是，处理机调度并不能随心所欲的进行，因为涉及到两个进程之间的切换，只能在确保 “安全切换” 的时间点上进行，实时调度机制包括两个方面，一是在调度策略和算法上保证优先调度实时任务；二是建立更多 “安全切换” 时间点，保证及时调度实时任务。</p>\n<h4 id=\"多用户操作系统\"><a class=\"anchor\" href=\"#多用户操作系统\">#</a> 多用户操作系统</h4>\n<h4 id=\"分布式系统\"><a class=\"anchor\" href=\"#分布式系统\">#</a> 分布式系统</h4>\n<p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。</p>\n<h3 id=\"特权指令\"><a class=\"anchor\" href=\"#特权指令\">#</a> 特权指令</h3>\n<p>能引起损害的机器指令作为特权指令</p>\n<ol>\n<li>允许和禁止中断，控制中断禁止屏蔽位</li>\n<li>在进程间切换处理</li>\n<li>存取用于主存保护的寄存器</li>\n<li>执行 I/O 操作</li>\n<li>停止一个中央处理器的工作</li>\n<li>清理内存</li>\n<li>设置时钟</li>\n<li>建立存储键</li>\n<li>加载 PSW</li>\n</ol>\n<h3 id=\"操作系统管理的资源\"><a class=\"anchor\" href=\"#操作系统管理的资源\">#</a> 操作系统管理的资源</h3>\n<ul>\n<li>所有硬件资源，如 CPU、存储器、输入输出设备</li>\n<li>软件资源等，如程序和数据等。</li>\n</ul>\n<h3 id=\"并发性\"><a class=\"anchor\" href=\"#并发性\">#</a> 并发性</h3>\n<p>共享性、虚拟性、异步性</p>\n<ul>\n<li>并行是指两个或多个事件可以在<strong>同一个时刻</strong>发生。</li>\n<li>并发是指两个或多个事件可以在<strong>同一个时间间隔</strong>发生。</li>\n</ul>\n<p>同一时刻即为并行，一定的时间间隔发生即为并发。</p>\n<h3 id=\"多道程序设计\"><a class=\"anchor\" href=\"#多道程序设计\">#</a> 多道程序设计</h3>\n<p>多道程序设计：<strong>允许多个程序（作业）同时进入一个计算机系统的内存并启动进行交替计算的方法</strong>，也就是，计算机中可以同时存放多道程序，从宏观上来看它们是并行的，多道程序都同时处于运行过程中，但都未运行结束，但是微观上是串行的，轮流占用 CPU 交替执行，引入多道程序设计技术的根本目的是提高 CPU 的利用率，充分发挥计算机系统部件的并行性。</p>\n<p>多道程序设计的特点</p>\n<ol>\n<li>CPU 与外部设备充分并行</li>\n<li>外部设备之间充分并行</li>\n<li>发挥 CPU、内存和设备的使用效率</li>\n<li>提高单位时间的算题量 (吞吐率)</li>\n</ol>\n<p>多道程序设计的主要缺点：</p>\n<ol>\n<li>延长了作业的周转时间。</li>\n</ol>\n<h3 id=\"spooling技术\"><a class=\"anchor\" href=\"#spooling技术\">#</a> SPOOLing 技术</h3>\n<p>SPOOLing 技术便可将一台物理 I/O 设备虚拟为多台逻辑 I/O 设备，同样允许多个用户共享一台物理 I/O 设备。</p>\n<h2 id=\"单元2-处理器管理\"><a class=\"anchor\" href=\"#单元2-处理器管理\">#</a> 单元 2 处理器管理</h2>\n<p><strong>目态</strong>：用户态</p>\n<p><strong>管态</strong>：特权态、系统态、核心态</p>\n<p><strong>进程与线程</strong></p>\n<ol>\n<li>进程是资源分配和管理的单位</li>\n<li>线程是处理器调度的基本单位。</li>\n</ol>\n<p><strong>PCB</strong>：进程控制块</p>\n<h3 id=\"进程概念\"><a class=\"anchor\" href=\"#进程概念\">#</a> 进程概念</h3>\n<p><strong>进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动</strong>。</p>\n<ol>\n<li>具有一定独立功能的程序：进程是相对独立的</li>\n<li>关于某个数据集合：对于不同数据集合的操作不是同一个进程。</li>\n<li>一次运行活动：有生命周期</li>\n</ol>\n<p>动态性、共享性、独立性、制约性、并发性</p>\n<h3 id=\"进程管理原语0\"><a class=\"anchor\" href=\"#进程管理原语0\">#</a> 进程管理原语，0</h3>\n<p>进程创建</p>\n<p>进程撤销</p>\n<p>进程阻塞</p>\n<p>进程唤醒</p>\n<p>进程挂起</p>\n<p>进程激活</p>\n<h3 id=\"进程转换模型\"><a class=\"anchor\" href=\"#进程转换模型\">#</a> 进程转换模型</h3>\n<p>运行态：进程占用处理器运行</p>\n<p>就绪态：进程具备运行条件等待处理器运行</p>\n<p>等待态：又称阻塞态、睡眠态，进程由于等待资源、输入输出、信号等而不具备运行条件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609103158553.png\" alt=\"image-20230609103158553\" /></p>\n<p>挂起态：挂起态与等待态有着本质区别，后者占有已申请到的资源处于等待，前者没有任何资源</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609103911702.png\" alt=\"image-20230609103911702\" /></p>\n<h3 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/v2-01b5b9ac0ea5c15e050b302e39af5e33_r.jpg\" alt=\"v2-01b5b9ac0ea5c15e050b302e39af5e33_r\" /></p>\n<h4 id=\"用户级线程和内核级线程的区别\"><a class=\"anchor\" href=\"#用户级线程和内核级线程的区别\">#</a> 用户级线程和内核级线程的区别</h4>\n<ol>\n<li>ULT 适用于解决逻辑并行性问题</li>\n<li>KLT 适用于解决物理并行性问题</li>\n</ol>\n<h4 id=\"jacketing技术\"><a class=\"anchor\" href=\"#jacketing技术\">#</a> jacketing 技术</h4>\n<p>为了解决一个 ULT 的阻塞，将引起整个进程的阻塞的问题，出现了 jacketing 技术。</p>\n<p>jacketing 技术将阻塞式的系统调用改造成非阻塞式的，当线程陷入系统调用时，检查 jacketing 程序，由 jackting 程序来检查资源使用情况，以决定是否执行进程切换或传递控制权给另一个线程。</p>\n<p>比如说，当线程需要 I/O 资源时，它不直接去调用系统 I/O 例程，而是让线程调用一用户级的 I/O 的 Jacketing 例程，这个 jacket 例程中的代码用来检查并确定 I/O 设备是否忙。如果忙，该线程进入阻塞状态并将控制传送给另一个线程。当这个线程后来又重新获得控制时，jacketing 例程会再次检查 I/O 设备。</p>\n<h4 id=\"多线程实现的混合式策略\"><a class=\"anchor\" href=\"#多线程实现的混合式策略\">#</a> 多线程实现的混合式策略</h4>\n<ol>\n<li>线程创建完全在用户空间中完成，线程的调度和同步也在应用程序中进行</li>\n<li>一个应用中的多个用户级线程被映射到一些 (小于等于用户级线程数目) 内核级线程上</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjAucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMjEucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/21.png</span>&quot; alt=&quot;img&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h2 id=\"单元3-存储管理\"><a class=\"anchor\" href=\"#单元3-存储管理\">#</a> 单元 3 存储管理</h2>\n<p>存储分配：位进程分配内存空间以便运行，完成内存区的分配和去配工作。</p>\n<p>地址映射：内存被抽象为一维或二维地址空间；逻辑空间到物理空间映射。</p>\n<p>存储保护：系统隔离分配给进程的内存区，防止地址越界或操作越权。</p>\n<p>存储共享：系统允许多个进程共享内存区。</p>\n<p>存储扩充：形成虚拟存储器</p>\n<h3 id=\"静态重定位动态重定位\"><a class=\"anchor\" href=\"#静态重定位动态重定位\">#</a> 静态重定位 / 动态重定位</h3>\n<p><strong>地址转换</strong>：又称重定位，即把逻辑地址转换成绝对地址</p>\n<ol>\n<li><strong>静态重定位</strong>：在<strong>程序装入内存</strong>时进行地址转换：由装入程序执行，早期小型 OS 使用，基于地址固定值进行偏移。</li>\n<li><strong>动态重地位 (主流)</strong>：在<strong> CPU 执行程序时进行地址转换</strong>：从效率出发，依赖硬件地址转换机构，运行时正确的将其逻辑地址转换为物理地址。</li>\n</ol>\n<h3 id=\"存储保护\"><a class=\"anchor\" href=\"#存储保护\">#</a> 存储保护</h3>\n<p>为<strong>避免</strong>主存中的多个进程<strong>相互干扰</strong>，必须<strong>对主存中的程序和数据进行保护</strong></p>\n<ol>\n<li>私有主存区中的信息：可读可写</li>\n<li>公共区中的共享信息：根据授权</li>\n<li>非本进程信息：不可读写</li>\n</ol>\n<h3 id=\"内存碎片外存碎片\"><a class=\"anchor\" href=\"#内存碎片外存碎片\">#</a> 内存碎片 / 外存碎片</h3>\n<p>（1）性质不同：</p>\n<p>①内存碎片：指的是已经被分配出去的，但是却没有被使用的内存空间。 因为基本存储单位的限制</p>\n<p>②外存碎片：指的是还没有被分配的，但是由于太小或者是不连续，而导致不满足要求，所以没办法被分配的内存空间</p>\n<p>（2）存储位置不同：</p>\n<p>①内存碎片是存储于已分配区域内部的</p>\n<p>②外存碎片是存储于未分配区域的</p>\n<p>（3）状态不同：</p>\n<p>①内存碎片：其他进程没办法使用它，因为它被某一个进程占有</p>\n<p>②外存碎片：其他进程没办法使用它，因为它可存储的位置不连续或者是太小了</p>\n<p><strong>分页存储</strong>会产生<strong>内存碎片</strong>，不会产生外存碎片；</p>\n<p><strong>分段存储</strong>不会产生内存碎片，会产生<strong>外存碎片</strong>。</p>\n<p><strong>段页式</strong>存储：产生<strong>内存碎片、外存碎片</strong>。</p>\n<h3 id=\"存储扩充\"><a class=\"anchor\" href=\"#存储扩充\">#</a> 存储扩充</h3>\n<p><strong>对换技术</strong>：把部分不运行的进程调出</p>\n<p><strong>虚拟技术</strong>：只调入进程的部分内容，对单个进程不使用对换技术完成，特点是自动化、透明</p>\n<h3 id=\"内存不足的存储技术\"><a class=\"anchor\" href=\"#内存不足的存储技术\">#</a> 内存不足的存储技术</h3>\n<p><strong>移动技术</strong>：当未分配区表中找不到足够大的空闲区来装入新进程时，我们使用移动技术来完成内存紧凑，实现方法：</p>\n<ol>\n<li>全部移动到一侧</li>\n<li>移动直到有足够大的空闲区</li>\n</ol>\n<p>需要动态重定位支撑:</p>\n<p><strong>对换技术</strong>：如果当前一个或多个驻留进程都处于阻塞态，此时选择其中一个进程，将其暂时移出内存，腾出空间给其他进程使用，；同时把磁盘中的某个进程换入内存，让其投入运行，这种互换称为<strong>对换</strong>。</p>\n<p><strong>内存覆盖技术</strong>：指程序执行过程中程序的不同模块在内存中相互替代，以达到小内存执行大程序的目的。</p>\n<h3 id=\"存储层次\"><a class=\"anchor\" href=\"#存储层次\">#</a> 存储层次</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvMy5wbmc=\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png</span>&quot; alt=&quot;3&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h3 id=\"页式存储\"><a class=\"anchor\" href=\"#页式存储\">#</a> 页式存储</h3>\n<p>逻辑地址 = 页号 + 页面偏移</p>\n<p>物理地址 = 页架号（页框号） + 单元号（页内偏移)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610095628687.png\" alt=\"image-20230610095628687\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610095822503.png\" alt=\"image-20230610095822503\" /></p>\n<p><strong>页的共享</strong>：</p>\n<ol>\n<li><strong>数据共享</strong>：不同进程可以使用<strong>不同</strong>页号共享数据页</li>\n<li><strong>程序共享</strong>：不同进程必须使用<strong>相同</strong>页号共享代码页</li>\n</ol>\n<p><strong>页式存储管理的地址转换</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDA2MTQxOTIucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610100614192.png</span>&quot; alt=&quot;image-20230610100614192&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>页表控制寄存器存储了当前的页表的地址和长度</p>\n<p><strong>多级页表</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDEyMTQ4NDMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610101214843.png</span>&quot; alt=&quot;image-20230610101214843&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>逻辑地址结构有三部分组成：页目录、页表页和位移</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDMzMTgzMTcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610103318317.png</span>&quot; alt=&quot;image-20230610103318317&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p><strong>反置页表 IPT</strong></p>\n<p>正向页表：以<strong>页号</strong>为索引 (隐含)，完整连续排列，页表项中不含页号，每个进程单独一个页表</p>\n<p>反置页表：以<strong>页框号</strong>为索引 (隐含)，完整连续排列，每个页框填入的是哪个进程的哪个页号，索引进程共用一个反置页表。其页表项不包含页框号</p>\n<p>通过这个结构，哈希表和反向表中只有一项对应于一个实存页 (面向实存)，而不是虚拟页 (面向虚存)。<br />\n因此，不论由多少进程、支持多少虚拟页，页表都只需要<strong>实存中的一个固定部分</strong>。</p>\n<p>页表结构：页号、进程标识符、控制位、哈希链指针</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDQ0NTI3MjcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610104452727.png</span>&quot; alt=&quot;image-20230610104452727&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDQ0MDkxNzcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618104409177.png</span>&quot; alt=&quot;image-20230618104409177&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<h3 id=\"段式存储\"><a class=\"anchor\" href=\"#段式存储\">#</a> 段式存储</h3>\n<p>逻辑地址 = 段号 + 段内偏移</p>\n<p>页式存储管理中页的划分对程序员不可见。</p>\n<p>段式存储管理中段的划分对程序员可见。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDUwMTY3ODEucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610105016781.png</span>&quot; alt=&quot;image-20230610105016781&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"段页式存储管理\"><a class=\"anchor\" href=\"#段页式存储管理\">#</a> 段页式存储管理</h3>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTAxMDU0MTQxNDUucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610105414145.png</span>&quot; alt=&quot;image-20230610105414145&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"页面调度未看\"><a class=\"anchor\" href=\"#页面调度未看\">#</a> 页面调度（未看）</h3>\n<p>OPT 页面调度算法（Belady 算法）</p>\n<p>先进先出页面调度算法 FIFO-Belady 异常 - 更多的页框导致了更高的缺页率，页框为 3 和 4 的时候</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDU2NTIxMjcucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618105652127.png</span>&quot; alt=&quot;image-20230618105652127&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>页面缓冲算法</p>\n<p>最近最少用 LRU</p>\n<p>第二次机会页面替换算法 SCR</p>\n<p>最不常用 LFU</p>\n<p>时钟 CLOCK</p>\n<h2 id=\"单元4-设备管理\"><a class=\"anchor\" href=\"#单元4-设备管理\">#</a> 单元 4 设备管理</h2>\n<h3 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h3>\n<ol>\n<li>\n<p>按信息传输方向 (I/O 操作特性) 分类</p>\n<ol>\n<li>输入</li>\n<li>输出</li>\n<li>输入输出</li>\n</ol>\n</li>\n<li>\n<p>按交互功能划分</p>\n<ol>\n<li>人机交互</li>\n<li>存储</li>\n<li>机机通信</li>\n</ol>\n</li>\n<li>\n<p>按设备管理 (I/O 信息交换单位) 划分</p>\n<ol>\n<li>字符</li>\n<li>块</li>\n<li>网络</li>\n</ol>\n</li>\n<li>\n<p>按传输速率</p>\n<ol>\n<li>\n<p>低速设备，键盘、鼠标</p>\n<p><strong>大多数低速设备都属于独享设备</strong></p>\n</li>\n<li>\n<p>中速设备，激光打印机</p>\n</li>\n<li>\n<p>高速设备，磁盘机、光盘机</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"io控制方式\"><a class=\"anchor\" href=\"#io控制方式\">#</a> IO 控制方式</h3>\n<ol>\n<li>轮询（程序直接控制方式）\n<ul>\n<li>重复测试</li>\n<li>CPU 和设备串行工作</li>\n</ul>\n</li>\n<li>中断\n<ul>\n<li>CPU 和设备部分并行</li>\n</ul>\n</li>\n<li>DMA（Direct Memory Access 直接存储器访问）\n<ul>\n<li><strong>内存和设备</strong>之间有一条数据通路成块地传送数据，<strong>无需 CPU 参与</strong></li>\n<li>流程：\n<ul>\n<li>处理器向 DMA 模块发出 I/O 命令</li>\n<li>处理器继续执行其它工作，DMA 模块负责传送全部数据</li>\n<li>数据传送结束后，DMA 中断处理器</li>\n</ul>\n</li>\n<li>周期窃取：CPU 总是将总线的占有权让给 DMA 一个或几个主存周期，一般是 1 个存取周期，让设备和内存之间交换数据。</li>\n</ul>\n</li>\n<li>IO 通道\n<ul>\n<li>定义：\n<ul>\n<li>一个<strong>具有特殊功能的处理器</strong>，它有自己的指令和程序，专门负责数据输入输出的传输控制 (CPU 把传输控制的功能下放给通道)。通道受 CPU 的 I/O 指令启动、停止或改变其工作状态。</li>\n</ul>\n</li>\n<li>功能：\n<ul>\n<li>按 I/O 指令要求启动 I/O 设备</li>\n<li>执行通道指令</li>\n<li>组织 I/O 设备和主存进行数据传输</li>\n<li>向 CPU 报告中断</li>\n</ul>\n</li>\n<li>CPU 与通道高度并行</li>\n<li>IO 指令由 IO 通道所包含的处理器执行</li>\n<li>与 DMA 的区别：可以连接多个设备，读取多个数据块</li>\n<li><strong>通道指令</strong>：又叫通道控制字 (CCW)，它是通道用于执行 I/O 操作的指令，它可以由管理程序存放在主存的任何地方，由通道从主存取出并执行。【<strong>IO 指令是 CPU 指令系统的一部分，用于控制输入输出操作的指令，通道指令是通道本身的指令，用来执行 IO 操作</strong>】</li>\n<li><strong>通道程序</strong>：由<strong>通道指令</strong>组成，它完成某种外围设备与主存传送信息的操作，如将磁带记录区的部分内容送到指定地址的主存缓冲区内。</li>\n<li><strong>这是一种硬件机制。</strong></li>\n</ul>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>CPU 作用</th>\n<th>等待设备</th>\n<th>数据传送</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>轮询方式</td>\n<td>需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>中断方式</td>\n<td>不需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>DMA 方式</td>\n<td>不需要</td>\n<td>不需要</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616142618761.png\" alt=\"image-20230616142618761\" /></p>\n<p>一个有趣的例子 belike：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616142349234.png\" alt=\"image-20230616142349234\" /></p>\n<ol start=\"5\">\n<li>总线\n<ol>\n<li>单总线</li>\n<li>传统的三级总线</li>\n<li>采用南北桥的多级总线</li>\n<li>采用 IO 通道的多级总线</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"io软件的实现todo再看看\"><a class=\"anchor\" href=\"#io软件的实现todo再看看\">#</a> IO 软件的实现【todo 再看看】</h3>\n<p><strong>同步 / 异步传输</strong>：支持<strong>阻塞和中断驱动</strong>两种工作方式</p>\n<p><strong>层次</strong>：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616165104832.png\" alt=\"image-20230616165104832\" /></p>\n<h4 id=\"io中断处理程序\"><a class=\"anchor\" href=\"#io中断处理程序\">#</a> IO 中断处理程序</h4>\n<ol>\n<li><strong>处理 IO 中断</strong>：检查设备状态寄存器内容，判断产生中断的原因，根据 I/O 操作的完成情况进行相应的处理</li>\n<li><strong>报告错误</strong>：如果数据传输有错，向上层软件报告设备的出错信息，实施重新执行</li>\n<li><strong>唤醒驱动程序</strong>：如果正常结束，唤醒等待传输的进程，使其转换为<strong>就绪态</strong>设备驱动程序</li>\n</ol>\n<h4 id=\"设备驱动程序\"><a class=\"anchor\" href=\"#设备驱动程序\">#</a> 设备驱动程序</h4>\n<p><strong>任务</strong>：</p>\n<ol>\n<li>把用户提交的<strong>逻辑 I/O 请求</strong>转化为<strong>物理 I/O 操作</strong>的启动和执行，如设备名转换为端口等</li>\n<li>监督设备是否正确执行，管理<strong>数据缓冲区</strong>，进行必要的纠错处理</li>\n</ol>\n<p><strong>功能</strong>：</p>\n<ol>\n<li>设备初始化：在系统初次启动或设备传输数据时，预置设备和控制器以及通道状态</li>\n<li>执行设备驱动例程\n<ol>\n<li>负责启动设备，进行数据传输</li>\n<li>对于具有通道方式，还负责生成通道指令和通道程序，启动通道工作</li>\n</ol>\n</li>\n<li>调用和执行中断处理程序：负责处理设备和控制器及通道所发出的各种中断</li>\n</ol>\n<h4 id=\"独立于设备的io软件\"><a class=\"anchor\" href=\"#独立于设备的io软件\">#</a> 独立于设备的 IO 软件</h4>\n<h4 id=\"用户空间的io软件\"><a class=\"anchor\" href=\"#用户空间的io软件\">#</a> 用户空间的 IO 软件</h4>\n<p>SPOOLing 软件</p>\n<h3 id=\"缓冲技术\"><a class=\"anchor\" href=\"#缓冲技术\">#</a> 缓冲技术</h3>\n<p>缓冲区：在<strong>内存</strong>中开辟的存储区，专门用于临时存放 I/O 操作的数据</p>\n<p>解决<strong> CPU 与设备之间速度不匹配</strong>的矛盾</p>\n<p>基本思想：写缓冲、读缓冲</p>\n<p>实现：</p>\n<ol>\n<li>\n<p>单缓冲</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145632492.png\" alt=\"image-20230616145632492\" /></p>\n<ul>\n<li>工作机制：\n<ul>\n<li>输入：将数据读至缓冲区，系统将缓冲区数据送至用户区，应用程序对数据进行处理；如此往复，系统读入后续的数据</li>\n<li>输出：把数据从用户区复制到缓冲区，再将数据输出后，应用程序继续请求输出</li>\n</ul>\n</li>\n<li>性能计算</li>\n</ul>\n</li>\n<li>\n<p>双缓冲</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145655627.png\" alt=\"image-20230616145655627\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145738740.png\" alt=\"image-20230616145738740\" /></p>\n</li>\n<li>\n<p>多缓冲</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616145234883.png\" alt=\"image-20230616145234883\" /></p>\n<p>多缓冲组成的循环缓冲技术，多缓冲的缓冲区是系统的公共资源，可供进程共享并由系统统一分配和管理。</p>\n</li>\n<li>\n<p>缓冲池</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616161718238.png\" alt=\"image-20230616161718238\" /></p>\n<p><strong>使多个进程能够有效地同时处理输入和输出</strong></p>\n</li>\n<li>\n<p>循环缓冲</p>\n</li>\n</ol>\n<h3 id=\"驱动调度技术\"><a class=\"anchor\" href=\"#驱动调度技术\">#</a> 驱动调度技术</h3>\n<p><strong>磁盘是一种直接存取存储设备</strong>，磁带是一种顺序存取存储设备</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616150524875.png\" alt=\"image-20230616150524875\" /></p>\n<ol>\n<li>三维地址（磁头号、柱面号、扇区号）\n<ol>\n<li>盘面号也被叫做<strong>磁头号</strong></li>\n<li>磁道号也被叫做<strong>柱面号</strong></li>\n<li>区别:&quot;0 面 0 道 1 扇区&quot; 中的 &quot;面&quot; 是指磁头，不是柱面\n<ol>\n<li><strong>面和道都是 0 开始</strong></li>\n<li><strong>扇区是从 1 开始</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>磁盘存取时间 = 寻道时间 + 旋转延迟 + 传送时间</li>\n</ol>\n<h3 id=\"磁盘的驱动调度\"><a class=\"anchor\" href=\"#磁盘的驱动调度\">#</a> 磁盘的驱动调度</h3>\n<ol>\n<li>旋转调度\n<ul>\n<li>目的:<strong> 使得旋转延迟的总时间最少</strong></li>\n<li>旋转排序\n<ul>\n<li>通过优化 I/O 请求<strong>排序</strong>，在<strong>最少旋转圈数</strong>内完成位于同一柱面的访问请求</li>\n</ul>\n</li>\n<li>优化分布\n<ul>\n<li>通过信息在存储空间的排列方式来减少旋转延迟</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>移臂调度</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616151146552.png\" alt=\"image-20230616151146552\" /></p>\n<ol start=\"3\">\n<li>磁盘冗余阵列</li>\n<li>cache / 替换</li>\n</ol>\n<h3 id=\"设备分配\"><a class=\"anchor\" href=\"#设备分配\">#</a> 设备分配</h3>\n<ol>\n<li>\n<p>设备的分类：</p>\n<ul>\n<li>独占设备：一次只能由一个进程独占使用</li>\n<li>共享设备：多个进程同时使用的设备，其管理工作主要是驱动调度和实施驱动，一般不必分配</li>\n<li><strong>虚拟设备</strong>：使用一类物理设备模拟另一类物理设备的技术，<strong>让独享型设备变为共享设备</strong></li>\n</ul>\n</li>\n<li>\n<p>设备独立性：</p>\n<ul>\n<li>用户通常不指定物理设备，而是指定<strong>逻辑设备</strong>，使得用户作业和物理设备分离开来，再通过其它途径建立逻辑设备和物理设备之间的映射</li>\n<li>设备管理的功能就是将<strong>逻辑设备名转换为物理设备名</strong>，为此系统需要提供逻辑设备名和物理设备名的对应表以供转换使用。\n<ul>\n<li><strong>逻辑设备号</strong>由用户定义。</li>\n<li><strong>物理设备号</strong>由系统规定，不可修改。</li>\n</ul>\n</li>\n<li><strong>绝对号 / 相对号</strong>\n<ul>\n<li>绝对号：就是将每一台设备确定一个编号（相当于一个绝对地址）</li>\n<li>相对号：就是为了用户程序的方便而设的，在用户请求使用时，采用 “设备类 - 相对号” 来提出使用设备要求。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>分配方式：</p>\n<ul>\n<li>静态分配：防止死锁</li>\n<li>动态分配：设备利用率高</li>\n</ul>\n</li>\n<li>\n<p>设备分配算法：</p>\n<ol>\n<li>先来先服务</li>\n<li>优先级高者优先</li>\n</ol>\n</li>\n<li>\n<p>SPOOLing 设备（假脱机技术）</p>\n<ul>\n<li>将<strong>独占设备改成共享设备</strong>的技术</li>\n<li>采用<strong>预输入、缓输出和井管理</strong>技术</li>\n<li>通过创建守护进程和特殊目录解决<strong>独占型设备</strong>的<strong>空占</strong>问题</li>\n<li><strong>目的：提高 IO 设备的使用效率</strong></li>\n<li>缓和 CPU 的高速性与 IO 设备低速性之间的矛盾，以空间换时间</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616153606908.png\" alt=\"image-20230616153606908\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154208873.png\" alt=\"image-20230616154208873\" /></p>\n<p>例子：共享打印机</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154132122.png\" alt=\"image-20230616154132122\" /></p>\n<p>打印机守护进程和 SPOOLing 打印目录</p>\n<ol>\n<li><strong>守护进程</strong>是唯一有<strong>特权</strong>使用打印机设备的进程</li>\n<li>打印文件前，用户进程先产生完整的<strong>待输出文件</strong>，并存放在打印目录下</li>\n<li>打印机空闲时，启动守护进程，打印<strong>待输出文件</strong></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"单元5-文件管理\"><a class=\"anchor\" href=\"#单元5-文件管理\">#</a> 单元 5 文件管理</h2>\n<h3 id=\"文件系统及其功能\"><a class=\"anchor\" href=\"#文件系统及其功能\">#</a> 文件系统及其功能</h3>\n<p><strong>主要目的：实现对文件的按名存取</strong></p>\n<p>同一个文件必须从<strong>逻辑文件</strong>和<strong>物理文件</strong>两个侧面来观察它</p>\n<ol>\n<li>对于用户，需要并遵守文件系统的规则来定义文件信息的逻辑结构，由文件系统提供<strong>按名存取</strong>方式来实现对文件信息的存储和检索。</li>\n<li>对于系统，必须采用<strong>特定数据结构和有效算法</strong>实现文件的<strong>逻辑结构到存储结构</strong>的映射，实现对文件存储空间和文件信息的管理，提供多种存取方法</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616172631369.png\" alt=\"image-20230616172631369\" /></p>\n<h3 id=\"文件的逻辑结构\"><a class=\"anchor\" href=\"#文件的逻辑结构\">#</a> 文件的逻辑结构</h3>\n<h4 id=\"逻辑文件\"><a class=\"anchor\" href=\"#逻辑文件\">#</a> 逻辑文件</h4>\n<p>独立于<strong>物理环境</strong>的，用户概念中的<strong>抽象信息组织方式</strong>是<strong>文件的逻辑结构</strong>，用户能观察到的，并加以处理的数据集合构成逻辑文件</p>\n<ol>\n<li><strong>流式文件</strong>\n<ul>\n<li><strong>无结构</strong>文件，指文件内的数据不再组成记录，只是由一串依次的<strong>字节</strong>组成的<strong>信息流序列</strong>，称为<strong>字节流文件</strong></li>\n<li>这种文件常常按长度来读取所需信息，也可以用插入的特殊字符作为分界，使用读写指针访问</li>\n<li>Linux 系统只提供流式文件</li>\n</ul>\n</li>\n<li><strong>记录式文件</strong>\n<ul>\n<li>记录式文件是一种<strong>有结构</strong>的文件，它是若干<strong>逻辑记录信息</strong>所组成的记录流文件\n<ol>\n<li>逻辑记录是文件中按信息在逻辑上的独立含义所划分的信息单位</li>\n<li>每个职工的工资信息是一个逻辑记录；</li>\n<li>整个单位职工的工资信息便组成了该单位工资信息的记录式文件</li>\n</ol>\n</li>\n<li><strong>逻辑记录</strong>是文件内<strong>独立的最小信息单位</strong>，文件记录位置代替字节位置。</li>\n<li>记录是文件常用的记录组织和使用方法\n<ol>\n<li><strong>记录式顺序文件</strong>：文件的记录顺序生成并被顺序访问。</li>\n<li><strong>记录式索引文件</strong>：文件使用索引表，表项包含记录键和索引指针，记录键由应用程序确定，而索引文件便指向相应记录。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"物理结构\"><a class=\"anchor\" href=\"#物理结构\">#</a> 物理结构</h4>\n<p>文件的物理结构和组织是指<strong>逻辑文件在物理存储空间中的存放方法和组织关系</strong>。</p>\n<p>此时文件看做物理文件，即相关物理块的集合。文件的存储结构涉及块的划分、记录的排列、索引的组织、信息的搜索等许多问题</p>\n<ol>\n<li>\n<p><strong>顺序文件</strong></p>\n<ul>\n<li>将一个文件中<strong>逻辑上连续</strong>的信息存放到<strong>存储介质的依次相邻的块</strong>中便形成顺序结构，这类文件叫顺序文件，又称连续文件</li>\n</ul>\n</li>\n<li>\n<p><strong>连接文件</strong></p>\n<ul>\n<li>\n<p>使用连接字 (指针) 来表示文件中各条记录之间的关系</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616200258444.png\" alt=\"image-20230616200258444\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>直接文件、散列文件或哈希文件</strong></p>\n<ul>\n<li>在直接存取存储设备上，利用哈希法将记录的关键字与其地址之间建立某种对应关系，以便实现快速存取的文件</li>\n</ul>\n</li>\n<li>\n<p><strong>索引文件</strong></p>\n<ul>\n<li>索引文件为每个文件建立了一张<strong>索引表</strong>，索引表记录方式有多种：\n<ol>\n<li>记录组成文件的磁盘块号，适用于流式文件。</li>\n<li>所以表项包含记录键及其磁盘块号，适用于记录式文件。</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616200222696.png\" alt=\"image-20230616200222696\" /></p>\n</li>\n</ol>\n<h3 id=\"存取方法\"><a class=\"anchor\" href=\"#存取方法\">#</a> 存取方法</h3>\n<p>文件存取方法在某种程度上依赖于<strong>文件的物理结构</strong></p>\n<ol>\n<li><strong>顺序存取</strong>\n<ul>\n<li>按<strong>记录顺序</strong>进行读 / 写操作的存取方法称顺序存取</li>\n<li><strong>磁带机</strong>是最常用的一种顺序存取存储设备，它具有存储容量大、稳定可靠、卷可装卸和便于保存等优点，广泛用作存档</li>\n<li><strong>光盘</strong>也是一种顺序存取存储设备，光盘上的磁道不是同心圆，而是螺旋形的，本质的线性的。</li>\n</ul>\n</li>\n<li><strong>随机存取</strong>（直接存取）\n<ul>\n<li>可以非顺序地从文件中的任何位置存取文件内容</li>\n<li>要求快速地以<strong>任意次序</strong>直接<strong>读写</strong>某个记录</li>\n<li><strong>磁盘文件</strong></li>\n</ul>\n</li>\n<li><strong>索引存取</strong>\n<ul>\n<li>基于<strong>索引文件</strong>的索引存取方法</li>\n<li>文件的记录不按位置而是按其记录名和记录键来编址</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h3>\n<h4 id=\"文件的创建create\"><a class=\"anchor\" href=\"#文件的创建create\">#</a> 文件的创建 create</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 创建成功后系统返回的文件描述符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">;</span>         <span class=\"token comment\">//mode 是文件所具有的权限</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filenamep<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向要创建的文件路径名的字符串指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fd <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>filenamep<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件的删除\"><a class=\"anchor\" href=\"#文件的删除\">#</a> 文件的删除</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>filenamep<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"文件的打开open\"><a class=\"anchor\" href=\"#文件的打开open\">#</a> 文件的打开 open</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> filenamep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filenamep<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>输入是含路径的文件名</strong></p>\n<p>→→ 依据层次式目录结构解释与检索</p>\n<p>→→ 匹配文件名并读取目录项</p>\n<p>→→ 提取 inode 号</p>\n<p>→→ 按号定位，在 inode 区读取 inode 数据结构 (主存活动 inode)</p>\n<p>→→ <strong>输出是返回文件描述符（字）</strong>，即 file descriptor（成功打开文件，则会返回一个大于 0 的文件描述符；如果打开文件失败，则会返回 - 1）</p>\n<h4 id=\"文件的关闭close\"><a class=\"anchor\" href=\"#文件的关闭close\">#</a> 文件的关闭 close</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件的读取read\"><a class=\"anchor\" href=\"#文件的读取read\">#</a> 文件的读取 read</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 系统调用后实际读入的字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要求传送的字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 应该输入的用户数据区的首地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nr <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件的写write\"><a class=\"anchor\" href=\"#文件的写write\">#</a> 文件的写 write</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> nw<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 系统调用后实际写入的字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 文件描述符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要求传送的字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据传送的源地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nw <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件的随机存取\"><a class=\"anchor\" href=\"#文件的随机存取\">#</a> 文件的随机存取</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> offset<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 当前的 offset</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> whence<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 指向一个以读或写方式打开的文档</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> whence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>文件描述字 fd 必须指向一个用读或写方式打开的文件</p>\n<ol>\n<li>当 whence 是 0 时，则 f_offset 被置为 offset，</li>\n<li>当 whence 是 1 时，则 f_offset 被置为文件当前位置加上 offset。</li>\n</ol>\n<h3 id=\"文件目录\"><a class=\"anchor\" href=\"#文件目录\">#</a> 文件目录</h3>\n<p>文件目录是实现文件的<strong>按名存取</strong>的关键数据结构</p>\n<h4 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> linux</h4>\n<p>linux 基本目录项：inode = 文件名 + inode 号</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616194928961.png\" alt=\"image-20230616194928961\" /></p>\n<p>嵌入在 inode 中的<strong>索引地址表</strong>不可以太大</p>\n<ol>\n<li>文件较小使用直接地址 (直接索引)</li>\n<li>文件较大使用间接索引</li>\n</ol>\n<p>f_count 和 i_count 分别反映进程动态地共享一个文件的两种方式</p>\n<ol>\n<li><strong>f_count</strong> 反映<strong>不同进程</strong>通过<strong>同一个</strong>系统打开文件表项共享一个文件的情况；</li>\n<li><strong>i_count</strong> 反映<strong>不同进程</strong>通过<strong>不同</strong>系统打开文件表项共享一个文件的情况。</li>\n</ol>\n<h4 id=\"多级层次目录结构\"><a class=\"anchor\" href=\"#多级层次目录结构\">#</a> 多级层次目录结构</h4>\n<p>易于规定不同层次或子树中文件的不同存取权限，便于文件的保护、保密和共共享</p>\n<p>为了解决不同用户文件 “<strong>命名冲突</strong>” 的问题，通常在文件系统中采用<strong>多级目录</strong>。</p>\n<h2 id=\"单元6-并行\"><a class=\"anchor\" href=\"#单元6-并行\">#</a> 单元 6 并行</h2>\n<h3 id=\"临界区\"><a class=\"anchor\" href=\"#临界区\">#</a> 临界区</h3>\n<p><strong>临界资源</strong>：<strong>互斥共享变量所代表的资源，即一次只能被一个进程使用的资源</strong></p>\n<ol>\n<li>举例：火车上的卫生间就是一种互斥使用的共享资源</li>\n<li>使用共享变量代表共享资源</li>\n</ol>\n<p><strong>临界区</strong> (critical section)：并发进程中与互斥共享变量相关的<strong>程序段</strong>，与同一变量有关的临界区分散在各进程的程序段中，而各进程的执行速度不可预见</p>\n<p><strong>临界区</strong>：每个进程中访问临界资源的<strong>那段代码</strong>称为临界区。</p>\n<h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<p>P(s)：</p>\n<ol>\n<li>将信号量 s 减去 1，若结果小于 0，则调用 P (s) 的进程被置成等待信号量 s 的状态</li>\n<li>负数的绝对值就是等待的进程的个数</li>\n</ol>\n<p>V (s)：将信号量 s 加 1，若结果不大于 0，则释放 (唤醒) 一个等待信号量 s 的进程，使其转换为<strong>就绪态</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617100634832.png\" alt=\"image-20230617100634832\" /></p>\n<h3 id=\"进程通信信息传递\"><a class=\"anchor\" href=\"#进程通信信息传递\">#</a> 进程通信（信息传递）</h3>\n<p>当进程互相交互时，必须满足两个基本要求：<strong>同步和通信</strong></p>\n<h4 id=\"进程直接通信\"><a class=\"anchor\" href=\"#进程直接通信\">#</a> 进程直接通信</h4>\n<ul>\n<li>\n<p>对称直接寻址，发送进程和接收进程必须<strong>命名对方</strong>以便通信</p>\n</li>\n<li>\n<p>非对称直接寻址，<strong>只要发送者命名接收者，而接收者不需要命名发送者</strong></p>\n<ul>\n<li>receive(<strong>id</strong>, message) 接收来自任何进程的消息，变量 id 置成与其通信的进程名称</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程间接通信\"><a class=\"anchor\" href=\"#进程间接通信\">#</a> 进程间接通信</h4>\n<p>发送或者接收信件通过<strong>一个信箱</strong>来进行，该信箱有<strong>唯一标识符</strong></p>\n<p>消息不是直接从发送者发送到接收者，而是发送到由<strong>临时保存这些消息的队列组成的一个共享数据结构</strong>，这些队列通常成为<strong>信箱</strong> (mailbox)</p>\n<h4 id=\"管道和套接字\"><a class=\"anchor\" href=\"#管道和套接字\">#</a> 管道和套接字</h4>\n<p>管道和套接字都是基于信箱的消息传递方式的一种<strong>变体</strong></p>\n<h3 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h3>\n<p>不仅与系统拥有的资源数量有关，而且与资源分配策略，进程对资源的使用要求以及并发进程的推进顺序有关</p>\n<h4 id=\"死锁产生的四个必要条件\"><a class=\"anchor\" href=\"#死锁产生的四个必要条件\">#</a> 死锁产生的四个必要条件</h4>\n<ol>\n<li><strong>互斥条件</strong>：进程应互斥使用资源，任一时刻一个资源仅为一个进程独占</li>\n<li><strong>占有和等待条件</strong>：一个进程请求资源得不到满足而等待时，不释放已占有的资源</li>\n<li><strong>不剥夺条件</strong>：任一进程不能从另一进程那里抢夺资源</li>\n<li><strong>循环等待条件</strong>：存在一个循环等待链，每一个进程分别等待它前一个进程所持有的资源</li>\n<li>前三个是死锁存在的必要条件，但不是充分条件，第四个条件是前三个条件同时存在时所产生的结果。</li>\n</ol>\n<h4 id=\"死锁防止\"><a class=\"anchor\" href=\"#死锁防止\">#</a> 死锁防止</h4>\n<ul>\n<li>破坏互斥条件：把独占型资源改造成共享性资源</li>\n<li>破坏占有和等待条件：\n<ul>\n<li>静态分配是指进程在执行中<strong>不再申请资源</strong>，就不会出现占有某些资源再等待另一些资源的情况。</li>\n<li>所有并发执行的进程要求的资源总和不超过系统拥有的资源数</li>\n</ul>\n</li>\n<li>破坏不剥夺条件\n<ul>\n<li>采用剥夺式调度方法</li>\n</ul>\n</li>\n<li>破坏循环等待条件\n<ul>\n<li>层次分配策略\n<ul>\n<li>一个进程得到某一层的一个资源后，它只能<strong>再申请在较高层</strong>的资源</li>\n<li>当一个进程要释放某层的一个资源时，必须先<strong>释放所占用的较高层</strong>的资源</li>\n<li>当一个进程获得了<strong>某一层</strong>的一个资源后，它想再申请该层中的另一个资源，那么，必须先释放该层中的已占资源</li>\n</ul>\n</li>\n<li>按序分配策略\n<ul>\n<li>把系统的所有资源排一个顺序，例如，系统若共有 n 个进程，共有 m 个资源，用 ri 表示第 i 个资源，于是这 m 个资源是：r1,r2,...,rm</li>\n<li>规定如果进程不得在占用资源 ri (1≤i≤m) 后再申请 rj (j&lt;i)。不难证明，按这种策略分配资源时系统不会发生死锁。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"死锁避免\"><a class=\"anchor\" href=\"#死锁避免\">#</a> 死锁避免</h4>\n<p>把资源分配给申请者会产生死锁的话，则拒绝分配，否则接收申请，为它分配资源</p>\n<ul>\n<li>银行家算法（todo）</li>\n</ul>\n<h4 id=\"死锁检测与恢复\"><a class=\"anchor\" href=\"#死锁检测与恢复\">#</a> 死锁检测与恢复</h4>\n<ul>\n<li>\n<p>检测</p>\n<ul>\n<li>\n<p>可设置两张表格来记录进程使用资源的情况</p>\n<ol>\n<li>等待资源表记录每个被<strong>阻塞进程等待</strong>的资源</li>\n<li>占用资源表记录每个进程<strong>占有</strong>的资源</li>\n</ol>\n<p>如果出现循环等待，则出现了死锁</p>\n</li>\n<li>\n<p>资源分配图</p>\n<p>看看这个理解理解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzI4NDM2L2FydGljbGUvZGV0YWlscy8xMTExMjM3Nzk=\">https://blog.csdn.net/qq_39328436/article/details/111123779</span></p>\n<ul>\n<li>\n<p>每个资源用一个<strong>方框</strong>表示</p>\n</li>\n<li>\n<p>方框中的<strong>黑圆点</strong>表示此资源类中的各个资源</p>\n</li>\n<li>\n<p>每个进程用一个<strong>圆圈</strong>表示</p>\n</li>\n<li>\n<p><strong>有向边</strong>表示进程申请资源和资源被分配情况</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230617104337516.png\" alt=\"image-20230617104337516\" /></p>\n<p>如果进程 - 资源分配图中无环路，此时系统没有发生死锁。</p>\n<p>如果进程 - 资源分配图中有环路，且每个资源都只有一个资源则发生死锁。</p>\n<p>如果进程 - 资源分配图中有环路，且所涉及资源有多个资源，则未必发生死锁。可以通过消去法来判断，消去既不阻塞其他进程又与其他进程相关的进程的所有请求边和分配边，得到一个孤立点。接着将等待资源的进程分配后再次消去，如果最后所有的进程都成为孤立点则是无死锁的，图是可完全简化的，否则图是不可以完全简化的。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>死锁定理</p>\n<ul>\n<li>系统为死锁状态的充分条件是：当且仅当该状态的进程 - 资源分配图是<strong>不可完全简化</strong>的。该充分条件称为死锁定理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>恢复</p>\n<ul>\n<li>资源剥夺法</li>\n<li>进程回退法</li>\n<li>进程撤销法</li>\n<li>系统重启法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"并发\"><a class=\"anchor\" href=\"#并发\">#</a> 并发</h3>\n<h4 id=\"bernstein条件\"><a class=\"anchor\" href=\"#bernstein条件\">#</a> Bernstein 条件</h4>\n<p>并发进程的无关性是进程的执行与时间无关的一个充分条件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212358786.png\" alt=\"image-20230618212358786\" /></p>\n<h4 id=\"peterson算法\"><a class=\"anchor\" href=\"#peterson算法\">#</a> peterson 算法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212455744.png\" alt=\"image-20230618212455744\" /></p>\n<p>举旗子，贴上对方的标签，如果对方举起且门上是对方的标签，则等待，否则进入</p>\n<h4 id=\"实现临界区管理的硬件设施\"><a class=\"anchor\" href=\"#实现临界区管理的硬件设施\">#</a> 实现临界区管理的硬件设施</h4>\n<ol>\n<li>关中断</li>\n<li>测试并建立指令</li>\n<li>对换指令</li>\n</ol>\n<h4 id=\"操作系统中并发问题解决方案的知识框架\"><a class=\"anchor\" href=\"#操作系统中并发问题解决方案的知识框架\">#</a> 操作系统中并发问题解决方案的知识框架</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618212639129.png\" alt=\"image-20230618212639129\" /></p>\n<h1 id=\"大题\"><a class=\"anchor\" href=\"#大题\">#</a> 大题</h1>\n<ol>\n<li>\n<p><strong>多道程序设计</strong></p>\n</li>\n<li>\n<p><strong>CPU 调度算法</strong></p>\n<p>周转时间：作业结束时间 - 作业开始时间</p>\n<p>提交给系统开始到执行完成获得结果为止的这段时间间隔称周转时间，应该使周转时间或平均周转时间尽可能短</p>\n<p>响应比：（等待时间 + 期待时间）/ 期待时间</p>\n<ol>\n<li><strong>FCFS (先来先服务) 非抢占</strong>\n<ul>\n<li>一个短进程可能不得不等待很长时间才能获得执行</li>\n<li>偏袒计算为主的进程\n<ul>\n<li>I/O 多的进程不得不等待计算为主的进程做完</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>RR (时间片轮转) 抢占</strong> Round-Robin\n<ul>\n<li>基于时钟做<strong>抢占式调度</strong></li>\n<li>以一个周期性间隔产生时钟中断，当中断发生时，当前正在运行的进程被置于就绪队列中，然后<strong>基于 FCFS 策略</strong>选择下一个就绪进程运行</li>\n<li>延长短进程的等待时间</li>\n</ul>\n</li>\n<li><strong>SPN (最短进程优先)</strong> Shortest process\n<ul>\n<li>非抢占，真正操作系统没有办法使用</li>\n<li>选择所需处理时间最短的进程</li>\n<li>短进程将会越过长进程，优先获得调度</li>\n</ul>\n</li>\n<li><strong>SRT (最短剩余时间优先)</strong> Shortest Remaining Time\n<ul>\n<li>抢占，真正操作系统没有办法使用</li>\n<li>调度器总是选择预期剩余时间更短的进程，当一个新进程加入就绪队列，他可能比当前运行的进程具有更短的剩余时间，只要该新进就绪，调度器就可能抢占当前正在运行的进程</li>\n</ul>\n</li>\n<li><strong>HRRF</strong> (最高响应比优先) Highest Response Ratio Next\n<ul>\n<li>非抢占，真正操作系统没有办法使用</li>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618082746653.png\" alt=\"image-20230618082746653\" /></li>\n</ul>\n</li>\n<li><strong>Feedback</strong> (多级反馈调度) 抢占\n<ul>\n<li>建立多个不同优先级的就绪进程队列</li>\n<li>多个就绪进程队列之间按照优先数调度</li>\n<li>高优先级的就绪进程，分配的时间片短</li>\n<li>单个就绪进程队列中的进程的优先数和时间片相同，按照先来先服务算法调度</li>\n<li><strong>2<sup>i</sup><strong> 的 i 是从</strong> 0</strong> 开始的，也就是<strong>最高优先级队列的时间片为 1</strong></li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5f16b9b43f43c1c52159e01c40a2d96e.JPG\" alt=\"5f16b9b43f43c1c52159e01c40a2d96e\" /></p>\n<p>RR, q = 4 时答案有问题，应为 ABBBBCDDDDBBBBDDDDBD</p>\n</li>\n<li>\n<p><strong>死锁避免银行家算法 ，死锁检测</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/D62410102ED0B8A94EE82582185FC8A9.png\" alt=\"D62410102ED0B8A94EE82582185FC8A9\" /></p>\n<p>做题思路：</p>\n<ol>\n<li>试探性地将 <code>available</code>  的资源分配给某个进程，满足它的 <code>Claim - Allocation</code>  的需求，进程结束后，归还所拥有的 <code>Allocation</code> ，系统未分配的资源增加，可分配资源为 <code>available + allocation</code> ，循环此过程，直至所有进程都被满足</li>\n<li>否则，系统将处于不安全状态</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620192317074.png\" alt=\"image-20230620192317074\" /></p>\n</li>\n<li>\n<p>连续分配，分区分配：适配算法，伙伴系统</p>\n<ol>\n<li>\n<p>可变分区存储</p>\n<p><strong>最先适应分配算法</strong>：</p>\n<ol>\n<li>最先适应就是从上向下查找，找到第一块区域放进去，将剩下的区域分割后仍作为空闲区。</li>\n<li>有利于大作业装入，但也使得内存低地址和高地址两端的分区利用不均衡，回收分区麻烦。</li>\n</ol>\n<p><strong>邻近适应分配算法</strong>：</p>\n<ol>\n<li>从上次查找结束的地方开始执行最先适应分配算法</li>\n<li>缩短平均查找时间，且存储空间利用率更均衡，不会使得小空闲区集中在内存一侧</li>\n</ol>\n<p><strong>最优适应分配算法</strong>：</p>\n<ol>\n<li>每次都是分配最接近需要使用大小的部分，会生成很多很小的内存内零头。</li>\n<li>通常会将空闲区按照长度递增顺序排列，等同于最先适应分配算法，查找时间最长</li>\n</ol>\n<p><strong>最坏适应分配算法</strong>：</p>\n<ol>\n<li>每次都是挑选最大的一块区域进行分配</li>\n<li>有利于中小型作业。</li>\n<li>可把空闲区按长度递减顺序排列，等同于最先适应分配算法。</li>\n</ol>\n<p><strong>快速适应分配算法</strong>：课本补充</p>\n<ol>\n<li>为经常用到的长度的空闲区设立单独的空闲区链表，查找非常快速</li>\n<li>归还内存空间时和邻近空闲区的合并复杂且耗时。</li>\n</ol>\n<p>最常用的是最先适应分配算法，其次是邻近适应分配算法和最优适应分配算法</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>地址转换计算：分页管理方式；分段管理方式。</strong></p>\n<ol>\n<li>\n<p>分页管理</p>\n<p>逻辑地址 = 页号 + 页面偏移</p>\n<p>物理地址 = 页架号（页框号） + 单元号（页内偏移)</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDI1NTc2NzgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102557678.png</span>&quot; alt=&quot;image-20230618102557678&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n</li>\n<li>\n<p>分段管理</p>\n<p>逻辑地址 = 段号 + 段内偏移</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDI1Mjc1NjQucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102527564.png</span>&quot; alt=&quot;image-20230618102527564&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n</li>\n<li>\n<p>段页式管理</p>\n<p>逻辑地址 = 段号 + 页号 + 单元号</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTgxMDMwMzM2MzMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618103033633.png</span>&quot; alt=&quot;image-20230618103033633&quot; style=&quot;zoom: 15%;&quot; /&gt;</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>页面置换算法</strong></p>\n<ol>\n<li>\n<p><strong>OPT 页面调度算法</strong>（Belady 算法）</p>\n<p>当要调入新页面时，首先淘汰以后不再访问的页，然后选择<strong>距现在最长时间后再访问</strong>的页。</p>\n</li>\n<li>\n<p><strong>先进先出页面调度算法</strong> FIFO-Belady 异常</p>\n<p>首先淘汰最先调入主存的那一页，或者说主存驻留时间最长的那一页 (常驻的除外)</p>\n</li>\n<li>\n<p><strong>最近最少用</strong> LRU-Least Recently Used</p>\n<p>淘汰<strong>最近一段时间较久未被访问</strong>的那一页，即那些刚被使用过的页面，可以马上还要被使用到。</p>\n</li>\n<li>\n<p><strong>最不常用</strong> LFU-Least Frequently Used</p>\n</li>\n<li>\n<p><strong>时钟 CLOCK</strong></p>\n<p>采用循环队列机制构造页面队列，形成了一个类似钟表面的环形表，队列指针则相当于钟表面上的表针，指向可能要淘汰的页</p>\n</li>\n</ol>\n</li>\n<li>\n<p>抖动现象，工作集（不考）</p>\n<ol>\n<li>\n<p><strong>MIN</strong></p>\n<p>进程在时刻 t 访问某页面，如果该页面不在主存中，导致一次缺页，把该页面装入一个空闲页框</p>\n</li>\n<li>\n<p><strong>工作集</strong></p>\n<p>向前看</p>\n<p>指 &quot;在某一段时间间隔内进程运行所需访问的页面集合&quot;，W (t，Δ) 表示在时刻 t-Δ 到时刻 t 之间 ( (t-Δ，t)) 所访问的页面集合，进程在时刻 t 的工作集</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>磁盘调度算法</strong></p>\n<ol>\n<li>\n<p>先来先服务 <strong>FCFS</strong></p>\n</li>\n<li>\n<p>最短查找时间优先 (最小短距离法) <strong>SSTF</strong>，Shortest Service Time First</p>\n</li>\n<li>\n<p>扫描算法<strong> SCAN</strong></p>\n<p>向一个方向，碰壁折返</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618101122512.png\" alt=\"image-20230618101122512\" /></p>\n</li>\n<li>\n<p>电梯调度 <strong>LOOK</strong></p>\n<p>不碰壁返回</p>\n</li>\n<li>\n<p><strong>C-LOOK</strong></p>\n<p>始终沿同一方向</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618102148934.png\" alt=\"image-20230618102148934\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>文件系统的计算</strong></p>\n<ol>\n<li>\n<p><strong>位示图</strong></p>\n<p>它将文件存储器的存储空间建立一张位示图，用以反映整个盘空间的分配情况。</p>\n<p>磁盘空间通常使用<strong>固定大小</strong>的块，<strong>可方便地用位示图管理，用若干字节构成一张位示图</strong>，其中每一字位对应一个物理块，字位的次序与块的相对次序一致，字位为‘1’表示相应块已占用，字位为‘0’表示该块空闲。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230618115411308.png\" alt=\"image-20230618115411308\" /></p>\n</li>\n<li>\n<p>空白文件目录</p>\n<p>这种方法将盘空间的一个未分配区域称为一个空白文件，系统为所有的空白文件建立一个目录，每个空白文件在这个目录中建立一个表目。</p>\n</li>\n<li>\n<p>空白块链：</p>\n<p>这种方法将盘上的所有空白块用链接指针或索引结构组织成一个空白文件。</p>\n</li>\n<li>\n<p>Linux 文件管理</p>\n<ol>\n<li>直接地址索引</li>\n<li>间接地址索引</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>PV 操作</strong></p>\n</li>\n<li>\n<p><strong>管程</strong></p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194458915.png\" alt=\"image-20230620194458915\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194639190.png\" alt=\"image-20230620194639190\" />、<img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620194758530.png\" alt=\"image-20230620194758530\" /></p>\n<p>分区分配：</p>\n<ol>\n<li>\n<p>静态分配：进程运行前申请</p>\n<p>实现简单，能够防止系统发生死锁，</p>\n<p>但会降低设备利用率</p>\n</li>\n<li>\n<p>动态分配：进程随用随申请</p>\n<p>提高设备利用率</p>\n</li>\n</ol>\n<h1 id=\"简答\"><a class=\"anchor\" href=\"#简答\">#</a> 简答</h1>\n<ol>\n<li>\n<p>试述系统调用的定义、实现原理，陷阱机制和绘制系统调用的处理过程，并阐述系统调用的处理逻辑</p>\n<ol>\n<li>\n<p>定义：操作系统实现的完成某种特定功能的过程，为所有运行程序提供访问操作系统的接口</p>\n</li>\n<li>\n<p>实现原理：</p>\n<ol>\n<li>编写系统调用服务例程；</li>\n<li>设计系统调用入口地址表，每个入口地址都指向一个系统调用的服务例程，有些包含系统调用自带参数的个数；</li>\n<li>开辟现场保护区，以保存发生系统调用时应用程序的处理器现场</li>\n</ol>\n</li>\n<li>\n<p>陷阱机制：操作系统实现系统调用功能的机制称为系统陷阱，由于系统调用而引起处理器中断的机器指令称为陷入指令，在用户态下执行时会由用户态转换到内核态</p>\n</li>\n<li>\n<p>处理逻辑：</p>\n<ol>\n<li>应用程序执行系统调用，产生中断转向内核态，进入陷阱处理程序；</li>\n<li>按功能号查询入口地址表，并转至对应服务例程执行；</li>\n<li>完成后退出中断，返回应用程序断点继续运行</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620232723536.png\" alt=\"image-20230620232723536\" /></p>\n</li>\n<li>\n<p>试写出进程映像包括哪些组成部分</p>\n<p>程序块、数据块、核心栈、用户栈、进程控制块</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjAyMzQ1NTA0NTYucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620234550456.png</span>&quot; alt=&quot;image-20230620234550456&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n</li>\n<li>\n<p>试述操作系统中三个最基础的抽象，并回答为什么要引入它们</p>\n<ol>\n<li>进程抽象：对正在运行的程序在处理器上操作的状态集的抽象</li>\n<li>虚存抽象：对内存的抽象，使用虚拟地址引用物理存储单元</li>\n<li>文件抽象：对设备的抽象，按名存取</li>\n<li>原因：防止硬件资源被应用程序滥用，屏蔽复杂的硬件资源操作细节，为应用程序提供使用硬<br />\n件资源的简单且一致的方法</li>\n</ol>\n</li>\n<li>\n<p>简述 IO 软件的四层结构</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616165104832.png\" alt=\"image-20230616165104832\" /></p>\n</li>\n<li>\n<p>简述虚存分页的原理，并画出流程图<br />\n原理：</p>\n<ol>\n<li>主存被划分成大小固定相等的块，每个进程也被分成同样大小的块；</li>\n<li>进程中称为页的块可以指定到内存中称为页框或者页框的可用块；</li>\n<li>操作系统为每个进程维护一个页表，给出该进程的每一页对应的页框的位置</li>\n</ol>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MjEwMDQxMjI5NDgucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621004122948.png</span>&quot; alt=&quot;image-20230621004122948&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n</li>\n<li>\n<p>create 系统调用的参数，返回值是什么，实现原理是什么</p>\n<p>实现原理：</p>\n<ol>\n<li>为新文件分配索引节点和活动索引节点，并把索引节点编号与文件分量名组成新目录项，记到目录中</li>\n<li>在新文件所对应的活动索引节点中设置初值，如置存取权限 i_mode，连接计数 i_nlink 等</li>\n<li>分配打开文件表项和系统打开文件表项，并为表项分配初值</li>\n<li>通过指针建立表项与活动索引节点间的联系。</li>\n<li>把文件描述字，即用户打开文件表中对应的表项序号返回给调用者</li>\n</ol>\n</li>\n<li>\n<p>open 系统调用的参数，返回值是什么，实现原理是什么</p>\n<p>参数：文件权限，文件路径名的字符串</p>\n<p>返回值：文件描述符</p>\n<p>实现原理：</p>\n<ol>\n<li>检索目录，把它的外存索引节点复制到活动索引节点中来</li>\n<li>根据参数 mode 核对权限，如果非法，则打开失败</li>\n<li>合法时，为文件分配用户打开文件表项和系统打开文件表项，并为表项分配初值</li>\n<li>通过指针建立表项与活动索引节点间的联系。</li>\n<li>把文件描述字，即用户打开文件表中对应的表项序号返回给调用者</li>\n</ol>\n</li>\n<li>\n<p>结合进程状态转换模型，解释操作系统是如何中断驱动的</p>\n<p>运行态：进程占用处理器运行</p>\n<p>就绪态：进程具备运行条件等待处理器运行</p>\n<p>等待态：又称阻塞态、睡眠态，进程由于等待资源、输入输出、信号等而不具备运行条件</p>\n<p>当操作系统遇到中断事件时，如键盘输入、I/O 操作完成时，它会将当前正在运行的进程切换到阻塞状态，并将 CPU 分配给一个已经处于就绪状态的进程。如果没有就绪状态的进程，则操作系统会将 CPU 保留在空闲状态，等待下一个进程变为就绪状态。<br />\n当事件完成后，操作系统会将被阻塞的进程重新切换到就绪状态，以便再次执行。在这个过程中，进程状态转换图的状态如下：</p>\n<ol>\n<li>从运行状态转换到阻塞状态：当操作系统接收到中断请求时，正在运行的进程会被中断和放入<br />\n阻塞状态。</li>\n<li>从阻塞状态转换到就绪状态：当操作系统完成中断请求时，进程将被重新放回就绪状态，等待<br />\n操作系统重新分配 CPU 时间。<br />\n通过这种方式，操作系统可以实现中断驱动的机制，以处理来自外部设备的事件或请求。该机制使<br />\n得操作系统可以在不阻塞当前进程的情况下同时响应多个事件，并实现了 CPU 的高效利用。</li>\n</ol>\n</li>\n<li>\n<p>画多级反馈队列的模型图、阐述多级反馈的原理，比 RR 的优点、缺陷以及改进方法</p>\n<p>原理：</p>\n<ul>\n<li>建立多个不同优先级的就绪进程队列：</li>\n<li>多个就绪进程队列之间按照优先数调度</li>\n<li>单个就绪进程队列中的进程的优先数和时间片相同，按照先来先服务算法调度</li>\n</ul>\n<p>比 RR 的优点：优先级课调整、时间片大小可调整、适应性强、响应时间短</p>\n<p>缺陷：长时间运行的进程，可能会一直在较低的优先级队列中等待；算法复杂度高</p>\n<p>改进方法：引入抢占式调度、加强进程优先级管理、动态调整时间片大小</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621003159068.png\" alt=\"image-20230621003159068\" /></p>\n</li>\n<li>\n<p>请画出经典的三进程状态模型及其状态转换图并解释状态之间各类转换关系的含义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621001913099.png\" alt=\"image-20230621001913099\" /></p>\n<p>运行态 - 等待态：等待资源、IO、信号量</p>\n<p>等待态 - 就绪态：资源满足、IO 结束、信号量完成</p>\n<p>就绪态 - 运行态：处理器空闲时选择高优先权进程抢占</p>\n<p>运行态 - 就绪态：运行时间片到，被高优先权进程抢占</p>\n</li>\n<li>\n<p>请画出经典的五进程状态模型及其状态转换图并解释状态之间各类转换关系的含义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621002239523.png\" alt=\"image-20230621002239523\" /></p>\n</li>\n<li>\n<p>请画出经典的七进程状态模型及其状态转换图并解释状态之间各类转换关系的含义</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230621001848022.png\" alt=\"image-20230621001848022\" /></p>\n</li>\n<li>\n<p>Spooling 的设计思想，并画出系统组织结构图</p>\n</li>\n</ol>\n<ul>\n<li>将独占设备改成共享设备的技术</li>\n<li>采用预输入、缓输出和井管理技术</li>\n<li>通过创建守护进程和特殊目录解决独占型设备的空占问题</li>\n<li>缓和 CPU 的高速性与 IO 设备低速性之间的矛盾，以空间换时间</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWFzZG8ub3NzLWNuLWhhbmd6aG91LmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMzA2MTYxNTQyMDg4NzMucG5n\">https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230616154208873.png</span>&quot; alt=&quot;image-20230616154208873&quot; style=&quot;zoom: 15%;&quot; /&gt;</p>\n<h1 id=\"选择题补充除慕课\"><a class=\"anchor\" href=\"#选择题补充除慕课\">#</a> 选择题补充（除慕课）</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172430646.png\" alt=\"image-20230620172430646\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620171158492.png\" alt=\"image-20230620171158492\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620171708030.png\" alt=\"image-20230620171708030\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172734904.png\" alt=\"image-20230620172734904\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172944360.png\" alt=\"image-20230620172944360\" /></p>\n<p>实际物理地址 = (段寄存器 &lt;&lt; 4) + 偏移地址</p>\n<p>访问到的是实地址。.</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620172958818.png\" alt=\"image-20230620172958818\" /></p>\n<p><img data-src=\"C:/Users/QUAS/Desktop/image-20230620173008103.png\" alt=\"image-20230620173008103\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173014448.png\" alt=\"image-20230620173014448\" /></p>\n<p>GDT LDT IDT（中断描述符表）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173020164.png\" alt=\"image-20230620173020164\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173209246.png\" alt=\"image-20230620173209246\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173216653.png\" alt=\"image-20230620173216653\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620173226806.png\" alt=\"image-20230620173226806\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230620183150718.png\" alt=\"image-20230620183150718\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机操作系统",
                "计算机操作系统"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/06/14/NJU/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "url": "https://quas-modo.github.io/2023/06/14/NJU/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "title": "数据管理基础期末复习",
            "date_published": "2023-06-14T12:14:57.000Z",
            "content_html": "<h1 id=\"第1章-绪论\"><a class=\"anchor\" href=\"#第1章-绪论\">#</a> 第 1 章 绪论</h1>\n<blockquote>\n<p>ppt 01-07</p>\n</blockquote>\n<h2 id=\"11-数据库系统概述\"><a class=\"anchor\" href=\"#11-数据库系统概述\">#</a> 1.1 数据库系统概述</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<ul>\n<li>\n<p>数据 data</p>\n<ul>\n<li><strong>数据库中存储的基本对象</strong>，是描述事物的<strong>符号记录</strong>。</li>\n<li>数据的含义称为语义 **，数据与其语义是不可分的。**\n<ul>\n<li>98 是一个数据</li>\n<li>可能是我的体重、数据库的分数，等等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据库 database</p>\n<ul>\n<li>简称 DB</li>\n<li>是<strong>长期储存</strong>在计算机内、<strong>有组织的</strong>、<strong>可共享的</strong>大量数据的集合。</li>\n<li>基本特点\n<ul>\n<li>数<strong>据按一定的数据模型组织、描述和储存</strong></li>\n<li>具有较小的冗余度（redundancy）</li>\n<li>较高的数据独立性（data independency）</li>\n<li>易扩展性（scalability）</li>\n<li>可为各种用户共享</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据库管理系统 DataBase Management System DBMS</p>\n<ul>\n<li>\n<p>DBMS 的功能（可能出选择）</p>\n<ul>\n<li>定义</li>\n<li>组织、存储和管理</li>\n<li>操纵</li>\n<li>管理事务和运行管理</li>\n<li>建立和维护</li>\n<li>其他，如不同数据库之间的互访和互操作功能</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618152757727.png\" alt=\"image-20220618152757727\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618152804060.png\" alt=\"image-20220618152804060\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618152812590.png\" alt=\"image-20220618152812590\" /></p>\n</li>\n<li>\n<p>数据库系统 DataBase System DBS</p>\n<ul>\n<li>\n<p>数据库系统的构成：</p>\n<ul>\n<li>数据库</li>\n<li>数据库管理系统（DBMS，及其应用开发工具）</li>\n<li>应用程序</li>\n<li>数据库管理员（DBA）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230606100430739.png\" alt=\"image-20230606100430739\" /></p>\n<h3 id=\"数据库基本特征简答\"><a class=\"anchor\" href=\"#数据库基本特征简答\">#</a> 数据库基本特征【简答】</h3>\n<ol>\n<li>\n<p>数据结构化</p>\n<ul>\n<li>数据内部结构化</li>\n<li>数据之间具有联系，整体是结构化的</li>\n</ul>\n</li>\n<li>\n<p>数据的共享性高，冗余度低且易扩充</p>\n</li>\n<li>\n<p>数据独立性高</p>\n<ul>\n<li>数据和程序相互不依赖</li>\n<li>物理独立性\n<ul>\n<li>数据库存储结构（物理结构）改变，管理员对模式 / 内模式映像作改变，可以使模式不变、外模式不变</li>\n</ul>\n</li>\n<li>逻辑独立性\n<ul>\n<li>模式（逻辑结构）改变，管理员对各个外模式 / 模式的映像作相应改变，可以使外模式保持不变，应用程序不变。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据由数据管理系统（DBMS）统一管理和控制</p>\n<ul>\n<li>安全性保护</li>\n<li>完整性检查</li>\n<li>并发控制</li>\n<li>数据库恢复</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用数据库系统有什么好处\"><a class=\"anchor\" href=\"#使用数据库系统有什么好处\">#</a> 使用数据库系统有什么好处？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612194832083.png\" alt=\"image-20230612194832083\" /></p>\n<h3 id=\"数据管理方式对比简答\"><a class=\"anchor\" href=\"#数据管理方式对比简答\">#</a> 数据管理方式对比【简答】</h3>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618151823240.png\" alt=\"image-20220618151823240\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618151837106.png\" alt=\"image-20220618151837106\" /></p>\n<h2 id=\"12-数据模型\"><a class=\"anchor\" href=\"#12-数据模型\">#</a> 1.2 数据模型</h2>\n<p><strong>概念</strong>：数据模型是<strong>对现实世界数据特征的抽象，用以抽象、表示和处理现实世界中的数据和信息。</strong></p>\n<p><strong>数据模型的组成要素</strong>：</p>\n<ol>\n<li>数据结构</li>\n<li>数据操作</li>\n<li>数据的完整性约束条件</li>\n</ol>\n<p><strong>分类</strong>：</p>\n<ul>\n<li>概念模型\n<ul>\n<li>按用户的观点来对数据和信息建模，用于数据库设计</li>\n<li>关系和实体</li>\n</ul>\n</li>\n<li>逻辑模型\n<ul>\n<li>按计算机系统的观点对数据建模，用于 DBMS 实现</li>\n<li>主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。</li>\n<li>表、索引、逻辑</li>\n</ul>\n</li>\n<li>物理模型\n<ul>\n<li>是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法。</li>\n<li>mysql 结构，物理设计</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"概念模型\"><a class=\"anchor\" href=\"#概念模型\">#</a> 概念模型</h3>\n<p>用于数据库设计， 用 E-R 图来描述现实世界的概念模型。</p>\n<p>概念：</p>\n<ol>\n<li><strong>实体</strong>\n<ul>\n<li>客观存在并可相互区别的事物称为实体。</li>\n<li>可以是具体的人、事、物或抽象的概念。</li>\n</ul>\n</li>\n<li><strong>属性</strong>\n<ul>\n<li>实体所具有的某一特性称为属性。</li>\n<li>一个实体可以由若干个属性来刻画。</li>\n</ul>\n</li>\n<li><strong>码</strong>\n<ul>\n<li>唯一标识实体的属性集称为码</li>\n</ul>\n</li>\n<li>实体型</li>\n<li>实体集</li>\n<li>联系\n<ul>\n<li>一对一、一对多、多对多</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"概念模型-e-r-图\"><a class=\"anchor\" href=\"#概念模型-e-r-图\">#</a> 概念模型 (<strong>E-R 图</strong>)</h4>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613141148229.png\" alt=\"image-20220613141148229\" /></p>\n<p>当然也有内部的联系<img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618153337416.png\" alt=\"image-20220618153337416\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613141227087.png\" alt=\"image-20220613141227087\" /></p>\n<ul>\n<li>联系也可以有属性</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619205929354.png\" alt=\"image-20220619205929354\" /></p>\n<ul>\n<li>实例</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIxMDAxMjQ4OS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210012489.png</span>&quot; alt=&quot;image-20220619210012489&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIxMDAyNjkzMS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210026931.png</span>&quot; alt=&quot;image-20220619210026931&quot;  /&gt;</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210045777.png\" alt=\"image-20220619210045777\" /></p>\n<ul>\n<li>IS-A 联系（考试可能会考）</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210102615.png\" alt=\"image-20220619210102615\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210139138.png\" alt=\"image-20220619210139138\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210155620.png\" alt=\"image-20220619210155620\" /></p>\n<ul>\n<li>Part-of / 独占 / 弱实体</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210343391.png\" alt=\"image-20220619210343391\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619210444963.png\" alt=\"image-20220619210444963\" /></p>\n<h3 id=\"逻辑模型\"><a class=\"anchor\" href=\"#逻辑模型\">#</a> 逻辑模型</h3>\n<p><strong>分类</strong>：</p>\n<ol>\n<li>\n<p>层次模型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200708933.png\" alt=\"image-20230612200708933\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200848830.png\" alt=\"image-20230612200848830\" /></p>\n</li>\n<li>\n<p>网状模型</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200735665.png\" alt=\"image-20230612200735665\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612200909254.png\" alt=\"image-20230612200909254\" /></p>\n</li>\n<li>\n<p>关系模型</p>\n<p>关系模型必须是规范化的：比如，关系的每个分量必须是一个不可分的数据项</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612201155877.png\" alt=\"image-20230612201155877\" /></p>\n<p><strong>关系模型的优缺点</strong></p>\n<p>（要知道，可能会考简答，后面的 nosql 跟关系型数据库的对比也提到了这个知识点）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612201118327.png\" alt=\"image-20230612201118327\" /></p>\n</li>\n<li>\n<p>面向对象数据模型</p>\n</li>\n</ol>\n<h2 id=\"13-数据库系统的结构\"><a class=\"anchor\" href=\"#13-数据库系统的结构\">#</a> 1.3 数据库系统的结构</h2>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613141759080.png\" alt=\"image-20220613141759080\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613141936109.png\" alt=\"image-20220613141936109\" /></p>\n<h3 id=\"三级结构\"><a class=\"anchor\" href=\"#三级结构\">#</a> 三级结构</h3>\n<ul>\n<li>\n<p>三级模式是对数据的三个抽象级别</p>\n</li>\n<li>\n<p>外模式：数据库用户的数据视图，是与某一应用有关的局部数据的逻辑表示</p>\n<p>和模式类似于 VO 和 PO 的关系</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618154425091.png\" alt=\"image-20220618154425091\" /></p>\n</li>\n<li>\n<p>模式：数据库中全体数据的逻辑结构和特征的描述</p>\n<ul>\n<li>公共视图</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618154358659.png\" alt=\"image-20220618154358659\" /></p>\n</li>\n<li>\n<p>内模式：是数据在数据库内部的表示方式</p>\n<ul>\n<li>唯一</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618154349794.png\" alt=\"image-20220618154349794\" /></p>\n</li>\n</ul>\n<h3 id=\"二级映像\"><a class=\"anchor\" href=\"#二级映像\">#</a> 二级映像</h3>\n<h4 id=\"外模式模式映像\"><a class=\"anchor\" href=\"#外模式模式映像\">#</a> 外模式 / 模式映像:</h4>\n<ul>\n<li>一对多的关系</li>\n<li>每一个外模式，数据库系统都有一个外模式／模式映象，定义外模式与模式之间的对应关系</li>\n<li>当模式改变时，数据库管理员对外模式／模式映象作相应改变，使外模式保持不变。应用程序是依据数据的外模式编写的，应用程序不必修改，<strong>保证了数据与程序的逻辑独立性</strong>，简称数据的逻辑独立性。</li>\n</ul>\n<h4 id=\"模式内模式映像\"><a class=\"anchor\" href=\"#模式内模式映像\">#</a> 模式 / 内模式映像：</h4>\n<ul>\n<li>一对一的关系</li>\n<li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。</li>\n<li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变。应用程序不受影响，<strong>保证了数据与程序的物理独立性</strong>。</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612201514043.png\" alt=\"image-20230612201514043\" /></p>\n<h2 id=\"14-数据库系统的组成\"><a class=\"anchor\" href=\"#14-数据库系统的组成\">#</a> 1.4 数据库系统的组成</h2>\n<p>看看就好</p>\n<ul>\n<li>\n<p>组成</p>\n<ul>\n<li>硬件、软件、人员</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613143304670.png\" alt=\"image-20220613143304670\" /></p>\n</li>\n</ul>\n<h1 id=\"第2章-关系数据库\"><a class=\"anchor\" href=\"#第2章-关系数据库\">#</a> 第 2 章 关系数据库</h1>\n<blockquote>\n<p>ppt 08-10</p>\n</blockquote>\n<h2 id=\"21-关系数据结构\"><a class=\"anchor\" href=\"#21-关系数据结构\">#</a> 2.1 关系数据结构</h2>\n<ul>\n<li>域</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613143856931.png\" alt=\"image-20220613143856931\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613144149712.png\" alt=\"image-20220613144149712\" /></p>\n<ul>\n<li>\n<p>笛卡尔积</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613143948194.png\" alt=\"image-20220613143948194\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613144028213.png\" alt=\"image-20220613144028213\" /></p>\n</li>\n<li>\n<p>关系</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618155133689.png\" alt=\"image-20220618155133689\" /></p>\n<ul>\n<li>\n<p>关系的类型：基本关系、查询表（查询结果对应的表）、视图表（虚表）</p>\n</li>\n<li>\n<p>基本关系的性质</p>\n<ul>\n<li>列是同质的：每一列中的分量是同一类型的数据，来自同一个域</li>\n<li>不同的列可出自同一个域，其中的每一列称为一个属性</li>\n<li>列和行的顺序无所谓</li>\n<li>任意两个元组的候选码不能相同</li>\n<li>分量必须取原子值</li>\n</ul>\n<p><strong>关系的每一个分量必须是一个不可分割项</strong></p>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613144012518.png\" alt=\"image-20220613144012518\" /></p>\n</li>\n<li>\n<p>码</p>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618155103797.png\" alt=\"image-20220618155103797\" /></p>\n<p>​\t这两张表就是<strong>数据</strong><br />\n​\t 而单独的一张表就称为<strong>数据对象</strong>，即人员表是一个<strong>数据对象</strong>，课程表也是一个<strong>数据对象</strong><br />\n而每张表中的每一行就称为<strong>数据元素</strong><br />\n而姓名，性别，身高，课程代号，课程名就称为<strong>数据项</strong></p>\n<ul>\n<li>\n<p>关系模式（型）</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618155345995.png\" alt=\"image-20220618155345995\" /></p>\n<p>关系模式是静态的，关系是动态的。关系是关系模式在某一时刻的状态或内容。</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613145054448.png\" alt=\"image-20220613145054448\" /></p>\n</li>\n<li>\n<p>关系数据库：所有关系的集合构成一个关系数据库</p>\n<ul>\n<li>关系数据库的型：关系数据库模式，是对关系数据库的描述</li>\n<li>关系数据库的值：关系模式在某一时刻对应的关系的集合，通常称为关系数据库</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2223-关系操作和完整性\"><a class=\"anchor\" href=\"#2223-关系操作和完整性\">#</a> 2.2&amp;2.3 关系操作和完整性</h2>\n<ul>\n<li>\n<p>查询</p>\n<ul>\n<li><strong>选择、投影、并、差、笛卡尔积</strong>是 5 种基本操作</li>\n</ul>\n</li>\n<li>\n<p>更新</p>\n<ul>\n<li>插入、修改、删除</li>\n</ul>\n</li>\n<li>\n<p><strong>实体完整性</strong>：primary key is <strong>NOT NULL</strong></p>\n<ul>\n<li>若属性（指一个或一组属性）A 是基本关系 R 的主属性，则 A 不能取空值（null value）</li>\n<li>空值就是 “不知道” 或 “不存在” 或 “无意义” 的值</li>\n<li>原因：如果取了空值，就说明存在某个不可标识的实体，即存在不可区分的实体。</li>\n</ul>\n</li>\n<li>\n<p>外码：Foreign Key</p>\n<ul>\n<li>R(K<sub>R</sub>,F, ... ) -&gt; S(K<sub>s</sub>, ...)</li>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609145205507.png\" alt=\"image-20230609145205507\" /></li>\n</ul>\n</li>\n<li>\n<p><strong>参照完整性</strong>: The value of foreign key is <strong>either</strong> NULL <strong>or</strong> in the referenced column<img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618155633343.png\" alt=\"image-20220618155633343\" /></p>\n<ul>\n<li>四种可能被破坏的情况\n<ul>\n<li>SC 表中增加一个元组，该元组的 Sno 属性的值在表 Student 中找不到一个元组，其 Sno 属性的值与之相等。</li>\n<li>修改 SC 表中的一个元组，修改后该元组的 Sno 属性的值在表 Student 中找不到一个元组，其 Sno 属性的值与之相等。</li>\n<li>从 Student 表中删除一个元组，造成 SC 表中某些元组的 Sno 属性的值在表 Student 中找不到一个元组，其 Sno 属性的值与之相等。</li>\n<li>修改 Student 表中一个元组的 Sno 属性，造成 SC 表中某些元组的 Sno 属性的值在表 Student 中找不到一个元组，其 Sno 属性的值与之相等 。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618171654106.png\" alt=\"image-20220618171654106\" /></p>\n<ul>\n<li><strong>用户定义的完整性</strong>：应用领域需要遵循的约束条件，体现了<strong>具体领域中的语义约束</strong>（就是字面意思）\n<ul>\n<li>比如学生不能没有姓名</li>\n<li>成绩的取值范围定义在 0-100 之间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"24-关系代数重点\"><a class=\"anchor\" href=\"#24-关系代数重点\">#</a> 2.4 关系代数（重点）</h2>\n<p><em>见 ppt ch10 或第五版课本 P47，做往年题和课后题！</em></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618155915523.png\" alt=\"image-20220618155915523\" /></p>\n<ul>\n<li>\n<p><strong>选择、投影、并、差、笛卡尔积</strong>是 5 种基本操作</p>\n</li>\n<li>\n<p>集合运算符从行的角度看，专门的关系运算符可从行、列的角度看</p>\n</li>\n<li>\n<p>选择、差、交、并是从行的角度来看，投影是从列的角度来看</p>\n<ul>\n<li>差是减去相同的行</li>\n<li>投影包含<strong>去重</strong>操作</li>\n</ul>\n</li>\n<li>\n<p>除和自然连接是在行、列的角度上看</p>\n</li>\n<li>\n<p>连接绝大多数是自然连接</p>\n<ul>\n<li>自然连接：一种特殊的等值连接，两个关系中比较的分量必须是<strong>相同的属性组</strong>，且在结果中把重复的属性去掉（<strong>去掉重复列</strong>）</li>\n</ul>\n</li>\n<li>\n<p>悬浮元组</p>\n<ul>\n<li>两个关系 R 和 S 在做自然连接时，关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，从而造成 R 中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组。</li>\n</ul>\n</li>\n<li>\n<p>外连接</p>\n<ul>\n<li>如果把悬浮元组也保存在结果关系中，而在其他属性上填空值 (Null)，就叫做外连接</li>\n<li>左外连接 (LEFT OUTER JOIN 或 LEFT JOIN)\n<ul>\n<li>只保留左边关系 R 中的悬浮元组</li>\n</ul>\n</li>\n<li>右外连接 (RIGHT OUTER JOIN 或 RIGHT JOIN)\n<ul>\n<li>只保留右边关系 S 中的悬浮元组</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2MDM1ODg4MS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618160358881.png</span>&quot; alt=&quot;image-20220618160358881&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2MDQyODk2OC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618160428968.png</span>&quot; alt=&quot;image-20220618160428968&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>除运算</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2MDcyNTAxMi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618160725012.png</span>&quot; alt=&quot;image-20220618160725012&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2MDgxMDkwMS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618160810901.png</span>&quot; alt=&quot;image-20220618160810901&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h1 id=\"第3章-关系数据库语言sql\"><a class=\"anchor\" href=\"#第3章-关系数据库语言sql\">#</a> 第 3 章 关系数据库语言 SQL</h1>\n<blockquote>\n<p>ppt 11-22</p>\n</blockquote>\n<h2 id=\"31-33-概述和数据定义操作直接看书\"><a class=\"anchor\" href=\"#31-33-概述和数据定义操作直接看书\">#</a> 3.1 - 3.3 概述和数据定义（操作直接看书）</h2>\n<ul>\n<li>\n<p>SQL Structured Query Language 结构化查询语言</p>\n</li>\n<li>\n<p>SQL 特点</p>\n<ul>\n<li><strong>综合统一</strong></li>\n<li><strong>高度非过程化</strong></li>\n<li><strong>面向集合的操作方式</strong></li>\n<li>以一种语法结构提供多种使用方式</li>\n<li>语言间接，易学易用</li>\n</ul>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th>SQL 功能</th>\n<th>动词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据查询</td>\n<td>SELECT</td>\n</tr>\n<tr>\n<td>数据定义</td>\n<td>CREATE, DROP, ALTER</td>\n</tr>\n<tr>\n<td>数据操纵</td>\n<td>INSERT, UPDATE, DELETE</td>\n</tr>\n<tr>\n<td>数据控制</td>\n<td>GRANT, REVOKE</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609171534179.png\" alt=\"image-20230609171534179\" /></p>\n</li>\n<li>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609171423158.png\" alt=\"image-20230609171423158\" /></p>\n</li>\n<li>\n<p>层次化的数据库对象命名机制</p>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618161355132.png\" alt=\"image-20220618161355132\" /></p>\n<ul>\n<li>Drop 的 Restrict 和 Cascade</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618161502660.png\" alt=\"image-20220618161502660\" /></p>\n<ul>\n<li>数据字典</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618161618365.png\" alt=\"image-20220618161618365\" /></p>\n<h2 id=\"34-数据查询必考\"><a class=\"anchor\" href=\"#34-数据查询必考\">#</a> 3.4 数据查询（必考）</h2>\n<ul>\n<li>基本语法</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618161829326.png\" alt=\"image-20220618161829326\" /></p>\n<ul>\n<li>剩余见课后习题和往年卷！</li>\n</ul>\n<h3 id=\"单表查询\"><a class=\"anchor\" href=\"#单表查询\">#</a> 单表查询</h3>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613210755589.png\" alt=\"img\" /></p>\n<ul>\n<li>聚集、GROUP BY 要掌握</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220620232055025.png\" alt=\"image-20220620232055025\" /></p>\n<ul>\n<li><em>一定会出一道写 sql 的题</em></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ALL</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DISTINCT</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>目标列表达式<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>目标列表达式<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">FROM</span> <span class=\"token operator\">&lt;</span>tableName<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>tableName<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>select_caluse<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>alias<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span>conditional_expression<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>colName<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">HAVING</span> <span class=\"token operator\">&lt;</span>conditional_expression<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span>colName<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sno<span class=\"token punctuation\">,</span> Sdept <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Ssex<span class=\"token punctuation\">,</span> Sage<span class=\"token punctuation\">,</span> Sdept <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 与上一行等价 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> <span class=\"token number\">2014</span><span class=\"token operator\">-</span>Sage <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可以存在表达式 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> <span class=\"token string\">'Year of Birth: '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2014</span><span class=\"token operator\">-</span>Sage<span class=\"token punctuation\">,</span> LOWER<span class=\"token punctuation\">(</span>Sdept<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname NAME<span class=\"token punctuation\">,</span><span class=\"token string\">'Year of Birth:'</span> BIRTH<span class=\"token punctuation\">,</span> <span class=\"token number\">2014</span><span class=\"token operator\">-</span>Sage BIRTHDAY<span class=\"token punctuation\">,</span> LOWER<span class=\"token punctuation\">(</span>Sdept<span class=\"token punctuation\">)</span> DEPARTMENT <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 查询结果表头为别名，要求用小写字母表示所在系 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">ALL</span> Sno <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">SELECT</span> Sno <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 默认时 ALL*/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> Sno <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 消除取值重复的行 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/* 比较大小 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept<span class=\"token operator\">=</span>‘CS’<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sage <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> Sn <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/* 确定范围 */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sdept<span class=\"token punctuation\">,</span> Sage <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">20</span> <span class=\"token operator\">AND</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sdept<span class=\"token punctuation\">,</span> Sage <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">NOT</span> <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">20</span> <span class=\"token operator\">AND</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/* 确定集合 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>              </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'IS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/* 字符匹配 */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">LIKE</span> <span class=\"token string\">'201215121'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 匹配固定字符串 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/* 等价于 */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> <span class=\"token string\">'201215121'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sno<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">LIKE</span> <span class=\"token string\">'刘%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* % 匹配任意长度（长度可以为 0）字符串 */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">LIKE</span> <span class=\"token string\">'欧阳_'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* _ 匹配任意单个字符 */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname，Sno <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">LIKE</span> <span class=\"token string\">'_阳%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sno<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">NOT</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'刘%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*  查询所有不姓刘的学生姓名、学号和性别。 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">SELECT</span> Cno，Ccredit <span class=\"token keyword\">FROM</span> Course</pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">WHERE</span> Cname <span class=\"token operator\">LIKE</span> <span class=\"token string\">'DB\\_Design'</span> <span class=\"token keyword\">ESCAPE</span> <span class=\"token string\">'\\ '</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ESCAPE '＼' 表示 '＼' 为换码字符 */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Course</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">WHERE</span> Cname <span class=\"token operator\">LIKE</span> <span class=\"token string\">'DB\\_%i_ _'</span> <span class=\"token keyword\">ESCAPE</span> <span class=\"token string\">'\\ '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">/* 涉及空值的计算 */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Cno <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno，Cno <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 涉及空值的查询：IS (NOT) NULL: IS 不可换成 = */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">/* 多重条件查询 */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">/* AND 的优先级高于 OR 可以用括号改变优先级 */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'CS'</span> <span class=\"token operator\">AND</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'CS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Ssex <span class=\"token keyword\">FROM</span> Student </pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">' CS'</span> <span class=\"token operator\">OR</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'MA'</span> <span class=\"token operator\">OR</span> Sdept<span class=\"token operator\">=</span> <span class=\"token string\">'IS'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">/* 可以按一个或多个属性列排序</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>升序：ASC; 降序：DESC; 缺省值为升序</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>对于空值，排序时显示的次序由具体系统实现来决定 */</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Grade <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Grade <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">/*Sdept 按升序排列，学生年龄按降序排列 */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Sdept<span class=\"token punctuation\">,</span> Sage <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\">/* 聚集函数：</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>统计元组个数</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    COUNT (*)</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>统计一列中值的个数</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    COUNT ([DISTINCT|ALL] &lt; 列名 >) DISTINC 取消重复值</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>计算一列值的总和（此列必须为数值型）</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\tSUM ([DISTINCT|ALL] &lt; 列名 >)\t</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>计算一列值的平均值（此列必须为数值型）</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tAVG ([DISTINCT|ALL] &lt; 列名 >)</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>求一列中的最大值和最小值</pre></td></tr><tr><td data-num=\"107\"></td><td><pre> \tMAX ([DISTINCT|ALL] &lt; 列名 >)</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tMIN ([DISTINCT|ALL] &lt; 列名 >) */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DISTINCT</span> Sno<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">WHERE</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token keyword\">WHERE</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>Ccredit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">,</span> Course </pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> <span class=\"token string\">'201215012'</span> <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> Course<span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">/* GROUP BY 子句分组：</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>细化聚集函数的作用对象；也就是说 GROUP BY 是和聚集函数配套使用的</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>如果未对查询结果分组，聚集函数将作用于整个查询结果</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>* 对查询结果分组后，聚集函数将分别作用于每个组 *</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>按指定的一列或多列值分组，值相等的为一组 */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token keyword\">SELECT</span> Cno<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Cno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\">/* HAVING 短语与 WHERE 子句的 区别：</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t作用对象不同</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tWHERE 子句作用于基表或视图，从中选择满足条件的元组</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tHAVING 短语作用于组，从中选择满足条件的组。*/</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno</pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC </pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno</pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 查询平均成绩大于等于 90 分的学生学号和平均成绩 */</span></pre></td></tr></table></figure><h3 id=\"连接查询\"><a class=\"anchor\" href=\"#连接查询\">#</a> 连接查询</h3>\n<ul>\n<li>连接要知道</li>\n<li>连接操作不用看，知道有这么回事就行</li>\n</ul>\n<p><code>[&lt;表名1&gt;.]&lt;列名1&gt;&lt;比较运算符&gt;[&lt;表名2&gt;.]&lt;列名2&gt;</code></p>\n<p>若在等值连接中把目标列中重复的属性列去掉则为<strong>自然连接</strong>。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* [例 3.49] 查询每个学生及其选修课程的情况 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> SC<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span> SC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 对上例使用自然连接 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span>Sname<span class=\"token punctuation\">,</span>Ssex<span class=\"token punctuation\">,</span>Sage<span class=\"token punctuation\">,</span>Sd ept<span class=\"token punctuation\">,</span>Cno<span class=\"token punctuation\">,</span>Grade <span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span>SC</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*WHERE 子句由连接谓词和选择谓词组成 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> Sname </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span> SC</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno<span class=\"token operator\">=</span><span class=\"token string\">'2'</span> <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Grade <span class=\"token operator\">></span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">,</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">.</span>Cpno <span class=\"token keyword\">FROM</span> Course <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">,</span> Course <span class=\"token keyword\">SECOND</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">.</span>Cpno <span class=\"token operator\">=</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* 自身连接：查询每一门课的间接先修课（即先修课的 先修课）*/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">,</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">.</span>Cpno</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">FROM</span> Course <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">,</span> Course <span class=\"token keyword\">SECOND</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">FIRST</span><span class=\"token punctuation\">.</span>Cpno <span class=\"token operator\">=</span> <span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/* [例 3.53] 改写 [例 3.49] </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t左外连接：列出左表中所有的元组 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Ssex<span class=\"token punctuation\">,</span> Sage<span class=\"token punctuation\">,</span> Sdept<span class=\"token punctuation\">,</span> Cno<span class=\"token punctuation\">,</span> Grade</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUT</span> <span class=\"token keyword\">JOIN</span> SC <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>Sno<span class=\"token operator\">=</span>SC<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/* [例 3.54] 查询每个学生的学号、姓名、选修 的课程名及成绩 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Cname<span class=\"token punctuation\">,</span> Grade</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span> SC<span class=\"token punctuation\">,</span> Course <span class=\"token comment\">/* 多表连接 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> Course<span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"嵌套查询\"><a class=\"anchor\" href=\"#嵌套查询\">#</a> 嵌套查询</h3>\n<ul>\n<li>\n<p>上层的查询块称为外层查询或父查询，下层查询块称为内层查询或子查询。</p>\n<p>SQL 语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。</p>\n<p>子查询的限制：*<strong> 不能使用  <code>ORDER BY</code>  子句 *</strong>。有些嵌套查询可以用连接运算替代，<strong>谨慎使用嵌套查询</strong>。</p>\n</li>\n<li>\n<p>嵌套的部分不做要求</p>\n</li>\n<li>\n<p>但是考试写嵌套没有问题</p>\n</li>\n<li>\n<p>带谓词的子查询看一看就行</p>\n</li>\n<li>\n<p><strong>用聚集函数实现子查询通常比直接用 ANY 或 ALL 查询效率要高</strong></p>\n</li>\n<li>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611093819977.png\" alt=\"image-20230611093819977\" /></p>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># [例 3.55] 查询与 “刘晨” 在同一个系学习的学生。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 不相关子查询：子查询的查询条件不依赖于父查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Sdept</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> Sdept</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">=</span> <span class=\"token string\">'刘晨'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 在 [例 3.55] 中，由于一个学生只可能在一个系学习，则 可以用 = 代替 IN：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Sdept</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> Sdept</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> Sname <span class=\"token operator\">=</span> <span class=\"token string\">'刘晨'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 上例的解法 2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">SELECT</span> S1<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> S1<span class=\"token punctuation\">.</span>Sname<span class=\"token punctuation\">,</span> S1<span class=\"token punctuation\">.</span>Sdept</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">FROM</span> Student S1<span class=\"token punctuation\">,</span> Student S2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">WHERE</span> S1<span class=\"token punctuation\">.</span>Sdept <span class=\"token operator\">=</span> S2<span class=\"token punctuation\">.</span>Sdept <span class=\"token operator\">AND</span> S2<span class=\"token punctuation\">.</span>Sname <span class=\"token operator\">=</span> <span class=\"token string\">'刘晨'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 自身链接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">SELECT</span> S1<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> S1<span class=\"token punctuation\">.</span>Sname<span class=\"token punctuation\">,</span> S1<span class=\"token punctuation\">.</span>Sdept</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">FROM</span> Student S1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     Student S2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">WHERE</span> S1<span class=\"token punctuation\">.</span>Sdept <span class=\"token operator\">=</span> S2<span class=\"token punctuation\">.</span>Sdept</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token operator\">AND</span> S2<span class=\"token punctuation\">.</span>Sname <span class=\"token operator\">=</span> <span class=\"token string\">'刘晨'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># [例 3.56] 查询选修了课程名为 “信息系统” 的学生学号和姓名</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> Sno</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> Cno <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> Cno</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">FROM</span> Course</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> Cname <span class=\"token operator\">=</span> <span class=\"token string\">'信息系统'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># 用连接查询实现 [例 3.56]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     SC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     Course</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> Course<span class=\"token punctuation\">.</span>Cno</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token operator\">AND</span> Course<span class=\"token punctuation\">.</span>Cname <span class=\"token operator\">=</span> <span class=\"token string\">'信息系统'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># [例 3.57] 找出每个学生超过他选修课程平均成绩的课程号。</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># 相关子查询：子查询依赖于父查询（与父查询相关），需要反复求值</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Cno</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">FROM</span> SC x</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> AVG（Grade） </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">FROM</span> SC y </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">WHERE</span> y<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># [例 3.58] 查询非计算机科学系中比 计算机科学系任意一个学生年龄小的学生姓名和年龄</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 带有 ANY 或 ALL 谓词的子查询</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">ANY</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> Sage </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                  <span class=\"token keyword\">FROM</span> Student </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                  <span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">' CS '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token operator\">AND</span> Sdept <span class=\"token operator\">&lt;></span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># 用聚集函数实现 [例 3.58]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>Sage<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>             <span class=\"token keyword\">FROM</span> Student </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>             <span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'CS '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token operator\">AND</span> Sdept <span class=\"token operator\">&lt;></span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># [例 3.59] 查询非计算机科学系 中比计算机科学系所有学生年龄都小的学生姓名及年龄。</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># 方法一：用 ALL 谓词</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">ALL</span> </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> Sage </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>             <span class=\"token keyword\">FROM</span> Student </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>             <span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token operator\">AND</span> Sdept <span class=\"token operator\">&lt;></span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\"># 方法二：用聚集函数</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Sage<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>             <span class=\"token keyword\">FROM</span> Student </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>             <span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token operator\">AND</span> Sdept <span class=\"token operator\">&lt;></span> <span class=\"token string\">'CS'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\"># [例 3.60] 查询所有选修了 1 号课程的学生姓名。</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\"># 带有 EXIST 谓词的子查询不返回任何数据，只产生逻辑真值 “true” 或逻辑假植 “false”</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname</pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>              <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>              <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>              <span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">AND</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">#  [例 3.61] 查询没有选修 1 号课程的学生姓名。</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname</pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>          <span class=\"token operator\">AND</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\"># [例 3.55] 查询与 “刘晨” 在同一 个系学习的学生。</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Sdept</pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">FROM</span> Student S1</pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>              <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>              <span class=\"token keyword\">FROM</span> Student S2</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>              <span class=\"token keyword\">WHERE</span> S2<span class=\"token punctuation\">.</span>Sdept <span class=\"token operator\">=</span> S1<span class=\"token punctuation\">.</span>Sdept</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>              <span class=\"token operator\">AND</span> S2<span class=\"token punctuation\">.</span>Sname <span class=\"token operator\">=</span> <span class=\"token string\">'刘晨'</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\"># [例 3.62] 查询选修了全部课程的学生姓名。</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\"># 存在量词表示全称量词</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\"># 即，不存在没有修过的课程</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname</pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">FROM</span> Course</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            \t<span class=\"token keyword\">FROM</span> SC </pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            \t<span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">.</span>Sno </pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            \t\t<span class=\"token operator\">AND</span> Cno <span class=\"token operator\">=</span> Course<span class=\"token punctuation\">.</span>Cno</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\"># [例 3.62] 改</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname</pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> Sno</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">Group</span> <span class=\"token keyword\">by</span> Sno</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">HAVING</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> course<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\"># [例 3.63] 查询至少选修了学生 201215122 选修的全部课程的学生号码。</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\"># 不存在这样的课程 y，学生 201215122 选修了 y，而学生 x 没有选。</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> Sno</pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token keyword\">FROM</span> SC SCX</pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\"># 学生 201215122 选修了而学生 x 没有选的课程</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token keyword\">FROM</span> SC SCY</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">WHERE</span> SCY<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> <span class=\"token string\">'201215122'</span> <span class=\"token operator\">AND</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>  <span class=\"token comment\"># 学生 x 选修的课程 y</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                <span class=\"token keyword\">FROM</span> SC SCZ</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                <span class=\"token keyword\">WHERE</span> SCZ<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SCX<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                  <span class=\"token operator\">AND</span> SCZ<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> SCY<span class=\"token punctuation\">.</span>Cno</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"集合操作\"><a class=\"anchor\" href=\"#集合操作\">#</a> 集合操作</h3>\n<ul>\n<li>\n<p>并操作 UNION<br />\n 交操作 INTERSECT<br />\n 差操作 EXCEPT</p>\n</li>\n<li>\n<p>UNION：将多个查询结果合并起来时，系统自动去掉重复元组<br />\n UNION ALL：将多个查询结果合并起来时，保留重复元组</p>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2NTMzNDk3NC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165334974.png</span>&quot; alt=&quot;image-20220618165334974&quot;  /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2NTM0NTI1NC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165345254.png</span>&quot; alt=&quot;image-20220618165345254&quot;  /&gt;</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165424605.png\" alt=\"image-20220618165424605\" /></p>\n<h3 id=\"基于派生表的查询\"><a class=\"anchor\" href=\"#基于派生表的查询\">#</a> 基于派生表的查询</h3>\n<p>通过 FROM 子句生成派生标的时候，AS 关键字可以省略，<strong>派生关系必须指定一个别名</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Cno</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">AS</span> Avg_sc<span class=\"token punctuation\">(</span>avg_sno<span class=\"token punctuation\">,</span> avg_grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">WHERE</span> SC<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> Avg_sc<span class=\"token punctuation\">.</span>avg_sno <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Grade <span class=\"token operator\">>=</span> Avg_sc<span class=\"token punctuation\">.</span>avg_grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sname</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> Sno <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> Cno<span class=\"token operator\">=</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SC1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">WHERE</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token operator\">=</span>SC1<span class=\"token punctuation\">.</span>Sno</pre></td></tr></table></figure><h2 id=\"35-数据更新\"><a class=\"anchor\" href=\"#35-数据更新\">#</a> 3.5 数据更新</h2>\n<ul>\n<li>插入和修改和删除</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">INTO</span> <span class=\"token operator\">&lt;</span>表名<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>属性列<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>属性列<span class=\"token number\">2</span> <span class=\"token operator\">></span>…<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>常量<span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>常量<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span>… <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">UPDATE</span>  <span class=\"token operator\">&lt;</span>表名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">SET</span>  <span class=\"token operator\">&lt;</span>列名<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>表达式<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>列名<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>表达式<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>…</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span>条件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">DELETE</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">FROM</span>     <span class=\"token operator\">&lt;</span>表名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span>条件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INTO</span> Student<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span> Cno<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'201215128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">INSERT</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">INTO</span> Dept_age<span class=\"token punctuation\">(</span>Sdept<span class=\"token punctuation\">,</span> Avg_age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sdept<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Sage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sdept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Student</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">SET</span> Sage <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> <span class=\"token string\">'211250106'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">DELETE</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">From</span> Student</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sno <span class=\"token operator\">=</span> <span class=\"token string\">'211250106'</span></pre></td></tr></table></figure><p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165546535.png\" alt=\"image-20220618165546535\" /></p>\n<h2 id=\"36-空值的处理重要\"><a class=\"anchor\" href=\"#36-空值的处理重要\">#</a> 3.6 空值的处理（重要）</h2>\n<ul>\n<li>空值就是 “不知道” 或 “不存在” 或 “无意义” 的值。</li>\n<li>一般有以下几种情况：\n<ul>\n<li>该属性应该有一个值，但目前不知道它的具体值<br />\n该属性不应该有值<br />\n由于某种原因不便于填写，或还没有赋值</li>\n</ul>\n</li>\n</ul>\n<p>判断空值用  <code>IS NULL</code>  或  <code>IS NOT NULL</code> 。</p>\n<p>有  <code>NOT NULL</code>  限制的  <code>UNIQUE</code>  属性不能为空值，码不能为空值。</p>\n<p>空值与其他值的算术运算结果为空值，空值与其他值的比较运算结果为  <code>UNKNOWN</code> 。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># [例 3.83] 选出选修 1 号课程的不及格的学生以及缺考的学生。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">AND</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">UNION</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">AND</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">WHERE</span> Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token operator\">AND</span> <span class=\"token punctuation\">(</span>Grade <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token operator\">OR</span> Grade <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>属性定义（或者域定义）中\n<ul>\n<li>有 NOT NULL 约束条件的不能取空值<br />\n加了 UNIQUE 限制的属性不能取空值<br />\n码属性不能取空值</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2NTgxNDMxMC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165814310.png</span>&quot; alt=&quot;image-20220618165814310&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE2NTgyMTg3Ni5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618165821876.png</span>&quot; alt=&quot;image-20220618165821876&quot;  /&gt;</p>\n<h2 id=\"37-视图\"><a class=\"anchor\" href=\"#37-视图\">#</a> 3.7 视图</h2>\n<ul>\n<li>\n<p>基本表定义：基本表式独立存在的表，在 SQL 中一个关系就对应一个表</p>\n</li>\n<li>\n<p>视图定义：<strong>视图是由数据库中的一个表或多个表导出的虚拟表</strong>，其作用是方便用户对数据的操作。</p>\n</li>\n<li>\n<p>基本表和视图的区别和联系：</p>\n<ul>\n<li>\n<p>视图在概念上与基本表等同，用户可以像基本表一样使用视图</p>\n</li>\n<li>\n<p><strong>只存放视图的定义</strong>，不存放视图对应的数据</p>\n</li>\n<li>\n<p>基表中的数据发生变化，从视图中查询出的数据也随之改变</p>\n</li>\n</ul>\n</li>\n<li>\n<p>视图的作用</p>\n<ul>\n<li>能够简化用户的操作（视图中数据不是直接来自基本表时，能简化）</li>\n<li>能使用户以多种角度看待同一数据</li>\n<li>对重构数据库提供了一定程度的<strong>逻辑独立性</strong></li>\n<li>能够对机密数据<strong>提供安全保护</strong>（每个用户只能看到他有权看到的数据）</li>\n<li>适当的利用视图可以更清晰的表达查询<img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618170303260.png\" alt=\"image-20220618170303260\" /></li>\n</ul>\n</li>\n<li>\n<p>哪些可以更新？</p>\n</li>\n<li>\n<p>行列子集视图</p>\n<ul>\n<li>若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，我们称这类视图为行列子集视图</li>\n</ul>\n</li>\n<li>\n<p>非行列子集视图</p>\n</li>\n<li>\n<p>视图不仅可以建立在一个或多个基本表上，也可以建立在一个或多个已定义好的视图上，或建立在基本表与视图上</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> <span class=\"token operator\">&lt;</span>视图名<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>列名<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&lt;</span>列名<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> <span class=\"token operator\">&lt;</span>子查询<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># WITH CKECK OPTION 表示对视图进行更新操作时要保证更新后的行满足谓词条件（即子查询中的条件，即子查询中的 WHERE）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 子查询可以是任意的 SELECT 语句，是否可以含有 ORDER BY 子句和 DISTINCT 短语，则决定具体系统的实现。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># [例 3.85] 建立信息系学生 的视图，并要求进行修改 和插入操作时仍需保证该 视图只有信息系的学生。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> IS_Student <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'IS'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># [例 3.86] 建立信息系选修了 1 号课程的学生的视图（包括学号、 姓名、成绩）。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> IS_S1<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">SELECT</span> Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Grade</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     SC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'IS'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token operator\">AND</span> Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># [例 3.87] 建立信息系选修 了 1 号课程且成绩在 90 分 以上的学生的视图。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> IS_S2 <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Grade</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">FROM</span> IS_S1</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">WHERE</span> Grade <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># [例 3.88] 定义一个反映学 生出生年份的视图。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> BT_S<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> Sbirth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sname<span class=\"token punctuation\">,</span> <span class=\"token number\">2014</span> <span class=\"token operator\">-</span> Sage</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">FROM</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># [例 3.89] 将学生的学号及平 均成绩定义为一个视图</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> S_G<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span> Gavg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># [例 3.90] 将 Student 表中所有女生记 录定义为一个视图</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 修改基表 Student 的结构后，Student 表与 F_Student 视图 的映象关系被破坏，导致该视图不能正确工作。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> F_Student<span class=\"token punctuation\">(</span>F_Sno<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token comment\">/* 不指定属性列 */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">WHERE</span> Ssex <span class=\"token operator\">=</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token operator\">&lt;</span>视图名<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># [例 3.91] 删除视图 BT_S 和 IS_S1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> BT_S<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 成功执行 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> IS_S1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 拒绝执行 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> IS_S1 <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 成功执行</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># [例 3.92] 在信息系学生的视 图中找出年龄小于 20 岁的学生。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> IS_Student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 视图消解转换后的查询语句为：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> Sage</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> Student</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">WHERE</span> Sdept <span class=\"token operator\">=</span> <span class=\"token string\">'IS'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">AND</span> Sage <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># [例 3.93] 查询选修了 1 号课 程的信息系学生</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">SELECT</span> IS_Student<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span> Sname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">FROM</span> IS_Student<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     SC</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">WHERE</span> IS_Student<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> SC<span class=\"token punctuation\">.</span>Sno</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token operator\">AND</span> SC<span class=\"token punctuation\">.</span>Cno <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># [例 3.94] 在 S_G 视图中查询平均成 绩在 90 分以上的学生学号和平均成绩</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">FROM</span> S_G</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">WHERE</span> Gavg <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># S_G 视图的子查询定义：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 错误：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">90</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 正确：</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">HAVING</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 或者使用派生表</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> Sno<span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Sno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> S_G<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span> Gavg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">WHERE</span> Gavg <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"第4章-数据库安全性\"><a class=\"anchor\" href=\"#第4章-数据库安全性\">#</a> 第 4 章 数据库安全性</h1>\n<blockquote>\n<p>ppt 23-25</p>\n</blockquote>\n<p>数据库的安全性是<strong>指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609212932647.png\" alt=\"image-20230609212932647\" /></p>\n<p>C1 进行自主存取控制 DAC</p>\n<p>C2 是安全产品的最低档次</p>\n<p>B1 实施强制存取控制 MAC，是真正意义上的安全产品</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609213543484.png\" alt=\"image-20230609213543484\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609213523289.png\" alt=\"image-20230609213523289\" /></p>\n<ul>\n<li>\n<p>存取控制（机制）</p>\n<ul>\n<li>\n<p>定义用户权限：用户对某一数据对象的操作权力称为权限，<strong>DBMS 提供适当的语言来定义用户权限，存放在数据字典中</strong></p>\n</li>\n<li>\n<p>合法权限检查：<strong>用户发出存取数据库操作请求，DBMS 进行合法权限检查</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612220056903.png\" alt=\"image-20230612220056903\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>自主存取控制（DAC Discretionary Access ControlS）</p>\n<ul>\n<li>C2 级</li>\n<li>用户对不同的数据对象有不同的存取权限</li>\n<li>不同的用户对同一对象也有不同的权限</li>\n<li>用户还可将其拥有的存取权限转授给其他用户</li>\n<li>使用 SQL 中的 <code>GRANT</code>  和 <code>REVOKE</code>\n<ul>\n<li>定义各个用户对不同数据对象的存取权限。当用户对数据库访问时首先检查用户的存取权限。防止不合法用户对数据库的存取</li>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609214048305.png\" alt=\"image-20230609214048305\" /></li>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609214115426.png\" alt=\"image-20230609214115426\" /></li>\n</ul>\n</li>\n<li>创建数据库模式的权限\n<ul>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609214245214.png\" alt=\"image-20230609214245214\" /></li>\n<li><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609214253774.png\" alt=\"image-20230609214253774\" /></li>\n</ul>\n</li>\n<li>数据库角色\n<ul>\n<li>CREATE</li>\n<li>GRANT</li>\n<li>REVOKE</li>\n</ul>\n</li>\n<li>自主存取控制缺点\n<ul>\n<li>可能存在数据的 “无意泄露 “，数据本身并无安全性标记</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>强制存取控制 （MAC)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612220035959.png\" alt=\"image-20230612220035959\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230612220234134.png\" alt=\"image-20230612220234134\" /></p>\n<ul>\n<li>B1 级，保证更高程度的安全性</li>\n<li>每一个数据对象被标以一定的密级</li>\n<li>每一个用户也被授予某一个级别的许可证</li>\n<li>对于任意一个对象，只有具有合法许可证的用户才可以存取</li>\n<li>用户不能直接感知或进行控制</li>\n<li>适用于对数据有严格而固定密级分类的部门\n<ul>\n<li>军事部门</li>\n<li>政府部门</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MTMzMjM4MC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618171332380.png</span>&quot; alt=&quot;image-20220618171332380&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MTI0NDU2NS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618171244565.png</span>&quot; alt=&quot;image-20220618171244565&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MTI1NTAzOS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618171255039.png</span>&quot; alt=&quot;image-20220618171255039&quot;  /&gt;</p>\n<p>强制存取规则为什么要这么设计，有什么内容？要知道</p>\n<ul>\n<li>高等级才能知晓，低等级才能修改。（低级别可以通过写，来让高级别知道自己的修改）</li>\n<li>避免高等级的主观失误或故意而造成的泄密。</li>\n<li>并且数据无论怎么复制，密级都是固定的，一旦数据被发布，不能被修改</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609214755656.png\" alt=\"image-20230609214755656\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230609213138851.png\" alt=\"image-20230609213138851\" /></p>\n<p>关注 C1\\C2\\A1 的对应关系</p>\n<ul>\n<li>视图\n<ul>\n<li>把<strong>要保密的数据对无权存取这些数据的用户隐藏起来</strong>，对数据提供一定程度的安全保护</li>\n<li><code>CREATE VIEW [viewname] </code></li>\n<li><code>GRANT SELECT ON [view] to [user]</code></li>\n</ul>\n</li>\n<li>审计\n<ul>\n<li>启用一个专用的审计日志（Audit Log）<strong>将用户对数据库的所有操作记录在上面</strong></li>\n<li>审计员利用审计日志监控数据库中的各种行为，找出非法存取数据的人、时间和内容</li>\n<li>C2 以上安全级别的 DBMS 必须具有审计功能</li>\n<li>审计可选\n<ul>\n<li>耗费时间和空间</li>\n<li>DBA 可以根据应用对安全性的要求，灵活地打开或关闭审计功能</li>\n<li>用于安全性要求较高的部门</li>\n</ul>\n</li>\n<li>审计事件</li>\n<li>审计功能</li>\n<li>AUDIT\\NOAUDIT</li>\n</ul>\n</li>\n<li>数据加密\n<ul>\n<li>防止数据库中数据在<strong>存储和传输</strong>中失密的有效手段</li>\n<li>根据一定的算法将原始数据明文（ Plain text ）变换为不可直接识别的格式 密文（ Cipher text）</li>\n<li>加密方法\n<ul>\n<li>存储加密\n<ul>\n<li>透明存储加密</li>\n<li>非透明存储加密</li>\n</ul>\n</li>\n<li>传输加密\n<ul>\n<li>链路加密</li>\n<li>端到端加密</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他安全性保护\n<ul>\n<li>推理控制</li>\n<li>隐蔽信道</li>\n<li>数据隐私保护</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"第5章-数据库完整性\"><a class=\"anchor\" href=\"#第5章-数据库完整性\">#</a> 第 5 章 数据库完整性</h1>\n<blockquote>\n<p>ppt 26-31</p>\n</blockquote>\n<p>数据库的完整性是指数据的<strong>正确性</strong>和<strong>相容性</strong>。</p>\n<ul>\n<li>完整性机制：\n<ol>\n<li>（定义功能）提供定义完整性约束条件的机制</li>\n<li>（检查功能）提供完整性检查的方法</li>\n<li>（违约处理功能）</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>\n<p>实体完整性  <code>PRIMARY KEY</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610132519644.png\" alt=\"image-20230610132519644\" /></p>\n<ul>\n<li>区分列级、表级定义</li>\n<li>PRIMARY KEY is <strong>UNIQUE</strong></li>\n<li>PRIMARY KEY is <strong>NOT NULL</strong></li>\n<li>PRIMARY KEY has <strong>INDEX</strong></li>\n<li>完整性检查和违约处理\n<ul>\n<li>全表扫描（耗时）</li>\n<li>索引，如 B + 数索引</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>参照完整性  <code>FOREIGN KEY [] REFERENCES []</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610132531345.png\" alt=\"image-20230610132531345\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610133451722.png\" alt=\"image-20230610133451722\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610132556407.png\" alt=\"image-20230610132556407\" /></p>\n<ul>\n<li>违约处理\n<ul>\n<li><strong>NO ACTION</strong>: 不允许该操作执行</li>\n<li><strong>CASCADE</strong>: 当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组</li>\n<li><strong>SET-NULL</strong>: 当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>用户定义完整性  <code>CONTRAINT [约束名](随便取的名字)　[约束条件]</code> （跟在哪个属性后面就对哪个属性生效）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610134615830.png\" alt=\"image-20230610134615830\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610134712028.png\" alt=\"image-20230610134712028\" /></p>\n<ul>\n<li>NOT NULL</li>\n<li>UNIQUE</li>\n<li>CHECK (条件)\n<ul>\n<li>eg:  <code>  CHECK (Ssex='女' OR Sname NOT LIKE 'Ms.%')</code></li>\n<li>当学生的性别是男时，其名字不能以 Ms. 打头。</li>\n</ul>\n</li>\n<li>CREATE/ALTER</li>\n</ul>\n</li>\n<li>\n<p>断言（不做要求了）</p>\n<ul>\n<li>\n<p><code>CREATE ASSERTION &lt;断言名&gt; &lt;CHECK 子句&gt;</code></p>\n</li>\n<li>\n<p><code>DROP ASSERTION &lt;断言名&gt;</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230610135037129.png\" alt=\"image-20230610135037129\" /></p>\n</li>\n<li>\n<p>断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>触发器（Trigger）是用户定义在关系表上的<strong>一类由事件驱动的特殊过程</strong></p>\n<ul>\n<li>触发器又叫作<strong>事件 - 条件 - 动作</strong>规则。</li>\n<li>触发器保存在数据库服务器中</li>\n<li>任何用户对表的增、删、改操作均由服务器自动激活相应的触发器</li>\n<li>触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</li>\n<li>触发器的执行，是由触发事件激活的，并由数据库服务器自动执行</li>\n<li>一个数据表上可能定义了多个触发器，遵循如下的执行顺序:\n<ul>\n<li>执行该表上的 BEFORE 触发器；（谁先创建，谁先执行）</li>\n<li>激活触发器的 SQL 语句；</li>\n<li>执行该表上的 AFTER 触发器。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token operator\">&lt;</span>触发器名<span class=\"token operator\">></span> &#123;BEFORE <span class=\"token operator\">|</span> <span class=\"token keyword\">AFTER</span>&#125; <span class=\"token operator\">&lt;</span>触发事件<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ON</span> <span class=\"token operator\">&lt;</span>表名<span class=\"token operator\">></span> REFERENCING NEW<span class=\"token operator\">|</span>OLD <span class=\"token keyword\">ROW</span> <span class=\"token keyword\">AS</span><span class=\"token operator\">&lt;</span>变量<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FOR</span> EACH &#123;<span class=\"token keyword\">ROW</span> <span class=\"token operator\">|</span> STATEMENT&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">WHEN</span> <span class=\"token operator\">&lt;</span>触发条件<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>触发动作体<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#[例 5.21] 当对表 SC 的 Grade 属性进行修改时，若分数增加了 10% 则将此次操作记录到下面表中：SC_U（Sno,Cno,Oldgrade,Newgrade）其中 Oldgrade 是修改前的分数，Newgrade 是修改后的分数。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span>  SC_T\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">OF</span> Grade <span class=\"token keyword\">ON</span> SC</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">/* 指明触发器激活的时间是在执行 UPDATE 后 */</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>REFERENCING</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t    OLD <span class=\"token keyword\">row</span> <span class=\"token keyword\">AS</span>  OldTuple<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t    NEW <span class=\"token keyword\">row</span> <span class=\"token keyword\">AS</span>  NewTuple</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span> <span class=\"token comment\">/* 行级触发器 */</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* FOR EACH STATEMENT 语句级触发器 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">WHEN</span> <span class=\"token punctuation\">(</span>NewTuple<span class=\"token punctuation\">.</span>Grade <span class=\"token operator\">>=</span> <span class=\"token number\">1.1</span><span class=\"token operator\">*</span>OldTuple<span class=\"token punctuation\">.</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> SC_U<span class=\"token punctuation\">(</span>Sno<span class=\"token punctuation\">,</span>Cno<span class=\"token punctuation\">,</span>OldGrade<span class=\"token punctuation\">,</span>NewGrade<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>OldTuple<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">,</span>OldTuple<span class=\"token punctuation\">.</span>Cno<span class=\"token punctuation\">,</span>OldTuple<span class=\"token punctuation\">.</span>Grade<span class=\"token punctuation\">,</span>NewTuple<span class=\"token punctuation\">.</span>Grade<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token operator\">&lt;</span>触发器名<span class=\"token operator\">></span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">&lt;</span>表名<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"第6章-关系数据理论必考\"><a class=\"anchor\" href=\"#第6章-关系数据理论必考\">#</a> 第 6 章 关系数据理论（必考）</h1>\n<blockquote>\n<p>ppt 32-36</p>\n</blockquote>\n<h2 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h2>\n<ul>\n<li>\n<p>关系模式，是一个五元组： <code>R(U,D,DOM,F)</code> ，</p>\n</li>\n<li>\n<p>数据依赖：是一个关系内部属性与属性之间的一种约束关系，通过属性间值的相等与否体现出来的数据间相关联系</p>\n<ul>\n<li>\n<p>多值依赖（Multi-Valued Dependency，MD）</p>\n</li>\n<li>\n<p>函数依赖 （Functional Dependency，FD）</p>\n<ul>\n<li>Y 函数依赖于 X : X-&gt;Y ，若 X -&gt; Y 且 Y -&gt; X，则 X&lt;--&gt;Y</li>\n<li>Sname = f (Sno)，一个学号只对应一个学生的姓名</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173849601.png\" alt=\"image-20220618173849601\" /></p>\n<ul>\n<li>\n<p>平凡函数依赖、非平凡函数依赖 、完全函数依赖</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MzkxODQ5Ni5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173918496.png</span>&quot; alt=&quot;image-20220618173918496&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MzkzNDY2Mi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173934662.png</span>&quot; alt=&quot;image-20220618173934662&quot;  /&gt;</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618174104550.png\" alt=\"image-20220618174104550\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>码、候选码、主码、主属性、非主属性、全码（整个属性组是码）、超码</p>\n</li>\n</ul>\n</li>\n<li>\n<p>规范化 ：一个低一级范式的关系模式，通过<strong>模式分解</strong>可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化。</p>\n<p>（此处有图 见 PDF）</p>\n</li>\n</ul>\n<h2 id=\"1nf\"><a class=\"anchor\" href=\"#1nf\">#</a> 1NF</h2>\n<ul>\n<li>第一范式 (1NF) : 作为二维表，关系要符合一个最基本的条件：每个分量必须是不可分开的数据项。<strong>（属性不可再分）</strong></li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173604608.png\" alt=\"image-20220618173604608\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MzYyMDIxNi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173620216.png</span>&quot; alt=&quot;image-20220618173620216&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3MzYyODUyNS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618173628525.png</span>&quot; alt=&quot;image-20220618173628525&quot;  /&gt;</p>\n<h2 id=\"2nf\"><a class=\"anchor\" href=\"#2nf\">#</a> 2NF</h2>\n<ul>\n<li>第二范式（2NF）: 若关系模式 R∈1NF，并且每一个非主属性都完全函数依赖于任何一个候选码，则 R∈2NF。 <strong>（非主键要完全依赖候选码）</strong></li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3NDQyOTQ4Ni5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618174429486.png</span>&quot; alt=&quot;image-20220618174429486&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxODE3NDQzNjU0MC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618174436540.png</span>&quot; alt=&quot;image-20220618174436540&quot;  /&gt;</p>\n<p>实例</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618174501389.png\" alt=\"image-20220618174501389\" /></p>\n<h2 id=\"3nf\"><a class=\"anchor\" href=\"#3nf\">#</a> 3NF</h2>\n<ul>\n<li>第三范式（3NF）: 设关系模式<em> R</em>&lt;<em>U</em>,<em>F</em>&gt;∈1NF, 若<em> R</em> 中不存在这样的码<em> X</em>、属性组<em> Y</em> 及非主属性<em> Z</em>（<em>Z</em> ⊈<em>Y</em>）, 使得<em> X</em>→<em>Y</em>，<em>Y</em>→<em>Z</em> 成立，<em>Y</em> ↛ <em>X</em> 成立，则称<em> R</em>&lt;<em>U</em>,<em>F</em>&gt; ∈ 3NF。 <strong>（没有传递依赖）</strong></li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220618174513643.png\" alt=\"image-20220618174513643\" /></p>\n<h2 id=\"bcnf\"><a class=\"anchor\" href=\"#bcnf\">#</a> BCNF</h2>\n<ul>\n<li>BCNF: 在关系模式 R&lt;U,F&gt; 中，如果<strong>每一个决定属性集都包含候选码</strong>，则 R∈BCNF\n<ul>\n<li>决定属性集：函数依赖的自变量：\n<ul>\n<li>设关系模式 R&lt;U,F&gt;∈1NF，若 X →Y 且 Y ⊈ X 时 X 必含有码，则 R&lt;U,F&gt;∈BCNF。</li>\n</ul>\n</li>\n<li>所有<strong>非主属性</strong>都完全函数<strong>依赖于每个候选码</strong>（2NF 的性质）</li>\n<li>所有主属性都完全函数依赖于每个不包含它的候选码</li>\n<li>没有任何属性完全函数依赖于非码的任何一组属性</li>\n</ul>\n</li>\n<li>好处和消解方法见课本 P184\n<ul>\n<li>在函数依赖的范畴实现了彻底的分离，消除了插入和删除的异常</li>\n<li>3NF 的不彻底性表现在可能存在主属性对码的部分依赖和传递依赖</li>\n</ul>\n</li>\n</ul>\n<hr />\n<p><em>以下内容不要求。</em></p>\n<ul>\n<li>\n<p>多值依赖：设<em> R (U)<em> 是属性集</em> U</em> 上的一个关系模式。<em>X</em>,<em>Y</em>,<em>Z</em> 是<em> U</em> 的子集，并且<em> Z</em>=<em>U</em>-<em>X</em>-<em>Y</em>。关系模式<em> R (U)<em> 中多值依赖</em> X</em>→→<em>Y</em> 成立，当且仅当对<em> R (U)<em> 的任一关系</em> r</em>，给定的一对 (<em>x</em>,<em>z</em>) 值，有一组<em> Y</em> 的值，这组值仅仅决定于<em> x</em> 值而与<em> z</em> 值无关</p>\n<ul>\n<li>对称性：若<em> X</em>→→<em>Y</em>，则<em> X</em>→→<em>Z</em>，其中<em> Z</em>＝<em>U</em>－<em>X</em>－<em>Y</em></li>\n<li>传递性：若<em> X</em>→→<em>Y</em>，<em>Y</em>→→<em>Z</em>， 则 <em>X</em>→→<em>Z</em>  - <em>Y</em></li>\n<li>经典例子：课程 C、教师 T、书 B  <strong>[ Teaching(C,T,B) ]</strong>\n<ul>\n<li>一个课程多个老师，多个参考书，一个老师多个课程，一本书多个课程</li>\n<li>C→→T, C→→B</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>4NF：关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。</p>\n</li>\n</ul>\n<h1 id=\"第7章-数据库设计\"><a class=\"anchor\" href=\"#第7章-数据库设计\">#</a> 第 7 章 数据库设计</h1>\n<blockquote>\n<p>ppt 37-44</p>\n</blockquote>\n<ul>\n<li>\n<p>数据库设计的特点：</p>\n<ul>\n<li>三分技术，七分管理，十二分基础数据</li>\n<li>结构设计与行为设计相结合</li>\n</ul>\n</li>\n<li>\n<p>数据库设计方法</p>\n<ul>\n<li>New Orleans 方法</li>\n<li>E-R 模型方法</li>\n<li>3NF 方法</li>\n<li>OOP 方法</li>\n<li>UML 方法</li>\n</ul>\n</li>\n<li>\n<p>数据库设计的基本步骤（<strong>数据库分析的 6 个阶段</strong>）</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220613220014932.png\" alt=\"image-20220613220014932\" /></p>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615194005996.png\" alt=\"img\" /></p>\n<ul>\n<li>数据库的各级模式</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615194236256.png\" alt=\"img\" /></p>\n<ul>\n<li>需求分析：收集用户对数据库的<em>信息要求、处理要求、安全性与完整性要求</em></li>\n<li><strong>数据字典</strong>：是关于数据库中数据的描述，即元数据，不是数据本身。包括<strong>数据项、数据结构、数据流、数据存储结构</strong>、处理过程。</li>\n<li>概念结构设计：画 E-R 图（不太重要）\n<ul>\n<li>E-R 图，[见 1.2](#1.2 数据模型)\n<ul>\n<li>属性必须是不可分的数据项，不能包含其他属性。</li>\n<li>属性不能与其他实体具有联系，即 E-R 图中所表示的联系是实体之间的联系。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>逻辑结构设计：E-R 图<strong>转换</strong>为关系模型，即数据库的表\n<ul>\n<li>转换\n<ul>\n<li>一个 1:1 联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并</li>\n<li>一个 1:n 联系可以转换为一个独立的关系模式，也可以与 n 端对应的关系模式合并</li>\n<li>一个 m:n 联系转换为一个关系模式（本质是多对多关系需要单独开一个表来维护）</li>\n<li>三个或三个以上实体间的一个多元联系转换为一个关系模式</li>\n<li>具有相同码的关系模式可合并</li>\n</ul>\n</li>\n<li>设计用户子模式（视图）</li>\n</ul>\n</li>\n<li><strong>关系模式的分解</strong>（重要，如果问到能还原即可）\n<ul>\n<li>水平分解\n<ul>\n<li>分解后表的属性不变，但是存储的数据变了</li>\n<li>把关系的元祖分为若干子集合</li>\n</ul>\n</li>\n<li><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619212725702.png\" alt=\"image-20220619212725702\" /></li>\n<li>垂直分解\n<ul>\n<li>分解后表的属性变了</li>\n<li>把属性分为若干子集合，形成若干子关系模式</li>\n</ul>\n</li>\n<li><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619212838748.png\" alt=\"image-20220619212838748\" /></li>\n<li><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619212856677.png\" alt=\"image-20220619212856677\" /></li>\n</ul>\n</li>\n<li>物理结构设计：为一个给定的逻辑数据模型<strong>选取</strong>一个最适合应用要求的<strong>物理结构</strong>\n<ul>\n<li>存取方法\n<ul>\n<li>B+ Tree 索引</li>\n<li>hash 索引</li>\n<li>clustering（聚簇，这个可能没学过，要了解）</li>\n<li><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619213047944.png\" alt=\"image-20220619213047944\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据库实施和维护：略</li>\n</ul>\n<h1 id=\"第8章-数据库编程\"><a class=\"anchor\" href=\"#第8章-数据库编程\">#</a> 第 8 章 数据库编程</h1>\n<blockquote>\n<p>ppt 45-47</p>\n</blockquote>\n<p>JDBC 比较常用，其他不考，略</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611105309306.png\" alt=\"image-20230611105309306\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611105328511.png\" alt=\"image-20230611105328511\" /></p>\n<p>过程化 sql</p>\n<p>存储过程和函数</p>\n<h1 id=\"第9章-关系查询处理和优化\"><a class=\"anchor\" href=\"#第9章-关系查询处理和优化\">#</a> 第 9 章 关系查询处理和优化</h1>\n<blockquote>\n<p>ppt 58-61</p>\n</blockquote>\n<p>不考，略</p>\n<h1 id=\"第10章-数据库恢复技术\"><a class=\"anchor\" href=\"#第10章-数据库恢复技术\">#</a> 第 10 章 数据库恢复技术</h1>\n<blockquote>\n<p>ppt 48-53</p>\n</blockquote>\n<ul>\n<li>事务：是用户定义的一个<strong>数据库操作序列</strong>，这些操作要么全做，要么全不做，是一个不可分割的工作单位，是<strong>恢复和并发控制的基本单位</strong></li>\n<li>事务和程序的差别\n<ul>\n<li>在关系数据库中，一个事务可以是一条 SQL 语句，一组 SQL 语句或整个程序</li>\n<li>一个程序通常包含多个事务</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-mysql\">BEGIN TRANSACTION; # 显式开始事务\nCOMMIT; # 事务正常结束\nROLLBACK; # 事务回滚到开始时的状态\n</code></pre>\n<ul>\n<li>事务的特性 ACID\n<ul>\n<li><strong>原子性</strong>（Atomicity）\n<ul>\n<li>事务是数据库的逻辑工作单位，事务中的诸操作要么都做，要么都不做</li>\n</ul>\n</li>\n<li><strong>一致性</strong>（Consistency）\n<ul>\n<li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li>\n<li>全做或者全不做，数据库都处于一致性状态。</li>\n</ul>\n</li>\n<li><strong>隔离性</strong>（Isolation）\n<ul>\n<li>一个事务的执行不能被其他事务干扰</li>\n<li>一个事务内部的操作及使用的数据对其他并发事务是隔离的</li>\n<li>并发执行的各个事务之间不能互相干扰</li>\n</ul>\n</li>\n<li><strong>持续性</strong>（Durability），也称永久性（Permanence）\n<ul>\n<li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</li>\n<li>接下来的其他操作或故障不应该对其执行结果有任何影响。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>故障恢复可以保证事务的<strong>原子性和持续性</strong></li>\n<li>并发控制可以保证事务的<strong>一致性和隔离性</strong></li>\n<li>数据库故障的种类\n<ul>\n<li>事物内部的故障\n<ul>\n<li>事务撤销（UNDO）</li>\n</ul>\n</li>\n<li>系统故障</li>\n<li>介质故障</li>\n<li>计算机病毒</li>\n</ul>\n</li>\n<li>恢复操作的基本原理：冗余</li>\n<li>恢复的实现技术：复杂</li>\n</ul>\n<p>恢复数据的原理是<strong>冗余</strong>，建立冗余数据最常用的技术是<strong>数据转储</strong>和<strong>登记日志文件</strong></p>\n<ul>\n<li><strong>数据转储</strong>：数据库管理员定期地将整个数据库复制到磁带、磁盘或其他存储介质上保存起来的过程\n<ul>\n<li>备用的数据文本称为后备副本 (backup) 或后援副本</li>\n<li>重装后备副本只能将数据库恢复到转储时的状态</li>\n<li><strong>静态转储</strong>\n<ul>\n<li>在系统中无运行事务时进行的转储操作</li>\n<li>转储开始时数据库处于一致性状态</li>\n<li><strong>转储期间不允许对数据库的任何存取、修改活动</strong></li>\n<li>得到的一定是一个数据一致性的副本</li>\n<li>优点：实现简单</li>\n<li>缺点：降低了数据库的可用性\n<ul>\n<li>转储必须等待正在运行的用户事务结束</li>\n<li>新的事务必须等待转储结束</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态转储\n<ul>\n<li>转储操作与用户事务并发进行</li>\n<li><strong>转储期间允许对数据库进行存取或修改</strong></li>\n<li>优点\n<ul>\n<li>不用等待正在运行的用户事务结束</li>\n<li>不会影响新事务的运行</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>不能保证副本中的数据正确有效</li>\n</ul>\n</li>\n<li>利用动态转储得到的副本进行故障恢复\n<ul>\n<li>需要把动态转储期间各事务对数据库的修改活动登记下来，<strong>建立日志文件</strong></li>\n<li>后备副本加上日志文件就能把数据库恢复到某一时刻的正确状态</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>海量转储\n<ul>\n<li>每次转储全部数据库</li>\n</ul>\n</li>\n<li>增量转储\n<ul>\n<li>只转储上次转储后更新过的数据</li>\n</ul>\n</li>\n<li>海量转储和增量转储的比较\n<ul>\n<li>海量转储恢复较为方便</li>\n<li>数据库很大，事务处理频繁，增量转储使用有效</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619214037064.png\" alt=\"image-20220619214037064\" /></p>\n<ul>\n<li>\n<p>日志文件：用来记录事务对数据库的更新操作的文件</p>\n<ul>\n<li>\n<p>格式：</p>\n<ul>\n<li>记录</li>\n<li>数据块</li>\n</ul>\n</li>\n<li>\n<p>日志文件的内容</p>\n<ul>\n<li>各个事务的开始标记（BEGIN TRANSACTION）</li>\n<li>各个事务的结束标记（COMMIT/ROLLBACK）</li>\n<li>所有更新操作</li>\n<li>事务标识</li>\n<li>操作类型</li>\n<li>操作对象</li>\n<li>更新前的值</li>\n<li>更新后的值</li>\n</ul>\n</li>\n<li>\n<p>作用：</p>\n<ul>\n<li>事务故障恢复和系统故障恢复必须用日志文件。</li>\n<li>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。</li>\n<li>在静态转储方式中，也可以建立日志文件。</li>\n</ul>\n</li>\n<li>\n<p><strong>登记日志文件的原则</strong></p>\n<ul>\n<li>登记的次序严格按并发事务执行的时间次序</li>\n<li><strong>必须先写日志文件，后写数据库</strong>，为什么？（必考）（保持 ACID）\n<ul>\n<li>写数据库和写日志文件是两个不同的操作，在这两个操作之间可能发生故障。</li>\n<li>如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了</li>\n<li>如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的 UNDO 操作，并不会影响数据库的正确性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>恢复策略（PPT 51）</p>\n<ul>\n<li>事物故障：事务在运行至正常终点前被终止\n<ul>\n<li>恢复方法：由恢复子系统利用日志文件撤消（ UNDO ）此事务已对数据库进行的修改</li>\n<li>自动完成</li>\n<li>恢复步骤：反向扫描 - 逆操作 - 直至开始标记</li>\n</ul>\n</li>\n<li>系统故障：未完成事务对数据库的更新可能已写入数据库；已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库\n<ul>\n<li>恢复方法：\n<ul>\n<li>UNDO 故障发生时未完成的事务</li>\n<li>REDO 已完成的事务</li>\n</ul>\n</li>\n<li>重启自动完成</li>\n<li>恢复步骤：反向扫描，逆操作 UNDO 队列；正向扫描，执行 REDO 队列</li>\n</ul>\n</li>\n<li>介质故障：重装数据库，重做已完成的事务\n<ul>\n<li>需要管理员介入</li>\n<li>恢复步骤：装入后备数据库副本（静态 / 动态）- 装入有关日志副本，REDO 已完成的事务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>检查点恢复技术：</p>\n<ul>\n<li>\n<p>为什么？</p>\n<ul>\n<li>搜索日志和重做处理耗费了大量的时间</li>\n</ul>\n</li>\n<li>\n<p>技术要点：</p>\n<ul>\n<li>在日志文件中增加<strong>检查点记录</strong></li>\n<li>增加<strong>重新开始文件</strong>（新增一个记录文件）</li>\n<li>恢复子系统在登录日志文件期间动态地维护日志</li>\n</ul>\n</li>\n<li>\n<p>检查点内容：</p>\n<ul>\n<li>建立检查点时刻所有正在执行的事务清单</li>\n<li>这些事务最近一个日志记录的地址</li>\n</ul>\n</li>\n<li>\n<p>重新开始文件的内容</p>\n<ul>\n<li>各个检查点记录在日志文件中的地址</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230614085140170.png\" alt=\"image-20230614085140170\" /></p>\n</li>\n<li>\n<p>恢复步骤：</p>\n<ol>\n<li>重新检查文件找到最后一条检查点记录地址，在日志文件中找到这个检查点记录</li>\n<li>建立 UNDO-LIST, REDO-LIST, 将检查点上所有正在执行的事物放入 UNDO-LIST</li>\n<li>从检查点记录正向扫描日志。\n<ol>\n<li>如果有新开始的事物，放入 UNDO-LIST；</li>\n<li>如果有提交（COMMIT）的事物，从 UNDO-LIST 移动到 REDO-LIST。直至日志文件结束</li>\n</ol>\n</li>\n<li>对 LIST 中事物进行相应的 UNDO 和 REDO 操作</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220616161158480.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619215228883.png\" alt=\"image-20220619215228883\" /></p>\n<ul>\n<li>数据库镜像 ——<strong> 提高数据库可用性</strong>的解决方案\n<ul>\n<li>\n<p>解决介质故障</p>\n</li>\n<li>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611131458313.png\" alt=\"image-20230611131458313\" /></p>\n</li>\n<li>\n<p>出现故障</p>\n<ul>\n<li>\n<p>可由镜像磁盘继续提供使用</p>\n</li>\n<li>\n<p>同时数据库管理系统自动利用镜像磁盘数据进行数据库的恢复</p>\n</li>\n<li>\n<p>不需要关闭系统和重装数据库副本</p>\n</li>\n<li>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611131550904.png\" alt=\"image-20230611131550904\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>没有出现故障</p>\n<ul>\n<li>\n<p>可用于<strong>并发操作</strong></p>\n</li>\n<li>\n<p>一个用户对数据加排他锁修改数据，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁</p>\n</li>\n<li>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230611131606468.png\" alt=\"image-20230611131606468\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>频繁地复制数据自然会降低系统运行效率，<strong>在实际应用中用户往往只选择对关键数据和日志文件镜像</strong>，不是对整个数据库进行镜像</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"第11章-并发控制\"><a class=\"anchor\" href=\"#第11章-并发控制\">#</a> 第 11 章 并发控制</h1>\n<blockquote>\n<p>ppt 54-57</p>\n</blockquote>\n<ul>\n<li>串行执行、交叉并发执行</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615194131511.png\" alt=\"image-20220615194131511\" /></p>\n<ul>\n<li><strong>事务是并发控制的基本单位</strong></li>\n<li><strong>需要保证事务的隔离性和一致性</strong></li>\n<li>并发操作带来的数据不一致性\n<ul>\n<li><strong>丢失修改</strong>：两个事务 T1 和 T2 读入同一数据并修改， T2 的提交结果破坏了 T1 提交的结果，导致 T1 的修改被丢失（造成不一致性）</li>\n<li><strong>不可重复读</strong>：不可重复读是指事务 T1 读取数据后，事务 T2 执行更新操作，使 T1 无法再现前一次读取结果。\n<ul>\n<li>3 种情况，后两种不可重复读有时也称为幻影现象（Phantom Row）：</li>\n<li>事务 T1 读取某一数据后，事务 T2 对其<strong>做了修改</strong>，当事务 T1 再次读该数据时，得到与前一次不同的值</li>\n<li>事务 T1 按一定条件从数据库中读取了某些数据记录后，事务 T2<strong> 删除</strong>了其中部分记录，当 T1 再次按相同条件读取数据时，发现某些记录神秘地消失了。</li>\n<li>事务 T1 按一定条件从数据库中读取某些数据记录后，事务 T2<strong> 插入了一些记录</strong>，当 T1 再次按相同条件读取数据时，发现多了一些记录。</li>\n</ul>\n</li>\n<li><strong>脏读</strong>：事务 T1 修改某一数据，并将其写回磁盘。事务 T2 读取同一数据后， <strong>T1 由于某种原因被撤销</strong>。这时 T1 已修改过的数据恢复原值， <strong>T2 读到的数据就与数据库中的数据不一致</strong>。T2 读到的数据就为 “脏” 数据，即不正确的数据</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615194500872.png\" alt=\"image-20220615194500872\" /></p>\n<ul>\n<li>数据不一致性：由于并发操作破坏了事务的隔离性</li>\n<li>并发控制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其他事务的干扰，从而避免造成数据的不一致性\n<ul>\n<li>关系型数据库的并发控制主要靠封锁（Locking）</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>封锁：</p>\n<ul>\n<li>排它锁（X 锁、写锁），共享锁（S 锁、读锁）<br />\n<img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615194848184.png\" alt=\"image-20220615194848184\" /></li>\n<li>锁的相容矩阵<br />\n<img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615195011343.png\" alt=\"image-20220615195011343\" /></li>\n</ul>\n</li>\n<li>\n<p>封锁协议</p>\n<ul>\n<li>一级封锁协议：事务 T 在<strong>修改数据 R 之前必须先对其加 X 锁</strong>，直到事务结束才释放\n<ul>\n<li>一级封锁协议可防止丢失修改，并保证事务 T 是可恢复的。</li>\n<li>如果仅仅是读数据不对其进行修改，是不需要加锁的，所以它不能保证可重复读和不读 “脏” 数据</li>\n</ul>\n</li>\n<li>二级封锁协议：一级封锁协议加上事务 T 在<strong>读取数据 R 之前必须先对其加 S 锁</strong>，<strong>读完后即可释放</strong> S 锁。\n<ul>\n<li>可以防止丢失修改和读 “脏” 数据</li>\n<li>因为读完数据后即可释放 S 锁，<strong>但在事务结束的时候可能其他事务已经修改了这个数据，所以它不能保证可重复读</strong></li>\n</ul>\n</li>\n<li>三级封锁协议：一级封锁协议加上事务 T 在读取数据 R 之前必须先对其加 S 锁，<strong>直到事务结束才释放</strong>（X 和 S 锁）\n<ul>\n<li>可防止丢失修改、读脏数据和不可重复读</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619222230257.png\" alt=\"image-20220619222230257\" /></p>\n<ul>\n<li>\n<p>活锁：一个事务永远可能等待，因为是新来先服务</p>\n<ul>\n<li>解决方案：先来先服务</li>\n</ul>\n</li>\n<li>\n<p>死锁：T1 在等待 T2 ，而 T2 又在等待 T1 ， T1 和 T2 两个事务永远不能结束</p>\n</li>\n<li>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619222358912.png\" alt=\"image-20220619222358912\" /></p>\n<ul>\n<li>\n<p>预防</p>\n<ul>\n<li><strong>一次封锁法</strong>，要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行</li>\n<li><strong>顺序封锁法</strong>，预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁</li>\n</ul>\n</li>\n<li>\n<p>数据库管理系统在解决死锁的问题上更普遍采用的是<strong>诊断并解除死锁的方法</strong></p>\n</li>\n<li>\n<p>解决方案</p>\n<ul>\n<li>\n<p><strong>超时法</strong>：如果一个事务的等待时间超过了规定的时限，就认为发生了死锁</p>\n</li>\n<li>\n<p><strong>等待图法</strong>：发控制子系统周期性地（比如每隔数秒）<strong>生成事务等待图，检测事务</strong>。如果发现图<strong>中存在回路</strong>，则表示系统中出现了死锁。</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615201057389.png\" alt=\"image-20220615201057389\" /></p>\n</li>\n<li>\n<p>解除死锁</p>\n<ul>\n<li>选择一个处理死锁<strong>代价最小</strong>的事务，将其撤消<br />\n释放此事务持有的所有的锁，使其它事务能继续运行下去</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>可串行化调度</p>\n<ul>\n<li>多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，这种调度策略被称为可串行化调度</li>\n</ul>\n</li>\n<li>\n<p>冲突可串行化（掌握概念即可）</p>\n<ul>\n<li>执行结果等价于串行调度的调度也是正确的，称为<strong>可串行化</strong>调度</li>\n<li><strong>冲突操作：是指不同的事务对同一数据的读写操作和写写操作</strong></li>\n<li><strong>不能交换的操作：同一事务的两个操作、不同事务的冲突操作</strong></li>\n<li>一个调度 Sc 在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度 Sc’，如果 Sc’是串行的，称调度 Sc 是<strong>冲突可串行化</strong>的调度\n<ul>\n<li>冲突可串行化调度是可串行化调度的<strong>充分条件</strong>，不是必要条件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>两段锁协议（2PL)，指所有事务必须分两个阶段对数据项加锁和解锁</p>\n<ul>\n<li>第一阶段：获得封锁，也称为扩展阶段。事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁</li>\n<li>第二阶段：释放封锁，也称为收缩阶段。事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁</li>\n<li>事务遵守两段锁协议是可串行化调度的<strong>充分条件</strong>，而不是必要条件</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619222951210.png\" alt=\"image-20220619222951210\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIyMzA0Mzg1My5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619223043853.png</span>&quot; alt=&quot;image-20220619223043853&quot;  /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIyMzA1MjYwMC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619223052600.png</span>&quot; alt=&quot;image-20220619223052600&quot;  /&gt;</p>\n<ul>\n<li>\n<p>封锁对象的大小称为<strong>封锁粒度</strong> (Granularity)</p>\n<ul>\n<li>逻辑单元：属性值、属性值的集合、元组、关系、索引项、整个索引、整个数据库等</li>\n<li>物理单元：页（数据页或索引页）、物理记录等</li>\n</ul>\n</li>\n<li>\n<p>封锁的粒度越大，数据库所能够封锁的数据单元就越少，<strong>并发度</strong>就越小，系统开销也越小</p>\n</li>\n<li>\n<p>多粒度封锁：在一个系统中同时支持多种封锁粒度供不同的事务选择</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220615204625429.png\" alt=\"image-20220615204625429\" /></p>\n</li>\n<li>\n<p>多粒度加锁，对一个结点加锁，意味着这个结点的所有后裔结点也被加以同样类型的锁。</p>\n<ul>\n<li><strong>显式封锁</strong>：直接加到数据对象上的封锁</li>\n<li><strong>隐式封锁</strong>：是该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁</li>\n<li>对某个数据对象加锁，系统要检查：\n<ul>\n<li>该数据对象：有无显式封锁与之冲突</li>\n<li>所有上级结点：本事务的显式封锁是否与该数据对象上的隐式封锁冲突</li>\n<li>所有下级结点：看它们的的显式封锁是否与本事务的隐式封锁冲突</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619223343312.png\" alt=\"image-20220619223343312\" /></p>\n<ul>\n<li>\n<p>意向锁：如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁。对任一结点加基本锁，<strong>必须先对它的上层结点加意向锁</strong>。</p>\n<ul>\n<li>IS 锁：它的后裔结点拟（意向）加 S 锁</li>\n<li>IX 锁：它的后裔结点拟（意向）加 X 锁</li>\n<li>SIX 锁：<strong>它加 S 锁，再加 IX 锁。</strong>\n<ul>\n<li><strong>e.g.</strong> 对某个表加 SIX 锁，则表示该事务要读整个表（所以要对该表加 S 锁），同时会更新个别元组（所以要对该表加 IX 锁</li>\n</ul>\n</li>\n<li><strong>申请封锁时应该按自上而下的次序进行，释放封锁时则应该按自下而上的次序进行</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"nosql\"><a class=\"anchor\" href=\"#nosql\">#</a> NoSQL</h1>\n<blockquote>\n<p>ppt 62-74</p>\n</blockquote>\n<p>见《nosql 精粹》第 1-6，8-11 章</p>\n<h2 id=\"1-为什么关系型数据库好-nosql和sql的差异\"><a class=\"anchor\" href=\"#1-为什么关系型数据库好-nosql和sql的差异\">#</a> 1. 为什么关系型数据库好 / NoSQL 和 SQL 的差异</h2>\n<ul>\n<li>\n<p>可回答第一章的部分（关系模型的优缺点）</p>\n<ul>\n<li><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220620211107102.png\" alt=\"image-20220620211107102\" /></li>\n</ul>\n</li>\n<li>\n<p>也可回答 PPT62 的部分</p>\n<ul>\n<li>\n<p>获取持久化数据</p>\n<ul>\n<li>持久存储大量数据</li>\n</ul>\n</li>\n<li>\n<p>集成</p>\n<ul>\n<li>并能<strong>共享数据库集成</strong>，<strong>多个应用程序都将数据保存在同一个数据库中</strong>。这样一来，所有应用程序很容易就能使用彼此的数据了</li>\n</ul>\n</li>\n<li>\n<p>并发</p>\n<ul>\n<li>在面对并发操作时，关系型数据库<strong>提供了 “事务” 机制来控制对其数据的访问</strong></li>\n<li><strong>事务在处理错误时也起到作用</strong>。比如如果事务中途出错，可以通过回滚保证数据不受破坏</li>\n</ul>\n</li>\n<li>\n<p>近乎标准的模型</p>\n<ul>\n<li>关系型数据库以<strong>近乎标准的方式</strong>提供了<strong>数据模型</strong>。规定了模式，具有更高的数据独立性和安全保密性。</li>\n</ul>\n</li>\n<li>\n<p>但是存取路径对用户透明，<strong>查询效率往往不如格式化数据模型</strong>（NoSQL）</p>\n</li>\n<li>\n<p>为提高性能，必须对用户的查询请求进行优化，<strong>增加了 DBMS 的难度。</strong></p>\n</li>\n<li>\n<p>NoSQL 是<strong>应用数据库</strong>，MySQL 是<strong>集成数据库</strong></p>\n</li>\n<li>\n<p>NoSQL 在集群问题上，<strong>让用户自行决定可用性和一致性的平衡</strong></p>\n</li>\n<li>\n<p>NoSQL 是<strong>无模式</strong>的，不需要预先定义值和型，不会发生阻抗失谐的问题</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NoSQL</p>\n<ul>\n<li>\n<p>开源分布式的非关系型数据库</p>\n</li>\n<li>\n<p>不使用关系模型</p>\n</li>\n<li>\n<p>在集群中运行良好</p>\n<ul>\n<li>关系型数据库使用 ACID 事务来保持整个数据库的一致性，而这种方式本身与集群环境相冲突</li>\n<li>NoSQL 数据库为处理并发及分布问题提供了众多选项。</li>\n</ul>\n</li>\n<li>\n<p>开源</p>\n</li>\n<li>\n<p>适用于 21 世纪的互联网公司</p>\n</li>\n<li>\n<p>无模式</p>\n<ul>\n<li>不用事先修改结构定义，即可自由添加字段了</li>\n<li>这在处理不规则数据和自定义字段时 非常有用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-nosql的由来考选择题\"><a class=\"anchor\" href=\"#2-nosql的由来考选择题\">#</a> 2. NoSQL 的由来（考选择题）</h2>\n<h3 id=\"阻抗失谐\"><a class=\"anchor\" href=\"#阻抗失谐\">#</a> 阻抗失谐</h3>\n<p><strong>关系模型</strong>和内存中的<strong>数据结构</strong>之间存在差异，存储时，需要在两种不同的表示形式之间转译。每次处理的过程很麻烦</p>\n<p>解决方法：</p>\n<ol>\n<li>面向对象数据库</li>\n<li>对象 - 关系映射框架，通过映射模式表达转换</li>\n</ol>\n<h3 id=\"集成数据库和应用程序数据库\"><a class=\"anchor\" href=\"#集成数据库和应用程序数据库\">#</a> 集成数据库和应用程序数据库</h3>\n<p>集成数据库和应用程序数据库的问题（NoSQL 是<strong>应用程序数据库</strong>）</p>\n<h3 id=\"集群问题\"><a class=\"anchor\" href=\"#集群问题\">#</a> 集群问题</h3>\n<ol>\n<li>纵向扩展和横向扩展</li>\n<li>分片和复制</li>\n<li>让用户<strong>自行决定可用性和一致性的平衡</strong></li>\n</ol>\n<h2 id=\"3-聚合无知\"><a class=\"anchor\" href=\"#3-聚合无知\">#</a> 3. 聚合无知</h2>\n<ul>\n<li>\n<p>聚合</p>\n<ul>\n<li>把一组相互关联的对象视为一个整体单元来操作，而这个单元就叫聚合</li>\n<li>键值数据库</li>\n<li>文档数据库</li>\n<li>列族数据库</li>\n</ul>\n</li>\n<li>\n<p>关系型数据库不知道一个特定的聚合（数据结构），把其打散存在不同关系里，select 时，再聚在一起</p>\n<ul>\n<li>“图数据库 &quot; 也是聚合无知的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-无模式\"><a class=\"anchor\" href=\"#4-无模式\">#</a> 4. 无模式</h2>\n<p>关系型数据库模式和 NoSQL 模式的区别：</p>\n<p>NoSQL 是无模式的，不需要预先定义值和型。</p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619224154166.png\" alt=\"image-20220619224154166\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619224203066.png\" alt=\"image-20220619224203066\" /></p>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619224209118.png\" alt=\"image-20220619224209118\" /></p>\n<h2 id=\"5-分布式\"><a class=\"anchor\" href=\"#5-分布式\">#</a> 5. 分布式</h2>\n<ul>\n<li>\n<p>概念默认大家知道，没必要考</p>\n</li>\n<li>\n<p>PPT66</p>\n</li>\n<li>\n<p>分片</p>\n<ul>\n<li>不同数据存放到不同节点中</li>\n</ul>\n</li>\n<li>\n<p>复制</p>\n<ul>\n<li>将同一份数据拷贝到多个节点</li>\n<li>主从复制</li>\n<li>对等复制</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-一致性和持久性\"><a class=\"anchor\" href=\"#6-一致性和持久性\">#</a> 6. 一致性和持久性</h2>\n<ul>\n<li>\n<p>CAP 定理</p>\n<ul>\n<li>CAP 定理：给定 “一致性”(Consistency)、“可用性”(Availability)、“分区耐受性”( Partition tolerance) 这三个属性，我们只能同时满足其中两个属性。\n<ul>\n<li>“一致性”</li>\n<li>“可用性”，如果客户可以同集群中的某个节点通信，那么该节点就必然能够处理读取及写入操作。</li>\n<li>“分区耐受性” ，如果发生通信故障，导致整个集群被分割成多个无法互相通信的分区时 (这种情况也叫 “ 脑裂”，split brain)，集群仍然可用。</li>\n</ul>\n</li>\n<li>分区耐受性不能够妥协，但凡有一个结点 down，整个系统都要 down 掉</li>\n</ul>\n</li>\n<li>\n<p>剩下的理解为主，不需要照搬背诵</p>\n</li>\n</ul>\n<h2 id=\"7-仲裁\"><a class=\"anchor\" href=\"#7-仲裁\">#</a> 7. 仲裁</h2>\n<ul>\n<li>经典公式：\n<ul>\n<li>R + W &gt; N\n<ul>\n<li>“对等式分布模型”：\n<ul>\n<li>只有当 R+W&gt;N 时，才能保证读取操作的 “强一致性”。其中，执行读取操作时所需联系的节点数 (R)，确认写入操作时所需征询的节点数 (W)，以及复制因子 (N)</li>\n<li>否则，可能读到的都是 UNWRITE 的</li>\n</ul>\n</li>\n<li>“主从式分布模型”\n<ul>\n<li>只需从主节点中读取数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>写入：二分之一\n<ul>\n<li>“对等式分布模型”：\n<ul>\n<li>“写入仲裁”(write quorum)：如果发生两个相互冲突的写入操作，那么只有其中一个操作能为超过半数的节点所认可，W&gt;N/2 。即，参与写入操作的节点数 (W)，必须超过副本节点数 (N) 的一半。副本个数又称为 “复制因子”</li>\n</ul>\n</li>\n<li>“主从式分布模型”\n<ul>\n<li>只需要向主节点中写入数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>复制因子</li>\n<li>实际情况</li>\n</ul>\n<h2 id=\"8-key-value数据库\"><a class=\"anchor\" href=\"#8-key-value数据库\">#</a> 8. key-value 数据库</h2>\n<ul>\n<li>数据库是如何完成基本存放的想法 / 数据库存放的是什么东西，怎么存的\n<ul>\n<li>是一张<strong>简单的哈希表</strong> (hash table)，主要用在所有数据库访问均通过主键 (primary key) 来操作的情况下。\n<ul>\n<li>可把此表想象成传统的 “关系” 该关系有两列：ID 与 NAME\n<ul>\n<li>ID 列代表关键字，NAME 列存放值。<strong>NAME 列仅能存放 String 型的数据。</strong></li>\n<li><strong>应用程序</strong>可提供 ID 及 VALUE 值，并将这一键值对持久化</li>\n<li>假如 ID 已存在，就用新值覆盖当前值，否则就新建一条数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>客户端可以根据键查询值，设置键所对应的值，或从数据库中删除键。</strong>\n<ul>\n<li><strong>“值” 只是数据库存储的一块数据而已，它并不关心也无需知道其中的内容</strong></li>\n<li><strong>应用程序负责理解所存数据的含义。</strong></li>\n<li><strong>能够存储 list、set、hash 等数据结构</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>适合做什么，不适合做什么\n<ul>\n<li>非常适合\n<ul>\n<li>保存<strong>会话</strong> (用会话 ID 作为键)</li>\n<li><strong>购物车数据</strong>（用 userid 绑定）</li>\n<li><strong>用户配置</strong>等信息（本质是因为键值数据库可以存放任意数据结构的数据）</li>\n</ul>\n</li>\n<li>不适合\n<ul>\n<li><strong>数据间（建立）关系</strong></li>\n<li><strong>含有多项操作的事务</strong>（kv 数据库不擅长回滚恢复等操作）</li>\n<li><strong>查询数据</strong>（无法搜索 value）</li>\n<li><strong>操作关键字集合</strong>（一次只能操作一个键）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDE1NzAzMi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230157032.png</span>&quot; alt=&quot;image-20220619230157032&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDIwNzIzMi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230207232.png</span>&quot; alt=&quot;image-20220619230207232&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDIxNjgwNy5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230216807.png</span>&quot; alt=&quot;image-20220619230216807&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDI0NzE1MC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230247150.png</span>&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h2 id=\"9-文档数据库\"><a class=\"anchor\" href=\"#9-文档数据库\">#</a> 9. 文档数据库</h2>\n<ul>\n<li>数据库是如何完成基本存放的想法\n<ul>\n<li>文档彼此相似，但不必完全相同。<strong>文档数据库所存放的文档，就相当于键值数据库所存放的 “值”</strong>。</li>\n<li>文档数据库可视为<strong>其值可查的键值数据库。</strong></li>\n</ul>\n</li>\n<li>数据库存放的是什么东西，怎么存的\n<ul>\n<li><strong>“文档”</strong>(document) 是文档数据库中的主要概念。\n<ul>\n<li>其格式可以是<strong> XML、JSON、BSON</strong> 等。</li>\n<li>文档具备自述性 (self-describing)，呈现分层的<strong>树状数据结构</strong> (hierarchical tree data structure)，可以包含映射表、集合和标量值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230506254.png\" alt=\"image-20220619230506254\" /></p>\n<ul>\n<li>适合做什么，不适合做什么\n<ul>\n<li>适用：\n<ul>\n<li><strong>事件记录</strong>（数据结构灵活）</li>\n<li><strong>内容管理系统及博客平台</strong>（数据结构灵活，支持 JSON）</li>\n<li><strong>网站分析与实时分析</strong>（可以只更新部分数据，方便保存浏览量等信息）</li>\n<li><strong>电子商务应用程序</strong>（适应较为灵活的模式）</li>\n</ul>\n</li>\n<li>不适用：\n<ul>\n<li><strong>包含多项操作的复杂事务</strong>（不适合执行跨文档的原子操作）</li>\n<li><strong>查询持续变化的聚合结构</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDUzMjA3My5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230532073.png</span>&quot; alt=&quot;image-20220619230532073&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDUzOTUzMi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230539532.png</span>&quot; alt=&quot;image-20220619230539532&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMDczODM2OC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230738368.png</span>&quot; alt=&quot;image-20220619230738368&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h2 id=\"10-列族数据库\"><a class=\"anchor\" href=\"#10-列族数据库\">#</a> 10. 列族数据库</h2>\n<ul>\n<li>数据库是如何完成基本存放的想法\n<ul>\n<li>列族数据库，可以存储关键字及其映射值，并且可以把值分成多个列族，让每个列族代表一张数据映射表 (map of data)。</li>\n<li>列族数据库将数据存储在列族中，而列族里的行则把许多列数据与本行的 “行键”(row key) 关联起来。</li>\n</ul>\n</li>\n<li>数据库存放的是什么东西，怎么存的\n<ul>\n<li><strong>基本存储单元为 “列”</strong>，列由一个 **“名值对 **”(name-value pair) 组成，其中的<strong>名字也充当关键字</strong>。</li>\n<li>每个键值对都占据一列，并且都<strong>存有一个 “时间戳” 值</strong>。令数据过期、解决写入冲突、处理陈旧数据等操作都会用到时间戳。若某列数据不再使用，则数据库可于稍后的 “压缩阶段”(compaction phase) 回收其所占空间。</li>\n<li><strong>行是列的集合</strong>，这些<strong>列都附在某个关键字名下</strong>，或与之相连。由<strong>相似行所构成的集合就是列族</strong>。</li>\n<li>每个列族都可以与关系型数据库的 “行容器”(container of rows) 相对照:\n<ul>\n<li>两者都用关键字标识行，并且每一行都由多个列组成。</li>\n<li>其差别在于，列族数据库的各行不一定要具备完全相同的列，并且可以随意向其中某行加入一列，而不用把它添加到其他行中。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619230901046.png\" alt=\"image-20220619230901046\" /></p>\n<ul>\n<li>\n<p>“标准列族”(standard column family) 中的列都是 “简单列”(simple column) 。</p>\n</li>\n<li>\n<p>“超列族”(super column family)：</p>\n<ul>\n<li>如果某列中包含一个由小列组成的映射表，那么它就是 “超列”(super column)。可将超列视为 “列容器”(container of columns)。</li>\n<li>用超列构建的列族叫做 “超列族” 。</li>\n<li>超列族适合将相关数据存在一起。但是，如果部分列在大部分情况下都用不到，则存在不必要的开销。</li>\n</ul>\n</li>\n<li>\n<p>“键空间” (keyspace) 与关系型数据库中的 “数据库” 类似，与应用程序有关的全部列族都存放于此。</p>\n<ul>\n<li>必须先创建键空间，才能为其增添列族</li>\n</ul>\n</li>\n<li>\n<p>适合做什么，不适合做什么</p>\n<ul>\n<li>适合：<strong>事件记录、内容管理系统与博客平台、计数器、限期</strong>（利用时间戳 TTL）</li>\n<li>不适合：\n<ul>\n<li>需要以 “ACID 事务” 执行写入及读取操作的系统。</li>\n<li>根据查询结果聚合数据（需要把每一行读到客户端，成本高）</li>\n<li>开发早期或试探某个技术方案（改变查询模式成本高）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTA0OTU4MC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231049580.png</span>&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTEwMDM5Ny5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231100397.png</span>&quot; alt=&quot;image-20220619231100397&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTEwOTA1MS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231109051.png</span>&quot; alt=&quot;image-20220619231109051&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTA0MjQ1OS5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231042459.png</span>&quot; alt=&quot;image-20220619231042459&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h2 id=\"11-图数据库\"><a class=\"anchor\" href=\"#11-图数据库\">#</a> 11. 图数据库</h2>\n<ul>\n<li>数据库是如何完成基本存放的想法\n<ul>\n<li>图数据库可存放<strong>实体及实体间关系。</strong></li>\n<li>用图将数据一次性组织好，稍后便可根据 “关系” 以不同方式解读它。</li>\n</ul>\n</li>\n<li>数据库存放的是什么东西，怎么存的\n<ul>\n<li>实体也叫 **“节点”<strong>(node)，它们具有</strong>属性 **(property)。可将节点视为应用程序中某对象的实例。</li>\n<li>关系又叫 **“边”<strong>(edge)，它们也有</strong>属性 **，有<strong>类型</strong>。边具备<strong>方向性</strong> (directional significance)，而节点则按关系组织起来，以便在其中查找所需模式。</li>\n<li>实体和实体间关系组成的有向图（实体作为结点，实体间关系作为边）</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTE1Mzc0MC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231153740.png</span>&quot; alt=&quot;image-20220619231153740&quot; style=&quot;zoom: 45%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTIxMjQ5Mi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231212492.png</span>&quot; alt=&quot;image-20220619231212492&quot; style=&quot;zoom: 45%;&quot; /&gt;</p>\n<ul>\n<li>适合做什么，不适合做什么\n<ul>\n<li>适合：\n<ul>\n<li><strong>互联</strong>数据</li>\n<li>安排<strong>运输路线</strong></li>\n<li>分派<strong>货物</strong>和<strong>基于位置</strong>的服务</li>\n<li><strong>推荐引擎</strong>（结点间关系）</li>\n</ul>\n</li>\n<li>不适合：\n<ul>\n<li>更新全部或某子集内的实体（无法一次改变所有结点的某个属性）</li>\n<li>图数据库可能没有办法处理<strong>数据量过大的场合</strong>，即便模型适合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTMzNDYzNi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231334636.png</span>&quot; alt=&quot;image-20220619231334636&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTM0MTEzNC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231341134.png</span>&quot; alt=&quot;image-20220619231341134&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTM1MDIxNi5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231350216.png</span>&quot; alt=&quot;image-20220619231350216&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZW5nLWltZy5vc3MtY24tc2hhbmdoYWkuYWxpeXVuY3MuY29tL21hcmtkb3duLWltZy9pbWFnZS0yMDIyMDYxOTIzMTM1NjU1OC5wbmc=\">https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619231356558.png</span>&quot; alt=&quot;image-20220619231356558&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<h2 id=\"12-4种数据库大汇总\"><a class=\"anchor\" href=\"#12-4种数据库大汇总\">#</a> 12. 4 种数据库大汇总</h2>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220620212854163.png\" alt=\"image-20220620212854163\" /></p>\n<h2 id=\"提到的可能考点\"><a class=\"anchor\" href=\"#提到的可能考点\">#</a> 提到的可能考点</h2>\n<ul>\n<li>综合题\n<ul>\n<li>写 sql</li>\n<li>写关系代数</li>\n<li>写 E-R</li>\n</ul>\n</li>\n<li>简答题（几分就是几点）\n<ul>\n<li>NoSQL 和 SQL 的最大差异</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://peng-img.oss-cn-shanghai.aliyuncs.com/markdown-img/image-20220619225729150.png\" alt=\"image-20220619225729150\" /></p>\n",
            "tags": [
                "NJUSE",
                "数据管理基础",
                "数据管理基础"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/05/25/thoughts/%E6%9F%90%E5%A4%A7%E5%AD%A6-vivo%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95/",
            "url": "https://quas-modo.github.io/2023/05/25/thoughts/%E6%9F%90%E5%A4%A7%E5%AD%A6-vivo%E7%BC%96%E7%A8%8B%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95/",
            "title": "某大学-vivo编程马拉松大赛决赛记录",
            "date_published": "2023-05-24T16:04:43.000Z",
            "content_html": "<p>极限开发 24 小时，题目为 “发现世界的美 “。</p>\n<h2 id=\"项目构思\"><a class=\"anchor\" href=\"#项目构思\">#</a> 项目构思</h2>\n<p>我们小组经过一系列头脑风暴，想到过摄影、旅游、文字之美、代码之美等主题，最终选择了音乐之美作为主题。</p>\n<p>我们小组的构想是做一个将音乐具象化的项目，我们有两个主要想法。</p>\n<p>一个是音乐地图，将不同曲风的音乐赋予不同的颜色，根据音乐来源国家的经纬度标记在地图上。形成一幅新的五彩斑斓的地图。用户可以点击地图上的色点播放音乐，访问音乐的相关信息。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233510106.png\" alt=\"image-20230524233510106\" /></p>\n<p>另一个是音乐涂鸦墙，&quot;音乐涂鸦墙&quot; 是一个基于 Web 的互动艺术项目，让用户能够在虚拟的 &quot;墙&quot; 上 &quot;涂鸦&quot;，但不是使用颜色或图像，而是使用音乐。浏览的用户也可以将鼠标移到某个区域，然后会自动播放那个区域的音乐。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233816520.png\" alt=\"image-20230524233816520\" /></p>\n<h2 id=\"项目实现\"><a class=\"anchor\" href=\"#项目实现\">#</a> 项目实现</h2>\n<h3 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h3>\n<h4 id=\"搜索\"><a class=\"anchor\" href=\"#搜索\">#</a> 搜索</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233923408.png\" alt=\"image-20230524233923408\" /></p>\n<h4 id=\"3d地球标注\"><a class=\"anchor\" href=\"#3d地球标注\">#</a> 3D 地球标注</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234134694.png\" alt=\"image-20230524234134694\" /></p>\n<h4 id=\"色点音乐播放\"><a class=\"anchor\" href=\"#色点音乐播放\">#</a> 色点音乐播放</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524233959057.png\" alt=\"image-20230524233959057\" /></p>\n<h4 id=\"基于地图的随机类别云图\"><a class=\"anchor\" href=\"#基于地图的随机类别云图\">#</a> 基于地图的随机类别云图</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234029157.png\" alt=\"image-20230524234029157\" /></p>\n<h3 id=\"前端\"><a class=\"anchor\" href=\"#前端\">#</a> 前端</h3>\n<p>本人在尝试了找区域边界经纬度数据集 + konva（JavaScript 2d canvas library）绘制图，调用 Echarts 的好看的地图实现无果，没有 visa 注册 google map， 觉得高德地图 api 不是很好看后，无奈求助队友（给吴神磕一个），最终是调用了 mapbox 的 api 制作 3D 地图和 echarts 制作了云图。</p>\n<h3 id=\"后端\"><a class=\"anchor\" href=\"#后端\">#</a> 后端</h3>\n<p>后端使用自定义 @RateLimit 注解完成对高并发访问量的限制</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234923145.png\" alt=\"image-20230524234923145\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524234918177.png\" alt=\"image-20230524234918177\" /></p>\n<p>完成了高覆盖率的单元测试和集成测试</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235000474.png\" alt=\"image-20230524235000474\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235012320.png\" alt=\"image-20230524235012320\" /></p>\n<p>采取 SonarLint 实时代码质量检测</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230524235026802.png\" alt=\"image-20230524235026802\" /></p>\n<h2 id=\"写在最后\"><a class=\"anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>虽然最后的实现和最初的构想差得比较大，但是很喜欢这次组队，感觉团队氛围很好，以及被吴神和耿佬带飞了对吗。因为赶工，大家晚上基本只睡了两三个小时，实在撑不住了在桌上趴一会。</p>\n<p>感觉极限开发还是很考验平时的积累和功底的，自己以前没有完整地负责过一个具体项目的前端和后端，也没有上千行 / 上万行的开发经验积累，所以这次在黑客松比赛中比较吃力，有些愧疚自己拖了后腿。感觉也只有在真实的开发和负责实现中，才能真实地提高自己，光跟一些教程和官方文档只是杯水车薪。我知道我现在的技术还很弱很弱，不值一提。</p>\n<p>因为最后负责答辩，偷偷跑出去准备了很久 pre，没有心思听其他很多小组的实现，不过就我听的几组来说，有很多很敢说、很有答辩技巧的发言，有很多值得学习的地方。</p>\n<p>一次很独特的通宵体验，说着不想再经历这样的折磨了，不过可能等攒攒实力还是会再参加参加，挑战一下自己的极限吧。</p>\n",
            "tags": [
                "比赛"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture8-Graph/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture8-Graph/",
            "title": "Lecture8-Graph",
            "date_published": "2023-02-26T14:01:29.000Z",
            "content_html": "<h1 id=\"lecture8-图\"><a class=\"anchor\" href=\"#lecture8-图\">#</a> Lecture8 - 图</h1>\n<ul>\n<li>\n<p>考试重点</p>\n</li>\n<li>\n<p>概念：选择填空为主</p>\n</li>\n<li>\n<p>重点是理解</p>\n</li>\n<li>\n<p>连通性、各种性质</p>\n</li>\n<li>\n<p>强连通性、加权图、生成树 概念判断</p>\n</li>\n<li>\n<p><strong>邻接表、邻接矩阵</strong>要求掌握</p>\n</li>\n<li>\n<p>邻接二重表不考</p>\n</li>\n<li>\n<p>遍历要求</p>\n</li>\n<li>\n<p><strong>最小生成树算法</strong> 要求掌握重点</p>\n<ul>\n<li>kruskal</li>\n<li>prim</li>\n</ul>\n</li>\n<li>\n<p><strong>最短路径</strong> 要求掌握重点</p>\n<ul>\n<li>Dijkstra</li>\n<li><strong>BellmanFord</strong></li>\n<li><strong>Floyed</strong></li>\n</ul>\n</li>\n<li>\n<p>证明都不要求</p>\n</li>\n<li>\n<p>算法思想：除了动态规划不要求</p>\n<ul>\n<li>基本就是考考概念</li>\n</ul>\n</li>\n<li>\n<p><strong>BellmanFord 算法</strong>和<strong> Floyed 算法</strong>的算法流程要求</p>\n</li>\n<li>\n<p><strong>活动网络</strong>常考</p>\n<ul>\n<li>\n<p>包括拓扑排序</p>\n</li>\n<li>\n<p>AOV 网络：<strong>概念</strong>多，爱出题</p>\n<p>关键路径算法</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码再仔细看看</strong></p>\n<h1 id=\"图的定义\"><a class=\"anchor\" href=\"#图的定义\">#</a> 图的定义</h1>\n<ol>\n<li>\n<p><strong>Graph = (V, E)</strong></p>\n<ol>\n<li>V: nonempty finite vertice set(<strong>顶点集</strong>)  一个非空确定顶点个数的集合</li>\n<li>E: edge set (边集)</li>\n</ol>\n</li>\n<li>\n<p>Undirected Graph 无向图</p>\n<p>if the tuple denoting an edge is unordered, then (v1, v2) and (v2, v1) are the same edge.</p>\n</li>\n</ol>\n<h2 id=\"有向图\"><a class=\"anchor\" href=\"#有向图\">#</a> 有向图</h2>\n<p>If the tuple (元组) denoting an edge is ordered, then &lt;v1,v2&gt; and &lt;v2,v1&gt; are different edges.</p>\n<p>(如果表示的边的<strong>元组是有序</strong>的，也就是 &lt;v1,v2&gt; 和 &lt; v2,v1 &gt; 是不同的)</p>\n<p>v1: 始点</p>\n<p>v2: 终点</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/1.png\" alt=\"img\" /></a></p>\n<p>In a directed graph with n nodes, the number of edges &lt;=n*(n-1).  If “=” is satisfied, then it is called a complete directed  graph*.</p>\n<p>(一个有 n 个节点的有向图，其边的个数 &lt;= <em><em>n</em>(n-1)</em><em>，如果相等，则为是一个</em><em>完全有向图</em> *)</p>\n<p>完全图 (有向完全图): 指有向图中每两个顶点都相互指向。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209141507512.png\" alt=\"image-20221209141507512\" /></p>\n<h2 id=\"无向图\"><a class=\"anchor\" href=\"#无向图\">#</a> 无向图</h2>\n<p>If the tuple denoting an edge is unordered, then (v1,v2) and (v2,v1) are the same edge.</p>\n<p>(如果表示边的<strong>元组是无序</strong>的，则 (v1，v2) 和 (v2，v1) 是相同的边。)</p>\n<p>In an undirected graph with n nodes,  the number of edges &lt;=  n*(n-1)/2. If “=” is satisfied, then it is called a complete undirect  graph.</p>\n<p>(在一个有 n 个顶点的无向图中，边的个数 &lt;= <strong>n(n-1)/2</strong>，如果刚好相等，则被称为完全无向图)</p>\n<p>完全图 (无向完全图): 就是指每两个顶点之间都有一条边。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/2.png\" alt=\"img\" /></a></p>\n<h2 id=\"其他图\"><a class=\"anchor\" href=\"#其他图\">#</a> 其他图</h2>\n<p>以下两种图在我们的数据结构中不进行讨论</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/3.png\" alt=\"img\" /></a></p>\n<p><strong>不考虑 自环 (ring) 和 多重边</strong> 的多重图。</p>\n<h2 id=\"概念顶点的度数入度和出度\"><a class=\"anchor\" href=\"#概念顶点的度数入度和出度\">#</a> 概念 —— 顶点的度数（入度和出度）</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214131905817.png\" alt=\"image-20230214131905817\" /></p>\n<ol>\n<li>\n<p>对于无向图只有度数，而对于有向图不仅仅有入度，还有出度。</p>\n</li>\n<li>\n<p>degree dv of vertex v, <strong>TD(v)</strong>: is the number of edges incident on vertex v. In a directed graph :</p>\n<p>(顶点 v 的度数为 dv，TD (V) 是顶点 v 的度数，在有向图中)</p>\n<ol>\n<li>\n<p>in-degree of vertex v is the number of edges incident to v, <strong>ID(v)</strong>.</p>\n<p>(顶点 v 的入度是指向顶点 v 的边的个数)</p>\n</li>\n<li>\n<p>out-degree of vertex v is the number of edges incident from the v, <strong>OD(v)</strong>.</p>\n<p>(顶点 v 的出度从 v 出发的边的个数)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>性质：(度数)<strong>TD(v)=ID(v)+OD(v)</strong></p>\n<p>度数可以理解为，这个顶点的边</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/4.png\" alt=\"img\" /></a></p>\n<h2 id=\"图的性质\"><a class=\"anchor\" href=\"#图的性质\">#</a> 图的性质</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/9.png\" alt=\"img\" /></a></p>\n<p>所有的度数加起来是边的个数的两倍。</p>\n<h2 id=\"子图\"><a class=\"anchor\" href=\"#子图\">#</a> 子图</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132334890.png\" alt=\"image-20230214132334890\" /></p>\n<p>Graph G=(V,E),G’=(V‘,E‘), if V’包含于 V, E’包含于 E, and the vertices  incident on the edges in E’ are in V’, then G’ is the subgraph of G.</p>\n<p>如果图 G 和图 G’，如果 V’包含于 V，E’包含于 E, 并且 E’中顶点的边也在 G’中，那么 G’是 G 的子图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/5.png\" alt=\"img\" /></a></p>\n<h2 id=\"路径path\"><a class=\"anchor\" href=\"#路径path\">#</a> 路径 (path)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132326704.png\" alt=\"image-20230214132326704\" /></p>\n<p>A sequence of vertices P=i1,i2,……ik is an i1 to ik path in the graph of graph G=(V,E) iff the edge(ij,ij+1)is in E for every j, 1 &lt;= j &lt; k.</p>\n<p>在图 G=(V，E) 中，如果每 j 的边 (ij，ij+1) 在 E 中，1&lt;= j&lt; k，则顶点序列 P=i1，i2，…,ik 是 i1 到 ik 的路径。</p>\n<h2 id=\"简单路径和环simple-path-and-cycle\"><a class=\"anchor\" href=\"#简单路径和环simple-path-and-cycle\">#</a> 简单路径和环 (Simple path and cycle)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132416033.png\" alt=\"image-20230214132416033\" /></p>\n<ol>\n<li>\n<p>A Simple path is a path in which all vertices except possibly the first and last , are different.</p>\n<p>(简单路径：路径除了第一个和最后一个顶点中<strong>没有出现相同</strong>的顶点)</p>\n</li>\n<li>\n<p>A Simple cycle is a simple path with the same start and end vertex.</p>\n<p>(简单回路：起点和终点相同的时候的简单路径)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132549580.png\" alt=\"image-20230214132549580\" /></p>\n</li>\n</ol>\n<h2 id=\"连通图和连通分量connected-graph-connected-component\"><a class=\"anchor\" href=\"#连通图和连通分量connected-graph-connected-component\">#</a> 连通图和连通分量 (Connected graph &amp; Connected component)</h2>\n<ol>\n<li>\n<p>In a undirected graph, if there is a path from vertex v1 to v2, then v1 and v2 are connected.</p>\n<p>(在无向图中，如果 v1 到 v2 之间<strong>有一条路径</strong>，那么 v1 和 v2 是连通的)</p>\n</li>\n<li>\n<p>In a undirected graph ,if two <strong>arbitrary</strong> vertices are connected, then the graph is a connected graph</p>\n<p>(在无向图中，如果<strong>任意两个顶点是连通的，则该图是连通图</strong>)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/6.png\" alt=\"img\" /></a></p>\n<p><strong>极大连通子图</strong>：就是结点个数最多的连通的子图。</p>\n<h2 id=\"强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\"><a class=\"anchor\" href=\"#强联通图和强联通分量strong-connected-graph-and-strongly-connected-component\">#</a> 强联通图和强联通分量 (Strong connected graph and strongly connected component)</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214132823488.png\" alt=\"image-20230214132823488\" /></p>\n<ol>\n<li>\n<p>强连通图</p>\n<p>有向图 digraph 是强连通的，当它包含从 i 到 j 和从 j 到 i 的有向路径时，对于每对不同的顶点 i 和 j</p>\n<p>简单来说就是既要过的去，也要回得来</p>\n</li>\n<li>\n<p>强连通分量</p>\n<p>The maximum strong connected subgraph (极大强连通子图) of a non-strongly  connected graph is called strongly connected conponent  (强连通分量).</p>\n<p>(一个<strong>非强连通图的最大强连通子图</strong> (South-South-PosialSuth-Posiple  Fug) 称为强连通构 (Suth-Posiple Stand))</p>\n</li>\n</ol>\n<h2 id=\"加权图network\"><a class=\"anchor\" href=\"#加权图network\">#</a> 加权图 (Network)</h2>\n<ol>\n<li>\n<p>When weights and costs are assigned to edges, the resulting data  object is called <strong>weighted graph</strong> and <strong>weighted  digraph.</strong></p>\n<p>(当权值和代价分配给边时，得到的数据对象称为<strong>加权图</strong>和<strong>加权有向图</strong>。)</p>\n</li>\n<li>\n<p>The term <strong>network</strong> refers to weighted  connected graph and weighted connected digraph.</p>\n<p>(<strong>加权图</strong>是用来代指加权连通图和加权连通有向图)</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/7.png\" alt=\"img\" /></a></p>\n<h2 id=\"生成树spanning-tree\"><a class=\"anchor\" href=\"#生成树spanning-tree\">#</a> 生成树 (Spanning tree)</h2>\n<p>A spanning tree of a connected graph is its minimum connected subgraph(<strong>极小连通子图</strong>).  An n-vertex spanning tree has n-1 edges.</p>\n<p>(连通图的<strong>生成树</strong>是其极小连通子图。n 顶点生成树有 n-1 条边。)</p>\n<p>保持联通的最小边数的图</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/8.png\" alt=\"img\" /></a></p>\n<h1 id=\"adt-graph-and-digraph\"><a class=\"anchor\" href=\"#adt-graph-and-digraph\">#</a> ADT Graph and Digraph</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209142531480.png\" alt=\"image-20221209142531480\" /></p>\n<h1 id=\"representation-of-graphs-and-diagraphs\"><a class=\"anchor\" href=\"#representation-of-graphs-and-diagraphs\">#</a> Representation of graphs and diagraphs</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214133528703.png\" alt=\"image-20230214133528703\" /></p>\n<h2 id=\"adjacency-matrix-邻接矩阵\"><a class=\"anchor\" href=\"#adjacency-matrix-邻接矩阵\">#</a> Adjacency Matrix 邻接矩阵</h2>\n<p>graph 无向图</p>\n<p>digraph 有向图</p>\n<h3 id=\"无向图-2\"><a class=\"anchor\" href=\"#无向图-2\">#</a> 无向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143030813.png\" alt=\"image-20221209143030813\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143125763.png\" alt=\"image-20221209143125763\" /></p>\n<ol>\n<li>无向图的邻接矩阵是一个<strong>对称矩阵</strong></li>\n<li><strong>无向图的每个顶点的度数等于矩阵中每一行的和</strong>。</li>\n</ol>\n<h3 id=\"有向图-2\"><a class=\"anchor\" href=\"#有向图-2\">#</a> 有向图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143144805.png\" alt=\"image-20221209143144805\" /></p>\n<p>出度，一行的和；</p>\n<p>入度，一列的和</p>\n<h3 id=\"加权图\"><a class=\"anchor\" href=\"#加权图\">#</a> 加权图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143821067.png\" alt=\"image-20221209143821067\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143829081.png\" alt=\"image-20221209143829081\" /></p>\n<h2 id=\"代码实现数组\"><a class=\"anchor\" href=\"#代码实现数组\">#</a> 代码实现 —— 数组</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143933283.png\" alt=\"image-20221209143933283\" /></p>\n<p>dist 距离（权）</p>\n<p>template&lt;class NameType, class DistType&gt; 是一种模板，意味着 class 用 NameType 和 DistType 进行定义</p>\n<p>SeqList 是顺序表的意思</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209143953116.png\" alt=\"image-20221209143953116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144000077.png\" alt=\"image-20221209144000077\" /></p>\n<h2 id=\"代码实现链表\"><a class=\"anchor\" href=\"#代码实现链表\">#</a> 代码实现 —— 链表</h2>\n<p><strong>邻接表</strong></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144907924.png\" alt=\"image-20221209144907924\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144916071.png\" alt=\"image-20221209144916071\" /></p>\n<h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145022064.png\" alt=\"image-20221209145022064\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145032715.png\" alt=\"image-20221209145032715\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145043254.png\" alt=\"image-20221209145043254\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145423763.png\" alt=\"image-20221209145423763\" /></p>\n<h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145442706.png\" alt=\"image-20221209145442706\" /></p>\n<h3 id=\"找到在顶点表的位置\"><a class=\"anchor\" href=\"#找到在顶点表的位置\">#</a> 找到在顶点表的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145450950.png\" alt=\"image-20221209145450950\" /></p>\n<h3 id=\"给出顶点v的第一个邻接顶点的位置\"><a class=\"anchor\" href=\"#给出顶点v的第一个邻接顶点的位置\">#</a> 给出顶点 V 的第一个邻接顶点的位置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214134749181.png\" alt=\"image-20230214134749181\" /></p>\n<h3 id=\"找到下一个邻居\"><a class=\"anchor\" href=\"#找到下一个邻居\">#</a> 找到下一个邻居</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209145509374.png\" alt=\"image-20221209145509374\" /></p>\n<h2 id=\"不考邻接多重表adjacency-multilist\"><a class=\"anchor\" href=\"#不考邻接多重表adjacency-multilist\">#</a> 【不考】邻接多重表（adjacency multilist）</h2>\n<ol>\n<li>在无向图中，如果边数为 m, 则在邻接表表示中需 2m 个单位来存储。为了克服这一缺点，采用邻接多重表，每条边用一个结点表示.\n<ul>\n<li>其中的两个结点号就是边的两个点。</li>\n<li>path1 指向的就是同样始点 (vertex1)，顺序终点的结果。</li>\n<li>path2 执行的是以 vertex2 为始点顺序向下的。</li>\n</ul>\n</li>\n<li>Eg. 使用正常的邻接表，则右边应该有 10 个点，但是多重表就是只有 5 个表\n<ul>\n<li>默认情况下边的始点的编号要小于终点的编号大小。</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151914910.png\" alt=\"image-20221209151914910\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209151930870.png\" alt=\"image-20221209151930870\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/20.png\" alt=\"img\" /></a></p>\n<ol>\n<li>邻接表和邻接多重表之间的区别在于有几个顶点，有几个边。</li>\n<li>data 部分只记录 first-in 和 first-out，也就是第一条出边和第一条入边</li>\n</ol>\n<h1 id=\"图的遍历与连通性\"><a class=\"anchor\" href=\"#图的遍历与连通性\">#</a> 图的遍历与连通性</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209144224188.png\" alt=\"image-20221209144224188\" /></p>\n<h2 id=\"深度优先搜索depth-first-search\"><a class=\"anchor\" href=\"#深度优先搜索depth-first-search\">#</a> 深度优先搜索 (Depth-first-search)</h2>\n<h3 id=\"算法思想\"><a class=\"anchor\" href=\"#算法思想\">#</a> 算法思想</h3>\n<p>从图中某个顶点 V0 出发，访问它，然后选择一个<strong> V0</strong> 邻接到的<strong>未被访问的一个邻接点 V1</strong> 出发深度优先遍历图，当遇到一个所有邻接于它的结点都被访问过了的结点 U 时，回退到前一次<strong>刚被访问过的拥有未被访问的邻接点 W</strong>, 再从 W 出发深度遍历，…… 直到连通图中的所有顶点都被访问过为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/22.png\" alt=\"img\" /></a></p>\n<p>递归方法实现 算法中用一个辅助数组<strong> visited []</strong>:</p>\n<p>0: 未访问</p>\n<p>1: 访问过了</p>\n<p>我们假设图为连通图</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153919037.png\" alt=\"image-20221209153919037\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209153931254.png\" alt=\"image-20221209153931254\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"广度优先搜索breadth-search\"><a class=\"anchor\" href=\"#广度优先搜索breadth-search\">#</a> 广度优先搜索 (Breadth search)</h2>\n<h3 id=\"思想\"><a class=\"anchor\" href=\"#思想\">#</a> 思想</h3>\n<p>从图中某顶点 V0 出发，在访问了 V0 之后依次访问 v0 的各个未曾访问过的邻接点，然后分别从这些邻接点出发广度优先遍历图，直至图中所有顶点都被访问到为止.</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/23.png\" alt=\"img\" /></a></p>\n<p>算法同样需要一个辅助数组<strong> visited []</strong> 表示顶点是否被访问过。还需要一个队列，记正在访问的这一层和上一层的顶点。算法显然是<strong>非递归</strong>的.</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154815385.png\" alt=\"image-20221209154815385\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209154826520.png\" alt=\"image-20221209154826520\" /></p>\n<p><strong>算法分析</strong></p>\n<p>用邻接表表示<strong> O (N+E)</strong></p>\n<p>用邻接矩阵表示<strong> O (n<sup>2</sup>)</strong></p>\n<h2 id=\"连通分量\"><a class=\"anchor\" href=\"#连通分量\">#</a> 连通分量</h2>\n<p>连通图：任意两个顶点是连通的。</p>\n<p>以上讨论的是对一个无向的连通图或一个强连通图的有向图进行遍历，得到一棵深度优先或广度优先生成树。但当无向图（以无向图为例）为<strong>非连通图</strong>时，从图的某一顶点出发进行遍历（深度，广度）只能访问到该顶点所在的<strong>最大连通子图</strong>（即连通分量）的所有顶点。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209155103515.png\" alt=\"image-20221209155103515\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209160239621.png\" alt=\"image-20221209160239621\" /></p>\n<p><strong>加一个循环语句即可</strong></p>\n<h1 id=\"最小生成树minimum-cost-spinning-tree-mst\"><a class=\"anchor\" href=\"#最小生成树minimum-cost-spinning-tree-mst\">#</a> 最小生成树 minimum-cost spinning tree MST</h1>\n<h2 id=\"生成树\"><a class=\"anchor\" href=\"#生成树\">#</a> 生成树</h2>\n<h3 id=\"生成树的定义\"><a class=\"anchor\" href=\"#生成树的定义\">#</a> 生成树的定义</h3>\n<ol>\n<li>设<strong> G =(V，E)<strong> 是一个</strong>连通</strong>的无向图 (或是强连通有向图) 从图 G 中的任一顶点出发作遍历图的操作，把遍历走过的边的集合记为 TE (G)，显然 **G‘=(V，TE)** 是 G 之子图， <strong>G‘被称为 G 的生成树 (spanning tree)</strong>，也称为一个连通图.</li>\n<li>n 个结点的生成树有 n-1 条边。</li>\n<li>生成树的代价 (cost)：<strong>TE (G) 上诸边的代价之和</strong></li>\n<li>生成树不唯一</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/24.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小代价生成树\"><a class=\"anchor\" href=\"#最小代价生成树\">#</a> 最小代价生成树</h3>\n<p>各边权的<strong>总和</strong>为最小的生成树</p>\n<h2 id=\"贪心grandy求解最小代价生成树\"><a class=\"anchor\" href=\"#贪心grandy求解最小代价生成树\">#</a> 贪心 (Grandy) 求解最小代价生成树</h2>\n<p>6 个城市已固定，现从一个城市发出信息到每一个城市如何选择或铺设通信线路，使花费 (造价) 最低。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/25.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/26.png\" alt=\"img\" /></a></p>\n<p>两个算法：Prim, Kruskal.</p>\n<p>它们都使用了逐步求解（贪心算法）的策略。</p>\n<h3 id=\"贪心策略的具体内容\"><a class=\"anchor\" href=\"#贪心策略的具体内容\">#</a> 贪心策略的具体内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163354394.png\" alt=\"image-20230214163354394\" /></p>\n<p>Grandy 策略：</p>\n<p>设：连通网络 N={V,E}, V 中有 n 个顶点。</p>\n<ol>\n<li T0,T1,……,Tn-1=\"\">先构造 n 个顶点，0 条边的<strong>森林</strong> F =</li>\n<li>每次向 F 中加入一条边。该边是一端在 F 的某棵树 Ti 上而另一端不在 Ti 上的所有边中具有最小权值的边。 这样使 F 中两棵树合并为一棵，树的棵数 - 1</li>\n<li>重复上述操作 n-1 次</li>\n</ol>\n<p>去掉所有边，每次加入的边是当前最小的边，并且保证这个边不是回边。</p>\n<h3 id=\"最小生成树的类声明\"><a class=\"anchor\" href=\"#最小生成树的类声明\">#</a> 最小生成树的类声明</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163836664.png\" alt=\"image-20221209163836664\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209163925674.png\" alt=\"image-20221209163925674\" /></p>\n<h3 id=\"kruskal算法对边进行排序然后生成\"><a class=\"anchor\" href=\"#kruskal算法对边进行排序然后生成\">#</a> Kruskal 算法 (对边进行排序，然后生成)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214163725826.png\" alt=\"image-20230214163725826\" /></p>\n<p>把无向图的所有边排序</p>\n<p>一开始的最小生成树为</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/28.png\" alt=\"img\" /></a></p>\n<p>在 E 中选一条代价最小的边 (u,v) 加入 T，一定要满足 (u,v) 不和 TE 中已有的边构成回路</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/29.png\" alt=\"img\" /></a></p>\n<p>一直到 TE 中加满 n-1 条边为止。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/30.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164108267.png\" alt=\"image-20221209164108267\" /></p>\n<p><strong>邻接矩阵</strong></p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164144977.png\" alt=\"image-20221209164144977\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164151523.png\" alt=\"image-20221209164151523\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221209164158409.png\" alt=\"image-20221209164158409\" /></p>\n<p>排序：建立最小堆</p>\n<p>出堆操作：找到最小值</p>\n<p>find 操作：？</p>\n<p>union 操作：添加到数集中</p>\n<h3 id=\"prim算法任何起点选可通达的最小权重的边\"><a class=\"anchor\" href=\"#prim算法任何起点选可通达的最小权重的边\">#</a> Prim 算法（任何起点，选可通达的最小权重的边）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214165855967.png\" alt=\"image-20230214165855967\" /></p>\n<p>设：原图的顶点集合 V (有 n 个) 生成树的顶点集合 U (最后也有 n 个)，一开始为空 TE 集合为 {}</p>\n<p>步骤：</p>\n<ol>\n<li>U={1}<strong> 任何起始顶点</strong>，TE={}</li>\n<li>每次生成 (选择) 一条边。这条边是所有边 (u,v) 中代价 (权) 最小的边， u∈U,v∈V-U TE=TE+[(u,v)]; U=U+[v]</li>\n<li>当 U≠V，返回上面一个步骤</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/31.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/32.png\" alt=\"img\" /></a></p>\n<ol>\n<li>一开始只考虑从 1 号顶点到其他顶点之间的边。\n<ul>\n<li>泛泛而言，考虑 u 和 v 之间的边</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/33.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/34.png\" alt=\"img\" /></a></p>\n<h3 id=\"最小生成树不唯一\"><a class=\"anchor\" href=\"#最小生成树不唯一\">#</a> 最小生成树不唯一</h3>\n<ol>\n<li>对于一般的图来讲，最小生成树不唯一。</li>\n<li>所以相应的 Prime 算法和 Kruskal 算法也会出现多解的情况</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214170520688.png\" alt=\"image-20230214170520688\" /></p>\n<h3 id=\"prim算法实例\"><a class=\"anchor\" href=\"#prim算法实例\">#</a> prim 算法实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171319803.png\" alt=\"image-20230214171319803\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171407861.png\" alt=\"image-20230214171407861\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171416308.png\" alt=\"image-20230214171416308\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171427973.png\" alt=\"image-20230214171427973\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171433658.png\" alt=\"image-20230214171433658\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171439317.png\" alt=\"image-20230214171439317\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171444611.png\" alt=\"image-20230214171444611\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214171452042.png\" alt=\"image-20230214171452042\" /></p>\n<h3 id=\"prim算法实现\"><a class=\"anchor\" href=\"#prim算法实现\">#</a> Prim 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172406455.png\" alt=\"image-20230214172406455\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172414957.png\" alt=\"image-20230214172414957\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214172423013.png\" alt=\"image-20230214172423013\" /></p>\n<h1 id=\"最短路径\"><a class=\"anchor\" href=\"#最短路径\">#</a> 最短路径</h1>\n<ol>\n<li>设 G=(V,E) 是一个带权图 (有向，无向)，如果从顶点 v 到顶点 w 的一条路径为 (v,v1,v2,…,w)，其路径长度不大于从 v 到 w 的所有其它路径的长度，则该路径为从 v 到 w 的最短路径。</li>\n<li>背景：在交通网络中，求各城镇间的最短路径。</li>\n<li>三种算法:\n<ol>\n<li>边上权值为非负情况的从一个结点到其它各结点的最短路径 (单源最短路径)(Dijkstra 算法)</li>\n<li>边上权值为任意值的单源最短路径【边上存在负权值，但是没有负环】【不能出现小于零的环（负环），此时最小路径没有意义】</li>\n<li>边上权值为非负情况的所有顶点之间的最短路径</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"含非负权值的单源最短路径dijkstra\"><a class=\"anchor\" href=\"#含非负权值的单源最短路径dijkstra\">#</a> 含非负权值的单源最短路径 (Dijkstra)</h2>\n<p>每次从 「未求出最短路径的点」中 <strong>取出</strong> 距离距离起点 <strong>最小路径的点</strong>，以这个点为桥梁 <strong>刷新</strong>「未求出最短路径的点」的距离</p>\n<ol>\n<li>问题</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/44.png\" alt=\"img\" /></a></p>\n<h3 id=\"贪心思想\"><a class=\"anchor\" href=\"#贪心思想\">#</a> 贪心思想</h3>\n<p>起点 V0，首先直接连接，不管是否直接连接。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/61.png\" alt=\"img\" /></a></p>\n<p>排好序后，V0-V1 10 已经是最小的了，不可能再找到更短的路径</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/62.png\" alt=\"img\" /></a></p>\n<p>接下来，尝试 V0-v2 通过 V1 绕会不会比原来的更短 (考虑 V1-V2 直连)，V0-V4 从 V1 绕会不会比原来更短 (考虑 V2-V3 直连)，如果短则更新，此时 V0-V3 是三者中最小值，所以选择 V0-V3。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/63.png\" alt=\"img\" /></a></p>\n<p>尝试绕行 V3，计算直连，更新掉，然后重复</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/64.png\" alt=\"img\" /></a></p>\n<p>红色是已经选择好的，绿色是绕行选择。</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/65.png\" alt=\"img\" /></a></p>\n<p><strong>贪心：当前新产生的一条最短路径能否使已有路径在一步以内变短。</strong></p>\n<p>进一步思考，就是只进行一步，不进行多步。</p>\n<p>总体来讲：不可能走更长的路径，然后回来</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/45.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/46.png\" alt=\"img\" /></a></p>\n<p>数值更新，路径数组对应位置更新</p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/47.png\" alt=\"img\" /></a></p>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173554247.png\" alt=\"image-20230214173554247\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173607549.png\" alt=\"image-20230214173607549\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NumVertices <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大于所有边的权重的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> Edge<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> dist<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> path<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">[</span>NumVertices<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">shortestpath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//v 为当前节点，dist 数组是表示距离的数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 遍历 n 次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果可达，则用 path 数组记录下路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果不可达，则用 path 数组记录下不可达 (-1)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        s<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 表示访问过当前节点，并且距离为 0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">float</span> min<span class=\"token operator\">=</span>MAXNUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>  j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>min <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 如果结点 j 还没有访问过，并且 dist [j] 小于最小值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    u <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    min <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            s<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> w<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> w<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>s<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">//dist [u] 就是起点到 u 的距离，下面是关键条件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    dist<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//for</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214173613313.png\" alt=\"image-20230214173613313\" /></p>\n<h2 id=\"边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\"><a class=\"anchor\" href=\"#边上权值为任意值的单源最短路径贝尔曼-福特bellemanford\">#</a> 边上权值为任意值的单源最短路径（贝尔曼 - 福特）BellemanFord</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174453911.png\" alt=\"image-20230214174453911\" /></p>\n<p>distk 从<strong>源点 v</strong> 开始最多经过<strong>不构成带负长度边回路</strong>的<strong> k</strong> 条边的最短路径长度</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214174554207.png\" alt=\"image-20230214174554207\" /></p>\n<p><strong>递推公式</strong></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/49.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/49.png\" alt=\"img\" /></a></p>\n<ol>\n<li>更新的时候都是根据前面结果，遍历计算存储</li>\n<li>所有<strong>第 k 步，只受第 k-1 步的影响</strong></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214175305102.png\" alt=\"image-20230214175305102\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BellmanFord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 动态规划</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 初始化 dist 距离数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>v <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 初始化路径数组 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>u <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>u<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\">// 一直算到 n-1 步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        path<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>时间复杂度：O (n3)</li>\n</ol>\n<h2 id=\"所有顶点之间的最短路径floyed\"><a class=\"anchor\" href=\"#所有顶点之间的最短路径floyed\">#</a> 所有顶点之间的最短路径（Floyed）</h2>\n<ol>\n<li>前提：各边权值<strong>均大于 0</strong> 的带权<strong>有向图</strong>。\n<ul>\n<li>每个顶点到自己的代价为 0</li>\n</ul>\n</li>\n<li>方法：\n<ol>\n<li>把有向图的每一个顶点作为源点，重复执行 Dijkstra 算法 n 次，执行时间为 O (n<sup>3</sup>)</li>\n<li>Floyed 方法，算法形式更简单些，但是时间仍然是 O (n<sup>3</sup>)</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/50.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/50.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/51.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/51.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/52.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/52.png\" alt=\"img\" /></a></p>\n<ol>\n<li>简单来说就是：每次都会选择一个<strong>中介点</strong>，然后遍历整个数组，更新相应的需要更新的数组。</li>\n</ol>\n<h3 id=\"floyed算法实现\"><a class=\"anchor\" href=\"#floyed算法实现\">#</a> floyed 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214193445295.png\" alt=\"image-20230214193445295\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Alllength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>j<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>MAXNUM<span class=\"token punctuation\">)</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 路由表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">else</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>path<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>矩阵S中的元素a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>表示顶点<span class=\"token function\">i</span><span class=\"token punctuation\">(</span>第i个顶点<span class=\"token punctuation\">)</span>到顶点<span class=\"token function\">j</span><span class=\"token punctuation\">(</span>第j个顶点<span class=\"token punctuation\">)</span>的距离。矩阵P中的元素b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>，表示顶点i到顶点j经过了b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>记录的值所表示的顶点。</pre></td></tr></table></figure><ol>\n<li>算法复杂度：O (n3)</li>\n<li>参考:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">Floyed 算法</span></li>\n</ol>\n<h2 id=\"64-floyed算法参考\"><a class=\"anchor\" href=\"#64-floyed算法参考\">#</a> 6.4. Floyed 算法参考</h2>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQ0MjM0L2FydGljbGUvZGV0YWlscy82MDg3NTgxOA==\">最短路径问题</span></li>\n</ol>\n<h1 id=\"活动网络-activity-network常考\"><a class=\"anchor\" href=\"#活动网络-activity-network常考\">#</a> 活动网络 Activity Network（常考）</h1>\n<ol>\n<li>用顶点表示活动的网络 (AOV 网络)</li>\n<li>用边表示活动的网络 (AOE 网络)</li>\n<li>用顶点表示活动的网络</li>\n</ol>\n<h2 id=\"71-aov网络activity-on-vertex-network\"><a class=\"anchor\" href=\"#71-aov网络activity-on-vertex-network\">#</a> 7.1. AOV 网络 Activity On Vertex network</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200449558.png\" alt=\"image-20230214200449558\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/53.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/53.png\" alt=\"img\" /></a></p>\n<h3 id=\"aov网络结构\"><a class=\"anchor\" href=\"#aov网络结构\">#</a> AOV 网络结构</h3>\n<ol>\n<li><strong>图中表示课程</strong> (活动)，有向边 (弧) 表示先决条件。 若课程 i 是课程 j 的预修课程，则图中有弧 &lt; i,j&gt;</li>\n<li>AOV 网 (<strong>Activity On Vertex network</strong>)\n<ul>\n<li>用顶点表示活动，用弧表示活动间的优先关系的有向图称为 AOV 网。</li>\n</ul>\n</li>\n<li>直接前驱，直接后继\n<ul>\n<li>&lt;i,j&gt; 是网中一条弧，则 i 是 j 的直接前驱，j 是 i 的直接后继。</li>\n</ul>\n</li>\n<li>前驱，后继\n<ul>\n<li>从顶点 i-&gt; 顶点 j 有一条有向路径，则称 i 是 j 的前驱，j 是 i 的后继。</li>\n</ul>\n</li>\n<li><strong>AOV 网中，不应该出现有向环</strong></li>\n</ol>\n<h3 id=\"aov图的拓扑排序\"><a class=\"anchor\" href=\"#aov图的拓扑排序\">#</a> AOV 图的拓扑排序</h3>\n<ol>\n<li>有向图 G=(V,E),V 里结点的线性序列 (vi1,vi2,…,vin), 如果满足：在 G 中从结点 vi 到 vj 有一条路径，则序列中结点 Vi 必先于结点 vj ，称这样的线性序列为<strong>一拓扑序列</strong>。</li>\n<li>不是任何有向图的结点都可以排成拓扑序列，有环图是显然没有拓扑排序的。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214200713804.png\" alt=\"image-20230214200713804\" /></p>\n<h3 id=\"拓扑算法思想\"><a class=\"anchor\" href=\"#拓扑算法思想\">#</a> 拓扑算法思想</h3>\n<ol>\n<li>从图中选择一个<strong>入度为 0</strong> 的结点输出之。(如果一个图中，同时存在多个入度为 0 的结点，则随便输出任意一个结点)</li>\n<li>从图中<strong>删掉此结点及其所有的出边</strong>。</li>\n<li>反复执行以上步骤\n<ol>\n<li>直到所有结点都输出了，则算法结束</li>\n<li><strong>如果图中还有结点，但入度不为 0</strong>，则说明有环路</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"拓扑算法实现\"><a class=\"anchor\" href=\"#拓扑算法实现\">#</a> 拓扑算法实现</h3>\n<ol>\n<li>\n<p>具体实现算法：AOV 网用<strong>邻接表</strong>来实现</p>\n<p>数组<strong> count</strong> 存放各顶点的<strong>入度</strong></p>\n</li>\n<li>\n<p>并且为了避免每次从头到尾查找入度为 0 的顶点，建立<strong>入度为 0 的顶点栈</strong>，栈顶指针为 top，初始化时为 - 1.</p>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/66.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/66.png\" alt=\"img\" /></a></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/54.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/54.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214202307026.png\" alt=\"image-20230214202307026\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203538043.png\" alt=\"image-20230214203538043\" /></p>\n<p>没看懂，甚至可能是错的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//AOV 网的声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> Edge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> nodeTable <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> count <span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放入度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Graph</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> vertices<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">n</span> <span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            NodeTable<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> vertex <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">topologicalorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 拓扑排序</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span> <span class=\"token function\">Topologicalsort</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> top<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//top 是当前找到的入度为 0 的点，top==-1 表示找不到入度为 0 的点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 初始化无入度顶点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> top <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            top <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 进行正式排序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 如果 top 变为 - 1，那么显然存在回路</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Network has a cycle\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            top <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>j<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            Edge<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> l <span class=\"token operator\">=</span> NodeTable<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>connt<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 如果完成所有节点的删除</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    count<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    top <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            l <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpc29uZ2xpc29uZ2xpc29uZy9hcnRpY2xlL2RldGFpbHMvNDU1NDM0NTE=\">https://blog.csdn.net/lisonglisonglisong/article/details/45543451</span></p>\n<p>java 实现</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214203659497.png\" alt=\"image-20230214203659497\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">topsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CycleFound</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Queue</span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">// 队列或者栈都可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Vertex</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> each vertex v</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        v<span class=\"token punctuation\">.</span>topNum <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span><span class=\"token comment\">//Assign next number </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> each w adjacent <span class=\"token keyword\">to</span> <span class=\"token namespace\">v</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">--</span>w<span class=\"token punctuation\">.</span>indegree <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> counter <span class=\"token operator\">!=</span> <span class=\"token constant\">NUM_VERTICES</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CycleFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"算法复杂度分析\"><a class=\"anchor\" href=\"#算法复杂度分析\">#</a> 算法复杂度分析</h3>\n<ol>\n<li>算法分析：n 个顶点，e 条边</li>\n<li>建立链式栈 O (n)，每个结点输出一次，每条边被检查一次 O (n＋e)，所以为：O (n＋n＋e)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214201617082.png\" alt=\"image-20230214201617082\" /></p>\n<h2 id=\"72-aoe网络-activity-on-edge-network\"><a class=\"anchor\" href=\"#72-aoe网络-activity-on-edge-network\">#</a> 7.2. AOE 网络 Activity On Edge Network</h2>\n<ol>\n<li>用边表示活动的网络 (AOE 网络，Activity On Edge Network) 又称为<strong>事件顶点网络</strong></li>\n<li>顶点：\n<ul>\n<li>表示事件 (event)</li>\n<li>事件 —— 状态。表示它的入边代表的活动已完成，它的出边代表的活动可以开始，如下图 v0 表示整个工程开始，v4 表示 a4，a5 活动已完成 a7，a8 活动可开始。</li>\n</ul>\n</li>\n<li>有向边：表示活动\n<ul>\n<li>边上的权 —— 表示完成一项活动需要的时间</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/55.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/55.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/56.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/56.png\" alt=\"img\" /></a></p>\n<p><strong>有唯一的入度为 0 的开始节点</strong></p>\n<p><strong>有唯一的出度为 0 的完成结点</strong></p>\n<h3 id=\"关键路径\"><a class=\"anchor\" href=\"#关键路径\">#</a> 关键路径</h3>\n<ol>\n<li>目的：利用事件顶点网络，研究完成整个工程需要多少时间 加快那些活动的速度后，可使整个工程提前完成。</li>\n<li>关键路径：具有<strong>从开始顶点 (源点)-&gt; 完成顶点 (汇点) 的最长的路径</strong></li>\n</ol>\n<h3 id=\"一些定义\"><a class=\"anchor\" href=\"#一些定义\">#</a> 一些定义</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204156511.png\" alt=\"image-20230214204156511\" /></p>\n<ol>\n<li>\n<p>对于事件:</p>\n<ol>\n<li>\n<p>Ve [i]－表示事件 Vi 的可能最早发生时间：定义为从源点 V0-&gt;Vi 的<strong>最长路径长度</strong>，如 Ve [4]=7 天</p>\n</li>\n<li>\n<p>Vl [i]－表示事件 Vi 的允许的最晚发生时间：是在保证汇点 Vn-1 在 Ve [n-1] 时刻 (18) 完成的前提下，事件 Vi 允许发生的最晚时间＝ Ve [n-1]－ Vi-&gt;Vn－1 的最长路径长度。</p>\n<p><strong>是从最后汇点时间长度 - 两者之间最长路径</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/57.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/57.png\" alt=\"img\" /></a></p>\n<ol>\n<li>解释:\n<ol>\n<li>计算到最后汇点的总共最短时间：找到从源点到汇点的最大路径</li>\n<li>最早 12，因为之前不能做。</li>\n<li>最晚 12，是因为如果这时候不开始，最后完成不了。</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214204912475.png\" alt=\"image-20230214204912475\" /></p>\n<p>对于活动:</p>\n<ol>\n<li>e [k]－表示活动 ak=&lt;Vi,Vj &gt; 的可能的最早开始时间。 即等于事件 Vi 的可能最早发生时间。 e [k]=Ve [i]</li>\n<li>l [k]－表示活动 ak= &lt;Vi,Vj&gt; 的允许的最迟开始时间 l [k]＝Vl [j]-dur (&lt;i,j&gt;);</li>\n<li>l [k]-e [k]－表示活动 ak 的最早可能开始时间和最迟允许开始时间的时间余量。也称为松弛时间。 (slack  time)</li>\n<li>l [k]==e [k]－表示活动 ak 是没有时间余量的<strong>关键活动</strong></li>\n<li>一开始的例子中\n<ol>\n<li>a8 的最早可能开始时间 e [8]=Ve [4]=7</li>\n<li>最迟允许开始时间 l [8]=Vl [7]-dur (&lt;4,7&gt;) =14-7=7, 所以 a8 是关键路径上的关键活动</li>\n<li>a9 的最早可能开始时间 e [9]=Ve [5]=7</li>\n<li>最迟允许开始时间 l [9]=Vl [7]-dur (&lt;5,7&gt;) =14-4=10</li>\n</ol>\n</li>\n<li>所以 l [9]-e [9]=3, 该活动的时间余量为 3，即推迟 3 天或延迟 3 天完成都不 影响整个工程的完成，它不是关键活动</li>\n</ol>\n<h3 id=\"寻找关键路径的算法\"><a class=\"anchor\" href=\"#寻找关键路径的算法\">#</a> 寻找关键路径的算法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205249995.png\" alt=\"image-20230214205249995\" /></p>\n<ol>\n<li>求各事件的可能最早发生时间 从 Ve [0]=0 开始，向前推进求其它事件的 Ve Ve [i]=max {Ve [j]+dur (&lt; Vj,Vi &gt;)},  &lt;Vj,Vi &gt; 属于 S2, i=1,2,…n－1 j S2 是所有指向顶点 Vi 的有向边 &lt; Vj,Vi  &gt; 的集合</li>\n<li>求各事件的允许最晚发生时间 从 Vl [n-1]=Ve [n-1] 开始，反向递推 Vl [i]=min {Vl [j]-dur  (&lt;Vi,Vj&gt;)},  &lt;Vi,Vj &gt; 属于 S1,  i=n-2,n-3,…0 j  S1 是所有从顶点 Vi 出发的有向边 &lt; Vi,Vj &gt; 的集合</li>\n<li>以上的计算必须在拓扑有序及逆拓扑有序的前提下进行，求 Ve [i] 必须使 Vi 的所有前驱结点的 Ve 都求得求 Vl [i] 必须使 Vi 的所有后继结点最晚发生时间都求得。</li>\n<li>求每条边 (活动) ak= &lt;Vi,Vj&gt; 的 e [k], l [k] e [k]=Ve [i];l [k]=Vl [j]-dur (&lt;Vi,Vj&gt; ),k=1,2,…e</li>\n<li><strong>如果 e [k]==l [k]，则 ak 是关键活动</strong></li>\n<li>AOE 网用邻接表来表示，并且假设顶点序列已按拓扑有序与逆拓扑有序排好。如上例:\n<ul>\n<li>先正向推，然后反向推回来。(分别计算最早时间和最晚时间)</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205442329.png\" alt=\"image-20230214205442329\" /></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/58.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/58.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/59.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/59.png\" alt=\"img\" /></a></p>\n<h3 id=\"算法实现\"><a class=\"anchor\" href=\"#算法实现\">#</a> 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205814211.png\" alt=\"image-20230214205814211\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205823058.png\" alt=\"image-20230214205823058\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230214205833772.png\" alt=\"image-20230214205833772\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Graph</span> <span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CriticalPath</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> k <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> e<span class=\"token punctuation\">,</span> l <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Ve<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> Vl<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 初始化 Ve 数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 开始正向拓扑计算</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Edge <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span> cost <span class=\"token operator\">></span> Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                Ve<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 反向 Ve 数组，初始化 Vl 数组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 反向计算事件最迟开始时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            k<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost<span class=\"token operator\">&lt;</span>Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                Vl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>cost <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span> link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 用来比较最早开始时间和最晚开始时间，确定是否是关键路径</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        p<span class=\"token operator\">=</span>NodeTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>adj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            k<span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span> dest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            e<span class=\"token operator\">=</span>Ve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            l<span class=\"token operator\">=</span>Vl<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"&lt;\"</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\",\"</span><span class=\"token operator\">&lt;&lt;</span>k<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\">\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"is critical Activity\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            p<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt10/60.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/60.png\" alt=\"img\" /></a></p>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/internet-computer/%E6%9C%9F%E6%9C%AB%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/",
            "url": "https://quas-modo.github.io/2023/02/26/internet-computer/%E6%9C%9F%E6%9C%AB%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/",
            "title": "计网期末名词解释",
            "date_published": "2023-02-26T08:17:28.000Z",
            "content_html": "<p>计网期末会出一道名词解释的题目，8 个英文缩写，1 分全称，1 分中文，1 分解释。平常可以带着看看，不会考很偏僻的，一般都是协议或者常用的名词。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"互联网计算名词解释\"><a class=\"anchor\" href=\"#互联网计算名词解释\">#</a> 《互联网计算》名词解释</h1>\n<table>\n<thead>\n<tr>\n<th>简写</th>\n<th>全称</th>\n<th>中文</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LAN</td>\n<td>Local Area Networks</td>\n<td>局域网</td>\n<td>是指在某一区域内由多台计算机互联成的计算机组</td>\n</tr>\n<tr>\n<td>WAN</td>\n<td>Wide Area Networks</td>\n<td>广域网</td>\n<td>指一种<strong>跨地区的数据通讯网络</strong>，通常包含一个国家或地区</td>\n</tr>\n<tr>\n<td>ISP</td>\n<td>Internet Service Providers</td>\n<td>互联网服务提供商</td>\n<td>向广大用户综合提供互联网<strong>接入业务</strong>、信息业务、和增值业务的电信运营商</td>\n</tr>\n<tr>\n<td>ICP</td>\n<td>Internet Content Provider</td>\n<td>互联网内容提供商</td>\n<td>向广大用户综合提供互联网信息业务和增值业务的电信运营商</td>\n</tr>\n<tr>\n<td>NAP</td>\n<td>Network Access Point</td>\n<td>网络接入点</td>\n<td>是因特网的路由选择层次体系中的通信交换点</td>\n</tr>\n<tr>\n<td>OSI</td>\n<td>Model <strong>Open System Interconnection</strong></td>\n<td>开放式系统互联</td>\n<td>OSI 将计算机网络体系结构（architecture）划分为以下七层：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</td>\n</tr>\n<tr>\n<td>ISO</td>\n<td><strong>International</strong> Organization for Standardization</td>\n<td>国际标准化组织</td>\n<td>在全世界范围内促进标准化工作的开展</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td><strong>Transmission</strong> Control Protocol</td>\n<td>传输控制协议</td>\n<td>一种面向连接的、可靠的、基于字节流的传输层通信协议，不支持单播和组播</td>\n</tr>\n<tr>\n<td>UDP</td>\n<td>User Datagram Protocol</td>\n<td>用户数据报协议</td>\n<td>是 OSI 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠、无连接、无确认、无流控制的信息传送服务</td>\n</tr>\n<tr>\n<td>IP</td>\n<td>Internet Protocol</td>\n<td>网际互联协议</td>\n<td>由 network ID 与 host ID 组成，0-127 Class A address,128-191 Class B  address,192-223 Class C address,224-239 Class D-Multicast,240-255 Class  E-Research</td>\n</tr>\n<tr>\n<td>FTP</td>\n<td>File Transfer Protocol</td>\n<td>文件传输协议</td>\n<td>用于在网络上进行文件传输的应用层协议，使用 TCP 传输。FTP 是可靠的，面向连接的服务。基于<strong> TCP 20 和 21 端口</strong>（<em>工作流程：首先通过套接字建立控制连接，然后建立数据连接，通过数据连接传输数据</em>）</td>\n</tr>\n<tr>\n<td>HTTP</td>\n<td>Hypertext Transfer Protocol</td>\n<td>超文本传输协议</td>\n<td>HTTP 是<strong>面向事务</strong>、<strong>无状态</strong>、<strong>无连接</strong>的客户服务器协议。</td>\n</tr>\n<tr>\n<td>SMTP</td>\n<td>Simple Mail Transfer protocol</td>\n<td>简单邮件<strong>发送</strong>协议</td>\n<td>它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP 协议属于 TCP/IP  协议族，它帮助每台计算机在发送或中转信件时找到下一个目的地。通过 SMTP 协议所指定的服务器，就可以把 E-mail  寄到收信人的服务器上了，整个过程只要几分钟。SMTP 服务器则是遵循 SMTP 协议的发送邮件服务器，用来发送或中转发出的电子邮件。用于：  用户代理把邮件传送到服务器；在邮件服务器之间的传送</td>\n</tr>\n<tr>\n<td>DNS</td>\n<td>Domain Name System</td>\n<td>域名系统</td>\n<td>因特网上作为域名和 IP 地址相互映射的一个分布式数据库，将域名转化为 IP  地址，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的 IP  数串。共分为三级域名、二级域名、顶级域名。因特网采用层次树状结构命名方法，由多个域名服务器共同完成。每个服务器接收到域名后尝试解析，如果不能解析则传给上一层服务器。</td>\n</tr>\n<tr>\n<td>TFTP</td>\n<td><strong>Trivial</strong> File Transfer Protocol</td>\n<td><strong>普通</strong>文件传输协议</td>\n<td>TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，&lt;u&gt; 提供不复杂、开销不大的文件传输服务。无连接的服务。基于 UDP&lt;/u&gt;，小且容易实现</td>\n</tr>\n<tr>\n<td>NIC</td>\n<td>Network Interface Card</td>\n<td>网卡</td>\n<td>是电脑与局域网相互连接的设备，数据链路层</td>\n</tr>\n<tr>\n<td>UTP</td>\n<td>Unshielded Twisted Pair</td>\n<td>无屏蔽双绞线</td>\n<td>由 8 根不同颜色的线分成 4 对绞合在一起，无金属屏蔽材料；线缆不需要接地，因此便于在线缆末端加上连接器；&lt;u&gt; 价格低廉 &lt;/u&gt;；&lt;u &gt; 直径小 &lt;/u&gt;，因此 &lt; u &gt; 安装简单 &lt;/u &gt; 且更适合安装在管道中；和其他铜传输介质具有一样的数据传输速率；使用 RJ 连接器后极大地降低了噪音的影响。</td>\n</tr>\n<tr>\n<td>TDM</td>\n<td>Time Division Multiplexing</td>\n<td>时分复用</td>\n<td>采用同一物理连接的不同时段来传输不同的信号，达到多路传输的目的；或者是时分复用是将时间划分为一段段等长的时分复用（TDM）帧，每个时分复用的用户在每个 TDM 帧中占用固定序号的时隙</td>\n</tr>\n<tr>\n<td>STDM</td>\n<td>Static Division Multiplexing</td>\n<td>统计时分复用</td>\n<td>是一种根据用户实际需要动态分配线路资源的时分复用方法</td>\n</tr>\n<tr>\n<td>FDM</td>\n<td>Frequency Division Multiplexing</td>\n<td>频分复用</td>\n<td>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带</td>\n</tr>\n<tr>\n<td>WDM</td>\n<td>Wavelength（波长） Division Multiplexing</td>\n<td>波分复用</td>\n<td>就是光的频分复用</td>\n</tr>\n<tr>\n<td>CDM</td>\n<td><strong>Code</strong> Division Multiplexing</td>\n<td><strong>码</strong>分复用</td>\n<td>常用的名词是码分多址 CDMA（Code Division Multiple Access）靠不同的编码来区分各路原始信号的一种复用方式</td>\n</tr>\n<tr>\n<td>CDMA</td>\n<td>Code Division Multiple Access</td>\n<td>码分多址</td>\n<td>是一种多路方式，多路信号只占用一条信道</td>\n</tr>\n<tr>\n<td>LLC</td>\n<td>Logical Link Control</td>\n<td>逻辑链路控制</td>\n<td>是局域网中数据链路层的上层部分。用户的数据链路服务通过 LLC 子层为网络层提供统一的接口。逻辑上标志不同的协议类型并且封装起来。处理差错通知，网络拓扑和流控制。</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>Media Access Control</td>\n<td>介质访问控制</td>\n<td>OSI 模型中，数据链接层的子层。MAC 地址是 OSI 模型中对应数据链路层的地址，每个网络位置都有一个唯一的编号。定义了物理线路上怎样传输帧。解决了物理地址问题，定义网络拓扑和流水线</td>\n</tr>\n<tr>\n<td>CSMA/CD</td>\n<td>Carrier Sense Multiple Access with Collision Detection</td>\n<td>带冲突检测的载波侦听多路访问</td>\n<td>带冲突检测的载波侦听多路访问（Carrier Sense Multiple Access with Collision  Detection），“多点接入” 就是说明这是总线型网络，“载波监听” 就是用电子技术检测总线上有没有其他计算机也在发送。“碰撞检测” 也就是 “边发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。</td>\n</tr>\n<tr>\n<td>CSMA/CA</td>\n<td>Carrier Sense Multiple Access with Collision Avoidance</td>\n<td>避免冲突的载波侦听多路访问</td>\n<td></td>\n</tr>\n<tr>\n<td>AP</td>\n<td>Access Point</td>\n<td>接入点</td>\n<td></td>\n</tr>\n<tr>\n<td>SAP</td>\n<td>Service Access Point</td>\n<td>服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>DSAP</td>\n<td>Destination Service Access Point</td>\n<td>目标服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>SSAP</td>\n<td>the Source Service Access Point</td>\n<td>源服务访问点</td>\n<td></td>\n</tr>\n<tr>\n<td>OUI</td>\n<td>Organizational Unique Identifier</td>\n<td>组织唯一标识符</td>\n<td></td>\n</tr>\n<tr>\n<td>DSSS</td>\n<td>Direct Sequence Spread Spectrum</td>\n<td>直接序列扩频</td>\n<td></td>\n</tr>\n<tr>\n<td>OFDM</td>\n<td>Orthogonal Frequency Division Multiplexing</td>\n<td>正交频分复用技术</td>\n<td></td>\n</tr>\n<tr>\n<td>BSS</td>\n<td>Basic Service Set</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ESS</td>\n<td>Extended Service Set</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>BS</td>\n<td>Base Station</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SSID</td>\n<td>Service Set Identifier</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>WLAN</td>\n<td>Wireless Local Area Network</td>\n<td>无线局域网</td>\n<td>指应用无线通信技术将计算机设备互联起来，构成可以互相通信和实现资源共享的网络体系</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgment</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>NAT</td>\n<td>Network Address Translations</td>\n<td>网络地址转换</td>\n<td>网络地址转换，将网络内部的私有 IP 地址转换为公有 IP 地址以节省 IP 地址的方法。只能一对一映射</td>\n</tr>\n<tr>\n<td>PAT</td>\n<td>Port Address Translation</td>\n<td>端口地址转换</td>\n<td>是对网络地址转换（NAT）的扩展，它允许 &lt;u&gt; 本地网（LAN）上的多个设备映射到一个单一的公共 IP 地址 &lt;/u&gt;</td>\n</tr>\n<tr>\n<td>CIDR</td>\n<td>Classless InterDomain Routing</td>\n<td>无类域间路由</td>\n<td>无类域间路由（Classless Inter-Domain  Routing），是一个在因特网上创建附加地址的方法，这些地址提供给服务提供商（ISP），再由 ISP 分配给客户，（VLSM + CIDR  就形成了如 192.168.1.0/28 子网掩码 255.255.255.240 这样的形式）</td>\n</tr>\n<tr>\n<td>RARP</td>\n<td>Reverse Address Resolution Protocol</td>\n<td>反向地址解析协议</td>\n<td>反向地址解析协议（Reverse Address Resolution Protocol），ARP 为 IP 到 MAC 的转换，而  RARP 为 MAC 到 IP 的转换，向 RARP 服务器请求分配 IP。主要流程：发出要反向解析的物理地址并希望返回其对应的 IP  地址。发送主机发送一个本地的 RARP 广播，在此广播包中，声明自己的 MAC 地址并且请求任何收到此请求的 RARP 服务器分配一个 IP  地址。 本地网段上的 RARP 服务器收到此请求后，检查其 RARP 列列表，查找该 MAC 地址对应的 IP 地址。 如果存在，RARP  服务器器就给源主机发送一个响应数据包并将此 IP 地址提供给对方主机使用；如果不存在，RARP 服务器对此不做任何的响应。 源主机收到从  RARP 服务器的响应信息，就利用得到的 IP 地址进行通讯；如果一直没有收到 RARP 服务器的响应信息，表示初始化失败。</td>\n</tr>\n<tr>\n<td>BOOTP</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DHCP</td>\n<td>Dynamic Host Configuration Protocol</td>\n<td>动态主机配置协议</td>\n<td>是一个局域网的网络协议，使用 UDP 协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段</td>\n</tr>\n<tr>\n<td>ARP</td>\n<td>Address Resolution Protocol</td>\n<td>地址解析协议</td>\n<td>把 IP 地址解析为硬件地址，解决了同一个局域网上的主机或者路由器的 IP 地址和硬件地址的映射问题。ARP 的高速缓存可以大大减少网络上的通信量。只针对同一网段</td>\n</tr>\n<tr>\n<td>IGP</td>\n<td>Interior Gateway Protocols</td>\n<td>内部网关协议</td>\n<td></td>\n</tr>\n<tr>\n<td>EGP</td>\n<td>Exterior Gateway Protocols</td>\n<td>外部网关协议</td>\n<td></td>\n</tr>\n<tr>\n<td>DVP</td>\n<td>Distance Vector Protocols</td>\n<td>距离矢量协议</td>\n<td>距离矢量路由算法是动态路由算法。它是这样工作的：每个路由器维护一张矢量表，表中列出了当前已知的到 每个目标的最佳距离，以及所使用的线路。通过在邻居之间相互交换信息，路由器不断地更新它们内部的表。</td>\n</tr>\n<tr>\n<td>LSP</td>\n<td>Link State Protocols</td>\n<td>链路状态协议</td>\n<td>&lt;u&gt; 每个路由器都了解整个网络的拓扑结构，利用算法计算两个路由之间的最短路径 &lt;/u&gt;，更新由事件触发，每次更新都只向周围的路由器传递路由表的更新信息，包括 OSPF 等</td>\n</tr>\n<tr>\n<td>RIP</td>\n<td><strong>Routing Information Protocol</strong></td>\n<td>路由信息协议</td>\n<td>分布式 &lt;u&gt; 基于距离向量的路由选择协议，只适用于小型网络 &lt;/u&gt;。按固定的时间间隔与相邻路由器交换信息。交换的信息是自己当前的路由表，即到达本自治系统中所有网络的（最短）距离，以及到每个网络应经过的下一跳路由器。但是不知道全网的拓扑结构。</td>\n</tr>\n<tr>\n<td>IGRP</td>\n<td>Interior Gateway Route Protocol</td>\n<td>内部网关路由协议</td>\n<td></td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>Enhanced Interior Gateway Routing Protocol</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SPF</td>\n<td>Shortest Path First</td>\n<td>最短路径优先算法</td>\n<td>最短路径算法，这个算法其实就是 Dijkstra 算法，是 LSP 中计算路径的一种方式</td>\n</tr>\n<tr>\n<td>OSPF</td>\n<td>Open Shortest Path First</td>\n<td>最短路径优先协议</td>\n<td>基于分布式的链路状态协议，适用于大型互联网。OSPF 只在链路状态发生变化时，才用向本自治系统内的所有路由器，用洪泛法发送与本路由器相邻的所有路由器的链路状态信息，最终了解全网的拓扑结构图。</td>\n</tr>\n<tr>\n<td>VLSM</td>\n<td>Variable Length Subnet Mask</td>\n<td>可变长度子网掩码</td>\n<td>规定了一个网络在划分子网时的不同部分使用不同的子网掩码，更有效的使用 IP 地址；使用路由汇总的能力更强</td>\n</tr>\n<tr>\n<td>ICMP</td>\n<td>Internet Control Message Protocol</td>\n<td>因特网控制报文协议</td>\n<td>因特网控制报文协议（Internet Control Message Protocol），是为了提高 IP 数据报交付成功的机会，允许主机或路由器报告差错情况和提供有关异常情况报告的协议，运行在 IP 层。</td>\n</tr>\n<tr>\n<td>IGMP</td>\n<td>Internet Group Management Protoco</td>\n<td>网络组管理协议</td>\n<td></td>\n</tr>\n<tr>\n<td>PING</td>\n<td>Packet InterNet Groper</td>\n<td>因特网包探测器</td>\n<td>用于测试网络连接量的程序。使用了 ICMP 回送请求和回送回答报文，是应用程序直接使用网络层 ICMP 的例子，没有通过 TCP/UDP</td>\n</tr>\n<tr>\n<td>MSS</td>\n<td>Maximum Segment Size</td>\n<td>最大报文段长度</td>\n<td></td>\n</tr>\n<tr>\n<td>MTU</td>\n<td>Maximal Transfer Unit</td>\n<td>最大传输单位</td>\n<td></td>\n</tr>\n<tr>\n<td>EBCDIC</td>\n<td>Extended Binary Coded Decimal Interchange Code</td>\n<td>扩展二进制编码的十进制交换码</td>\n<td></td>\n</tr>\n<tr>\n<td>ASCII</td>\n<td>American Strandard Code for Information Interchange</td>\n<td>美国信息交换标准码</td>\n<td></td>\n</tr>\n<tr>\n<td>JPEG</td>\n<td>Joint Photographic Experts Group</td>\n<td>联合图像专家组</td>\n<td></td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>Graphic Interchange Format</td>\n<td>图像互换格式</td>\n<td></td>\n</tr>\n<tr>\n<td>URL</td>\n<td>Uniform Resource Locator</td>\n<td>统一资源定位符</td>\n<td>是因特网的万维网服务程序上用于指定信息位置的表示方法，&lt;协议&gt;：//&lt; 主机域名或者 ip 地址 &gt;：&lt; 端口号 &gt;/&lt; 路径 &gt;</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td>HyperText Markup Language</td>\n<td>超文本标记语言</td>\n<td>定义了许多用于排版的命令 (标签) 是一种可以用任何文本编辑器创建的 ASCII 码文件</td>\n</tr>\n<tr>\n<td>POP3</td>\n<td>Post Office Protocol version 3</td>\n<td><strong>邮局协议</strong>版本 3</td>\n<td>用于从服务器读取邮件。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件</td>\n</tr>\n<tr>\n<td>MIME</td>\n<td>Multipurpose Internet Mail Extensions</td>\n<td>因特网协议扩充</td>\n<td></td>\n</tr>\n<tr>\n<td>SNMP</td>\n<td>the Simple Network Management Protocol</td>\n<td>简单网络管理协定</td>\n<td>使用 UDP 的应用层协议</td>\n</tr>\n<tr>\n<td>TLD</td>\n<td>Top Level Domain</td>\n<td>顶级域</td>\n<td>国家 TLD: <code>.cn .us .uk</code> , 通用 TLD: <code>.com .net .org .edu</code></td>\n</tr>\n<tr>\n<td>DHCP</td>\n<td>Dynamic Host Configuration Protocol</td>\n<td>动态主机配置协议</td>\n<td></td>\n</tr>\n<tr>\n<td>IS-IS</td>\n<td>Intermediate System-to-Intermediate System</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>Enhanced Interior Gateway Routing Protocol</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>STP</td>\n<td>the Spanning-Tree Protocol</td>\n<td>生成树协议</td>\n<td>该协议可应用于在网络中建立树形拓扑，消除网络中的环路，并且可以通过一定的方法实现路径冗余，但不是一定可以实现路径冗余</td>\n</tr>\n<tr>\n<td>STP</td>\n<td>Shielded Twisted Pair</td>\n<td>屏蔽双绞线</td>\n<td>是一种广泛用于数据传输的铜质双绞线</td>\n</tr>\n<tr>\n<td>BPDU</td>\n<td>bridge protocol data units</td>\n<td>桥接数据单元</td>\n<td>用于在 STP 中传递拓扑信息、选举等</td>\n</tr>\n<tr>\n<td>CSU</td>\n<td>Channel Service Units</td>\n<td>通道服务单元</td>\n<td></td>\n</tr>\n<tr>\n<td>DSU</td>\n<td>Digital Service Units</td>\n<td>数字服务单元</td>\n<td></td>\n</tr>\n<tr>\n<td>PPP</td>\n<td>Point-to-Point Protocol</td>\n<td>点对点协议</td>\n<td>是为在同等单元之间传输数据包这样的简单链路设计的数据链路层协议，是数据链路层使用最多的一种协议。这种链路提供全双工操作，并按照顺序传递数据包。特点为：简单；只检测差错而不纠正差错，不进行流量控制；支持多种网络层协议。</td>\n</tr>\n<tr>\n<td>HDLC</td>\n<td>High-Level Data Link Control</td>\n<td>高级数据链路控制</td>\n<td>是一个在同步网上传输 数据、面向比特的数据链路层协议</td>\n</tr>\n<tr>\n<td>LAPB</td>\n<td>Link Access Procedure, Balanced</td>\n<td>平衡的链路访问程序</td>\n<td></td>\n</tr>\n<tr>\n<td>ISDN</td>\n<td>Integrated Services Digital Networks</td>\n<td>综合数字服务网络</td>\n<td>以电话综合数字网为基础发展成的通信网，能提供端到端的数字连接，用来承载包括话音和非话音在内的多种电信业务。</td>\n</tr>\n<tr>\n<td>ADSL</td>\n<td>Asymmetric Digitla Subscriber Line</td>\n<td>非对称数字用户线路</td>\n<td>非对称数字用户线路（Aysmmetric Digital Subscriber Line），用数字技术对现有的模拟电话用户线进行改造，使它能承载宽带数字业务。ADSL 下行带宽远远大于上行带宽，因此得名 “非对称”。</td>\n</tr>\n<tr>\n<td>HFC</td>\n<td>Synchronous Optical Network</td>\n<td>同步光纤网</td>\n<td></td>\n</tr>\n<tr>\n<td>SONET</td>\n<td>Synchronous Optical Network</td>\n<td>同步光纤网</td>\n<td></td>\n</tr>\n<tr>\n<td>CHAP</td>\n<td>Challenge Handshake Authentication  Protocol</td>\n<td>挑战握手认证协议</td>\n<td>挑战握手认证协议（Challenge Handshake Authentication  Protocol），链路建立阶段结束之后，认证者向对端点发送 “challenge” 消息；对端点用经过单向哈希函数计算出来的值做应答；认证者根据它自己计算的哈希值来检查应答，如果值匹配，认证得到承认，否则连接应该终止；经过一定的随机间隔，认证者发送一个新 challenge 给端点，重复上述步骤</td>\n</tr>\n<tr>\n<td><strong>PAP</strong></td>\n<td>Password Authentication Protocol</td>\n<td>密码认证协议</td>\n<td>远程节点不停的在链路上反复发送用户名 / 密码，直到验证通过或者连接终止。不健壮的身份认证协议，使用明文发送密码。连接建立前只有一次认证。</td>\n</tr>\n<tr>\n<td>IEEE MAC Sub-layer</td>\n<td>Institute of Electrica and Electronics Engineers MAC Sub_layer</td>\n<td>电气与电子工程师学会的 MAC 子层划分</td>\n<td>IEEE 将数据链路层分成 LLC（Logical Link Control，逻辑链路控制）和  MAC（Media Access Control，介质访问控制）两个子层。MAC 控制各个 host 对 media 的使用权。MAC  子层定义了 frame 如何在物理线上运输，处理物理地址，定义网络拓扑和网线使用规则。</td>\n</tr>\n<tr>\n<td>Split Horizon</td>\n<td></td>\n<td>水平分割</td>\n<td>是一种避免路由环路的出现和加快路由汇聚的技术。水平分割法的规则和原理是路由器从某个接口接收到的更新信息不允许再从这个接口发回去。</td>\n</tr>\n<tr>\n<td>Flow Control</td>\n<td></td>\n<td>流量控制</td>\n<td>让发送方的发送速率不要太快，要让接收方来得及接收。</td>\n</tr>\n<tr>\n<td>ACL</td>\n<td>Access Control Lists</td>\n<td>访问控制列表</td>\n<td>是路由器和交换机接口的指令列表，用来控制端口进出的数据包</td>\n</tr>\n<tr>\n<td>ARQ</td>\n<td>Automatic Repeat-reQuest</td>\n<td>自动重传请求</td>\n<td>是 OSI 模型中<strong>数据链路层</strong>的错误纠正协议之一</td>\n</tr>\n<tr>\n<td>B Channel</td>\n<td>Barrier Channel</td>\n<td>B 信道</td>\n<td>用于电路交换（circuit-switch）的数据，通过 PPP 或 HDLC，B 信道工作在 64 kbps 的速率下，用于传输数据和语音流量</td>\n</tr>\n<tr>\n<td>BRI</td>\n<td>Basic Rate Interface</td>\n<td>基本速率接口</td>\n<td>BRI = 2B + D</td>\n</tr>\n<tr>\n<td>CRC</td>\n<td>Cyclic Redundancy Check</td>\n<td>循环冗余校验</td>\n<td></td>\n</tr>\n<tr>\n<td>D Channel</td>\n<td>Delta Channel</td>\n<td>D 信道</td>\n<td>信号信息（signaling information），通过 LAPD（Link Access Procedure of D-Channel，D 信道链路规程），D 信道工作在 16 kbps 的速率下，用于告诉公用交换电话网络如何处理 B 信道</td>\n</tr>\n<tr>\n<td>DOS</td>\n<td>Disk Operation System</td>\n<td>磁盘操作系统</td>\n<td>是个人计算机上的一类操作系统</td>\n</tr>\n<tr>\n<td>DR</td>\n<td>Designated Router</td>\n<td>指定路由器</td>\n<td>指定路由器，在 OSPF 多路访问网络中，在同一个区域内被选举出来代表所有路由的路由。为了减少在同一个网段中几个邻居互相交换信息的数量</td>\n</tr>\n<tr>\n<td>Internet</td>\n<td>Internet</td>\n<td>互联网</td>\n<td>互联网；指当前全球最大的、最开放的由众多网络相互连接而成的特定互连网，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET</td>\n</tr>\n<tr>\n<td>internet</td>\n<td>internet</td>\n<td>互连网</td>\n<td>泛指多个计算机网络互连而成的计算机网络</td>\n</tr>\n<tr>\n<td>NRZ</td>\n<td>Non-Return to Zero</td>\n<td>不归零制码</td>\n<td>信号电平的一次反转代表 1，电平不变化表示 0，并且在表示完一个码元后，电压不需回到 0</td>\n</tr>\n<tr>\n<td>NVRAM</td>\n<td><strong>Non-volatile</strong> Random Access Memory</td>\n<td>非易失随机存取存储器</td>\n<td>非易失性 RAM，用来存储存储备份或启动配置文件，关机或重启后信息不会丢失</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>Power On Self Test</td>\n<td>开机自检</td>\n<td></td>\n</tr>\n<tr>\n<td>RAM</td>\n<td>Random Access Memory</td>\n<td>随机存取存储器</td>\n<td></td>\n</tr>\n<tr>\n<td>ROM</td>\n<td>Read-only Memory</td>\n<td>只读存储器</td>\n<td></td>\n</tr>\n<tr>\n<td>RZ</td>\n<td>Return to Zero</td>\n<td>归零制码</td>\n<td>是信号电平在一个码元之内都要恢复到零的编码方式</td>\n</tr>\n<tr>\n<td>TTL</td>\n<td>Time to Live</td>\n<td>生存时间</td>\n<td></td>\n</tr>\n<tr>\n<td>VLAN</td>\n<td>Virtual Local Area Network</td>\n<td>虚拟局域网</td>\n<td>是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样，由此得名虚拟局域网。用于划分逻辑子网。工作在第二层和第三层。<strong>可以分割广播域</strong></td>\n</tr>\n<tr>\n<td>VPN</td>\n<td>Virtual Private Network</td>\n<td>虚拟专用网络</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>Frame Relay；帧中继；是一种用于连接计算机系统的面向分组的通信方法。它主要用在公共或专用网上的局域网互联以及广域网连接。大多数公共电信局都提供帧中继服务，把它作为建立高性能的虚拟广域连接的一种途径。</li>\n<li>Data；数据；数据是二进制序列的表示。</li>\n<li>Protocol；协议；协议定义消息传输和传递的详细方式。</li>\n<li>Data Packets；数据分组；为了传输方， 计算机数据通常被分解成小的、易传输的单元，称为数据分组。</li>\n<li>Symmetric Switching： 对称交换。交换机上所有端口带宽一样</li>\n<li>Asymmetric Switching： 非对称交换。不同端口带宽不同</li>\n<li>Store-and-Forward： <strong>储存转发式交换</strong>。交换机收到帧后，先校验 CRC 再转发</li>\n<li>Cut-through： <strong>直通式交换</strong>。<strong>不校验</strong>就转发</li>\n<li>Fast forward Switching： <strong>快速转发交换</strong>。<strong>只查看目的 MAC</strong> 地址后就转发。</li>\n<li>Fragment Free： 免碎片。转发前查看帧前 64 字节以减少线路上噪声造成的错误。</li>\n<li>L2 Switching： Layer 2 Switching，二层交换</li>\n<li>L3 Switching： Layer 3 Switching，三层交换</li>\n<li>L4 Switching： Layer 4 Switching，四层交换</li>\n<li>Multilayer Switching： 多层交换</li>\n<li>backbone： 主干。用于 VLAN 间的通信。</li>\n<li>Frame Filtering： 帧过滤。阻止不符合条件的帧。</li>\n<li>Frame Tagging： 帧标记。在每个要被在主干线路上转发的帧的头部加上一个独特的标签，用来标识它来自哪一个 VLAN。离开主干线路时被去除。</li>\n<li>Static VLAN： 静态 VLAN。直接指派端口所属的 VLAN。</li>\n<li>Dynamic VLAN： 动态 VLAN。当有新的节点插入端口时，交换机查表来动态配置这个端口所属的 VLAN</li>\n<li>Port-Centric VLAN： 以端口为中心的 VLAN。同一 VLAN 下的所有节点接入到同一个路由器接口上，或者反过来说，接入同一个路由器端口的节点被划分到同一个 VLAN 下。</li>\n<li>Access Link： 接入链路。其上只有一个 VLAN 的链路。这个 VLAN 被称为这个链路对应的端口的本地 VLAN。</li>\n<li>Trunk Link： Trunk 链路（就这么叫吧，硬要叫的话是主干链路）。<strong>其上有多个 VLAN  的链路</strong>。用于连接交换机与交换机或路由器。（总之其实就是一根线上多个 VLAN 的帧在跑，所以这些帧得打上标签标识它来自于哪一个  VLAN，不然就搞混了。到达对面的交换机之后再根据标签把这些帧转发到对应的 VLAN 里面去。Trunk  链路最大的好处只是省端口和方便配置，以牺牲一点性能为代价。）</li>\n<li>Trunk 链路也可以有本地 VLAN，即在 trunk 链路因为一些原因失败的时候使用的 VLAN。</li>\n<li>Routing Between VLANs： VLAN 间路由</li>\n<li>Infrastructure Mode：基础建设模式</li>\n<li>Toll Network ：长途通信网</li>\n<li>CO Switch ：中心局交换机</li>\n<li>流量控制 Flow Control：让发送方的发送速率不要太快，要让接收方来得及接收。</li>\n<li>拥塞控制 Congestion Control：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</li>\n<li>Socket：TCP 连接的端点，表示为（IP address：port）。一个连接表示为（socket_sourse，socket_des）</li>\n<li>Computer virus 病毒：编制者在计算机程序中插入的破坏计算机功能或者数据的代码，能影响计算机使用，能自我复制的一组计算机指令或者程序代码</li>\n<li>simplex transmission：单工。只能有一个方向的通信，没有反方方向的交互。</li>\n<li>half-duplex transmission：半双工。信号可双向传输，但不能同时发送或同时接收。</li>\n<li>full-duplex transmission：全双工。通信的双方可同时发送和接收消息，信号可同时双向传输。</li>\n<li>Split horizon：水平分割是一种避免路由环路的出现和加快路由汇聚的技术。水平分割法的规则和原理是路由器从某个接口接收到的更新信息不允许再从这个接口发回去。</li>\n<li>冲突域（物理分段）：连接在同一导线上的所有工作站的集合，或者说是同一物理网段上所有节点的集合或以太网上竞争同一带宽的节点集合。</li>\n<li>广播域：接收同样广播消息的节点的集合。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-Sorting/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-Sorting/",
            "title": "Lecture07-Sorting",
            "date_published": "2023-02-26T08:13:10.000Z",
            "content_html": "<h1 id=\"lecture07-sorting\"><a class=\"anchor\" href=\"#lecture07-sorting\">#</a> Lecture07-Sorting</h1>\n<ul>\n<li>所有算法都要求掌握并理解算法过程\n<ul>\n<li>最后有张表格\n<ul>\n<li>哪些稳定哪些不稳定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>折半插入排序很少考</li>\n<li>希尔排序考的概率比较低、就算考到也很少写代码\n<ul>\n<li>性质：不要求证明、但是要求结论 n^1.3</li>\n</ul>\n</li>\n<li><strong>冒泡排序</strong>和<strong>快速排序</strong>非常重要</li>\n<li>锦标赛排序考的不多</li>\n<li><strong>归并排序</strong>要求</li>\n<li>证明都不要求</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/asynccode\" alt=\"img\" /></p>\n<p>关键表格</p>\n<p>KCN 关键码比较次数</p>\n<p>RMN 记录移动次数</p>\n<h1 id=\"1-概述\"><a class=\"anchor\" href=\"#1-概述\">#</a> 1. 概述</h1>\n<ol>\n<li>排序：n 个对象的序列 R [0],R [1],R [2],…R [n-1] 按其关键码的大小，进行由小到大 (非递减) 或由大到小 (非递增) 的次序重新排序的。</li>\n<li>关键码 (key)：进行排序的根据</li>\n<li>两大类：\n<ol>\n<li>内排序：对内存中的 n 个对象进行排序。</li>\n<li>外排序：内存放不下，还要使用外存的排序。(在本节中暂不考虑)</li>\n</ol>\n</li>\n<li>排序算法的<strong>稳定性</strong>：如果待排序的对象序列中，含有多个关键码值相等的对象，用某种方法排序后，<strong>这些对象的相对次序不变的，则是稳定的</strong>，否则为不稳定的。例： 35 81 20 15 82 28 81 82 15 20 28 35 稳定的</li>\n<li>排序种类\n<ol>\n<li>内排序\n<ul>\n<li>插入排序，交换排序，选择排序，归并排序，基数排序</li>\n</ul>\n</li>\n<li>外排序：本章暂不讨论外排序</li>\n</ol>\n</li>\n<li>排序的算法分析\n<ol>\n<li>时间开销 — <strong>比较次数，移动次数</strong></li>\n<li>所需的附加空间 - 空间开销</li>\n</ol>\n</li>\n<li>下面是静态排序过程中所用到的数据表类定义：</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a></p>\n<h2 id=\"11-排序算法类定义\"><a class=\"anchor\" href=\"#11-排序算法类定义\">#</a> 1.1. 排序算法类定义</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DefaultSize<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">datalist</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        Type key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        field otherdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Type <span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Type x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">||</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">||</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>Type <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span>  <span class=\"token keyword\">this</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">datalist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">datalist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MaxSz<span class=\"token operator\">=</span>DefaultSize<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">MaxSize</span><span class=\"token punctuation\">(</span>MaxSz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">CurrentSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            vector<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>MaxSz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span>Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> temp<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span> x<span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span> y<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Element <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">*</span> vector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> MaxSize<span class=\"token punctuation\">;</span> CurrentSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2-插入排序\"><a class=\"anchor\" href=\"#2-插入排序\">#</a> 2. 插入排序</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216090626227.png\" alt=\"image-20230216090626227\" /></p>\n<h2 id=\"21-直接插入排序\"><a class=\"anchor\" href=\"#21-直接插入排序\">#</a> 2.1. 直接插入排序</h2>\n<h3 id=\"211-直接插入排序源码\"><a class=\"anchor\" href=\"#211-直接插入排序源码\">#</a> 2.1.1. 直接插入排序源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091123029.png\" alt=\"image-20230216091123029\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091237179.png\" alt=\"image-20230216091237179\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216091440800.png\" alt=\"image-20230216091440800\" /></p>\n<h3 id=\"212-算法复杂度分析\"><a class=\"anchor\" href=\"#212-算法复杂度分析\">#</a> 2.1.2. 算法复杂度分析</h3>\n<ol>\n<li>额外的两次移动来自于 a [i] 的取出和放回，除此以外在最坏的情况下会每一次比较都会进行比较。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/3.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/5.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5.png\" alt=\"img\" /></a></p>\n<h3 id=\"213-算法稳定性\"><a class=\"anchor\" href=\"#213-算法稳定性\">#</a> 2.1.3. 算法稳定性</h3>\n<p><strong>稳定的</strong></p>\n<h2 id=\"22-折半插入排序binary-insert-sort\"><a class=\"anchor\" href=\"#22-折半插入排序binary-insert-sort\">#</a> 2.2. 折半插入排序 (Binary Insert Sort)</h2>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/6.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6.png\" alt=\"img\" /></a></p>\n<h3 id=\"221-源码\"><a class=\"anchor\" href=\"#221-源码\">#</a> 2.2.1. 源码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span> Comparable <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> Comparable x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> low <span class=\"token operator\">&lt;=</span> high <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 计算出中点是哪一个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 调整两端的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            high <span class=\"token operator\">=</span> mid – <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span>  <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"NOT-FOUND\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//C++// 可以使用递归，也可以不使用递归 template &lt;class Type> void BinaryInsertSort (datalist&lt;Type> &amp;list) &#123;    for (int i=1;i&lt;list.currentSize;i++)         BinaryInsert (list, i);&#125;                                         template &lt;class Type> void BinaryInsert ( datalist&lt;Type> &amp;list, int i) &#123;    int left=0, Right=i-1;     Element&lt;Type>temp = list.Vector [i];     while (left&lt;=Right) &#123;        // 调整区间        int middle=(left+Right)/2;        if (temp.getkey ()&lt;list.Vector [middle].getkey ())            Right=middle-1;        else            left=middle+1;    &#125;    for (int k=i-1;k>=left;k--)        list.Vector [k+1]=list.Vector [k];    list.Vector [left]=temp;&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216093520079.png\" alt=\"image-20230216093520079\" /></p>\n<p><strong>left</strong> 的地方是 temp 要放的位置</p>\n<h3 id=\"222-时间复杂度\"><a class=\"anchor\" href=\"#222-时间复杂度\">#</a> 2.2.2. 时间复杂度</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/7.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/7.png\" alt=\"img\" /></a></p>\n<p><strong>折半查找所需比较次数与初始排序无关，仅依赖于对象个数</strong></p>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/8.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/8.png\" alt=\"img\" /></a></p>\n<h3 id=\"223-折半插入排序稳定性\"><a class=\"anchor\" href=\"#223-折半插入排序稳定性\">#</a> 2.2.3. 折半插入排序稳定性</h3>\n<p>算法是<strong>稳定的</strong></p>\n<h2 id=\"23-希尔排序shell-sort\"><a class=\"anchor\" href=\"#23-希尔排序shell-sort\">#</a> 2.3. 希尔排序 (Shell Sort)</h2>\n<ol>\n<li>又称缩小增量排序 (diminishing - increament sort)</li>\n<li>方法:\n<ol>\n<li>取一增量 (间隔 gap &lt; n)，按增量分组，对每组使用 直接插入排序或其他方法进行排序。</li>\n<li>减少增量 (分的组减少，但每组记录增多)。直至增量为 1，即为一个组时。</li>\n</ol>\n</li>\n<li>例子:</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/9.png\" alt=\"img\" /></a></p>\n<ol>\n<li>每次完成排序后，gap 每次都取一半。</li>\n</ol>\n<h3 id=\"231-希尔排序的代码实现\"><a class=\"anchor\" href=\"#231-希尔排序的代码实现\">#</a> 2.3.1. 希尔排序的代码实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095023830.png\" alt=\"image-20230216095023830\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095032024.png\" alt=\"image-20230216095032024\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">Shellsort</span><span class=\"token punctuation\">(</span> datalist <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> gap<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>CurrentSize<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">ShellInsert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        gap<span class=\"token operator\">=</span>gap<span class=\"token operator\">=</span> <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>gap<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShellInsert</span><span class=\"token punctuation\">(</span> datalist<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>gap<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>CurrentSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span>temp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>gap<span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            j<span class=\"token operator\">-=</span>gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>         </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//javapublic static void shellsort (Comparable [] a ) &#123;    for (int gap = a.length/2 ; gap>0 ; gap/=2 )        for (int i = gap; i &lt; a.length; i++) &#123;            // 遍历一遍            Comparable tmp = a [i];            int j = i;            for (;j >= gap &amp;&amp; tmp.compareTo ( a [j-gap] )&lt; 0;j -= gap )                // 完成一遍下滤                a [j] = a [j – gap];            a [j] = tmp;    &#125;&#125;</span></pre></td></tr></table></figure><h3 id=\"232-希尔排序的稳定性\"><a class=\"anchor\" href=\"#232-希尔排序的稳定性\">#</a> 2.3.2. 希尔排序的稳定性</h3>\n<p><strong>不稳定</strong>的</p>\n<h3 id=\"233-希尔排序算法分析\"><a class=\"anchor\" href=\"#233-希尔排序算法分析\">#</a> 2.3.3. 希尔排序算法分析</h3>\n<ol>\n<li>与选择的缩小增量有关，但到目前还不知如何选择最好结果的缩小增量序列。</li>\n<li>平均比较次数与移动次数大约 n1.3 左右</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216095012176.png\" alt=\"image-20230216095012176\" /></p>\n<h1 id=\"3-交换排序一类排序算法\"><a class=\"anchor\" href=\"#3-交换排序一类排序算法\">#</a> 3. 交换排序 (一类排序算法)</h1>\n<ol>\n<li>方法的本质：不断的交换反序的对偶，直到不再有反序的对偶为止。</li>\n<li>两种方法：\n<ol>\n<li>冒泡排序 (Bubble sort)</li>\n<li>快速排序 (Quick sort)</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"31-冒泡排序注意是优化过的\"><a class=\"anchor\" href=\"#31-冒泡排序注意是优化过的\">#</a> 3.1. 冒泡排序（注意是优化过的）</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216100539527.png\" alt=\"image-20230216100539527\" /></p>\n<h3 id=\"311-源码\"><a class=\"anchor\" href=\"#311-源码\">#</a> 3.1.1. 源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216100532018.png\" alt=\"image-20230216100532018\" /></p>\n<pre><code>//java\npublic static void Bubble( int [ ] a , int n) &#123;\n    //Bubble largest element in a[0:n-1] to right \n    for(int i=0; i&lt;n-1; i++) \n        if(a[i] &gt; a[i+1])\n            swap(a[i],a[i+1]);\n    &#125;\npublic static void BubbleSort( int [ ] a, int n) &#123;  \n    //Sort a[0:n-1] using a bubble sort \n    for(int i=n ;i&gt;1; i--) \n        Bubble(a,i); \n&#125;\n\n//C++template&lt;class Type&gt; void  BubbleSort( datalist&lt;Type&gt; &amp; list) &#123;    int pass=1;    int exchange=1;    while (pass&lt;list.CurrentSize &amp;&amp;exchange) &#123;        BubbleExchange(list, pass, exchange);        pass++;    &#125;&#125;template&lt;class Type&gt;  void  BubbleExchange(datalist&lt;Type&gt; &amp;list, const int i, int &amp; exchange) &#123;    exchange=0;    for (int j=list.CurrentSize-1; j&gt;=i; j--)        if (list.Vector[j-1].getkey()&gt;list.Vector[j].getkey()) &#123;            swap(list.Vector[j-1],  list.Vector[j]);            exchange=1;        &#125;&#125;\n</code></pre>\n<h3 id=\"312-冒泡排序算法分析\"><a class=\"anchor\" href=\"#312-冒泡排序算法分析\">#</a> 3.1.2. 冒泡排序算法分析</h3>\n<ol>\n<li>进行几次元素之间的比较？\n<ul>\n<li>从 n-1 开始往下比较</li>\n</ul>\n</li>\n<li>进行了几次元素之间的交换\n<ul>\n<li>不确定</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"313-冒泡排序算法的稳定性\"><a class=\"anchor\" href=\"#313-冒泡排序算法的稳定性\">#</a> 3.1.3. 冒泡排序算法的稳定性</h3>\n<p><strong>稳定的</strong></p>\n<h3 id=\"314-冒泡排序算法复杂度分析\"><a class=\"anchor\" href=\"#314-冒泡排序算法复杂度分析\">#</a> 3.1.4. 冒泡排序算法复杂度分析</h3>\n<ol>\n<li>最小比较次数\n<ul>\n<li>有序：n-1 次比较，移动次数为 0</li>\n</ul>\n</li>\n<li>最大比较次数\n<ul>\n<li>逆序：(n-1)+(n-2)+…+1=n (n-1)/2 约等于 O (n2) (比较次数)<br />\n 移动次数 = 3*(1+2+3+…+n)=(3/2) n (n-1) i=1 (移动次数)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"32-快速排序\"><a class=\"anchor\" href=\"#32-快速排序\">#</a> 3.2. 快速排序</h2>\n<h3 id=\"321-算法内容\"><a class=\"anchor\" href=\"#321-算法内容\">#</a> 3.2.1. 算法内容</h3>\n<ol>\n<li>在 n 个对象中，取一个对象 (如第一个对象 —— 基准 pivot)，按该对象的关键码\n<ol>\n<li>把所有<strong>小于等于</strong>该关键码的对象分划在它的左边。</li>\n<li><strong>大于</strong>该关键码的对象分划在它的右边。</li>\n</ol>\n</li>\n<li>对左边和右边 (子序列) 分别再用快速排序。</li>\n</ol>\n<h3 id=\"322-例子\"><a class=\"anchor\" href=\"#322-例子\">#</a> 3.2.2. 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/10.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/10.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/11.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/11.png\" alt=\"img\" /></a></p>\n<h3 id=\"323-算法实现\"><a class=\"anchor\" href=\"#323-算法实现\">#</a> 3.2.3. 算法实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216103633667.png\" alt=\"image-20230216103633667\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216103641450.png\" alt=\"image-20230216103641450\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span> datalist <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> pivotpos <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> pivotpos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> pivotpos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//partition</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Type</span><span class=\"token operator\">></span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>datalist<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>low<span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>high<span class=\"token punctuation\">;</span>  Element<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span>pivot<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>pivot<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>pivot<span class=\"token punctuation\">.</span><span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    list<span class=\"token punctuation\">.</span>Vector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>java 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>length – <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">median3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> center <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> left <span class=\"token operator\">+</span> right <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>left <span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> center <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> right <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>left <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span>right <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span> center <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 调整了到最后一个位置上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> right – <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span> right – <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Comparable</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> left <span class=\"token operator\">+</span> <span class=\"token constant\">CUTOFF</span> <span class=\"token operator\">&lt;=</span> right <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Comparable</span> pivot <span class=\"token operator\">=</span> <span class=\"token function\">median3</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> right – <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparaTo</span><span class=\"token punctuation\">(</span> pivot  <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span> pivot <span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">swapReferences</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>right – <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i – <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"324-快速排序算法的稳定性\"><a class=\"anchor\" href=\"#324-快速排序算法的稳定性\">#</a> 3.2.4. 快速排序算法的稳定性</h3>\n<p><strong>不稳定</strong>的排序方法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQxNzIyL2FydGljbGUvZGV0YWlscy85NDM5NjAxMA==\">https://blog.csdn.net/qq_40941722/article/details/94396010</span></p>\n<h3 id=\"325-快速排序的时间复杂度\"><a class=\"anchor\" href=\"#325-快速排序的时间复杂度\">#</a> 3.2.5. 快速排序的时间复杂度</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105027925.png\" alt=\"image-20230216105027925\" /></p>\n<ol>\n<li>最差的情况 (当选第一个对象为分划对象时) 如果原对象已按关键码排好序，此时为 O (n2)</li>\n</ol>\n<pre><code>K1[       ]\n  K2[     ]\n    K3[   ]\n       ...\n</code></pre>\n<ol>\n<li>最理想的情况：每次分划第一个对象定位在中间</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/12.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/12.png\" alt=\"img\" /></a></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105057713.png\" alt=\"image-20230216105057713\" /></p>\n<h3 id=\"326-空间复杂度\"><a class=\"anchor\" href=\"#326-空间复杂度\">#</a> 3.2.6. 空间复杂度</h3>\n<ol>\n<li>以上讨论的是递归算法，也可用非递归算法来实现。 不管是递归 (由编译程序来实现) 还是非递归。第一次分划后，左部、右部要分别处理。</li>\n<li>优先使用左侧小端部分，之后就可以释放</li>\n<li>存放什么：左部或右部的上、下界的下标。</li>\n<li>栈要多大：<strong>O(log2n)- O(n)</strong>(有序情况)</li>\n</ol>\n<h3 id=\"327-快速排序避免有序情况\"><a class=\"anchor\" href=\"#327-快速排序避免有序情况\">#</a> 3.2.7. 快速排序避免有序情况</h3>\n<ol>\n<li>选取 pivot (枢纽元) 用第一个元素作 pivot 是不太好的。</li>\n<li>方法 1：随机选取 pivot, 但随机数的生成一般是昂贵的。</li>\n<li>方法 2：三数中值分割法 (Median-of-Three partitioning) N 个数，最好选第 (N/2)(向上取整) 个最大数，这是最好的中值，但这是很困难的。一般选左端、右端和中心位置上的三个元素的中值作为枢纽元。\n<ul>\n<li>8, 1, 4, 9, 6, 3, 5, 2, 7, 0 (8,  6,  0)</li>\n<li>具体实现时：将 8，6，0 先排序，即 0, 1, 4, 9, 6, 3, 5, 2 , 7, 8, 得到中值 pivot 为 6</li>\n</ul>\n</li>\n<li>分割策略:\n<ol>\n<li>将 pivot 与最后倒数第二个元素交换，使得 pivot 离开要被分割的数据段。然后，i 指向第一个元素，j 指向倒数第二个元素。\n<ul>\n<li>0, 1, 4, 9, 7, 3, 5, 2,  6,  8</li>\n</ul>\n</li>\n<li>然后进行分划</li>\n</ol>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbmd4aWFvL3AvNjI2MjIwOC5odG1s\">三数中值分隔法</span></li>\n</ol>\n<h3 id=\"328-参考\"><a class=\"anchor\" href=\"#328-参考\">#</a> 3.2.8. 参考</h3>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbmd4aWFvL3AvNjI2MjIwOC5odG1s\">图解排序算法 (五) 之快速排序 —— 三数取中法</span></li>\n</ol>\n<h1 id=\"4-选择排序\"><a class=\"anchor\" href=\"#4-选择排序\">#</a> 4. 选择排序</h1>\n<ol>\n<li>每次找到数组中的最小值找到然后放到前面，进行重复递归。</li>\n<li>也可以将最大的数字找出来然后当放到后面。</li>\n</ol>\n<h2 id=\"41-直接选择排序\"><a class=\"anchor\" href=\"#41-直接选择排序\">#</a> 4.1. 直接选择排序</h2>\n<ol>\n<li>思想：首先在 n 个记录中选出关键码最小 (最大) 的 记录，然后与第一个记录 (最后第 n 个记录) 交换位置，再在其余的 n-1 个记录中选关键码 最小 (最大) 的记录，然后与第二个记录 (第 n-1 个记录) 交换位置，直至选择了 n－1 个记录。</li>\n</ol>\n<h3 id=\"411-源码\"><a class=\"anchor\" href=\"#411-源码\">#</a> 4.1.1. 源码</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105457530.png\" alt=\"image-20230216105457530\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216105506689.png\" alt=\"image-20230216105506689\" /></p>\n<pre><code>//java\npublic static void SelectionSort(int [] a, int n) &#123;\n    //sort the n number in a[0:n-1].\n    //找到大数字放置到后面\n    for(int size = n; size&gt;1; size--)&#123;\n        //n-1\n        int j = Max(a,size);\n        //n-1+n-2+...+1\n        swap(a[j],a[size-1]);\n    &#125;\n&#125; \n//c++template &lt;class Type&gt; void SelectSort(datalist&lt;Type&gt; &amp;list) &#123;    for ( int i=0; i&lt;list.CurrentSize-1; i++)        SelectExchange(list, i);&#125;template &lt;class Type&gt; void SelectExchange( datalist&lt;Type&gt; &amp; list, const int i) &#123;    int k=i;    for ( int j=i+1; j&lt;list.CurrentSize; j++)        if (list.Vector[j].getkey( )&lt;list.Vector[k].getkey( ))            k=j;    if ( k!=i)        Swap(list.Vactor[i], list.Vector[k]);&#125;](https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img\\cpt2\\im2.14.png)\n</code></pre>\n<h3 id=\"414-直接排序稳定性\"><a class=\"anchor\" href=\"#414-直接排序稳定性\">#</a> 4.1.4. 直接排序稳定性</h3>\n<p>不稳定的</p>\n<h2 id=\"42-锦标赛排序树形选择排序\"><a class=\"anchor\" href=\"#42-锦标赛排序树形选择排序\">#</a> 4.2. 锦标赛排序（树形选择排序）</h2>\n<ol>\n<li>直接选择排序存在重复做比较的情况，锦标赛 排序克服了这一缺点。</li>\n<li>具体方法:\n<ol>\n<li>n 个对象的关键码两两比较得到 (n/2)(向上取整) 个 比较的优胜 者 (关键码小者) 保留下来，再对这 (n/2)(向上取整) 个对象再进行关键码的两两比较，…… 直至选出一个最小的关键码为止。如果 n 不是 2 的 K 次幂，则让叶结点数补足到满足 2k &lt; n &lt;= 2k 个。</li>\n<li>输出最小关键码。再进行调整：即把叶子结点上，该最小关键码改为最大值后，再进行 由底向上的比较，直至找到一个最小的关键码 (即次小关 键码) 为止。重复 2，直至把关键码排好序。</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/13.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/13.png\" alt=\"img\" /></a></p>\n<h3 id=\"421-锦标赛排序的算法分析\"><a class=\"anchor\" href=\"#421-锦标赛排序的算法分析\">#</a> 4.2.1. 锦标赛排序的算法分析</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/15.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/15.png\" alt=\"img\" /></a></p>\n<h2 id=\"43-堆排序\"><a class=\"anchor\" href=\"#43-堆排序\">#</a> 4.3. 堆排序</h2>\n<ol>\n<li>参考 heap 部分</li>\n<li>是固定的算法，从小到大排序，所以一开始建立最大堆，最后调整为最小堆</li>\n<li>不稳定的</li>\n</ol>\n<h3 id=\"431-算法思想\"><a class=\"anchor\" href=\"#431-算法思想\">#</a> 4.3.1. 算法思想</h3>\n<ol>\n<li>第一步，建堆，根据初始输入数据，利用 堆的调整算法 FilterDown ()，形成初始堆。(形成最大堆)</li>\n<li>第二步，一系列的对象交换和重新调整堆</li>\n</ol>\n<h3 id=\"432-示例\"><a class=\"anchor\" href=\"#432-示例\">#</a> 4.3.2. 示例</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/16.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/16.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/17.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/17.png\" alt=\"img\" /></a></p>\n<h3 id=\"433-代码实现\"><a class=\"anchor\" href=\"#433-代码实现\">#</a> 4.3.3. 代码实现</h3>\n<pre><code>//c++\nTemplate&lt;class  Type&gt;void HeapSort(datalist&lt;Type&gt;&amp;list) &#123;\n    for(int i=(list.currentsize-1)/2;i&gt;=0;i--)\n        FilterDown(i,list.currentsize-1);\n    for(i=list.currentsize-1;i&gt;=1;i--)&#123;\n        Swap(list.Vector[0],list.vector[i]);\n        FilterDown(0,i-1);\n    &#125;\n&#125;\n</code></pre>\n<ol>\n<li>FilterDown () 就是第 6 章中的，但要改一下：那里是 建最小堆，这里是建最大堆。</li>\n</ol>\n<pre><code>//java program\npublic static void heapsort( Comparable []a) &#123;\n    for( int i = a.length / 2; i &gt;= 0; i-- )\n        percDown( a, i, a.length );\n    for( int i = a.length – 1; i &gt; 0; i-- ) &#123;\n        swapReferences( a, 0, i );\n        percDown( a, 0, i);\n    &#125;\n&#125;\nprivate static int leftChild( int i ) &#123;   \n    return 2 * i + 1;\n&#125;\nprivate static void percDown( Comparable [ ] a, int  i,  int n ) &#123;\n    int child;\n    Comparable tmp;\n    for( tmp = a[i];leftChild(i) &lt; n ; i = child ) &#123;\n        child = leftchild( i );\n        if( child!=n – 1&amp;&amp; a[child].compareTo( a[ child + 1 ] ) &lt; 0 )\n            child ++;\n        if( tmp . compareTo( a[ child ] &lt; 0 )\n            a[ i ] = a[ child ];\n        else\n            break;\n    &#125;\n    a[i] = tmp;\n&#125;\n</code></pre>\n<h3 id=\"434-堆排序算法复杂度分析\"><a class=\"anchor\" href=\"#434-堆排序算法复杂度分析\">#</a> 4.3.4. 堆排序算法复杂度分析</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/18.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/18.png\" alt=\"img\" /></a></p>\n<h1 id=\"7-归并排序\"><a class=\"anchor\" href=\"#7-归并排序\">#</a> 7. 归并排序</h1>\n<ol>\n<li>归并：两个 (多个) 有序的文件组合成一个有序文件 方法：每次取出两个序列中的小的元素输出之；当一序列完，则输出另一序列的剩余部分</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/14.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/14.png\" alt=\"img\" /></a></p>\n<ol>\n<li>算法思想：分而治之 (分治思想)</li>\n</ol>\n<h2 id=\"71-代码实现\"><a class=\"anchor\" href=\"#71-代码实现\">#</a> 7.1. 代码实现</h2>\n<pre><code>//c++\ntemplate&lt;class Type&gt; void merge(datalist&lt;Type&gt; &amp; initList, datalist&lt;Type&gt;&amp; mergedList, const int l, const int m, const int n) &#123;\n    int i=l, j=m+1, k= l;\n    while ( i&lt;=m &amp;&amp; j&lt;=n ) if (initList.Vector[i].getkey( )&lt;initList.Vector[j].getkey( )) &#123;\n        mergedList.Vector[k]=initList.Vector[i];\n        i++;\n        k++;\n    &#125;\n    else&#123;\n        mergedList.Vector[k]=initList.Vector[j];\n        j++;\n        k++;\n    &#125;\n    if (i&lt;=m)\n        for (int n1=k, n2=i; n1&lt;=n &amp;&amp; n2&lt;=m;  n1++, n2++)\n            mergedList.Vector[n1]=initList.Vector[n2];\n    else\n        for(int n1=k, n2=j; n1&lt;=n &amp;&amp; n2&lt;=n; n1++, n2++)\n            mergedList.Vector[n1]=initList.Vector[n2];\n&#125;\n</code></pre>\n<h2 id=\"72-归并排序\"><a class=\"anchor\" href=\"#72-归并排序\">#</a> 7.2. 归并排序</h2>\n<ol>\n<li>方法\n<ul>\n<li>n 个长为 1 的对象两两合并，得 n/2 个长为 2 的文件</li>\n<li>n/2 个长为 2…………………. 得 n/4 个长为 4 的文件…</li>\n<li>2 个长为 n/2 的对象两两合并，得 1 个长为 n 的文件</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"721-例子\"><a class=\"anchor\" href=\"#721-例子\">#</a> 7.2.1. 例子</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/19.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/19.png\" alt=\"img\" /></a></p>\n<h3 id=\"722-非递归算法c代码实现\"><a class=\"anchor\" href=\"#722-非递归算法c代码实现\">#</a> 7.2.2. 非递归算法 c++ 代码实现</h3>\n<pre><code>//c++\ntemplate &lt;class Type&gt; void MergeSort(datalist &lt;Type&gt; &amp; list) &#123;\n    datalist &lt;Type&gt; tempList(list.MaxSize); \n    int len=1;\n    while (len&lt;list.CurrentSize) &#123;\n        MergePass(list, tempList, len); len *=2 ;\n        if (len &gt;= list.CurrentSize) &#123;\n            for (int i=0;i&lt; list.CurrentSize; i++)\n                list.Vector[i]=tempList.Vector[i];\n        &#125;else&#123;\n            MergePass(tempList, list, len); len*=2;\n        &#125;\n    &#125;\n    delete[]tempList;\n&#125;\n</code></pre>\n<ol>\n<li>当两段均满 len 长时调用 merge</li>\n<li>当一长一短时也调用 merge (但第二段的参数不同)</li>\n<li>当只有一段时，则复抄</li>\n<li>块合并算法实现</li>\n</ol>\n<pre><code>//c++\ntemplate &lt;class Type&gt; void MergePass( datalist&lt;Type&gt; &amp; initList, datalist &lt;Type&gt; &amp; mergedList, const int len) &#123;\n    int i=0;\n    while (i+2*len&lt;=initList.CurrentSize-1) &#123;\n        merge( initList, mergedList, i, i+len-1, i+2*len-1);\n        i+=2*len;\n    &#125;\n    if(i+len &lt;= initList.CurrentSize-1)\n        merge(initList, mergedList, i, i+len-1,initList.CurrentSize-1);//因为有可能有块长度为余数，并不满足结果的，所以要额外处理\n    else\n        for( int j=i ; j&lt;= initList.CurrentSize; j++)\n            mergedList.Vector[j]=initList.Vector[j];\n&#125;\n</code></pre>\n<ol>\n<li>算法分析：合并趟数 log2n, 每趟比较 n 次，所以为 O (nlog2n)</li>\n<li>稳定性：稳定。</li>\n</ol>\n<h3 id=\"723-递归算法java实现\"><a class=\"anchor\" href=\"#723-递归算法java实现\">#</a> 7.2.3. 递归算法 java 实现</h3>\n<pre><code>//java\npublic static void mergeSort( Comparable [ ] a ) &#123;\n    Comparable [ ] tmpArray = new Comparable[a.length];\n    mergeSort( a, tmpArray, 0, a.length – 1 );\n&#125;                            \nprivate static void mergeSort( Comparable [ ] a, Comparable [] tmpArray, int left, int right ) &#123;\n    if( left &lt; right ) &#123;\n        int center = ( left + right ) / 2;\n        mergeSort(a, tmparray, left, center );\n        mergeSort(a, tmpArray, center + 1, right );\n        merge( a, tmpArray, left, center + 1, right );\n    &#125;\n&#125;\nprivate static void merge( Comparable [ ] a, Comparable [] tmpArray, int leftPos, int rightPos, int rightEnd ) &#123;\n    int leftEnd = rightPos – 1;\n    int tmpPos = leftPos;\n    int numElements = rightEnd – leftPos + 1;\n    while( leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd )\n        if( a[ leftPos ].compareTo( a[ rightPos ] ) &lt;= 0 )\n            tmpArray[ tmpPos++ ] = a[ leftPos++ ];\n        else\n            tmpArray[ tmpPos++ ] = a[ rightPos++ ];\n    while( leftPos &lt;= leftEnd )\n        tmpArray[ tmpPos++ ] = a[ leftPos++ ];\n    while( rightpos &lt;= rightEnd)\n        tmpArray[ tmpPos++] = a[ rightpos++ ];\n    for( int i = 0; i &lt; numElements; i++, rightEnd-- )\n        a[ rightEnd ] = tmpArray[ rightEnd ];\n&#125;     \n</code></pre>\n<h3 id=\"724-算法分析\"><a class=\"anchor\" href=\"#724-算法分析\">#</a> 7.2.4. 算法分析</h3>\n<ol>\n<li>合并趟数 log2n, 每趟比较 n 次，所以为 O (nlog2n)</li>\n</ol>\n<h3 id=\"725-算法稳定性\"><a class=\"anchor\" href=\"#725-算法稳定性\">#</a> 7.2.5. 算法稳定性</h3>\n<ol>\n<li>稳定性：稳定。</li>\n</ol>\n<h2 id=\"73-递归的表归并排序\"><a class=\"anchor\" href=\"#73-递归的表归并排序\">#</a> 7.3. 递归的表归并排序</h2>\n<ol>\n<li>使用静态链表的方法来实现</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/20.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/20.png\" alt=\"img\" /></a></p>\n<h3 id=\"731-算法实现\"><a class=\"anchor\" href=\"#731-算法实现\">#</a> 7.3.1. 算法实现</h3>\n<ol>\n<li>主程序 mergesort (L)</li>\n<li>子程序 divide (L,L1)，将 L 划分成两个子表 3. 合并两有序序列 merge (L,L1)</li>\n</ol>\n<pre><code>void MergeSort (List &lt;Type&gt; &amp;L) &#123;\n    List &lt;Type&gt; L1;\n    if (L.first!=NULL)\n        if (L.first-&gt;link != NULL)//至少有两个结点\n        &#123;\n            divide (L, L1);\n            MergeSort(L);\n            MergeSort(L1);\n            L=merge( L, L1);\n        &#125;\n&#125;\n</code></pre>\n<h3 id=\"732-有序链表的merge算法\"><a class=\"anchor\" href=\"#732-有序链表的merge算法\">#</a> 7.3.2. 有序链表的 merge 算法</h3>\n<pre><code>//c++\nList&lt;Type&gt; &amp; merge (List&lt;Type&gt; &amp;L1, List&lt;Type&gt; &amp; L2) &#123;\n    ListNode&lt;Type&gt;*p=L1.first,*q=L2.first,  *r ;\n    List&lt;Type&gt; temp;\n    if ((p= =NULL) or (q= =NULL)) &#123;\n        if (p!=NULL)&#123;\n            temp.first=p;\n            temp.last=L1.last;\n        &#125;else&#123;\n            temp.first=q;\n            temp.last=L2.last;\n        &#125;\n    &#125;else&#123;\n        if (p-&gt;data&lt;=q-&gt;data) &#123;\n            r = p;\n            p = p-&gt;link;\n        &#125;else&#123;\n            r = q;\n            q = q-&gt;link;\n        &#125;\n        temp.first = r ;\n        while((p!=NULL) &amp;&amp; (q!=NULL)) &#123;\n            if (p-&gt;data&lt;=q-&gt;data) &#123;\n                r-&gt;link=p;\n                r=p;\n                p=p-&gt;link;\n            &#125;else&#123;\n                r-&gt;link=q;\n                r=q;\n                q=q-&gt;link;\n            &#125;\n        &#125;\n        if (p= =NULL)&#123;\n            r-&gt;link=q;\n            temp.last=L2.last;\n        &#125;else &#123;\n            r-&gt;link=p;\n            temp.last=L1.last;\n        &#125;\n    &#125;\n    return temp;\n&#125;\n</code></pre>\n<h3 id=\"733-下面讨论dividelistl1listl2\"><a class=\"anchor\" href=\"#733-下面讨论dividelistl1listl2\">#</a> 7.3.3. 下面讨论 divide (List&amp;L1,ListL2)</h3>\n<ol>\n<li>将 L1 表分为两个长度几乎相等的表，L1.first 指向前半部分，L2.first 指向后半部分，要求被划分的表至少含有两个结点。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/23.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/23.png\" alt=\"img\" /></a></p>\n<ol>\n<li>方法：设两个流动指针 p,q 指向表的结点 一般来讲让 p 前进一步，q 前进二步，最后当 q= NULL 时，这时 p 恰好指向前半张表的最后一个结点。</li>\n<li>Eg. 如果有 10 个结点，p 走 5 次，q 走 10 次正好走到表末尾</li>\n</ol>\n<pre><code>void divide(List&lt;Type&gt; &amp; L1, List &lt;Type&gt; &amp; L2) &#123;\n    ListNode &lt;Type&gt; *p, *q;\n    L2.last=L1.last;\n    p=L1.first;\n    q=p-&gt;link;\n    q=q-&gt;link;\n    while (q!=NULL) &#123;\n        p=p-&gt;link;\n        q=q-&gt;link;\n        if (q!=NULL)\n            q=q-&gt;link;\n    &#125;\n    q=p-&gt;link;\n    p-&gt;link=NULL;\n    L1.last=p;\n    L2.first=q;\n&#125;\n</code></pre>\n<h1 id=\"8-总结\"><a class=\"anchor\" href=\"#8-总结\">#</a> 8. 总结</h1>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/21.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/21.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt11/22.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/22.png\" alt=\"img\" /></a></p>\n<p>插入排序 1*n 移动次数最小不是 0 吗</p>\n<h1 id=\"9-例题\"><a class=\"anchor\" href=\"#9-例题\">#</a> 9. 例题</h1>\n<ol>\n<li>若数据元素序列 11, 12, 13, 7, 8, 9, 23, 4, 5 是采用下列排序方法之一得到的第二趟排序后的结果，则该排序算法只能是 A. 起泡排序 B. 插入排序 C. 选择排序 D. 二路归并排序</li>\n<li>首先不是冒泡排序：最大最小值上下，选择排序也是选择最大最小，答案是 B</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-1-DisjointSet/",
            "url": "https://quas-modo.github.io/2023/02/26/dataStructure/Lecture07-1-DisjointSet/",
            "title": "Lecture07.1-DisjointSet",
            "date_published": "2023-02-26T08:13:00.000Z",
            "content_html": "<h1 id=\"lecture071-disjointseet\"><a class=\"anchor\" href=\"#lecture071-disjointseet\">#</a> Lecture07.1-DisjointSEet</h1>\n<ul>\n<li>有很多时候是不考的</li>\n<li>一般就是图里的<strong>最小生成树算法</strong>会考到</li>\n<li>但是两个核心操作 <strong>find union</strong> 要清晰</li>\n<li>考的概率很低</li>\n<li>性能提升考吗？</li>\n</ul>\n<h2 id=\"the-disjoint-set-adt不相交集并查集\"><a class=\"anchor\" href=\"#the-disjoint-set-adt不相交集并查集\">#</a> The Disjoint Set ADT (不相交集，并查集)</h2>\n<ol>\n<li>使用来表示离散中的等价类和等价关系的表示。</li>\n</ol>\n<h1 id=\"1-等价类equivalence-class\"><a class=\"anchor\" href=\"#1-等价类equivalence-class\">#</a> 1. 等价类 (Equivalence Class)</h1>\n<ol>\n<li><strong>等价类</strong>的定义：Suppose we have a set U={1,2,…,n} of n elements and a set  R={(i1,j1), (i2,j2)…(ir,jr)} of r relations. The relation R is an  equivalence relation iff the following conditions are true (symbol ’≡’  represent the equivalence relation on sets, x,y,z are elements in  set):(假设我们有一个 n 个元素组成的集合 U = {1,2,…,n}, 一个有 r 个关系的集合 R. 当切仅当以下条件成立的时候，R 才是一个等价类)\n<ol>\n<li>Reflexive x ≡ x.(<strong>自反性</strong>)</li>\n<li>Symmetric x ≡ y,y ≡ x(<strong>对称性</strong>)</li>\n<li>Transitive x ≡ y and y ≡ z,then x ≡ z(<strong>传递性</strong>)</li>\n</ol>\n</li>\n<li>Eg.</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/1.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/1.png\" alt=\"img\" /></a><br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/2.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/2.png\" alt=\"img\" /></a></p>\n<h1 id=\"2-并查集提供的功能\"><a class=\"anchor\" href=\"#2-并查集提供的功能\">#</a> 2. 并查集提供的功能</h1>\n<ol>\n<li><strong>Combine</strong>(a,b):combine the equivalence classes that contains elements a and b into a single class(Combine(a,b):<strong> 合并</strong>包含元素 a 和 b 的两个等价类为一个等价类)</li>\n<li><strong>Find</strong>(e):determine the class that currently contains element e.(Find(e):<strong> 找到</strong>包含元素 e 的等价类)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216001228684.png\" alt=\"image-20230216001228684\" /></p>\n<h2 id=\"21-combineab合并\"><a class=\"anchor\" href=\"#21-combineab合并\">#</a> 2.1. Combine (a,b) 合并</h2>\n<ol>\n<li>Combine(a,b) is equivalent to i=Find(a); j=Find(b); if(i!=j) Union(i,j);</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a></p>\n<h1 id=\"3-并查集的物理实现\"><a class=\"anchor\" href=\"#3-并查集的物理实现\">#</a> 3. 并查集的物理实现</h1>\n<ol>\n<li>并查集的物理实现是通过森林来表示。</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/3.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/3.png\" alt=\"img\" /></a></p>\n<ol>\n<li><strong>parent</strong> 数组中存储的<strong>值为 0</strong> 的时候，这个结点表示为<strong>根结点</strong></li>\n<li>所以这个更快速的支持<strong>从下向上</strong>查询</li>\n</ol>\n<p><strong>树的结构</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//simple tree solution to union-find problem </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用简单的树结构解决并集的查找问题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parent<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>e<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>e<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 向上找到其根结点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> e<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 合并两个结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"31-union的实现\"><a class=\"anchor\" href=\"#31-union的实现\">#</a> 3.1. Union 的实现</h2>\n<ol>\n<li>实例:<br />\n<a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/4.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/4.png\" alt=\"img\" /></a></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DisjSets</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DisjSets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> numElements <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x <span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 并查集的构造方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DisjSets</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> numElements <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>numElements<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一个根结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 并查集的合并</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 并查集的查找，使用递归完成</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 这里是 - 1 表示根节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span> s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/5.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/5.png\" alt=\"img\" /></a></p>\n<h2 id=\"32-性能估计\"><a class=\"anchor\" href=\"#32-性能估计\">#</a> 3.2. 性能估计</h2>\n<ol>\n<li>Time complexity:(算法复杂度)\n<ul>\n<li>Find-- <strong>O(h)</strong>, h 是指树高</li>\n<li>Union-- <strong>θ(1)</strong></li>\n</ul>\n</li>\n<li>Assume that u times unions and f times finds are to be performed,  f&gt;u, in the worst case a tree with m elements can have a height of m:  Union (2,1),Union (3,2),Union (4,3),Union (5,4)…(假设我们进行 u 次组合操作和 f 次查找操作，f&gt;u，最坏情况下的一颗有 m 个元素的树可以有高度 m)\n<ul>\n<li>严重不平衡的树，会影响到查找的时间复杂度</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/6.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/6.png\" alt=\"img\" /></a></p>\n<h2 id=\"33-性能提升\"><a class=\"anchor\" href=\"#33-性能提升\">#</a> 3.3. 性能提升</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230216002110321.png\" alt=\"image-20230216002110321\" /></p>\n<h3 id=\"331-方法一\"><a class=\"anchor\" href=\"#331-方法一\">#</a> 3.3.1. 方法一</h3>\n<ol>\n<li><strong>Weight rule</strong>: if the number of nodes in tree i is less than the  number in tree j, then make j the parent of i; otherwise,make i the  parent of j.(点数原则：如果 i 树的点数小于 j 树的点数，那么我们让 j 成为 i 的 parent，反之亦然)</li>\n<li><strong>结点数少的树挂到结点多的树下面</strong></li>\n</ol>\n<h3 id=\"332-高度问题的实现\"><a class=\"anchor\" href=\"#332-高度问题的实现\">#</a> 3.3.2. 高度问题的实现</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/7.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/7.png\" alt=\"img\" /></a></p>\n<ol>\n<li>为了实现我们新建一个<strong> bool 类型数组</strong>来记录<strong>是否是根节点</strong>。</li>\n<li>Besides the parent field, each node has a boolean field root .The  root field is true iff the node is presently a root node.The parent  field of each root node is used to keep a count of the total number of  nodes in the  tree.(除了父字段外，每个节点都有一个布尔字段根。如果当前节点是根节点，则根字段为真。每个根节点的<strong>父字段</strong>用于统计树中的<strong>节点总数</strong>。)\n<ul>\n<li>也就是单独使用了一个布尔数组来实现是否为根。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Union with the weight rule</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    root<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    parent<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>e<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>e<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        root<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        e<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//i becomes subtree of j</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        root<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>如何省略去标记根的数组？\n<ul>\n<li><strong>使用负数来记录树高</strong></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> root1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> root2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            s<span class=\"token punctuation\">[</span>root1<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        s<span class=\"token punctuation\">[</span>root2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 注意到负数会都反过来</span></pre></td></tr></table></figure><p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/8.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/8.png\" alt=\"img\" /></a></p>\n<ol>\n<li>例子如下</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/9.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/9.png\" alt=\"img\" /></a></p>\n<h3 id=\"333-方法二\"><a class=\"anchor\" href=\"#333-方法二\">#</a> 3.3.3. 方法二</h3>\n<ol>\n<li>Height rule: if the height of tree i is less than that of tree j,  then make j the parent of i; otherwise,make i the parent of j.(如果树 i  的高度小于树 j 的高度，则使 j 成为 i 的父；否则，使 i 成为 j 的父节点)</li>\n<li>总而言之:<strong> 高度低的树挂到高度高的树的下面</strong></li>\n<li>When processing a equivalence pair, we need to operate Find twice,  WeightUnion once. Example of  improvement:(在处理等价对的时候，我们需要 Find 操作两次，WeightUnion 一次。)</li>\n</ol>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2019-Data-Structure/img/cpt9/10.png\"><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/10.png\" alt=\"img\" /></a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//c++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 存在疑问？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* C++ */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        j<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">!=</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> pf <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        parent<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        f <span class=\"token operator\">=</span> pf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//java 是用来记录树高 public int find (int x) &#123;    if ( s [x] &lt; 0 )        return x;    else        return s [x] = find (s [x]);&#125;</span></pre></td></tr></table></figure><h2 id=\"34-性能增强\"><a class=\"anchor\" href=\"#34-性能增强\">#</a> 3.4. 性能增强</h2>\n<ol>\n<li>improve Union in order to decrease the time each find take, so that  the height of tree will not increase  linearly.(改进并查集以减少每次查找所需的时间，从而使树的高度不会线性增加)</li>\n<li>Improvement of Find –path compression (查找路径压缩的改进)</li>\n</ol>\n",
            "tags": [
                "NJUSE",
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture17-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture17-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/",
            "title": "Lecture17-输入输出",
            "date_published": "2023-02-10T02:30:00.000Z",
            "content_html": "<h1 id=\"lecture17-输入输出\"><a class=\"anchor\" href=\"#lecture17-输入输出\">#</a> Lecture17 - 输入输出</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162138827.png\" alt=\"image-20221215162138827\" /></p>\n<h2 id=\"外围设备外设-peripheral-device\"><a class=\"anchor\" href=\"#外围设备外设-peripheral-device\">#</a> 外围设备（外设） peripheral device</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162246908.png\" alt=\"image-20221215162246908\" /></p>\n<h3 id=\"为什么不能把外设连接到系统总线上\"><a class=\"anchor\" href=\"#为什么不能把外设连接到系统总线上\">#</a> 为什么不能把外设连接到系统总线上</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162410451.png\" alt=\"image-20221215162410451\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162421591.png\" alt=\"image-20221215162421591\" /></p>\n<p>外设的传送速度过快和过慢都会造成问题</p>\n<h2 id=\"io模块\"><a class=\"anchor\" href=\"#io模块\">#</a> IO 模块</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162600197.png\" alt=\"image-20221215162600197\" /></p>\n<p>中间商 IO 模块连接外设和系统总线</p>\n<p>IO 模块属于计算机内部系统</p>\n<p>外设不属于计算机内部系统</p>\n<h2 id=\"外围设备的接口\"><a class=\"anchor\" href=\"#外围设备的接口\">#</a> 外围设备的接口</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215162822444.png\" alt=\"image-20221215162822444\" /></p>\n<p>控制逻辑 —— 是外围设备的大脑，控制外围设备的操作</p>\n<p>缓冲器 —— 用于缓存</p>\n<p>转换器 —— 将 01 数据转换成如音频等数据</p>\n<h2 id=\"io模块的功能\"><a class=\"anchor\" href=\"#io模块的功能\">#</a> IO 模块的功能</h2>\n<h3 id=\"处理器-设备通信\"><a class=\"anchor\" href=\"#处理器-设备通信\">#</a> 处理器、设备通信</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163514224.png\" alt=\"image-20221215163514224\" /></p>\n<p>中间商 IO 模块需要和处理器进行通信</p>\n<p>也需要和设备进行通信</p>\n<h3 id=\"数据缓冲\"><a class=\"anchor\" href=\"#数据缓冲\">#</a> 数据缓冲</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163722989.png\" alt=\"image-20221215163722989\" /></p>\n<p>处理器的速度和外设的速度不是完全匹配的</p>\n<p>所以需要在两者之间做一个缓冲</p>\n<h3 id=\"控制和定时\"><a class=\"anchor\" href=\"#控制和定时\">#</a> 控制和定时</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215163924983.png\" alt=\"image-20221215163924983\" /></p>\n<h3 id=\"检错\"><a class=\"anchor\" href=\"#检错\">#</a> 检错</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164007590.png\" alt=\"image-20221215164007590\" /></p>\n<h2 id=\"io模块的结构\"><a class=\"anchor\" href=\"#io模块的结构\">#</a> IO 模块的结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164039061.png\" alt=\"image-20221215164039061\" /></p>\n<p>下面的图做了 90 度的旋转</p>\n<p>CPU 对外部设备的命令：数据线 —— 状态 / 控制寄存器</p>\n<p>外设获得的状态和数据也通过数据线的状态控制寄存器返回</p>\n<p>CPU 对 IO 模块的控制：控制线</p>\n<h2 id=\"外部接口\"><a class=\"anchor\" href=\"#外部接口\">#</a> 外部接口</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164455676.png\" alt=\"image-20221215164455676\" /></p>\n<p>哪种用的更多？现在主要用的是串行接口</p>\n<p>当使用并行的时候，需要保持信息同步，比较困难。如何防止？一、不要走太远，线的长度不太长；二、两个操作之间的时间间隔长一点，频率不要太高</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215164900238.png\" alt=\"image-20221215164900238\" /></p>\n<h2 id=\"io操作技术\"><a class=\"anchor\" href=\"#io操作技术\">#</a> IO 操作技术</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165000866.png\" alt=\"image-20221215165000866\" /></p>\n<ul>\n<li>编程式 IO：通过程序处理</li>\n<li>中断驱动式 IO：根据 IO 发起的中断</li>\n<li>直接存储器读取：不需要处理器</li>\n</ul>\n<p>编程式 IO 不需要中断，其他需要</p>\n<p>DMA 不需要处理器干涉，其他需要</p>\n<h3 id=\"编程式io\"><a class=\"anchor\" href=\"#编程式io\">#</a> 编程式 IO</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165329903.png\" alt=\"image-20221215165329903\" /></p>\n<p>CPU 始终参与 IO，不能分身干别的事情。参与率为 100%。不断读取状态信息，不断读进字，并且写入存储器。</p>\n<h4 id=\"io命令\"><a class=\"anchor\" href=\"#io命令\">#</a> IO 命令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165626309.png\" alt=\"image-20221215165626309\" /></p>\n<p>命令：IO 控制外设</p>\n<h4 id=\"io指令\"><a class=\"anchor\" href=\"#io指令\">#</a> IO 指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215165838054.png\" alt=\"image-20221215165838054\" /></p>\n<p>指令：IO 自己的指令？</p>\n<p>编址方式：</p>\n<ol>\n<li>存储器映射式：缺点是会占用一些存储单元</li>\n<li>分离式</li>\n</ol>\n<h3 id=\"中断驱动式io\"><a class=\"anchor\" href=\"#中断驱动式io\">#</a> 中断驱动式 IO</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170021274.png\" alt=\"image-20221215170021274\" /></p>\n<p>和编程式 IO 的区别在于：可以去处理其他工作</p>\n<p>IO 模块等到消息之后，再告诉 CPU 去处理</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170215789.png\" alt=\"image-20221215170215789\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170316581.png\" alt=\"image-20221215170316581\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215170351320.png\" alt=\"image-20221215170351320\" /></p>\n<p>为什么会有中断允许和中断禁止？能够一下子保存完现场吗？不能，搬家的时候不能被打断，此时禁止中断，搬回来恢复现场的时候，也需要禁止中断。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215171211567.png\" alt=\"image-20221215171211567\" /></p>\n<p>响应优先级 —— 更快地抢到位置，小伙子</p>\n<p>处理优先级 —— 最后能够获得这个位置，老太太</p>\n<p>响应和处理优先级都很高，说明是个腿脚麻利的老太太</p>\n<p>中断只会识别比自己<strong>处理优先级</strong>更高的中断，小伙子要给老太太让座</p>\n<p>有好多中断，先筛选出处理优先级比自己高的，优先响应响应优先级最高的，最后拿到的是处理优先级最高的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215171758513.png\" alt=\"image-20221215171758513\" /></p>\n<p>掩码字表示谁可以屏蔽谁，表格中，行能否屏蔽列的（根据处理优先级）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172349168.png\" alt=\"image-20221215172349168\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172430080.png\" alt=\"image-20221215172430080\" /></p>\n<h3 id=\"直接存储器存取dma\"><a class=\"anchor\" href=\"#直接存储器存取dma\">#</a> 直接存储器存取 DMA</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172458552.png\" alt=\"image-20221215172458552\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215172714445.png\" alt=\"image-20221215172714445\" /></p>\n<p>CPU 和 DMA 都需要访问内存，DMA 比 CPU 优先，DMA 一般连接的是高速外设，如果不写入存储，会被冲突掉。</p>\n<h4 id=\"cpu停止法\"><a class=\"anchor\" href=\"#cpu停止法\">#</a> CPU 停止法</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173043201.png\" alt=\"image-20221215173043201\" /></p>\n<p>高速 IO 设备一般不会持续传入数据，DMA 占用期间，内存没有被有效利用</p>\n<h4 id=\"周期窃取\"><a class=\"anchor\" href=\"#周期窃取\">#</a> 周期窃取</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173247844.png\" alt=\"image-20221215173247844\" /></p>\n<h4 id=\"交替分时访问\"><a class=\"anchor\" href=\"#交替分时访问\">#</a> 交替分时访问</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173407670.png\" alt=\"image-20221215173407670\" /></p>\n<p>周期的固定时间给 CPU，周期的后半段给 DMA</p>\n<h4 id=\"dma配置机制单总线分离dma\"><a class=\"anchor\" href=\"#dma配置机制单总线分离dma\">#</a> DMA 配置机制：单总线分离 DMA</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173502792.png\" alt=\"image-20221215173502792\" /></p>\n<h4 id=\"dma配置机制单总线集合的dma-io\"><a class=\"anchor\" href=\"#dma配置机制单总线集合的dma-io\">#</a> DMA 配置机制：单总线集合的 DMA-IO</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173553642.png\" alt=\"image-20221215173553642\" /></p>\n<h4 id=\"dma配置机制io总线\"><a class=\"anchor\" href=\"#dma配置机制io总线\">#</a> DMA 配置机制：IO 总线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173648304.png\" alt=\"image-20221215173648304\" /></p>\n<h4 id=\"dma示例硬盘存取\"><a class=\"anchor\" href=\"#dma示例硬盘存取\">#</a> DMA 示例：硬盘存取</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215173739716.png\" alt=\"image-20221215173739716\" /></p>\n<p>CPU 仍然有比较高的参与度</p>\n<h2 id=\"io模块的演变\"><a class=\"anchor\" href=\"#io模块的演变\">#</a> IO 模块的演变</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221215174200623.png\" alt=\"image-20221215174200623\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture16-%E6%8E%A7%E5%88%B6%E5%99%A8/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture16-%E6%8E%A7%E5%88%B6%E5%99%A8/",
            "title": "Lecture16-控制器",
            "date_published": "2023-02-10T02:29:47.000Z",
            "content_html": "<h1 id=\"lecture16-控制器\"><a class=\"anchor\" href=\"#lecture16-控制器\">#</a> Lecture16 - 控制器</h1>\n<h2 id=\"处理器结构\"><a class=\"anchor\" href=\"#处理器结构\">#</a> 处理器结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082920259.png\" alt=\"image-20221214082920259\" /></p>\n<h2 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082928649.png\" alt=\"image-20221214082928649\" /></p>\n<p>用户可见寄存器允许编程人员访问，用户是指编程人员</p>\n<p>控制和状态寄存器大多数是用户不可见的</p>\n<p>两者的界限并不分明</p>\n<h3 id=\"用户可见寄存器\"><a class=\"anchor\" href=\"#用户可见寄存器\">#</a> 用户可见寄存器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082938186.png\" alt=\"image-20221214082938186\" /></p>\n<p>条件码寄存器是至少部分用户可见，但同时构成了控制器。</p>\n<p>条件码寄存器不是必须的，优点是有些指令会变得简单，缺点是硬件复杂度会变高。</p>\n<h4 id=\"设计出发点\"><a class=\"anchor\" href=\"#设计出发点\">#</a> 设计出发点</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214082953212.png\" alt=\"image-20221214082953212\" /></p>\n<ol>\n<li>特定还是通用：影响指令集的设计，比如，算数指令指定将结果存放在特定寄存器中，可以减少操作数；三操作数会更加的灵活</li>\n<li>太少，寄存器不够用；太多，效率未必提高，成本上升</li>\n<li>越长，成本越高</li>\n</ol>\n<h4 id=\"保存和恢复\"><a class=\"anchor\" href=\"#保存和恢复\">#</a> 保存和恢复</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083002741.png\" alt=\"image-20221214083002741\" /></p>\n<h3 id=\"控制和状态寄存器\"><a class=\"anchor\" href=\"#控制和状态寄存器\">#</a> 控制和状态寄存器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083013320.png\" alt=\"image-20221214083013320\" /></p>\n<ul>\n<li>PC + 1 或者重新加载</li>\n<li>IR</li>\n<li>MAR</li>\n<li>MBR</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083019626.png\" alt=\"image-20221214083019626\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083026843.png\" alt=\"image-20221214083026843\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083033886.png\" alt=\"image-20221214083033886\" /></p>\n<p>更多的寄存器，更少的访问主存 or 更多的信息放在主存中，更少地访问寄存器</p>\n<h2 id=\"微操作\"><a class=\"anchor\" href=\"#微操作\">#</a> 微操作</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083042489.png\" alt=\"image-20221214083042489\" /></p>\n<h3 id=\"取指周期\"><a class=\"anchor\" href=\"#取指周期\">#</a> 取指周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083049177.png\" alt=\"image-20221214083049177\" /></p>\n<p>左边是微操作，右边是示意图。</p>\n<ol>\n<li>a - b : PC 的地址 copy 到 MAR，MAR 和 PC 中的内容一样</li>\n<li>b - c : PC 加 1，将存储器中的数据中放入 MBR</li>\n<li>c - d  : 将 MBR 的内容让如 IR（指令寄存器）</li>\n</ol>\n<p>PC + 1 可以放到第三个指令周期吗？ 可以，微操作是不唯一的</p>\n<h3 id=\"微操作分组原则\"><a class=\"anchor\" href=\"#微操作分组原则\">#</a> 微操作分组原则</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083058428.png\" alt=\"image-20221214083058428\" /></p>\n<p>避免冲突 —— 不能在一个周期里对同一个寄存器进行读和写的操作</p>\n<p>可以把 PC+1 另外开一个周期吗？不可以，这样太耗时了</p>\n<h3 id=\"间址周期\"><a class=\"anchor\" href=\"#间址周期\">#</a> 间址周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083108027.png\" alt=\"image-20221214083108027\" /></p>\n<h3 id=\"执行周期\"><a class=\"anchor\" href=\"#执行周期\">#</a> 执行周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083119118.png\" alt=\"image-20221214083119118\" /></p>\n<h3 id=\"中断周期\"><a class=\"anchor\" href=\"#中断周期\">#</a> 中断周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083127732.png\" alt=\"image-20221214083127732\" /></p>\n<h3 id=\"指令周期代码icc\"><a class=\"anchor\" href=\"#指令周期代码icc\">#</a> 指令周期代码 ICC</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214083136481.png\" alt=\"image-20221214083136481\" /></p>\n<h4 id=\"取指周期-2\"><a class=\"anchor\" href=\"#取指周期-2\">#</a> 取指周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085356591.png\" alt=\"image-20221214085356591\" /></p>\n<p>最后一根线都是朝右的</p>\n<h4 id=\"间址周期-2\"><a class=\"anchor\" href=\"#间址周期-2\">#</a> 间址周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085405497.png\" alt=\"image-20221214085405497\" /></p>\n<h4 id=\"执行周期-2\"><a class=\"anchor\" href=\"#执行周期-2\">#</a> 执行周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085424926.png\" alt=\"image-20221214085424926\" /></p>\n<p>判断操作码，决定执行的指令</p>\n<p>允许中断，进入中断；不允许则继续</p>\n<h4 id=\"中断周期-2\"><a class=\"anchor\" href=\"#中断周期-2\">#</a> 中断周期</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085436183.png\" alt=\"image-20221214085436183\" /></p>\n<h2 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085448340.png\" alt=\"image-20221214085448340\" /></p>\n<p>箭头所指即为总线和寄存器之间的门</p>\n<p>MBR 和 AC 中的东西并不能同时放到总线上，因此需要将 MBR 的内容放到 Y 当中，此时可以同时获得两个数据。</p>\n<h3 id=\"控制cpu的功能需求\"><a class=\"anchor\" href=\"#控制cpu的功能需求\">#</a> 控制 CPU 的功能需求</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085459702.png\" alt=\"image-20221214085459702\" /></p>\n<h3 id=\"控制器输入\"><a class=\"anchor\" href=\"#控制器输入\">#</a> 控制器输入</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085522166.png\" alt=\"image-20221214085522166\" /></p>\n<p>指令寄存器：寻址方式（是否有间址周期），不同的操作码决定了不同的微操作顺序</p>\n<p>标志：</p>\n<p>时钟：</p>\n<p>来自控制总线的控制信号：特例 —— 中断请求</p>\n<h3 id=\"控制器的输出\"><a class=\"anchor\" href=\"#控制器的输出\">#</a> 控制器的输出</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085535205.png\" alt=\"image-20221214085535205\" /></p>\n<p>二进制输入量 —— 所有的控制信号都是 0 或者 1</p>\n<h3 id=\"取指周期-3\"><a class=\"anchor\" href=\"#取指周期-3\">#</a> 取指周期</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214085545069.png\" alt=\"image-20221214085545069\" /></p>\n<ol>\n<li>红色的线</li>\n<li>绿色的线</li>\n<li>黄色的线</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103826817.png\" alt=\"image-20221214103826817\" /></p>\n<h3 id=\"控制器的最小特性\"><a class=\"anchor\" href=\"#控制器的最小特性\">#</a> 控制器的最小特性</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103837622.png\" alt=\"image-20221214103837622\" /></p>\n<p>“少量的”</p>\n<h2 id=\"控制器实现\"><a class=\"anchor\" href=\"#控制器实现\">#</a> 控制器实现</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103846854.png\" alt=\"image-20221214103846854\" /></p>\n<h3 id=\"硬布线\"><a class=\"anchor\" href=\"#硬布线\">#</a> 硬布线</h3>\n<h4 id=\"硬布线控制器输入\"><a class=\"anchor\" href=\"#硬布线控制器输入\">#</a> 硬布线：控制器输入</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214103947835.png\" alt=\"image-20221214103947835\" /></p>\n<p>左边 I1-I4 输入</p>\n<p>右边 O1-O16 输出</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104031247.png\" alt=\"image-20221214104031247\" /></p>\n<h4 id=\"硬布线控制器逻辑\"><a class=\"anchor\" href=\"#硬布线控制器逻辑\">#</a> 硬布线：控制器逻辑</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104049524.png\" alt=\"image-20221214104049524\" /></p>\n<p>PQ 的非表示 00，表取指周期</p>\n<p>非 P Q 表示 01，表间址周期</p>\n<p>P 非 Q 表示 10，表执行周期，某些操作需要用到 C5</p>\n<p>缺点：指令表示会越来越复杂，硬件结构变复杂，集成度降低</p>\n<h3 id=\"微程序实现\"><a class=\"anchor\" href=\"#微程序实现\">#</a> 微程序实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104058952.png\" alt=\"image-20221214104058952\" /></p>\n<p>固件</p>\n<p>每个周期产生一组控制信号（二进制数字），然后将这些二进制子串串在一起，得到微操作序列</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104108689.png\" alt=\"image-20221214104108689\" /></p>\n<p>每个时钟周期，将 CPU 内部控制信号和系统总线控制信号取出，放到控制线上，发出控制信号，各门判断是否执行。</p>\n<p>分支条件判断是否跳转。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104120970.png\" alt=\"image-20221214104120970\" /></p>\n<p>对于相同的操作码，有相同的微程序序列</p>\n<h4 id=\"微程序控制器任务\"><a class=\"anchor\" href=\"#微程序控制器任务\">#</a> 微程序控制器：任务</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104131939.png\" alt=\"image-20221214104131939\" /></p>\n<p>主要任务为定序和执行</p>\n<h4 id=\"微程序控制器定序\"><a class=\"anchor\" href=\"#微程序控制器定序\">#</a> 微程序控制器：定序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104140191.png\" alt=\"image-20221214104140191\" /></p>\n<h4 id=\"微程序控制器构成\"><a class=\"anchor\" href=\"#微程序控制器构成\">#</a> 微程序控制器：构成</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104148310.png\" alt=\"image-20221214104148310\" /></p>\n<h4 id=\"微程序控制器工作流程\"><a class=\"anchor\" href=\"#微程序控制器工作流程\">#</a> 微程序控制器：工作流程</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104157493.png\" alt=\"image-20221214104157493\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104207337.png\" alt=\"image-20221214104207337\" /></p>\n<p>上一张 ppt，最后一步生成地址有三种选择</p>\n<p>在微指令进行编码，缩短微指令，在译码器中进行译码</p>\n<h4 id=\"微程序实现优点与缺点\"><a class=\"anchor\" href=\"#微程序实现优点与缺点\">#</a> 微程序实现：优点与缺点</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104216464.png\" alt=\"image-20221214104216464\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221214104225289.png\" alt=\"image-20221214104225289\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/10/COA/Lecture15-%E5%91%A8%E6%9C%9F/",
            "url": "https://quas-modo.github.io/2023/02/10/COA/Lecture15-%E5%91%A8%E6%9C%9F/",
            "title": "Lecture15-周期",
            "date_published": "2023-02-10T02:28:23.000Z",
            "content_html": "<h1 id=\"lecture15-指令周期\"><a class=\"anchor\" href=\"#lecture15-指令周期\">#</a> Lecture15 - 指令周期</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202123948768.png\" alt=\"image-20221202123948768\" /></p>\n<h2 id=\"指令周期状态图\"><a class=\"anchor\" href=\"#指令周期状态图\">#</a> 指令周期：状态图</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124110716.png\" alt=\"image-20221202124110716\" /></p>\n<p>取址周期：取指令</p>\n<p>执行周期：其他都是执行指令</p>\n<p>“返回字符串或向量数据” —— 不断地取出字符串的东西进行操作 ？</p>\n<h2 id=\"带中断的指令周期\"><a class=\"anchor\" href=\"#带中断的指令周期\">#</a> 带中断的指令周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124730176.png\" alt=\"image-20221202124730176\" /></p>\n<p>在每次周期内检查一次中断</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124830201.png\" alt=\"image-20221202124830201\" /></p>\n<h2 id=\"间址周期\"><a class=\"anchor\" href=\"#间址周期\">#</a> 间址周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202124918105.png\" alt=\"image-20221202124918105\" /></p>\n<p>” 间接地址的读取 “看做一个子周期</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125050866.png\" alt=\"image-20221202125050866\" /></p>\n<h2 id=\"cpu的任务\"><a class=\"anchor\" href=\"#cpu的任务\">#</a> CPU 的任务</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125225380.png\" alt=\"image-20221202125225380\" /></p>\n<h2 id=\"cpu需求寄存器\"><a class=\"anchor\" href=\"#cpu需求寄存器\">#</a> CPU 需求：寄存器</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125354584.png\" alt=\"image-20221202125354584\" /></p>\n<p>MAR 地址寄存器 Memory Address Register</p>\n<p>MBR 缓冲寄存器 Memory Buffer Register</p>\n<p>MDR 数据寄存器 Memory Data Register</p>\n<p>PC 程序计数器 Program Counter</p>\n<p>IR 指令寄存器 Instruction Register</p>\n<h2 id=\"数据流取指周期\"><a class=\"anchor\" href=\"#数据流取指周期\">#</a> 数据流：取指周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125623143.png\" alt=\"image-20221202125623143\" /></p>\n<p>红线：PC 通过 MAR 将地址放到地址总线上</p>\n<p>绿线：控制器告诉存储器地址已经准备好了</p>\n<p>黄线：存储器从地址总线读取地址</p>\n<p>数据准备好之后：</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125900089.png\" alt=\"image-20221202125900089\" /></p>\n<p>存储器将数据放在数据总线上，进而放在 MBR，然后放到 IR 中</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202125945117.png\" alt=\"image-20221202125945117\" /></p>\n<p>控制器取下一条指令</p>\n<p>控制器取完下一条指令之后，告诉 PC 加 1</p>\n<h2 id=\"数据流间址周期\"><a class=\"anchor\" href=\"#数据流间址周期\">#</a> 数据流：间址周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130122928.png\" alt=\"image-20221202130122928\" /></p>\n<p>MBR 中存取的是间接地址，与之前类似，地址类源于 MBR 而不是 PC</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130246666.png\" alt=\"image-20221202130246666\" /></p>\n<p>取出来的不是操作数，而是<strong>有效地址</strong></p>\n<h2 id=\"数据流中断周期\"><a class=\"anchor\" href=\"#数据流中断周期\">#</a> 数据流：中断周期</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130353561.png\" alt=\"image-20221202130353561\" /></p>\n<p>在进行写操作</p>\n<p>保存 PC 中的内容，需要知道返回到哪里</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130713833.png\" alt=\"image-20221202130713833\" /></p>\n<p>控制器告诉 MAR 返回地址存在哪里（可能是一个栈的指针）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221202130757927.png\" alt=\"image-20221202130757927\" /></p>\n<p>控制器通知存储器写入返回地址</p>\n<h2 id=\"指令流水线\"><a class=\"anchor\" href=\"#指令流水线\">#</a> 指令流水线</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164145096.png\" alt=\"image-20221208164145096\" /></p>\n<h3 id=\"两阶段方法\"><a class=\"anchor\" href=\"#两阶段方法\">#</a> 两阶段方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164300599.png\" alt=\"image-20221208164300599\" /></p>\n<p>时间分配不均匀，取指令太闲，执行执行太忙。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164316928.png\" alt=\"image-20221208164316928\" /></p>\n<p>取指令和执行指令都需要访问内存、取地址，所以会造成访问冲突。</p>\n<p>等待：条件分支指令导致地址可能取的不对，前面取的地址作废。</p>\n<h3 id=\"六阶段方法\"><a class=\"anchor\" href=\"#六阶段方法\">#</a> 六阶段方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164340282.png\" alt=\"image-20221208164340282\" /></p>\n<p>后面五个是把执行指令拆成了五个去完成。</p>\n<p>解决了两个阶段处理时间分配严重不平衡。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164408405.png\" alt=\"image-20221208164408405\" /></p>\n<p>好处：大大缩减了时间单位。</p>\n<h4 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164414492.png\" alt=\"image-20221208164414492\" /></p>\n<ol>\n<li>LOAD 不需要 WO 写操作数。</li>\n</ol>\n<p>​\t\t不需要给特殊的指令设计特殊的流水线，从硬件设计的角度来说，不划算。没有这个阶段就不执行。</p>\n<ol start=\"2\">\n<li>不是所有阶段都可以并行完成</li>\n<li>虽然不像两个阶段的差异那么大，但是六个阶段的时间还是有差异的，以每个流水阶段的最长的为基础</li>\n</ol>\n<h4 id=\"限制条件转移指令\"><a class=\"anchor\" href=\"#限制条件转移指令\">#</a> 限制：条件转移指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164421148.png\" alt=\"image-20221208164421148\" /></p>\n<p>红框框出的指令执行无效。</p>\n<h4 id=\"限制中断\"><a class=\"anchor\" href=\"#限制中断\">#</a> 限制：中断</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164429518.png\" alt=\"image-20221208164429518\" /></p>\n<p>操作：排空流水线</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164441209.png\" alt=\"image-20221208164441209\" /></p>\n<p>只能在时钟上升沿进行操作，可以有效避免噪声</p>\n<h3 id=\"流水线性能\"><a class=\"anchor\" href=\"#流水线性能\">#</a> 流水线性能</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208164501181.png\" alt=\"image-20221208164501181\" /></p>\n<p>锁存延时：锁数据，先放入寄存器，再从寄存器中取出来</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208165818734.png\" alt=\"image-20221208165818734\" /></p>\n<p>对应理想情况下的阶梯。</p>\n<p>第一条指令需要 k 个 t，后面（n-1）条每条时间长度多一个 t。</p>\n<p>加速比：评价流水线性能好坏的标准。用没有使用流水线的时间除以使用了流水线的时间。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170539117.png\" alt=\"image-20221208170539117\" /></p>\n<p>（误解）指令越多，k 越大，加速因子越大。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170745357.png\" alt=\"image-20221208170745357\" /></p>\n<ol>\n<li>\n<p>d 锁存延时会累计。</p>\n</li>\n<li>\n<p>冲突会累计</p>\n</li>\n</ol>\n<h2 id=\"冒险hazard\"><a class=\"anchor\" href=\"#冒险hazard\">#</a> 冒险 Hazard</h2>\n<p>阻塞或停顿</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170755086.png\" alt=\"image-20221208170755086\" /></p>\n<h3 id=\"结构冒险\"><a class=\"anchor\" href=\"#结构冒险\">#</a> 结构冒险</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170821493.png\" alt=\"image-20221208170821493\" /></p>\n<p>红色：使用不同的硬件资源（数据和地址使用不同的寄存器、使用了 cache）</p>\n<p>蓝色：分时复用，一个在上升沿使用，一个在下降沿使用。本身阶段所需时间就比较短，可以一起操作。</p>\n<h3 id=\"数据冒险\"><a class=\"anchor\" href=\"#数据冒险\">#</a> 数据冒险.</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208170931423.png\" alt=\"image-20221208170931423\" /></p>\n<p>r1 在第一条是结果，但是在下面的指令中是操作数</p>\n<h4 id=\"插入nop指令\"><a class=\"anchor\" href=\"#插入nop指令\">#</a> 插入 nop 指令</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171343426.png\" alt=\"image-20221208171343426\" /></p>\n<p>等待</p>\n<h4 id=\"插入bubble\"><a class=\"anchor\" href=\"#插入bubble\">#</a> 插入 bubble</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171353814.png\" alt=\"image-20221208171353814\" /></p>\n<p>有时间开销</p>\n<h4 id=\"转发-旁路\"><a class=\"anchor\" href=\"#转发-旁路\">#</a> 转发 旁路</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171404416.png\" alt=\"image-20221208171404416\" /></p>\n<p>重点</p>\n<p>其实 ALU 已经算出来结果了，不需要等待 WB 写回。</p>\n<p>用到 R1 的时候，可以从别的地方拿过来，不需要等待。</p>\n<h4 id=\"交换指令顺序\"><a class=\"anchor\" href=\"#交换指令顺序\">#</a> 交换指令顺序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171410311.png\" alt=\"image-20221208171410311\" /></p>\n<p>旁路什么时候有效？后面的数据是算出来的。</p>\n<p>但是 load 拿出来的数据，是要等到 WB 的，此时旁路失效。</p>\n<p>把一个跟前面没有关系的指令提前执行。</p>\n<h3 id=\"控制冒险\"><a class=\"anchor\" href=\"#控制冒险\">#</a> 控制冒险</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171422760.png\" alt=\"image-20221208171422760\" /></p>\n<p>取错指令了</p>\n<h4 id=\"取多条指令枚举\"><a class=\"anchor\" href=\"#取多条指令枚举\">#</a> 取多条指令（枚举？）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171750679.png\" alt=\"image-20221208171750679\" /></p>\n<p>有限的，分支太多就数量爆炸了</p>\n<p>循环缓冲器：缓存一个数量</p>\n<h4 id=\"分支预测猜得更对一点\"><a class=\"anchor\" href=\"#分支预测猜得更对一点\">#</a> 分支预测（猜得更对一点）</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171757176.png\" alt=\"image-20221208171757176\" /></p>\n<ol>\n<li>静态预测：与历史指令无关，简单但是效果不好</li>\n<li>动态预测：</li>\n</ol>\n<h5 id=\"动态预测\"><a class=\"anchor\" href=\"#动态预测\">#</a> 动态预测</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171802869.png\" alt=\"image-20221208171802869\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171809307.png\" alt=\"image-20221208171809307\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20221208171817588.png\" alt=\"image-20221208171817588\" /></p>\n",
            "tags": [
                "NJUSE",
                "计算机组成与结构",
                "计组"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture11-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",
            "title": "Lecture11-网络安全",
            "date_published": "2023-02-08T09:53:41.000Z",
            "content_html": "<h1 id=\"lecture11-网络安全\"><a class=\"anchor\" href=\"#lecture11-网络安全\">#</a> Lecture11 - 网络安全</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第11讲：网络安全_页面_01\" /></p>\n<h2 id=\"网络安全问题概述\"><a class=\"anchor\" href=\"#网络安全问题概述\">#</a> 网络安全问题概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第11讲：网络安全_页面_02\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第11讲：网络安全_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第11讲：网络安全_页面_04\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第11讲：网络安全_页面_05\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第11讲：网络安全_页面_06\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第11讲：网络安全_页面_07\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第11讲：网络安全_页面_08\" /></p>\n<h2 id=\"一般的数据加密模型\"><a class=\"anchor\" href=\"#一般的数据加密模型\">#</a> 一般的数据加密模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第11讲：网络安全_页面_09\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第11讲：网络安全_页面_10\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第11讲：网络安全_页面_11\" /></p>\n<h2 id=\"对称密钥和公钥密码体制\"><a class=\"anchor\" href=\"#对称密钥和公钥密码体制\">#</a> 对称密钥和公钥密码体制</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第11讲：网络安全_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第11讲：网络安全_页面_13\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第11讲：网络安全_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第11讲：网络安全_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第11讲：网络安全_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第11讲：网络安全_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第11讲：网络安全_页面_18\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第11讲：网络安全_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第11讲：网络安全_页面_20\" /></p>\n<h2 id=\"数字签名\"><a class=\"anchor\" href=\"#数字签名\">#</a> 数字签名</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第11讲：网络安全_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第11讲：网络安全_页面_22\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第11讲：网络安全_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第11讲：网络安全_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第11讲：网络安全_页面_25\" /></p>\n<h2 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第11讲：网络安全_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第11讲：网络安全_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第11讲：网络安全_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第11讲：网络安全_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第11讲：网络安全_页面_30\" /></p>\n<h2 id=\"acl\"><a class=\"anchor\" href=\"#acl\">#</a> ACL</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第11讲：网络安全_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第11讲：网络安全_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第11讲：网络安全_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第11讲：网络安全_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第11讲：网络安全_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第11讲：网络安全_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第11讲：网络安全_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第11讲：网络安全_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第11讲：网络安全_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第11讲：网络安全_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第11讲：网络安全_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第11讲：网络安全_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第11讲：网络安全_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第11讲：网络安全_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第11讲：网络安全_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第11讲：网络安全_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第11讲：网络安全_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第11讲：网络安全_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第11讲：网络安全_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第11讲：网络安全_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第11讲：网络安全_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第11讲：网络安全_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第11讲：网络安全_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第11讲：网络安全_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第11讲：网络安全_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC11%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第11讲：网络安全_页面_56\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture10-%E5%B9%BF%E5%9F%9F%E7%BD%91/",
            "title": "Lecture10-广域网",
            "date_published": "2023-02-08T09:53:29.000Z",
            "content_html": "<h1 id=\"lecture10-wan广域网\"><a class=\"anchor\" href=\"#lecture10-wan广域网\">#</a> Lecture10-WAN 广域网</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第10讲：广域网(wan)_页面_01\" /></p>\n<h2 id=\"广域网技术和设备\"><a class=\"anchor\" href=\"#广域网技术和设备\">#</a> 广域网技术和设备</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第10讲：广域网(wan)_页面_02\" /></p>\n<h3 id=\"广域网服务\"><a class=\"anchor\" href=\"#广域网服务\">#</a> 广域网服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第10讲：广域网(wan)_页面_03\" /></p>\n<p>定义：WAN 是通过 WAN 服务提供商连接 LAN 的通信网络</p>\n<p>WAN 在 OSI 的前三层运行，但<strong>主要集中在物理和数据链路层</strong>。</p>\n<p>广域网和局域网相比相对低效</p>\n<h3 id=\"公司的发展\"><a class=\"anchor\" href=\"#公司的发展\">#</a> 公司的发展</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第10讲：广域网(wan)_页面_04\" /></p>\n<ul>\n<li>广域网的最小单位是公司</li>\n<li>随着公司逐渐的发展才发展 (公司的发展是需求)</li>\n<li>最上角：公司刚成立的时候，小的局域网就可以搞定了 (几台主机)，对外提供服务少，局域网协同办公。</li>\n<li>右上角：随着公司的发展，一家发展到几十家，需要将不同的项目分开，每一个项目都有对应的项目经理和开发人员，多个局域网组成一个 AS (自治系统)。还是一个出口，ASP 要求高，VLAN 隔离和防火墙</li>\n<li>左下角：再次发展，有多个分支机构，区域办事处等，物理上隔离的很远，这时候建立一个数据中心 (存放全部业务数据)，保证团队可以在任何位置访问，公司向 ISP 请求租用一个广域网链路。</li>\n<li>右下角：最后进一步发展，覆盖全球：公司规模足够大，考虑成本，需要部署站点到站点之间的 VPN，保证效率更高。</li>\n</ul>\n<h3 id=\"广域网物理结构\"><a class=\"anchor\" href=\"#广域网物理结构\">#</a> 广域网物理结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第10讲：广域网(wan)_页面_05\" /></p>\n<p>通过 NetWork 远程接入，通过 WSP 提供的 CO Swtich 来连接到中心局</p>\n<p>CPE: 位于公司本地的设备 (主要是接入设备)，可以向 ISP 购买或者租用，购买上网服务 (猫)</p>\n<h3 id=\"广域网虚拟电路\"><a class=\"anchor\" href=\"#广域网虚拟电路\">#</a> 广域网虚拟电路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第10讲：广域网(wan)_页面_06\" /></p>\n<p>交换虚拟电路 (SVC，Switched Virtual Circuits) 是到目的地的 WAN 路径，可根据需要建立 (established) 和终止 (terminated)</p>\n<p>广域网虚拟电路的三个阶段 (phases)</p>\n<ol>\n<li>电路建立–创建虚拟电路 (逻辑确定)</li>\n<li>数据传输–发送和接收用户数据 (含有虚电路号等)</li>\n<li>电路中断–拆除虚拟电路</li>\n</ol>\n<p>永久 (Permanent) 虚拟电路 (PVC) 是采用以下一种模式的永久建立的电路：数据传输</p>\n<ol>\n<li>X.25 和帧中继使用 PVC</li>\n<li>减少带宽使用，但增加成本</li>\n</ol>\n<p><img data-src=\"C:/Users/QUAS/AppData/Roaming/Typora/typora-user-images/image-20230110112813672.png\" alt=\"image-20230110112813672\" /></p>\n<h3 id=\"链接类型和带宽\"><a class=\"anchor\" href=\"#链接类型和带宽\">#</a> 链接类型和带宽</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230110112856731.png\" alt=\"image-20230110112856731\" /></p>\n<ol>\n<li>T：美国标准</li>\n<li>E：欧洲标准</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第10讲：广域网(wan)_页面_07\" /></p>\n<h3 id=\"交换电路连接\"><a class=\"anchor\" href=\"#交换电路连接\">#</a> 交换电路连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第10讲：广域网(wan)_页面_08\" /></p>\n<p>ISDN: 多个 B 信道和 P 信道组合</p>\n<ul>\n<li>BRI:2 个 B 和一个 D</li>\n<li>PRI:T1:23B + D 和 E1:30B + D</li>\n</ul>\n<h3 id=\"网络连接\"><a class=\"anchor\" href=\"#网络连接\">#</a> 网络连接</h3>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.png\" alt=\"img\" /></a></p>\n<ul>\n<li>直接连接到运营商，DSL 接入 (以太网转换成 DSL 信号)</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/6.png\" alt=\"img\" /></a></p>\n<ul>\n<li>永久在线连接，用于有线电视传输等，共享电缆开关等</li>\n</ul>\n<p><a href=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\"><img data-src=\"https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/5.jpg\" alt=\"img\" /></a></p>\n<ul>\n<li>无线\n<ul>\n<li>地面无线信道</li>\n<li>无线信道</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第10讲：广域网(wan)_页面_09\" /></p>\n<h3 id=\"广域网设备\"><a class=\"anchor\" href=\"#广域网设备\">#</a> 广域网设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第10讲：广域网(wan)_页面_10\" /></p>\n<p>为了连接到专线 (leased line)，客户必须具备以下条件：</p>\n<ol>\n<li>访问服务提供商的电路</li>\n<li>可用的适当路由器端口</li>\n<li>CSU/DSU，调制解调器，ISDN 终端适配器等。</li>\n</ol>\n<h4 id=\"调制解调器\"><a class=\"anchor\" href=\"#调制解调器\">#</a> 调制解调器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第10讲：广域网(wan)_页面_11\" /></p>\n<ol>\n<li>通道服务单元 CSU,Channel Service Units / 数字服务单元 DSU,Digital Service Units</li>\n<li>与语音级 (voice-grade) 连接接口，以便将模拟信号转换为数字信号。</li>\n</ol>\n<h2 id=\"广域网和osi模型\"><a class=\"anchor\" href=\"#广域网和osi模型\">#</a> 广域网和 OSI 模型</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第10讲：广域网(wan)_页面_12\" /></p>\n<h3 id=\"广域网标准\"><a class=\"anchor\" href=\"#广域网标准\">#</a> 广域网标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第10讲：广域网(wan)_页面_13\" /></p>\n<p>WAN 标准主要描述 OSI 模型的哪些层？<strong>物理层和数据链路层</strong>，物理层提供电器标准，数据链路层封装到远程的部分：帧标准</p>\n<h3 id=\"wan物理层\"><a class=\"anchor\" href=\"#wan物理层\">#</a> wan 物理层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第10讲：广域网(wan)_页面_14\" /></p>\n<ol>\n<li>描述如何为 WAN 服务提供电气，机械，操作和功能连接的协议。</li>\n<li>这些服务通常是从 WAN 服务提供商，备用运营商，电话后和电报 (PTT) 机构获得的。</li>\n<li>描述数据终端设备 (DTE, Data Terminal Equipment) 和数据电路终端设备 (DCE. Data Circuit-terminating Equipment) 之间的接口。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第10讲：广域网(wan)_页面_15\" /></p>\n<ol>\n<li>通常，DCE 是服务提供商，而 DTE 是连接的设备。</li>\n<li>在此模型中，通过调制解调器或 CSU / DSU 提供给 DTE 的服务。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第10讲：广域网(wan)_页面_16\" /></p>\n<p>指定 DTE 和 DCE 之间此接口的几种物理层标准是…</p>\n<ol>\n<li>EIA/TIA-232 (RS-232): 计算机常用</li>\n<li>EIA/TIA-449</li>\n<li>V.24</li>\n<li>V.35</li>\n<li>X.21</li>\n<li>G.703</li>\n<li>EIA-530</li>\n</ol>\n<h3 id=\"wan数据链路层\"><a class=\"anchor\" href=\"#wan数据链路层\">#</a> wan 数据链路层</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第10讲：广域网(wan)_页面_17\" /></p>\n<ol>\n<li>WAN 数据链路协议描述了如何在单个数据链路上的系统之间承载帧。</li>\n<li>它们包括旨在在专用 (dedicated) 点对点，多点和多址交换服务上运行的协议。</li>\n<li>WAN 标准由许多公认的机构定义和管理，包括以下机构：ITU-T，ISO，IETF 和 EIA</li>\n<li>不是那么可靠，帧结构和以太网帧不同，协议是点对点，点对多点，多链路交换机切换</li>\n<li>为了确保正确：需要为每一个串口指定一个方式组成帧</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第10讲：广域网(wan)_页面_18\" /></p>\n<p>WAN 数据链路层定义了如何封装数据以传输到远程站点</p>\n<ol>\n<li><strong>点对点协议 (PPP,Point-to-Point Protocol)</strong>: 由 IETF 开发。PPP 包含用于识别网络层协议的协议字段 (包含一个协议单元，指定网络协议)</li>\n<li><strong>高级数据链路控制 (HDLC, High-Level Data Link Control)</strong>:ISO 标准，不同供应商之间不兼容的 HDLC，因为每个供应商都选择了实现方式。HDLC 支持点对点 / 多点配置 (抽象规范和约束，各个厂商不同)</li>\n<li><strong>帧中继 (Frame Relay)</strong>：使用简化的封装，对高质量的数字设备不进行纠错。(比较高速)</li>\n<li><strong>ISDN</strong>：通过现有电话线传输语音和数据的一组数字服务。</li>\n<li><strong>平衡的链路访问程序 (LAPB, Link Access Procedure, Balanced)</strong>：用于在 X.25 堆栈的第 2 层封装数据包的数据包交换网络。 提供点对点的可靠性和流量控制。</li>\n</ol>\n<h2 id=\"广域网访问方法\"><a class=\"anchor\" href=\"#广域网访问方法\">#</a> 广域网访问方法</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第10讲：广域网(wan)_页面_19\" /></p>\n<h3 id=\"ppp-hdlc-ppp重要考试考\"><a class=\"anchor\" href=\"#ppp-hdlc-ppp重要考试考\">#</a> PPP/ HDLC PPP（重要考试考）</h3>\n<p>点对点的标准</p>\n<p>以思科厂商为标准</p>\n<p>工作在串行链路上的</p>\n<p>如果都是同一个厂商的可以用 HDLC，不然使用 PPP</p>\n<h4 id=\"串行线框字段\"><a class=\"anchor\" href=\"#串行线框字段\">#</a> 串行线框字段</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第10讲：广域网(wan)_页面_20\" /></p>\n<ol>\n<li>两种最常见的点对点 WAN 封装是 HDLC (High-level Data Protocol) 和 PPP (Point to Poing Protocol)</li>\n<li>所有串行线封装共享一个通用的帧格式，该格式具有以下字段</li>\n<li>封装协议的选择取决于 WAN 技术和通信设备</li>\n</ol>\n<h4 id=\"ppp-and-hdlc\"><a class=\"anchor\" href=\"#ppp-and-hdlc\">#</a> PPP and HDLC</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第10讲：广域网(wan)_页面_21\" /></p>\n<ol>\n<li>\n<p>PPP 是一种标准的</p>\n<p>串行线路</p>\n<p>封装方法</p>\n<ol>\n<li>由 IETF (The Internet Engineering Task) 开发；取代 SLIP (Serial Line Internet Protocol)</li>\n<li>包含标识网络层协议的字段</li>\n<li>PPP 可以在建立连接期间检查链接质量</li>\n<li>通过密码认证协议 (PAP) 和质询握手认证协议 (CHAP) 提供认证。</li>\n</ol>\n</li>\n<li>\n<p>HDLC 是 Cisco 串行线的默认封装</p>\n<ol>\n<li>没有窗口或流量控制</li>\n<li>框架中插入了专有类型 (所有权) 代码，这意味着 HDLC 帧不能与其他供应商的设备互操作。</li>\n<li>当专用线路连接的两端是运行 Cisco IOS 的路由器时使用</li>\n<li>不做出窗口控制和流控制</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ppp\"><a class=\"anchor\" href=\"#ppp\">#</a> ppp</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第10讲：广域网(wan)_页面_22\" /></p>\n<ol>\n<li>串行链路上使用最广泛的第 2 层协议</li>\n<li>从 SLIP 开发，\n<ol>\n<li>仅支持 IP 协议</li>\n<li>不支持动态 IP 分配</li>\n<li>不支持身份验证</li>\n<li>不支持压缩</li>\n<li>不支持错误检测</li>\n</ol>\n</li>\n<li>PPP 提供以下功能\n<ol>\n<li>网络协议多路复用</li>\n<li>动态分配 IP 地址</li>\n<li>验证：PAP，CHAP</li>\n<li>压缩</li>\n<li>错误检测</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"ppp组件\"><a class=\"anchor\" href=\"#ppp组件\">#</a> PPP 组件</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第10讲：广域网(wan)_页面_23\" /></p>\n<p>使用 HDLC (ISO HDLC，而非 Cisco HDLC) 作为封装第 3 层数据报的基础</p>\n<p>实现 LCP (链接控制协议) 以：</p>\n<ol>\n<li>建立连接</li>\n<li>连接配置选项</li>\n<li>链接质量测试</li>\n</ol>\n<p>实施 NCP (网络控制协议，Network Control Protocol) 以选择和配置第 3 层协议</p>\n<h4 id=\"ppp帧格式\"><a class=\"anchor\" href=\"#ppp帧格式\">#</a> PPP 帧格式</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第10讲：广域网(wan)_页面_24\" /></p>\n<ol>\n<li>Flag: 01111110 标记：帧的开头或结尾，01111110，一位可能会连续接受到多个帧</li>\n<li>Address：11111111，广播地址</li>\n<li>Control：00000011，用户数据作为无序帧传输</li>\n<li>Protocol: 数据字段中的协议类型</li>\n<li>Data: 数据报，最大默认值为 1500 字节</li>\n<li>FCS: 2 或者 4 字节</li>\n</ol>\n<h4 id=\"ppp会话建立终止\"><a class=\"anchor\" href=\"#ppp会话建立终止\">#</a> PPP 会话建立 / 终止</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第10讲：广域网(wan)_页面_25\" /></p>\n<ol>\n<li>为了通过点对点链路建立通信，PPP 经历四个不同的阶段：\n<ol>\n<li>步骤一：链接建立和配置协商 (negotiation)(LCP)。</li>\n<li>步骤二：链接质量测试。</li>\n<li>步骤三：网络层协议配置 (NCP)。</li>\n<li>步骤四：链接终止。</li>\n</ol>\n</li>\n<li>图示如下</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第10讲：广域网(wan)_页面_26\" /></p>\n<h5 id=\"连接建立\"><a class=\"anchor\" href=\"#连接建立\">#</a> 连接建立</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第10讲：广域网(wan)_页面_27\" /></p>\n<ol>\n<li>建立链接是交换任何网络层数据报之前的第一阶段\n<ol>\n<li>每个 PPP 设备发送 LCP 来打开连接</li>\n<li>LCP 数据包包含一个配置选项字段，该字段允许设备协商选项的使用，例如<strong>压缩和身份验证协议</strong>等。</li>\n<li>如果 LCP 数据包中未包含配置选项，则采用该配置选项的<strong>默认值</strong>。</li>\n<li>当已发送和接收配置<strong>确认</strong>帧时，此阶段完成。</li>\n</ol>\n</li>\n<li>在完成这个步骤前不会传输具体数据帧的。</li>\n</ol>\n<h5 id=\"链路质量确定\"><a class=\"anchor\" href=\"#链路质量确定\">#</a> 链路质量确定</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第10讲：广域网(wan)_页面_28\" /></p>\n<ol>\n<li>发送和接收 LCP 数据包以测量链路上的错误率 (如果已配置)</li>\n<li>身份验证 (如果使用) 在网络层协议配置阶段开始之前进行。(可选)</li>\n<li>LCP 可以延迟网络层协议信息的传输，直到完成此阶段。</li>\n<li>在这之前不能传输网络帧。</li>\n</ol>\n<h5 id=\"网络层协议配置\"><a class=\"anchor\" href=\"#网络层协议配置\">#</a> 网络层协议配置</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第10讲：广域网(wan)_页面_29\" /></p>\n<ol>\n<li>在此阶段，PPP 设备发送 NCP 数据包以选择和配置一个或多个网络层协议 (例如 IP)。</li>\n<li>配置了每个选定的网络层协议后，可以通过链接发送来自每个网络层协议的数据报。</li>\n</ol>\n<h5 id=\"连接终止\"><a class=\"anchor\" href=\"#连接终止\">#</a> 连接终止</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第10讲：广域网(wan)_页面_30\" /></p>\n<p>CP 可以随时终止链接：</p>\n<ol>\n<li>应用户要求；(一方请求终止)</li>\n<li>链接质量</li>\n<li>超时</li>\n</ol>\n<p>当 LCP 关闭链接时，它将通知网络层协议，以便它们可以采取适当的措施</p>\n<h4 id=\"pap\"><a class=\"anchor\" href=\"#pap\">#</a> PAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第10讲：广域网(wan)_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第10讲：广域网(wan)_页面_32\" /></p>\n<ol>\n<li>链接的发起方 (Calling Side) 输入身份验证信息，以帮助确保用户具有网络管理员的许可来进行连接。</li>\n<li>远程节点使用双向握手 PAP 建立其身份。</li>\n<li>远程节点<strong>重复</strong>发送用户名 / 密码对，直到确认身份验证或连接终止</li>\n<li>密码以明文形式通过链接发送。</li>\n<li>在建立连接阶段之后，仅对远程节点进行一次身份验证。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第10讲：广域网(wan)_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第10讲：广域网(wan)_页面_34\" /></p>\n<h4 id=\"chap\"><a class=\"anchor\" href=\"#chap\">#</a> CHAP</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第10讲：广域网(wan)_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第10讲：广域网(wan)_页面_36\" /></p>\n<ol>\n<li>被叫方使用三向握手 CHAP 协议定期验证主叫方。</li>\n<li>CHAP 不允许呼叫者在没有 Challenge (随机数) 的情况下尝试进行身份验证。(Challenge-&gt; 随机数)</li>\n<li>主机 (称为参与者) 将质询消息发送到远程节点。</li>\n<li>远程节点以一个值 (加密的值，包括：接收到的质询，其用户名和密码) 进行响应:value 是 challenge 和密钥生成的</li>\n<li>主机根据自己的价值检查响应\n<ol>\n<li>如果值匹配，则确认身份验证</li>\n<li>否则，连接终止</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第10讲：广域网(wan)_页面_37\" /></p>\n<ul>\n<li>RTB 请求连接 RTA</li>\n<li>他们都存储一个用户名密码，但是用户名不同，密码相同</li>\n<li>RTB 发送一个连接请求</li>\n<li>RTA 找一个时间来发起挑战</li>\n<li>挑战中内容:\n<ul>\n<li>编号</li>\n<li>id 是第几次挑战</li>\n<li>random: 生成的随机数</li>\n<li>RTA: 谁发起的挑战</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第10讲：广域网(wan)_页面_38\" /></p>\n<ul>\n<li>RTB 进行应答，</li>\n<li>RTB 操作:pass + random 使用 MD5 算法 -&gt; 哈希值</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第10讲：广域网(wan)_页面_39\" /></p>\n<p>RTA 收到 RTB 的回复，然后比较是否相同</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第10讲：广域网(wan)_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第10讲：广域网(wan)_页面_41\" /></p>\n<h3 id=\"isdn\"><a class=\"anchor\" href=\"#isdn\">#</a> ISDN</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第10讲：广域网(wan)_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第10讲：广域网(wan)_页面_43\" /></p>\n<ol>\n<li>集成服务数字网络允许通过现有电话线传输数字信号：提供远程站点的连接</li>\n<li>ISDN 具有以下优点：\n<ol>\n<li>可以携带语音，视频和数据</li>\n<li>使用带外 D (或 Delta) 信道比调制解调器 (有时 &lt; 1s) 更快的呼叫建立</li>\n<li>使用 B (或屏障) 通道以 64kps 提供更快的数据传输</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"bribasic-rate-interface-and-priprimary-rate-interface\"><a class=\"anchor\" href=\"#bribasic-rate-interface-and-priprimary-rate-interface\">#</a> BRI(Basic Rate Interface) and PRI(Primary Rate Interface)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第10讲：广域网(wan)_页面_44\" /></p>\n<ol>\n<li>ISDN 服务有两种：\n<ol>\n<li>BRI (基本速率接口，Basic Rate Interface), 用户虚拟电路数据传，HDLC,PPP</li>\n<li>PRI (主速率接口，Primary Rate Interface)，发送控制信息，LAPD</li>\n</ol>\n</li>\n<li>ISDN BRI 服务提供两个 B 通道和一个 D 通道。</li>\n<li>ISDN BRI 将 144kbps (2B + D = 144kps) 线路的总带宽传送到三个单独的通道中。</li>\n<li>BRI B 信道服务以 64 kbps 的速率运行，旨在承载用户数据和语音流量。</li>\n<li>第三个通道，D 通道，是一个 16 kbps 信令通道，用于承载指令，这些指令告诉电话网络如何处理每个 B 通道。</li>\n<li>BRI 和 DRI 都是基于电话信道的</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第10讲：广域网(wan)_页面_45\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第10讲：广域网(wan)_页面_46\" /></p>\n<ol>\n<li>ISDN 利用一套 (suit) ITU-T 标准套件，涵盖 OSI 参考模型的物理，数据链路和网络层。</li>\n<li>有几种封装选择。两种最常见的封装是 PPP 和 HDLC。</li>\n<li>ISDN 默认为 HDLC。但是，PPP 更为健壮，因为它为兼容链接和协议配置的身份验证和协商提供了出色的机制。</li>\n<li>ISDN 接口仅允许使用一种封装类型，不允许混合使用封装。</li>\n</ol>\n<h4 id=\"非对称数字用户线路adslasymmetric-digital-subscriber-line\"><a class=\"anchor\" href=\"#非对称数字用户线路adslasymmetric-digital-subscriber-line\">#</a> 非对称数字用户线路 (ADSL,Asymmetric Digital Subscriber Line)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第10讲：广域网(wan)_页面_47\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第10讲：广域网(wan)_页面_48\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第10讲：广域网(wan)_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第10讲：广域网(wan)_页面_50\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第10讲：广域网(wan)_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第10讲：广域网(wan)_页面_52\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第10讲：广域网(wan)_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第10讲：广域网(wan)_页面_54\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第10讲：广域网(wan)_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第10讲：广域网(wan)_页面_56\" /></p>\n<h3 id=\"sonet\"><a class=\"anchor\" href=\"#sonet\">#</a> SONET</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第10讲：广域网(wan)_页面_57\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第10讲：广域网(wan)_页面_58\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第10讲：广域网(wan)_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第10讲：广域网(wan)_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第10讲：广域网(wan)_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第10讲：广域网(wan)_页面_62\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第10讲：广域网(wan)_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第10讲：广域网(wan)_页面_64\" /></p>\n<h3 id=\"hfc\"><a class=\"anchor\" href=\"#hfc\">#</a> HFC</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第10讲：广域网(wan)_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第10讲：广域网(wan)_页面_66\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第10讲：广域网(wan)_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第10讲：广域网(wan)_页面_68\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第10讲：广域网(wan)_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第10讲：广域网(wan)_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第10讲：广域网(wan)_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第10讲：广域网(wan)_页面_72\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_73.jpg\" alt=\"第10讲：广域网(wan)_页面_73\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC10%E8%AE%B2%EF%BC%9A%E5%B9%BF%E5%9F%9F%E7%BD%91(wan)_%E9%A1%B5%E9%9D%A2_74.jpg\" alt=\"第10讲：广域网(wan)_页面_74\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture09-%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/",
            "title": "Lecture09-局域网交换和vlan",
            "date_published": "2023-02-08T09:53:17.000Z",
            "content_html": "<h1 id=\"lecture9-局域网交换与vlan\"><a class=\"anchor\" href=\"#lecture9-局域网交换与vlan\">#</a> Lecture9- 局域网交换与 VLAN</h1>\n<h2 id=\"交换机\"><a class=\"anchor\" href=\"#交换机\">#</a> 交换机</h2>\n<h3 id=\"交换机基本功能\"><a class=\"anchor\" href=\"#交换机基本功能\">#</a> 交换机基本功能</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第9讲：局域网交换与vlan_页面_03\" /></p>\n<ol>\n<li>根据 MAC 地址建立和维护<strong>交换表</strong> (类似于网桥表)</li>\n<li>将帧切换出接口到目标</li>\n</ol>\n<h3 id=\"对称交换\"><a class=\"anchor\" href=\"#对称交换\">#</a> 对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第9讲：局域网交换与vlan_页面_04\" /></p>\n<ol>\n<li>对称交换可在具有相同带宽 (10/10 Mbps 或 100/100 Mbps) 的端口之间提供交换连接</li>\n<li>用户尝试访问其他网段上的服务器时，可能会导致瓶颈 (对称交换可能会导致带宽不足)</li>\n</ol>\n<h3 id=\"不对称交换\"><a class=\"anchor\" href=\"#不对称交换\">#</a> 不对称交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第9讲：局域网交换与vlan_页面_05\" /></p>\n<ol>\n<li>通过将带有服务器的网段连接到<strong>更高带宽的端口 (100 Mbps)</strong>，非对称交换 (asymmetric switching) 减少了服务器上潜在瓶颈的可能性</li>\n<li>非对称交换需要在交换器中进行内存缓冲</li>\n<li>非对称交换端口解决对称交换端口中的对称阻塞问题 (进一步保证了服务器的稳定实现)</li>\n</ol>\n<h3 id=\"内存缓存\"><a class=\"anchor\" href=\"#内存缓存\">#</a> 内存缓存</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第9讲：局域网交换与vlan_页面_06\" /></p>\n<ol>\n<li>交换机中存储目标和传输数据的内存区域，直到可以将其切换出正确的端口为止。\n<ol>\n<li>基于端口 (Port) 的内存缓冲\n<ol>\n<li>数据包存储在每个端口的队列中</li>\n<li>由于目标端口繁忙，一个数据包可能会延迟其他数据包的传输</li>\n<li>其他端口存在不均衡的问题。</li>\n</ol>\n</li>\n<li>共享 (Shared) 内存缓冲\n<ol>\n<li>所有端口共享的公用内存缓冲</li>\n<li>允许将数据包在一个端口上接收并在另一个端口上发送出去，而无需将其更改为其他队列。</li>\n<li>需要自己记录端口的信息</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>发生阻塞的时候，根据情况按照端口或者内存将包缓存下来</li>\n</ol>\n<h3 id=\"交换方式\"><a class=\"anchor\" href=\"#交换方式\">#</a> 交换方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第9讲：局域网交换与vlan_页面_07\" /></p>\n<p>储存转发 (Store-and-Forward，网桥、路由器等通过软件的设备)</p>\n<ol>\n<li>交换机<strong>接收整个帧</strong>，最后将其计算为 CRC，然后再将其发送到目的地</li>\n<li>接收后，校验，正确再发送</li>\n</ol>\n<p>Cut-through 直通</p>\n<ol>\n<li>转发会增加延迟：通过使用直通切换方法可以减少它</li>\n<li>快速转发切换：仅在立即转发帧之前检查目标 MAC (只看到<strong>帧的目的地址</strong>就转发)</li>\n<li>碎片释放：读取前 64 个字节去减少碰撞和帧碎片，在转发帧之前</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第9讲：局域网交换与vlan_页面_08\" /></p>\n<p>三种查看方式</p>\n<h3 id=\"第二层交换机\"><a class=\"anchor\" href=\"#第二层交换机\">#</a> 第二层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第9讲：局域网交换与vlan_页面_09\" /></p>\n<ol>\n<li>大规模集成电路，保证链路效率，低时延，低成本</li>\n<li>有一个 MAC 地址</li>\n</ol>\n<h3 id=\"第三层交换机\"><a class=\"anchor\" href=\"#第三层交换机\">#</a> 第三层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第9讲：局域网交换与vlan_页面_10\" /></p>\n<p>基于硬件的帧转发机制，较高的帧转发性能，低时延</p>\n<p>较高速的计算</p>\n<p>每一个端口的代价低</p>\n<p>流控制</p>\n<p>安全性更高</p>\n<p>对数据流进行路由，生成 MAC 和 IP 的映射，直接经过第二层（？，智能性较差</p>\n<h3 id=\"第四层交换机\"><a class=\"anchor\" href=\"#第四层交换机\">#</a> 第四层交换机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第9讲：局域网交换与vlan_页面_11\" /></p>\n<h3 id=\"多层交换机协议\"><a class=\"anchor\" href=\"#多层交换机协议\">#</a> 多层交换机协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第9讲：局域网交换与vlan_页面_12\" /></p>\n<h2 id=\"stp-the-spanning-tree-protocol-生成树协议\"><a class=\"anchor\" href=\"#stp-the-spanning-tree-protocol-生成树协议\">#</a> STP the Spanning-Tree Protocol 生成树协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第9讲：局域网交换与vlan_页面_13\" /></p>\n<h3 id=\"桥回路\"><a class=\"anchor\" href=\"#桥回路\">#</a> 桥回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第9讲：局域网交换与vlan_页面_14\" /></p>\n<ol>\n<li>出于各种原因，网络中可能会出现环路。\n<ol>\n<li>通常，网络中的环路是<strong>故意提供冗余</strong>的结果。</li>\n<li>也可能由于配置错误而发生：在桥接网络中，环路可能是绝对灾难性的两个主要原因：\n<ol>\n<li>广播回路 (广播风暴)，没有 TTL</li>\n<li>路由表的错误</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"冗余造成了路由回路\"><a class=\"anchor\" href=\"#冗余造成了路由回路\">#</a> 冗余造成了路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第9讲：局域网交换与vlan_页面_15\" /></p>\n<h3 id=\"第二层路由回路\"><a class=\"anchor\" href=\"#第二层路由回路\">#</a> 第二层路由回路</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第9讲：局域网交换与vlan_页面_16\" /></p>\n<ol>\n<li>广播和第 2 层回路可能是危险的组合。</li>\n<li>以太网帧没有 TTL 字段</li>\n<li>以太网帧开始循环后，它可能会继续下去，直到有人关闭其中一台交换机或断开链路为止 (外部条件)</li>\n<li>交换机将抖动 (flip flop) 主机 A 的桥接表条目 (创建极高的 CPU 利用率)。</li>\n<li>消耗 CPU 和内存</li>\n</ol>\n<h4 id=\"泛洪单播帧\"><a class=\"anchor\" href=\"#泛洪单播帧\">#</a> 泛洪单播帧</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第9讲：局域网交换与vlan_页面_17\" /></p>\n<ul>\n<li>过一段时间 CAT-1 和 CAT-2 没有收到 Host-B 的信息，删除表中的对应记录</li>\n<li>在这之后，Host A 发送给 Host B 信息，然后在 CAT-1 和 CAT-2 之间进行循环</li>\n</ul>\n<h3 id=\"生成树概述\"><a class=\"anchor\" href=\"#生成树概述\">#</a> 生成树概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第9讲：局域网交换与vlan_页面_18\" /></p>\n<ol>\n<li>生成树协议的元素\n<ol>\n<li>主要功能：在<strong>交换 / 桥接网络</strong>中允许<strong>冗余路径</strong>，而不会因环路的影响而引起延迟。</li>\n<li>STP 通过计算<strong>稳定的生成树</strong>网络拓扑来防止环路</li>\n<li><strong>生成树帧</strong> (称为桥协议数据单元 - BPDU) 用于确定生成树拓扑</li>\n</ol>\n</li>\n<li>在正常情况下禁用一些端口来防止出现冗余</li>\n</ol>\n<h4 id=\"决策顺序\"><a class=\"anchor\" href=\"#决策顺序\">#</a> 决策顺序</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第9讲：局域网交换与vlan_页面_19\" /></p>\n<p>生成树始终使用相同的四步决策序列：</p>\n<ol>\n<li>在拓扑里面最低的 root BID (网桥标识)【找到 root 路由器】</li>\n<li>找到 Root bridgh 的最低路径成本</li>\n<li>每个路径都会选择一个最低 BID 的 sender 这个是针对一个链路的，详见例子</li>\n<li>每个路径再指定一个最低的 ID 端口</li>\n</ol>\n<h4 id=\"bpdu-bridge-protocol-data-unit\"><a class=\"anchor\" href=\"#bpdu-bridge-protocol-data-unit\">#</a> BPDU Bridge Protocol Data Unit</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第9讲：局域网交换与vlan_页面_20\" /></p>\n<p>STP 建立一个称为<strong>根网桥的根节点</strong></p>\n<p>生成的树源自根桥。</p>\n<p>不属于最短路径树的冗余连接将被阻止。(block 端口，不转发，但是接收)（只会有一条路最短）</p>\n<p>在阻塞的链接上收到的数据帧将被丢弃。</p>\n<p>交换机发送的允许形成无环逻辑拓扑的消息是 BPDU</p>\n<h4 id=\"stp-bpdu\"><a class=\"anchor\" href=\"#stp-bpdu\">#</a> stp bpdu</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第9讲：局域网交换与vlan_页面_21\" /></p>\n<h4 id=\"bridge-identificationbid\"><a class=\"anchor\" href=\"#bridge-identificationbid\">#</a> Bridge Identification/BID</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第9讲：局域网交换与vlan_页面_22\" /></p>\n<ol>\n<li>网桥 ID (BID)：8 个字节 (2 + 6)\n<ol>\n<li>高阶 BID 子字段 (2 个字节)：网桥优先级\n<ol>\n<li>216 个可能的值：0-65,535 (默认值：32,768)</li>\n<li>通常以十进制格式表示</li>\n</ol>\n</li>\n<li>低阶子字段 (6 个字节)：分配给交换机的 MAC 地址，以十六进制格式表示</li>\n</ol>\n</li>\n<li>STP 成本值：成本越低越好。</li>\n</ol>\n<h4 id=\"选举根路由器\"><a class=\"anchor\" href=\"#选举根路由器\">#</a> 选举根路由器</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第9讲：局域网交换与vlan_页面_23\" /></p>\n<ol>\n<li>交换机通过查找具有<strong>最低 BID</strong> 的交换机 (通常称为根战争) 来选择单个根交换机。</li>\n<li>如果所有交换机都使用默认的网桥优先级 32768，则最低的 MAC 地址将作为平局。</li>\n<li>配置优先级来调整根桥</li>\n</ol>\n<h3 id=\"路径代价cost\"><a class=\"anchor\" href=\"#路径代价cost\">#</a> 路径代价 cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第9讲：局域网交换与vlan_页面_24\" /></p>\n<h3 id=\"5个stp的状态\"><a class=\"anchor\" href=\"#5个stp的状态\">#</a> 5 个 STP 的状态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第9讲：局域网交换与vlan_页面_25\" /></p>\n<ol>\n<li>通过根据策略配置每个端口来建立状态</li>\n<li>然后，STP 根据流量模式 (traffic Patterns) 和潜在环路 (Protential Loops) 修改状态</li>\n<li>STP 状态的默认顺序为：\n<ol>\n<li>阻塞：没有转发帧，听到了 BPDU</li>\n<li>监听：不转发任何帧，监听数据帧 (确定自己可以参加的交换)，也会发送一些数据帧表示自己状态变了</li>\n<li>学习：不转发帧，学习地址</li>\n<li>转发：转发帧，学习地址</li>\n<li>禁用：没有转发帧，没有听到 BPDU</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113837280.png\" alt=\"image-20230109113837280\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109113900889.png\" alt=\"image-20230109113900889\" /></p>\n<h3 id=\"初始stp收敛\"><a class=\"anchor\" href=\"#初始stp收敛\">#</a> 初始 STP 收敛</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第9讲：局域网交换与vlan_页面_26\" /></p>\n<ol>\n<li>当网络首次启动时，所有网桥都会混合使用 BPDU 信息来泛洪网络。(开始泛洪 BPDU 信息)</li>\n<li>立即，他们应用决策序列，允许他们 BPDU 进行 PK，然后选择出来 ROOT，从而形成整个网络的单个生成树。</li>\n</ol>\n<pre><code>(Step 1) 根交换机决定：选择一个根桥作为该网络的中心点\n(Step 2) 选择根端口：所有剩余的网桥都会计算出一组根端口\n(Step 3) 选择指定端口：其余所有网桥计算一组指定端口\n</code></pre>\n<h4 id=\"步骤1-根交换机决定\"><a class=\"anchor\" href=\"#步骤1-根交换机决定\">#</a> 步骤 1 根交换机决定</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第9讲：局域网交换与vlan_页面_27\" /></p>\n<ol>\n<li>（所有路由器都）宣布自己为根</li>\n<li>检查端口上收到的所有 BPDU 以及将在该端口上发送的 BPDU</li>\n<li>对于每个到达的 BPDU，如果其值小于为端口保存的现有 BPDU</li>\n<li>旧值被替换（由于 cat-A 的 BID 最小，所有 BC 均替换）</li>\n<li>BPDU 的发送者被接受为新的根</li>\n</ol>\n<h4 id=\"步骤2选择根端口\"><a class=\"anchor\" href=\"#步骤2选择根端口\">#</a> 步骤 2：选择根端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第9讲：局域网交换与vlan_页面_28\" /></p>\n<ol>\n<li>每个非根桥必须选择一个根端口。\n<ol>\n<li>桥的根端口是最接近根桥的端口。</li>\n<li>根路径成本是到根网桥的所有链接的累积 (cumulative) 成本。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"步骤3选择网段的指定端口\"><a class=\"anchor\" href=\"#步骤3选择网段的指定端口\">#</a> 步骤 3：选择网段的指定端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第9讲：局域网交换与vlan_页面_29\" /></p>\n<ol>\n<li>每个网段都有一个指定的端口：充当单个网桥 / 交换机端口，该端口既向该网段又向根网桥发送流量，也从该网段和根网桥接收流量。</li>\n<li>包含给定网段的指定端口的网桥 / 交换机称为该网段的指定网桥。</li>\n<li>所有网桥 / 交换机将阻止它们上未指定的端口，根网桥上的每个活动端口都将成为指定端口</li>\n<li>每个链路只有一个指定端口，一旦选定其他就 block 了</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第9讲：局域网交换与vlan_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第9讲：局域网交换与vlan_页面_31\" /></p>\n<h2 id=\"vlan\"><a class=\"anchor\" href=\"#vlan\">#</a> Vlan</h2>\n<h3 id=\"vlan介绍\"><a class=\"anchor\" href=\"#vlan介绍\">#</a> vlan 介绍</h3>\n<h4 id=\"现有的共享局域网配置\"><a class=\"anchor\" href=\"#现有的共享局域网配置\">#</a> 现有的共享局域网配置</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第9讲：局域网交换与vlan_页面_33\" /></p>\n<ol>\n<li>在典型的共享局域网中…\n<ol>\n<li>根据用户所插入 (plug) 的集线器对用户进行物理分组</li>\n<li>路由器分割局域网并提供广播防火墙</li>\n</ol>\n</li>\n<li>在虚拟局域网中\n<ol>\n<li>您可以按使用的功能，部门或应用程序对用户进行逻辑分组</li>\n<li>通过专有软件进行配置</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"lan和vlan之间的差异\"><a class=\"anchor\" href=\"#lan和vlan之间的差异\">#</a> LAN 和 VLAN 之间的差异</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第9讲：局域网交换与vlan_页面_34\" /></p>\n<p>虚拟局域网</p>\n<ol>\n<li>在第 2 层和第 3 层工作</li>\n<li>控制网络广播</li>\n<li>允许用户由网络管理员分配。</li>\n<li>提供更严格的网络安全性。</li>\n</ol>\n<h4 id=\"vlan标准\"><a class=\"anchor\" href=\"#vlan标准\">#</a> vlan 标准</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第9讲：局域网交换与vlan_页面_35\" /></p>\n<p>特点</p>\n<ol>\n<li>不限于物理交换机网段的网络设备或用户的<strong>逻辑分组</strong>。</li>\n<li>VLAN 中的设备或用户可以按功能，部门，应用程序等进行分组，而<strong>不管其物理网段的位置</strong>如何。</li>\n<li>VLAN<strong> 创建一个不限于物理网段</strong>的单个广播域，并且将其视为子网。</li>\n<li>VLAN 设置是由网络管理员使用供应商的软件在交换机中完成的。</li>\n</ol>\n<h4 id=\"分组用户\"><a class=\"anchor\" href=\"#分组用户\">#</a> 分组用户</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第9讲：局域网交换与vlan_页面_36\" /></p>\n<ol>\n<li>VLAN 可以从逻辑上将用户划分为不同的子网 (广播域)</li>\n<li>广播帧仅在具有相同 VLAN ID 的一个或多个交换机的端口之间切换。(VLAN ID 属于端口)</li>\n<li>可以通过基于以下内容的软件对用户进行逻辑分组：\n<ol>\n<li>端口号</li>\n<li>MAC 地址</li>\n<li>使用的协议</li>\n<li>使用的应用</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"有无vlan的网络广播\"><a class=\"anchor\" href=\"#有无vlan的网络广播\">#</a> 有无 vlan 的网络广播</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第9讲：局域网交换与vlan_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第9讲：局域网交换与vlan_页面_38\" /></p>\n<p>faculty studeng 分别在自己的 vlan 中传输</p>\n<h4 id=\"vlan间通信\"><a class=\"anchor\" href=\"#vlan间通信\">#</a> vlan 间通信</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第9讲：局域网交换与vlan_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第9讲：局域网交换与vlan_页面_40\" /></p>\n<h3 id=\"vlan结构\"><a class=\"anchor\" href=\"#vlan结构\">#</a> vlan 结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第9讲：局域网交换与vlan_页面_41\" /></p>\n<h4 id=\"backbone\"><a class=\"anchor\" href=\"#backbone\">#</a> backbone</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第9讲：局域网交换与vlan_页面_42\" /></p>\n<ol>\n<li>VLAN 配置需要支持互连的路由器和交换机之间的骨干数据传输。</li>\n<li>骨干网是用于 VLAN 间通信的区域</li>\n<li>骨干网应该是高速链路，通常为 100Mbps 或更高</li>\n<li>BackBone 可以跑多个 VLAN，是骨干网</li>\n</ol>\n<h4 id=\"vlan中路由器的作用\"><a class=\"anchor\" href=\"#vlan中路由器的作用\">#</a> vlan 中路由器的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第9讲：局域网交换与vlan_页面_43\" /></p>\n<ol>\n<li>路由器提供不同 VLAN 之间的连接</li>\n<li>例如，您有 VLAN1 和 VLAN2。\n<ol>\n<li>在交换机内，位于不同 VLAN 上的用户无法相互通信 (VLAN 的好处！)</li>\n<li>但是，VLAN1 上的用户可以向 VLAN2 上的用户发送电子邮件，但他们需要路由器才能执行此操作。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"在vlan中帧的作用\"><a class=\"anchor\" href=\"#在vlan中帧的作用\">#</a> 在 vlan 中帧的作用</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第9讲：局域网交换与vlan_页面_44\" /></p>\n<ol>\n<li>交换机根据帧中的数据做出过滤和转发决策。</li>\n<li>使用了两种技术\n<ol>\n<li>帧过滤：检查有关每个帧的特定信息 (MAC 地址或第 3 层协议类型), 特定的 VLAN 记录或者映射</li>\n<li>帧标记：在整个网络骨干网中转发时，在每个帧的标题中放置一个唯一的标识符。</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"帧过滤\"><a class=\"anchor\" href=\"#帧过滤\">#</a> 帧过滤</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第9讲：局域网交换与vlan_页面_45\" /></p>\n<h5 id=\"帧标记\"><a class=\"anchor\" href=\"#帧标记\">#</a> 帧标记</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第9讲：局域网交换与vlan_页面_46\" /></p>\n<ol>\n<li>帧标记实施过程：\n<ol>\n<li>在整个网络骨干网中转发时，在每个帧的标题中放置一个 VLAN 标识符。</li>\n<li>每个开关都可以理解和检查标识符。</li>\n<li>当帧离开网络骨干网时，交换机会在帧发送到目标终端站之前删除标识符。只和端口绑定，而不影响主机</li>\n</ol>\n</li>\n<li>帧标记在第 2 层起作用</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第9讲：局域网交换与vlan_页面_47\" /></p>\n<p><strong>主机并不知道 vlan 的存在</strong></p>\n<h5 id=\"帧标签标准\"><a class=\"anchor\" href=\"#帧标签标准\">#</a> 帧标签标准</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第9讲：局域网交换与vlan_页面_48\" /></p>\n<p>IEEE802.1Q:IEEE 标准，在标头中插入 VLAN 的标签以标识所属的 VLAN。(帧标记)。</p>\n<p>ISL (Inter-Switch Link)：思科专有。ISL 在数据帧的前面添加一个 26 字节的标头，并在末尾附加一个 CRC (4 字节)。</p>\n<h3 id=\"vlan实现\"><a class=\"anchor\" href=\"#vlan实现\">#</a> vlan 实现</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第9讲：局域网交换与vlan_页面_49\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第9讲：局域网交换与vlan_页面_50\" /></p>\n<p>实现 VLAN 的两种方法</p>\n<ol>\n<li>静态的</li>\n<li>动态的</li>\n</ol>\n<p>每一个端口绑定给一个 VLAN</p>\n<ol>\n<li>确保不共享同一 VLAN 的端口不共享广播。</li>\n<li>确保共享相同 VLAN 的端口将共享广播</li>\n</ol>\n<p>实现途径:</p>\n<ol>\n<li>基于端口的虚拟局域网</li>\n<li>基于 MAC 地址的虚拟局域网</li>\n<li>基于 IP 地址的虚拟局域网</li>\n<li>基于上层协议的虚拟局域网</li>\n</ol>\n<h4 id=\"静态vlan\"><a class=\"anchor\" href=\"#静态vlan\">#</a> 静态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第9讲：局域网交换与vlan_页面_51\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第9讲：局域网交换与vlan_页面_52\" /></p>\n<p>定义：静态 VLAN 是指将交换机上的<strong>端口</strong>管理性地分配给 VLAN 的时间</p>\n<p>优点：</p>\n<ol>\n<li>安全，易于配置和监控</li>\n<li>在控制移动的网络中效果很好</li>\n</ol>\n<h4 id=\"动态vlan\"><a class=\"anchor\" href=\"#动态vlan\">#</a> 动态 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第9讲：局域网交换与vlan_页面_53\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第9讲：局域网交换与vlan_页面_54\" /></p>\n<ol>\n<li>当工作站最初连接到未分配的端口时，交换机会检查表中的条目，并使用正确的 VLAN 动态配置端口</li>\n<li>优点\n<ol>\n<li>添加或移动用户时减少管理 (更多前期工作)</li>\n<li>集中通知未授权用户</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"以端口为中心的vlan\"><a class=\"anchor\" href=\"#以端口为中心的vlan\">#</a> 以端口为中心的 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第9讲：局域网交换与vlan_页面_55\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第9讲：局域网交换与vlan_页面_56\" /></p>\n<ol>\n<li>同一 VLAN 中的所有节点都连接到同一路由器接口</li>\n<li>使管理更容易，因为…\n<ol>\n<li>通过路由器端口分配用户</li>\n<li>VLAN 易于管理。</li>\n<li>提供更高的安全性</li>\n<li>数据包不会 &quot;泄漏&quot; 到其他域</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"access-and-trunk-links\"><a class=\"anchor\" href=\"#access-and-trunk-links\">#</a> access and trunk links</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第9讲：局域网交换与vlan_页面_57\" /></p>\n<p>分为两类:</p>\n<ol>\n<li>接入链路：通过一个 VLAN 报文</li>\n<li>骨干链路：通过多个 VLAN 报文</li>\n</ol>\n<h5 id=\"access\"><a class=\"anchor\" href=\"#access\">#</a> access</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第9讲：局域网交换与vlan_页面_58\" /></p>\n<ol>\n<li>访问连接是仅作为一个 VLAN 成员的交换机上的连接。</li>\n<li>此 VLAN 被称为端口的本机 VLAN，连接到端口的任何设备都完全不知道 VLAN 存在。</li>\n</ol>\n<h5 id=\"trunk-links\"><a class=\"anchor\" href=\"#trunk-links\">#</a> trunk links</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第9讲：局域网交换与vlan_页面_59\" /></p>\n<ol>\n<li>主干链路能够支持多个 VLAN。</li>\n<li>主干链路通常用于将交换机连接到其他交换机或路由器。</li>\n<li>交换机在快速以太网和千兆位以太网端口上都支持骨干链路。</li>\n<li>也存在访问和骨干链接</li>\n<li>一般 Trunk 就是 BackBone</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第9讲：局域网交换与vlan_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第9讲：局域网交换与vlan_页面_61\" /></p>\n<p>骨干链路不属于特定的 VLAN：充当交换机和路由器之间 VLAN 的通道。</p>\n<p>可以将骨干链路配置为传输所有 VLAN 或有限数量的 VLAN。</p>\n<p>但是，骨干链路可能具有本地 VLAN。</p>\n<p>如果骨干线链路由于任何原因失败，则骨干线的本地 VLAN 是该骨干线使用的 VLAN。</p>\n<h4 id=\"配置vlan\"><a class=\"anchor\" href=\"#配置vlan\">#</a> 配置 vlan</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第9讲：局域网交换与vlan_页面_62\" /></p>\n<p>在 Cisco 29xx 交换机上配置 VLAN 时，必须遵循以下准则：</p>\n<ol>\n<li>VLAN 的最大数量取决于交换机本身。</li>\n<li>VLAN 1 是出厂默认 VLAN 之一。(native VLAN 往往是 VLAN1，以及广播也是)</li>\n<li>VLAN 1 是默认的以太网 VLAN。</li>\n<li>思科发现协议 (CDP) 和 VLAN 骨干协议 (VTP) 通告在 VLAN 1 上发送。</li>\n<li>默认情况下，Catalyst 29xx IP 地址在 VLAN 1 广播域中。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第9讲：局域网交换与vlan_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第9讲：局域网交换与vlan_页面_64\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第9讲：局域网交换与vlan_页面_65\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第9讲：局域网交换与vlan_页面_66\" /></p>\n<h3 id=\"vlan间中的路由\"><a class=\"anchor\" href=\"#vlan间中的路由\">#</a> vlan 间中的路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_67.jpg\" alt=\"第9讲：局域网交换与vlan_页面_67\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_68.jpg\" alt=\"第9讲：局域网交换与vlan_页面_68\" /></p>\n<ol>\n<li>每个端口连接一个 VLAN，每个 IP 和一个 VLAN 连接</li>\n<li>如下图，我们使用串口线，物理上是一个一个接口，划分成多个 IP 和子接口</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230109125803577.png\" alt=\"image-20230109125803577\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_69.jpg\" alt=\"第9讲：局域网交换与vlan_页面_69\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_70.jpg\" alt=\"第9讲：局域网交换与vlan_页面_70\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_71.jpg\" alt=\"第9讲：局域网交换与vlan_页面_71\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC9%E8%AE%B2%EF%BC%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E4%B8%8Evlan_%E9%A1%B5%E9%9D%A2_72.jpg\" alt=\"第9讲：局域网交换与vlan_页面_72\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture08-%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AERIPOSPF/",
            "title": "Lecture08-路由协议RIPOSPF",
            "date_published": "2023-02-08T09:53:03.000Z",
            "content_html": "<h1 id=\"lecture08-路由协议rip-ospf\"><a class=\"anchor\" href=\"#lecture08-路由协议rip-ospf\">#</a> Lecture08 - 路由协议 RIP、OSPF</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_01.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_01\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_02.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_02\" /></p>\n<h2 id=\"rip\"><a class=\"anchor\" href=\"#rip\">#</a> RIP</h2>\n<h3 id=\"rip历史\"><a class=\"anchor\" href=\"#rip历史\">#</a> RIP 历史</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_03\" /></p>\n<p>RIP v1 被认为是一种<strong>内部网关协议</strong>。</p>\n<ol>\n<li>RIP v1 是一种距离向量协议，它以预定间隔将其整个路由表广播到每个邻居路由器。默认间隔为<strong> 30 秒</strong>。</li>\n<li>RIP 使用<strong>跳数</strong>作为度量标准，最大跳数为<strong> 15</strong>，达到 16 跳的报文自动抛弃。</li>\n</ol>\n<p>RIP v1 能够在多达六个等价路径上进行<strong>负载平衡 (Load Balancing)</strong>，默认情况下为四个路径，最多 6 个，跳数相同才能完成负载均衡，跳数不同不满足条件</p>\n<p>RIP 最初是在 RFC 1058 中指定的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_04\" /></p>\n<p>RIP v1 具有以下限制：</p>\n<ol>\n<li>它不会在其更新中发送子网掩码信息：意味着必须用同样的子网掩码，不支持 VLSM 或无类域间路由 (CIDR，Classless Interdomain Routing)。</li>\n<li>它以 255.255.255.255 的广播形式发送更新：只能发给邻居，不能通过路由器转发。</li>\n<li>它不支持身份验证 (authentication): 只要启动 RIP 就可以接受到信息，也就意味着只要接入网络并且启动 RIP 进程，就可以了解到整个网络拓扑</li>\n</ol>\n<h3 id=\"rip配置\"><a class=\"anchor\" href=\"#rip配置\">#</a> RIP 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_05\" /></p>\n<p><code>router rip</code>  命令选择 RIP 作为路由协议。</p>\n<p>network 命令分配基于 NIC 的网络地址，路由器将直接连接到该网络地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_06\" /></p>\n<p>routerA 启用端口，可以简化为 <code>1.0.0.0</code>   <code>2.0.0.0</code></p>\n<h3 id=\"rip-v2\"><a class=\"anchor\" href=\"#rip-v2\">#</a> RIP v2</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_07\" /></p>\n<p>RIP v2 是 RIP v1 的改进版本，并且新增了以下的功能：</p>\n<ol>\n<li>这是一种使用<strong>跳数指标</strong>的距离矢量协议。</li>\n<li>它使用<strong>抑制计时器</strong>来防止路由循环 - 默认值为<strong> 180 秒</strong>，6 倍于交换时间</li>\n<li>它使用水平分割 (Split Horizon) 来防止路由循环 (Routing Loops)。</li>\n<li>它使用 16 跳作为<strong>无限距离的度量</strong>。(15 跳及以内可达)</li>\n</ol>\n<h3 id=\"ripv1-与-ripv2的比较\"><a class=\"anchor\" href=\"#ripv1-与-ripv2的比较\">#</a> RIPv1 与 RIPv2 的比较</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_08\" /></p>\n<p>V2 和 V1 不同的特点:</p>\n<ol>\n<li>支持有类路由：可以携带子网掩码</li>\n<li>使用主播地址 <code>244.0.0.9</code>  进行发送广播：特定给 RIP 接受，避免了接受后发现没有启动 RIP 进程耽误时间</li>\n<li>需要身份认证才确定是否继续进行接收。</li>\n</ol>\n<h3 id=\"ripv2-配置\"><a class=\"anchor\" href=\"#ripv2-配置\">#</a> RIPv2 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_09\" /></p>\n<p>network 命令导致实现以下三个功能：</p>\n<ol>\n<li>路由更新从接口多播。</li>\n<li>如果路由更新进入相同的界面，则将对其进行处理。</li>\n<li>广播直接连接到该接口的子网。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_10\" /></p>\n<p>需要设置 version2</p>\n<h3 id=\"验证和故障排除\"><a class=\"anchor\" href=\"#验证和故障排除\">#</a> 验证和故障排除</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_11\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_12\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_13\" /></p>\n<ol>\n<li>The debug ip ripcommand displays RIP routing updates as they are  sent and received. In this example, the update is sent by 183.8.128.130. debug ip rip 命令显示 RIP 路由更新的发送和接收。 在本示例中，更新是通过 183.8.128.130 发送的。</li>\n<li>It reported on three routers, one of which is inaccessible because  its hop count is greater than 15. Updates were then broadcast through  183.8.128.2. 它报告了三台路由器，其中一台无法访问，因为其跳数大于 15。然后通过 183.8.128.2 广播了更新。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_14\" /></p>\n<p>120/1：表示 1 跳到达，120/2：表示 2 跳到达</p>\n<h2 id=\"ospf-open-shortest-path-first\"><a class=\"anchor\" href=\"#ospf-open-shortest-path-first\">#</a> OSPF Open Shortest Path First</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_16\" /></p>\n<p>开放最短路径优先 (OSPF，Open Shortest Path First) 是基于开放标准的链路状态路由协议。</p>\n<p>It is described in several standards of the Internet Engineering  Task Force (IETF) Internet 网络工程任务组 (IETF，Internet Engineering Task  Force) 的多个标准中对此进行了描述：The most recent description is RFC 2328. 最新的描述是 RFC  2328。(已经不是最新的了)</p>\n<p>与 RIP v1 和 RIP v2 相比，OSPF 正在成为首选的 IGP 协议，因为它具有可伸缩性。</p>\n<p>和 RIP 相比优势比较大，很多网络公司在研究 OSPF 的优化。</p>\n<h3 id=\"路由信息\"><a class=\"anchor\" href=\"#路由信息\">#</a> 路由信息</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_17\" /></p>\n<ol>\n<li>链接的状态是对接口及其与其相邻路由器的关系的描述。</li>\n<li>链接状态的集合形成一个<strong>链接状态数据库</strong>，有时也称为<strong>拓扑数据库</strong>。</li>\n<li>路由器应用<strong> Dijkstra 最短路径优先</strong> (SPF) 算法来构建以自己为根的 SPF 树。</li>\n<li>路由器通过 SPF 树计算最佳路径，然后选择最佳路径并将其放置在<strong>路由表</strong>中。</li>\n</ol>\n<h3 id=\"ospf-vs-rip\"><a class=\"anchor\" href=\"#ospf-vs-rip\">#</a> OSPF vs RIP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_18\" /></p>\n<p>用于大型网络，基于带宽，可以分层 (将网络划分成 2 层)，收敛更快，支持多路负载均衡</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_19\" /></p>\n<ul>\n<li>上面带宽大，2 跳达到，下面带宽小，1 跳到达。</li>\n<li>OSPF 从上面走，RIP 从下面走，但是上面会快一些</li>\n</ul>\n<h3 id=\"ospf-特征\"><a class=\"anchor\" href=\"#ospf-特征\">#</a> OSPF 特征</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_20\" /></p>\n<ol>\n<li>OSPF 的特征克服了这些限制\n<ol>\n<li>更健壮</li>\n<li>更具可扩展性</li>\n</ol>\n</li>\n<li>大型 OSPF 网络使用分层设计。\n<ol>\n<li>将大的网络分成多个 area，每一个 area 只和 area 0 相连，保证 area 没有回路</li>\n<li>层次最多只有 2 个，一个 area 就是 area 0。</li>\n<li>层次维持树的关系</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf术语\"><a class=\"anchor\" href=\"#ospf术语\">#</a> OSPF 术语</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_21\" /></p>\n<p>Link: 两个设备之间的物理链路</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_22\" /></p>\n<ul>\n<li>Neighbors: 相邻的路由器</li>\n<li>Link-State: 物理链路的信息：路由器连接关系、通过什么接口、链路带宽、网络类型 (点对点、多路复用) 等</li>\n<li>不同网络类型处理代价不同</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_23\" /></p>\n<p>Cost: 不同网络链路处理的时候的代价，和链路带宽相关，成反比关系，一般是固定值除以带宽</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_24\" /></p>\n<p>Area: 一个有很多路由器的端口都属于的区域 (相同)</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_25\" /></p>\n<p>Autonomous System: 多个 Area 形成一个自治系统</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_28\" /></p>\n<ul>\n<li>Neighbours 必须在一个 Area 中才算是，Neighbour 之间交换 Topology Databases</li>\n<li>一个 Area 中获得全部 LS (Link State) 后计算 Tree，生成表</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_29\" /></p>\n<ul>\n<li>DR: 指定路由器，只有在多路复用的情况下使用</li>\n<li>BDR: 如果 DR 坏了，再次选举会出现问题，如果 DR 损坏，BDR 立即成为 DR</li>\n</ul>\n<h3 id=\"opsf域\"><a class=\"anchor\" href=\"#opsf域\">#</a> OPSF 域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_30\" /></p>\n<ol>\n<li>区域用 32 位数字标识\n<ol>\n<li>可以是 IP 格式，也可以是一个十进制值</li>\n<li>区域 0 或区域 0.0.0.0</li>\n</ol>\n</li>\n<li>区域 0：区域编号为 0 的单个区域</li>\n<li>OSPF 使用 2 级分层模型：逻辑上必须是 2 层结构，而物理实现上可能有一定的差异，如果更多需要进行逻辑配置。</li>\n<li>在多区域 OSPF 网络中，要求所有区域都连接到区域 0 (主干)</li>\n<li>Example:Area 是和端口相关 (注意端口)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_31\" /></p>\n<h3 id=\"ospf行为\"><a class=\"anchor\" href=\"#ospf行为\">#</a> OSPF 行为</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_32\" /></p>\n<ol>\n<li>OSPF 使用邻居的邻接关系 (Adjacencies) 来全面了解网络。</li>\n<li>OSPF 操作包括五个步骤：\n<ol>\n<li>步骤 1：建立邻接关系</li>\n<li>步骤 2：选择 DR 和 BDR (如果需要): 多路复用的时候才需要</li>\n<li>步骤 3：发现路线</li>\n<li>步骤 4：选择适当的路线</li>\n<li>步骤 5：维护路线信息</li>\n</ol>\n</li>\n<li>OSPF 具有七个状态。简而言之，它们是：\n<ol>\n<li>Init, 2Way, Ex Start, Exchange, Loading, Full</li>\n<li>初始化，双向操作，预先启动，交换，加载，完成</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_33\" /></p>\n<h3 id=\"选择dr和bdr\"><a class=\"anchor\" href=\"#选择dr和bdr\">#</a> 选择 DR 和 BDR</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_34\" /></p>\n<p>OSPF 网络类型</p>\n<ol>\n<li>广播多路复用网络，例如以太网</li>\n<li>点对点网络</li>\n<li>非广播多路复用网络 (NBMA, Nonbroadcasr multi-access)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_35\" /></p>\n<p>只有多路复用才需要选择 DR 和 BDR</p>\n<p>原先，每一个都要建立 10 (5 * 4/2) 个链接，如果有了 DR 就只需要 4 个连接</p>\n<p>对于所有 OSPF 路由器，DR 使用 224.0.0.5 (自己的 IP) 的<strong>主播地址</strong>向该网段上的所有其他路由器发送链接状态信息。</p>\n<p>为确保 DR/BDR 看到所有路由器在网段上发送的链接状态，使用了所有 DR/BDR 的多播地址 224.0.0.6。(DR 和 BDR 之间）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_36\" /></p>\n<h3 id=\"ospf报文\"><a class=\"anchor\" href=\"#ospf报文\">#</a> OSPF 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_38\" /></p>\n<p>包，并继续以固定的时间间隔 (intervals) 发送 hello。</p>\n<p>控制 (govern) OSPF hello 数据包交换的规则称为 Hello 协议。</p>\n<p>Hello 数据包的地址为 224.0.0.5。</p>\n<p>默认情况下，广播多路访问和点对点网络上<strong>每 10 秒</strong>发送一次 Hello 报文。</p>\n<p>在连接到 NBMA 网络的接口 (例如帧中继) 上，默认时间是 30 秒。</p>\n<p>保持心跳，确定还活着。Hello 几乎是空报文，给所有跑 OSPF 的路由器发送</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_40\" /></p>\n<h3 id=\"哪个路由器将成为dr\"><a class=\"anchor\" href=\"#哪个路由器将成为dr\">#</a> 哪个路由器将成为 DR？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_41\" /></p>\n<ol>\n<li>优先级 + 路由器 ID，最大的是 DR，第二大的是 BDR。</li>\n<li>优先级：1-255，默认值：1</li>\n<li>路由器 ID\n<ol>\n<li>环回 IP 地址 (逻辑端口)，避免端口宕机出现问题。</li>\n<li>如果没有环回 IP 地址，则接口 IP 为最高值地址 (Active 的端口上的 IP 作为参考)</li>\n<li>如果接口出现故障，则路由器必须重新建立邻接关系并重新转换 (readvertising) LSA</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ospf机制\"><a class=\"anchor\" href=\"#ospf机制\">#</a> OSPF 机制</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_42\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_43\" /></p>\n<ul>\n<li>准备交换数据库 (Exstart Starts)</li>\n<li>首先确认主方 (发送方)、从方 (接受方)，保证数据有序，简单就是谁的 Router ID 高</li>\n<li>Router ID 高的 (主方) 发送自己 DBD 报文，从方对主方发送的 DBD 接受处理并发送</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_44\" /></p>\n<p>交换完成后，各自检查自己是不是有全部的信息</p>\n<ul>\n<li>如果有完整的信息，则发送 LSAck</li>\n<li>如果发现有没有的，则发送 LSR，等待 LSU (整个链路的详细信息，不是 LSA) 来进行学习，之后收到完成后发送 LSAck</li>\n</ul>\n<h3 id=\"ospf操作\"><a class=\"anchor\" href=\"#ospf操作\">#</a> OSPF 操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_45\" /></p>\n<h4 id=\"建立邻接关系\"><a class=\"anchor\" href=\"#建立邻接关系\">#</a> 建立邻接关系</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_46\" /></p>\n<p>路由器每隔一段时间发送一次 hello 数据包，Hello 报文的 TTL 是 1，表明不会跨路由传播。</p>\n<p>如果邻居被发现了：将邻居添加到邻居数据库</p>\n<p>发现网络类型</p>\n<ol>\n<li>如果是多路复用网络，进入 DR/BDR 选举过程，然后进入步骤 2。</li>\n<li>如果是点对点或点对多点网络，则不会举行 DR/BDR 选举过程，并跳过步骤 2。</li>\n<li>如果 hello 数据包标头中的 DR/BDR 字段已被占用 (即 DR / BDR 对已经存在)，则不会进行 DR/BDR 选举，并跳过步骤 2。</li>\n</ol>\n<p>如果对方的 DP/BDP 优于我的 DP/BDP，则接受对方的</p>\n<h4 id=\"选举dr和bdr\"><a class=\"anchor\" href=\"#选举dr和bdr\">#</a> 选举 DR 和 BDR</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_47\" /></p>\n<ol>\n<li>如果没有其他路由器联机，则该路由器将成为 DR。下一个要 &quot;启动&quot; 的路由器将是 BDR。</li>\n<li>如果多个路由器 (两个或更多) 同时联机，则\n<ol>\n<li>优先级最高的路由器成为 DR：优先级为零表示 &quot;从不 DR&quot;</li>\n<li>如果存在平局，则具有最高路由器 ID 的路由器将成为 DR：路由器 ID 是最高的环回或接口 IP 地址</li>\n<li>具有第二高优先级或路由器 ID 的路由器成为 BDR</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_48\" /></p>\n<ol>\n<li>如果 DR 无效，则 BDR 变为 DR。</li>\n<li>然而\n<ol>\n<li>如果新的 OSPF 路由器以更高的优先级或路由器 ID 加入网络，则当前的 DR 和 BDR<strong> 不会更改</strong>。</li>\n<li>仅当当前 DR 失败时，它才成为新的 BDR；或者仅当当前 DR 和 BDR 失败时，才成为新的 DR。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"发现路线\"><a class=\"anchor\" href=\"#发现路线\">#</a> 发现路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_49\" /></p>\n<ol>\n<li>这一步从 Ex Start 状态转换到完整状态</li>\n<li>路由器确定 &quot;主 / 从 (master/slave)&quot; 关系</li>\n<li>多路复用网络中的 DR/BDR 交换 LSA，并且所有其他 DR 将其 Type 2 DBD 发送给 DR/BDR。</li>\n<li>如有必要，路由器可以通过发送请求更多信息的 LSR 进入负载状态：所有路由器必须在 &quot;加载状态&quot; 中等待，直到完全更新请求的路由器。</li>\n<li>路由器现在进入完整状态</li>\n</ol>\n<h4 id=\"选择适当的路线\"><a class=\"anchor\" href=\"#选择适当的路线\">#</a> 选择适当的路线</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_50\" /></p>\n<p>现在，将与网络上的所有其他路由器并行地计算 SPF 算法。</p>\n<ol>\n<li>切记：在发生这种情况之前，所有路由器必须具有相同的链接状态数据库。</li>\n<li>SPF 使用 Cost 作为指标</li>\n<li>SPF 将从其自身到目的地的每条路径的成本相加，并以路由器为根来构建树</li>\n<li>OSPF 然后在路由表中安装成本最低的路径：最多将安装 4 条等价路径以进行负载共享</li>\n</ol>\n<h4 id=\"维护路由信息\"><a class=\"anchor\" href=\"#维护路由信息\">#</a> 维护路由信息</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_51\" /></p>\n<ol>\n<li>常规的 Hello 交换是 OSPF 用于检测新邻居或故障 (downed) 邻居的机制。</li>\n<li>根据网络的类型，Hello 数据包以不同的默认间隔发送。(确定对方是不是还好)\n<ol>\n<li>对于速度为 T1 (1.544 Mbps) 或更高的链接，每 10 秒：广播多路访问和点对点链接</li>\n<li>对于小于 T1 的链接，每 30 秒：非广播多路访问链接</li>\n<li>&quot;死间隔&quot; 是问候间隔的四倍。(如果在这样子对方还没有成功则对方死了)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"链路状态出现变化\"><a class=\"anchor\" href=\"#链路状态出现变化\">#</a> 链路状态出现变化</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_52\" /></p>\n<ul>\n<li>Router A tells all OSPF DRs on 224.0.0.6</li>\n<li>Event 触发交换：比如 A 连接的网段断掉了</li>\n<li>A 使用 LSU 告知<strong> DR</strong></li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_53\" /></p>\n<ul>\n<li>DR tells others on 224.0.0.5</li>\n<li>DR 通过 LSU 告知所有的路由器</li>\n</ul>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_54\" /></p>\n<p>如果 B 连接了别的 Area，则继续进行交换</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_55.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_55\" /></p>\n<p>所有的路由信息交换完毕后，同时更新路由表</p>\n<h3 id=\"基本的ospf配置\"><a class=\"anchor\" href=\"#基本的ospf配置\">#</a> 基本的 OSPF 配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_56\" /></p>\n<ol>\n<li>在路由器上启动 OSPF\n<ol>\n<li><code>Router (config)# router ospf process-id</code></li>\n<li>进程号:process-id\n<ol>\n<li>取值: 1 ~ 65535</li>\n<li>在一台路由器上识别多个 OSPF 进程</li>\n<li>通常在整个 AS (自治系统) 中保持相同的进程 ID</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>在路由器上识别 IP 网络\n<ol>\n<li><code>Router (config-router) # network address wildcardmask area area-id</code></li>\n<li>网络地址可以是整个网络，子网或接口的地址。</li>\n<li>address:IP 地址</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_57\" /></p>\n<ul>\n<li>只有一个 Area，则为 0</li>\n<li><strong>Wild-card Mask 和子网掩码相反</strong>：子网掩码是 255.255.255.0，则 Wild-card Address 就是 0.0.0.255</li>\n<li>写 IP 和写网段最后都是一样的</li>\n</ul>\n<h3 id=\"配置回路地址\"><a class=\"anchor\" href=\"#配置回路地址\">#</a> 配置回路地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_58\" /></p>\n<p>为 OSPF 路由器 ID 添加稳定性</p>\n<ol>\n<li>必须在 OSPF 进程开始之<strong>前</strong>配置回环接口：会涉及到主从关系确定和 DR 的选举</li>\n<li>配置环回地址时，请使用 / 32 掩码以避免潜在的路由问题</li>\n<li>I 建议您在基于 OSPF 的网络中的所有关键路由器上使用环回地址 (专用或公用地址)。</li>\n<li>一旦配置立刻生效，不需要 no shutdown 的命令即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_60\" /></p>\n<p>操纵 DR/BDR 选举</p>\n<ol>\n<li><code>Router (config-if) # ip ospf priority number</code></li>\n<li>优先级：越大越高\n<ol>\n<li>值：0-255, 默认为 1</li>\n<li>优先级 0 表示接口不能被选为 DR 或 BDR</li>\n</ol>\n</li>\n</ol>\n<p>操作 OSPF 的端口的优先级： <code>Router # show ip ospf [interface type number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_61\" /></p>\n<h3 id=\"osof成本-标准\"><a class=\"anchor\" href=\"#osof成本-标准\">#</a> OSOF 成本 = 标准</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_62\" /></p>\n<ol>\n<li>Cost 适用于所有路由器连接路径</li>\n<li>16 位数字 (1 – 65,535)</li>\n<li>较低的 Cost-&gt; 更理想</li>\n<li>路径决定是基于路径的总成本。</li>\n<li>指标受到带宽的影响</li>\n<li>用一个很大的数字去除以当前的带宽得到代价，计算方法如下</li>\n</ol>\n<h3 id=\"ospf-path-cost\"><a class=\"anchor\" href=\"#ospf-path-cost\">#</a> OSPF Path Cost</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_63\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_64.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_64\" /></p>\n<ol>\n<li>需要更改成本的常见情况是在多供应商 (multi-vendor) 路由环境中。成本更改将确保一个供应商的成本值与另一供应商的成本值匹配。</li>\n<li>另一种情况是使用千兆以太网。默认成本将最低成本值 1 分配给 100 Mbps 链路。</li>\n</ol>\n<h3 id=\"设置ospf计时器\"><a class=\"anchor\" href=\"#设置ospf计时器\">#</a> 设置 OSPF 计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_65.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_65\" /></p>\n<p>OSPF 区域中的所有路由器必须在相同的 hello 间隔和相同的死间隔上达成一致，默认情况下：</p>\n<ol>\n<li>T1 或更高链接 (广播) 为 10 秒</li>\n<li>慢于 T1 的链接为 30 秒 (非广播)</li>\n<li>死亡间隔 = <strong>4</strong> * 问候间隔</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC8%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AErip,ospf_%E9%A1%B5%E9%9D%A2_66.jpg\" alt=\"第8讲：路由协议rip,ospf_页面_66\" /></p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture07-%E8%B7%AF%E7%94%B1%E5%99%A8/",
            "title": "Lecture07-路由器",
            "date_published": "2023-02-08T09:52:47.000Z",
            "content_html": "<h1 id=\"lecture07-routing-and-routers路由器和网络\"><a class=\"anchor\" href=\"#lecture07-routing-and-routers路由器和网络\">#</a> Lecture07-Routing and Routers 路由器和网络</h1>\n<h2 id=\"路由器基础\"><a class=\"anchor\" href=\"#路由器基础\">#</a> 路由器基础</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第7讲：路由与路由器_页面_03\" /></p>\n<h3 id=\"路由器内部组件\"><a class=\"anchor\" href=\"#路由器内部组件\">#</a> 路由器内部组件</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第7讲：路由与路由器_页面_04\" /></p>\n<h3 id=\"ram-random-access-memory-随机存取存储器\"><a class=\"anchor\" href=\"#ram-random-access-memory-随机存取存储器\">#</a> RAM Random Access Memory 随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第7讲：路由与路由器_页面_05\" /></p>\n<p>路由器配置文件的临时存储，一般做为内存使用</p>\n<p>断电或重新启动时 RAM 内容丢失</p>\n<p>存储:</p>\n<ol>\n<li>路由表</li>\n<li>ARP 缓存</li>\n<li>快速切换缓存</li>\n<li>报文缓存：可能前面有正在处理的，需要等待</li>\n<li>数据包保留队列</li>\n</ol>\n<h3 id=\"nvram-non-volatile-ram-非易失随机存取存储器\"><a class=\"anchor\" href=\"#nvram-non-volatile-ram-非易失随机存取存储器\">#</a> NVRAM Non-volatile RAM 非易失随机存取存储器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第7讲：路由与路由器_页面_06\" /></p>\n<p>存储备份 (backup)/ 启动 (startup) 配置文件</p>\n<p>路由器掉电或重启时内容不会丢失</p>\n<h3 id=\"flash\"><a class=\"anchor\" href=\"#flash\">#</a> Flash</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第7讲：路由与路由器_页面_07\" /></p>\n<ol>\n<li>电子可擦可编程只读存储器 (EEPROM, Electronically Erasable Programmable Read-Only Memory)</li>\n<li>存储了 Cisco IOS (互联网操作系统)</li>\n<li>允许更新软件而无需更换闪存芯片</li>\n<li>可以存储多个版本的 IOS</li>\n<li>断电保持</li>\n</ol>\n<h3 id=\"rom-read-only-memory\"><a class=\"anchor\" href=\"#rom-read-only-memory\">#</a> ROM Read-Only Memory</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第7讲：路由与路由器_页面_08\" /></p>\n<ol>\n<li>包含 POST (开机自检):PC 也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li>\n<li>引导程序 (加载 Cisco IOS)</li>\n<li>作系统软件\n<ol>\n<li>IOS 的备份，精简 (trimmed down) 版本</li>\n<li>升级需要安装新的芯片组</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第7讲：路由与路由器_页面_09\" /></p>\n<p>数据包通过其进入和离开路由器的网络连接口</p>\n<p>附在主板 (motherboard) 上或作为单独的模块。</p>\n<h2 id=\"路由器启动程序\"><a class=\"anchor\" href=\"#路由器启动程序\">#</a> 路由器启动程序</h2>\n<h3 id=\"系统启动程序\"><a class=\"anchor\" href=\"#系统启动程序\">#</a> 系统启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第7讲：路由与路由器_页面_11\" /></p>\n<ol>\n<li>执行开机自检 (POST)：在此自检期间，路由器从所有硬件模块上的 ROM 执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li>\n<li>验证 CPU，内存和网络接口端口的基本操作。</li>\n<li>软件初始化。</li>\n</ol>\n<h3 id=\"软件启动程序\"><a class=\"anchor\" href=\"#软件启动程序\">#</a> 软件启动程序</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第7讲：路由与路由器_页面_12\" /></p>\n<ol>\n<li>步骤 1:ROM 中的通用引导加载程序 (bootstrap) 在 CPU 卡上执行。</li>\n<li>步骤 2: 可以在以下几个位置之一找到操作系统 (Cisco IOS)。该位置在配置寄存器的引导字段中公开。</li>\n<li>步骤 3: 加载操作系统映像。\n<ol>\n<li>先从 Flash 找，也就只有一个 image 文件，将 image 导入内存</li>\n<li>如果 image 找不到，则到 TFTP Server，如果能找到则下载下拉一个 image</li>\n<li>如果 TFTP 也没有配置，则去 ROM 中导出 IOS</li>\n</ol>\n</li>\n<li>步骤 4: 将保存在 NVRAM 中的配置文件加载到主存储器中，并一次执行一行。\n<ol>\n<li>先看 NVRAM 中有没有配置 (start.config)</li>\n<li>然后看 TFTP Server 有没有配置，如果有则下载一个</li>\n<li>如果都没有，用 console 进行配置</li>\n</ol>\n</li>\n<li>步骤 5 - 如果 NVRAM 中<strong>没有</strong>有效的配置文件，则执行问题驱动 (question-driven) 的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</li>\n</ol>\n<h3 id=\"路由器初始化过程\"><a class=\"anchor\" href=\"#路由器初始化过程\">#</a> 路由器初始化过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230107174143705.png\" alt=\"image-20230107174143705\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第7讲：路由与路由器_页面_13\" /></p>\n<h3 id=\"基本的路由器配置\"><a class=\"anchor\" href=\"#基本的路由器配置\">#</a> 基本的路由器配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第7讲：路由与路由器_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第7讲：路由与路由器_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第7讲：路由与路由器_页面_16\" /></p>\n<h2 id=\"路由和配置\"><a class=\"anchor\" href=\"#路由和配置\">#</a> 路由和配置</h2>\n<h3 id=\"使用网络寻址进行路由\"><a class=\"anchor\" href=\"#使用网络寻址进行路由\">#</a> 使用网络寻址进行路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第7讲：路由与路由器_页面_18\" /></p>\n<p>路由器通常使用两个基本功能 (路径确定功能和交换功能) 将数据包从一条数据链路中继 (relay) 到另一条数据链路。</p>\n<ol>\n<li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li>\n<li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li>\n</ol>\n<p>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</p>\n<p>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机</p>\n<h3 id=\"静态路由\"><a class=\"anchor\" href=\"#静态路由\">#</a> 静态路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第7讲：路由与路由器_页面_19\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第7讲：路由与路由器_页面_20\" /></p>\n<p>尽管 (whereas) 动态路由倾向于显示 (reveal) 有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</p>\n<p>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将 B 所有不知道位置的全部交给 A，由 A 去进行访问)</p>\n<p>这种分区称为末节网络 (Stub Network）</p>\n<h3 id=\"静态路由配置\"><a class=\"anchor\" href=\"#静态路由配置\">#</a> 静态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第7讲：路由与路由器_页面_21\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第7讲：路由与路由器_页面_22\" /></p>\n<ol>\n<li>** 管理距离 (administrative distance)** 是路由信息源的可信赖性的等级，表示为从 0 到 255 的数值。(管理距离)</li>\n<li>数字越大，可信度 (trustworthiness) 越低。</li>\n<li>因此静态路由的管理距离通常很短 (默认值为 1)</li>\n<li>管理距离是 0 的路由是什么情况？直连网段是最可信的，比静态路由还高</li>\n</ol>\n<h3 id=\"动态路由配置\"><a class=\"anchor\" href=\"#动态路由配置\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第7讲：路由与路由器_页面_23\" /></p>\n<p>动态路由协议还可以重定向网络中不同路径之间的流量 (或负载分担 (loadshare))</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第7讲：路由与路由器_页面_24\" /></p>\n<ol>\n<li>动态路由依赖于路由协议在路由器之间共享知识。</li>\n<li>动态路由取决于两个基本路由器功能：\n<ol>\n<li>维护 (maintance) 路由表 (动态维持的)</li>\n<li>向其他路由器分发 (distribution) 路由信息</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"收敛时间\"><a class=\"anchor\" href=\"#收敛时间\">#</a> 收敛时间</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第7讲：路由与路由器_页面_25\" /></p>\n<ul>\n<li>收敛发生在所有路由用了相对稳定的网络拓扑</li>\n<li>当拓扑变化的时候，路由器必须重新计算路由</li>\n<li>路由器重新发生收敛的进程和时间根据不同的路由协议有所区别</li>\n</ul>\n<h3 id=\"动态路由协议分类\"><a class=\"anchor\" href=\"#动态路由协议分类\">#</a> 动态路由协议分类</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第7讲：路由与路由器_页面_26\" /></p>\n<h4 id=\"距离矢量协议\"><a class=\"anchor\" href=\"#距离矢量协议\">#</a> 距离矢量协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第7讲：路由与路由器_页面_27\" /></p>\n<ol>\n<li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li>\n<li>基于距离矢量的路由算法 (也称为 Bellman-Ford 算法) 在路由器之间传递路由表的周期性副本。\n<ol>\n<li>大家交换 Routing Table</li>\n<li>只知道可达，但是不知道怎么可达 (知道 where, 但是不知道 how)，不知道整个网路的具体拓扑</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"问题路由环路\"><a class=\"anchor\" href=\"#问题路由环路\">#</a> 问题：路由环路</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第7讲：路由与路由器_页面_28\" /></p>\n<p><strong>稳定之后</strong>，如果 NetWork1 不可到达</p>\n<p>B 发现不可达，但是告知 C 的时候比较晚，C 已经将信息告诉了 D，这样子就可能循环下去，然后不收敛。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第7讲：路由与路由器_页面_29\" /></p>\n<p>网络 1 的无效更新将继续循环，直到其他进程停止循环为止。</p>\n<p>尽管有一个基本事实，即目标网络 (网络 1) 已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</p>\n<p>当路由器计数到无穷远时，无效信息将允许存在路由环路</p>\n<h5 id=\"解决方案设置最大值\"><a class=\"anchor\" href=\"#解决方案设置最大值\">#</a> 解决方案 —— 设置最大值</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第7讲：路由与路由器_页面_30\" /></p>\n<p>设置最大跳数，比如最多转发 15 跳，16 跳以上为不可达</p>\n<h5 id=\"结局方案路由中毒\"><a class=\"anchor\" href=\"#结局方案路由中毒\">#</a> 结局方案 —— 路由中毒</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第7讲：路由与路由器_页面_31\" /></p>\n<ol>\n<li>当网络 5 发生故障时，路由器 E 通过将网络 5 的表条目设置为<strong> 16 或不可访问</strong>来启动路由中毒。(而不是删除条目)</li>\n<li>、当路由器 C 从路由器 E 接收到路由中毒时，它会将更新 (称为毒性逆转，poison reverse) 发送回路由器 E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li>\n<li>最终所有的路由器都知道不可达</li>\n<li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值 (metric) 设为无穷大 16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li>\n</ol>\n<h5 id=\"解决方案水平分割\"><a class=\"anchor\" href=\"#解决方案水平分割\">#</a> 解决方案 —— 水平分割</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第7讲：路由与路由器_页面_32\" /></p>\n<ol>\n<li>从某个端口收到的报文信息，不能再从端口发送回去</li>\n<li>比如 A 发送给 B 和 D，之后 B 和 D 又把之后的报文还给 A，这时候就不接受 B 和 D 的。也即使 A 只接受 B 的</li>\n<li>如果 B 和 D 接收到一个到达目的网段 1 的更好的路径，A 是会接收的</li>\n<li><strong>有名词解释题目</strong></li>\n</ol>\n<h5 id=\"解决方案计时器\"><a class=\"anchor\" href=\"#解决方案计时器\">#</a> 解决方案 —— 计时器</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第7讲：路由与路由器_页面_33\" /></p>\n<ol>\n<li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时 (这个信息包含请计时信息)</li>\n<li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li>\n<li>计时器结束后，删除掉对应的条目，避免出现问题</li>\n<li>每一条路由表的记录都有<strong>有效时间</strong></li>\n</ol>\n<h5 id=\"阻止发送路由更新\"><a class=\"anchor\" href=\"#阻止发送路由更新\">#</a> 阻止发送路由更新</h5>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第7讲：路由与路由器_页面_34\" /></p>\n<ol>\n<li>为了防止接口发出任何路由更新信息，请使用以下命令： <code>Router(config-router)#Passive-interface f0/0</code></li>\n<li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li>\n<li><strong>接受路由表的更新，但是不发送报文出去</strong></li>\n</ol>\n<h4 id=\"链接状态协议lsp-link-state-protocol\"><a class=\"anchor\" href=\"#链接状态协议lsp-link-state-protocol\">#</a> 链接状态协议 (LSP, Link-state Protocol)</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第7讲：路由与路由器_页面_35\" /></p>\n<ol>\n<li>基于链接状态的路由算法也称为 SPF (最短路径优先) 算法，维护复杂的拓扑信息数据库：对树处理路由表，没有环路问题</li>\n<li>链接状态路由使用：\n<ol>\n<li>链接状态广告 (LSAs): 告诉你我有这个链路 (每一个网段都是相同性质链路，链路上有唯一的 NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行 LSA，告知对方主 Key，如果再需要的话，再给具体信息)</li>\n<li>拓扑数据库 (有 LSA 组成，每个结点都持有)</li>\n<li>根据 SPF (shortest path first) 算法生成的 SPF 树 (Tree 会不一样，因为每一个路由都是以自己为根的)</li>\n<li>每个网络的路径和端口的路由表</li>\n</ol>\n</li>\n<li>RFC 1583 包含对 OSPF 链路状态概念和操作的描述。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第7讲：路由与路由器_页面_36\" /></p>\n<ol>\n<li>路由器之间<strong>交换 LSA</strong>，每个路由器都以直接连接的网络开头</li>\n<li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有 LSA。</li>\n<li><strong>SPF 算法计算网络可达性</strong>：路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先 (SPF) 排序。</li>\n<li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第7讲：路由与路由器_页面_37\" /></p>\n<ol>\n<li>处理和存储要求\n<ul>\n<li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要 CPU 进行计算</li>\n</ul>\n</li>\n<li>带宽要求\n<ol>\n<li>在初始链路状态数据包泛洪 (flooding) 期间，所有使用链路状态路由协议的路由器会将 LSA 数据包发送到所有其他路由器。 随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li>\n<li>一开始的时候报文会比较频繁多 (所以告知 LSA 而不是 LS，减小压力)</li>\n<li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第7讲：路由与路由器_页面_38\" /></p>\n<p>链路状态路由必须确保所有路由器都获得所有必要的 LSA 数据包。</p>\n<p>具有不同 LSA 集的路由器根据不同的拓扑数据计算路由</p>\n<p>如果有一个链路的状态发生变化 (恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大 (SPF 算法)。</p>\n<h4 id=\"ls和dv的比较\"><a class=\"anchor\" href=\"#ls和dv的比较\">#</a> LS 和 DV 的比较</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第7讲：路由与路由器_页面_39\" /></p>\n<ol>\n<li>DV: 距离矢量\n<ol>\n<li>视野窄，代价小</li>\n<li>基于跳数</li>\n<li>定期交换路由表，收敛慢</li>\n<li>交换路由表</li>\n</ol>\n</li>\n<li>LS: 链路状态\n<ol>\n<li>视野宽，有一定代价</li>\n<li>基于带宽</li>\n<li>初期充分交换，收敛快</li>\n<li>交换 Linked State 的数据库</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"混合协议\"><a class=\"anchor\" href=\"#混合协议\">#</a> 混合协议</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第7讲：路由与路由器_页面_40\" /></p>\n<p>混合协议的示例：</p>\n<ol>\n<li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li>\n<li>Cisco’s EIGRP (Enhanced Interior Gateway Routing Protocol). 基于负载和带宽评判，定时交换路由表</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第7讲：路由与路由器_页面_41\" /></p>\n<table>\n<thead>\n<tr>\n<th>英文缩写</th>\n<th>英文解释</th>\n<th>中文解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RIP</td>\n<td>a distance-vector routing protocol</td>\n<td>距离矢量协议</td>\n<td>DV</td>\n</tr>\n<tr>\n<td>IGRP</td>\n<td>Cisco’s distance-vector routing protocol IGRP</td>\n<td>思科的距离矢量路由协议</td>\n<td>DV，基本启用</td>\n</tr>\n<tr>\n<td>OSPF</td>\n<td>Open Shortest Path First</td>\n<td>开放式最短路径优先</td>\n<td>LSP</td>\n</tr>\n<tr>\n<td>EIGRP</td>\n<td>-</td>\n<td>平衡的混合路由协议</td>\n<td>杂合</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"路由协议的主要目标\"><a class=\"anchor\" href=\"#路由协议的主要目标\">#</a> 路由协议的主要目标</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第7讲：路由与路由器_页面_42\" /></p>\n<ol>\n<li>最佳 (Optimal) 路线：选择最佳路线</li>\n<li>效率 (Efficiency): 最少使用带宽和路由器处理器资源</li>\n<li>快速收敛 (Rapid Convergence): 越快越好。有些比其他人收敛更快。</li>\n<li>灵活性 (Flexibility): 可以处理各种情况，例如高使用率和失败的路由</li>\n</ol>\n<h3 id=\"动态路由配置-2\"><a class=\"anchor\" href=\"#动态路由配置-2\">#</a> 动态路由配置</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第7讲：路由与路由器_页面_43\" /></p>\n<h3 id=\"设置默认路由\"><a class=\"anchor\" href=\"#设置默认路由\">#</a> 设置默认路由</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第7讲：路由与路由器_页面_44\" /></p>\n<ol>\n<li>默认路由使路由表更短。(很多路由被省略)</li>\n<li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第7讲：路由与路由器_页面_45\" /></p>\n<p>使用动态路由协议定义默认路由: <code>Router(config)# ip default-network [network-number]</code></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC7%E8%AE%B2%EF%BC%9A%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第7讲：路由与路由器_页面_46\" /></p>\n<ol>\n<li>将默认路由定义为静态路由： <code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li>\n<li>配置默认路由后，使用 show ip route 将显示：(172.16.1.2 是默认的下一跳地址)\n<ol>\n<li>不得已的网关是到网络 0.0.0.0 的 172.16.1.2</li>\n<li>所有不知道转发给谁的都给 172.16.1.2</li>\n</ol>\n</li>\n</ol>\n<p>RAM</p>\n<p>报文缓存 —— 缓存区</p>\n<p>hold queues——</p>\n<p>路由器的启动过程（考试要求）</p>\n<p>阻止发送路由更新</p>\n<p>手动配置</p>\n<p>Why do we need split horizon? Because distance vector protocols, such as Routing Information Protocol (RIP), are susceptible to routing loops, which occur when a data <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3BhY2tldA==\">packet</span> is caught in an endless circle and continuously routed through the same <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3JvdXRlcg==\">routers</span>. To avoid these loops, the protocols often rely on split horizon. Other types of protocols, such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL09TUEYtT3Blbi1TaG9ydGVzdC1QYXRoLUZpcnN0\">Open Shortest Path First</span>, use different mechanisms to deter packet looping.</p>\n<p>When enabled, split horizon prevents a router from advertising a route back to the router from which it learned a route. In other words, if a router receives routing information from another router, the first router will not broadcast that information back to the second router, thus preventing routing loops from occurring.</p>\n<p>RIP</p>\n<p>SPF</p>\n<p>DR BDR</p>\n<p>A 类地址 0 1-126</p>\n<p>B 类地址 10 128-191</p>\n<p>C 类地址 110 128+64=192 192-223</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture06-%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82/",
            "title": "Lecture06-会话、表示、应用层",
            "date_published": "2023-02-08T09:52:36.000Z",
            "content_html": "<h1 id=\"lecture6-会话层-展示层应用层\"><a class=\"anchor\" href=\"#lecture6-会话层-展示层应用层\">#</a> Lecture6 - 会话层、展示层应用层</h1>\n<h1 id=\"会话层\"><a class=\"anchor\" href=\"#会话层\">#</a> 会话层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6讲：会话、表示、应用层_页面_03\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6讲：会话、表示、应用层_页面_04\" /></p>\n<ol>\n<li>双向同步通讯？\n<ol>\n<li>全双工通信</li>\n<li>半双工通信</li>\n<li>单工通信</li>\n</ol>\n</li>\n<li>双向交替控制？\n<ol>\n<li>会话连接、活动开始、数据校验 (同步)</li>\n<li>令牌转换等</li>\n</ol>\n</li>\n<li>是否同步了您的会话的主题？</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6讲：会话、表示、应用层_页面_05\" /></p>\n<p>** 同步点 (CheckPoint)** 用于分隔会话的各个部分，以前称为对话 (dialogues)</p>\n<ol>\n<li>同步点：发送一定数据后设置同步点</li>\n<li>次同步点：作为同步点的一个子集，进行数据校验</li>\n<li>主同步点：按照主同步点进行校验确认</li>\n<li>如果错误，恢复到上次都已经同步的主同步点</li>\n</ol>\n<p>对话分离 (Seperation) 是通信的有序启动，终止和管理</p>\n<p>尽量保证了通话的效率和可靠性</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6讲：会话、表示、应用层_页面_06\" /></p>\n<h1 id=\"展示层\"><a class=\"anchor\" href=\"#展示层\">#</a> 展示层</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6讲：会话、表示、应用层_页面_08\" /></p>\n<p>表示层负责以接收<strong>设备可以理解</strong>的形式表示数据。</p>\n<ol>\n<li>传送语法协商</li>\n<li>接受语法协商</li>\n</ol>\n<p>表示层具有 3 个主要功能：</p>\n<ol>\n<li>数据格式 (format)</li>\n<li>数据压缩 (compression): 早期网络比较慢，倾向于先压缩在发送</li>\n<li>数据加密 (encryption)</li>\n</ol>\n<h2 id=\"数据格式\"><a class=\"anchor\" href=\"#数据格式\">#</a> 数据格式</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6讲：会话、表示、应用层_页面_09\" /></p>\n<ol>\n<li>想象两个不同 (dissimilar) 的系统。\n<ol>\n<li>一种使用扩展二进制编码的十进制交换码 (EBCDIC,Extended Binary Coded Decimal Interchange Code) 格式化文本</li>\n<li>另一种使用 ** 美国信息交换标准码 (ASCII)** 格式化文本</li>\n<li>选择大家都能识别的编码形式传输，保证大家都能理解</li>\n</ol>\n</li>\n<li>第 6 层提供了这两种不同类型的代码之间的转换</li>\n</ol>\n<h3 id=\"图形文件格式\"><a class=\"anchor\" href=\"#图形文件格式\">#</a> 图形文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6讲：会话、表示、应用层_页面_10\" /></p>\n<ol>\n<li>互联网通常使用两种二进制文件格式来显示图像：\n<ol>\n<li>图形交换格式 (GIF，Graphic Interchange Format)</li>\n<li>联合图像专家组 (JPEG，Joint Photographic Experts Group)。</li>\n</ol>\n</li>\n<li>任何具有读取器的 GIF 和 JPEG 文件格式的计算机都可以读取这些文件类型，而与计算机的类型无关。</li>\n</ol>\n<h3 id=\"多媒体文件格式\"><a class=\"anchor\" href=\"#多媒体文件格式\">#</a> 多媒体文件格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6讲：会话、表示、应用层_页面_11\" /></p>\n<p>多媒体文件格式是另一种二进制文件，它存储声音，音乐和视频。</p>\n<ol>\n<li>这些文件可以完全下载，然后播放，也可以在播放时下载。</li>\n<li>后一种方法称为流音频。</li>\n</ol>\n<h2 id=\"数据加密和压缩\"><a class=\"anchor\" href=\"#数据加密和压缩\">#</a> 数据加密和压缩</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6讲：会话、表示、应用层_页面_12\" /></p>\n<ol>\n<li>第 6 层负责数据加密：数据加密可在信息传输过程中保护信息。</li>\n<li>表示层还负责文件的压缩。</li>\n</ol>\n<h1 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h1>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6讲：会话、表示、应用层_页面_14\" /></p>\n<p>第七层对应的是应用界面</p>\n<h2 id=\"应用层概述\"><a class=\"anchor\" href=\"#应用层概述\">#</a> 应用层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6讲：会话、表示、应用层_页面_15\" /></p>\n<p>应用层（最接近用户）支持一个应用的交流模块</p>\n<p>应用层：</p>\n<ul>\n<li>确定并建立预期的通信合作伙伴的可用性</li>\n<li>同步合作的应用程序</li>\n<li>建立有关错误恢复程序的协议</li>\n<li>控制数据完整性</li>\n</ul>\n<h2 id=\"http-hypertext-transfrer-protocol超文本传输协议\"><a class=\"anchor\" href=\"#http-hypertext-transfrer-protocol超文本传输协议\">#</a> HTTP HyperText Transfrer Protocol 超文本传输协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6讲：会话、表示、应用层_页面_16\" /></p>\n<h3 id=\"url统一资源定位符\"><a class=\"anchor\" href=\"#url统一资源定位符\">#</a> URL 统一资源定位符</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6讲：会话、表示、应用层_页面_17\" /></p>\n<pre><code>&lt;URL的访问方式&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\n</code></pre>\n<ol>\n<li>访问方式：协议 HTTPS 或者 HTTP</li>\n<li>主机：域名的方式</li>\n<li>端口对应进程</li>\n<li>路径对应具体的文件</li>\n</ol>\n<h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6讲：会话、表示、应用层_页面_18\" /></p>\n<p>无状态的</p>\n<h2 id=\"http报文结构\"><a class=\"anchor\" href=\"#http报文结构\">#</a> HTTP 报文结构</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第6讲：会话、表示、应用层_页面_19\" /></p>\n<p>应答码：</p>\n<ol>\n<li>2xx: 成功</li>\n<li>3xx: 重定向</li>\n<li>4xx: 错误</li>\n<li>5xx: 服务器内部错误</li>\n</ol>\n<h3 id=\"http请求报文的一些方法\"><a class=\"anchor\" href=\"#http请求报文的一些方法\">#</a> HTTP 请求报文的一些方法</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第6讲：会话、表示、应用层_页面_20\" /></p>\n<h3 id=\"html超文本标记语言\"><a class=\"anchor\" href=\"#html超文本标记语言\">#</a> html 超文本标记语言</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第6讲：会话、表示、应用层_页面_21\" /></p>\n<h2 id=\"ftp-和-tftp\"><a class=\"anchor\" href=\"#ftp-和-tftp\">#</a> FTP 和 TFTP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第6讲：会话、表示、应用层_页面_22\" /></p>\n<p>FTP 是一种可靠的，<strong>面向连接</strong>的服务，它使用 TCP 传输文件。</p>\n<ol>\n<li>FTP 首先在客户端和服务器 (端口 21) 之间建立<strong>控制连接</strong></li>\n<li>然后，建立第二个连接，这是计算机之间通过其传输数据的链接。(端口 20)</li>\n</ol>\n<p>TFTP 是使用 UDP 的<strong>无连接</strong>服务 (简化的 FTP)</p>\n<ol>\n<li>体积小，易于实施。更加方便</li>\n<li>例如。 TFTP 在路由器上用于传输配置文件和 Cisco IOS 映像</li>\n<li>不支持交互，没有目录浏览功能</li>\n</ol>\n<p>互联网早期的时候，文件传输量是很大的。</p>\n<h3 id=\"主进程工作步骤\"><a class=\"anchor\" href=\"#主进程工作步骤\">#</a> 主进程工作步骤</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第6讲：会话、表示、应用层_页面_23\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第6讲：会话、表示、应用层_页面_24\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第6讲：会话、表示、应用层_页面_25\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第6讲：会话、表示、应用层_页面_26\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第6讲：会话、表示、应用层_页面_27\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第6讲：会话、表示、应用层_页面_28\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第6讲：会话、表示、应用层_页面_29\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第6讲：会话、表示、应用层_页面_30\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第6讲：会话、表示、应用层_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第6讲：会话、表示、应用层_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第6讲：会话、表示、应用层_页面_33\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第6讲：会话、表示、应用层_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第6讲：会话、表示、应用层_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第6讲：会话、表示、应用层_页面_36\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第6讲：会话、表示、应用层_页面_37\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第6讲：会话、表示、应用层_页面_38\" /></p>\n<h2 id=\"telnet\"><a class=\"anchor\" href=\"#telnet\">#</a> Telnet</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第6讲：会话、表示、应用层_页面_39\" /></p>\n<p>Telnet 客户端软件提供了登录到运行 Telnet 服务器应用程序的远程 Internet 主机，然后从命令行执行命令的功能。</p>\n<h2 id=\"smtp-pop\"><a class=\"anchor\" href=\"#smtp-pop\">#</a> SMTP POP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第6讲：会话、表示、应用层_页面_40\" /></p>\n<p>电子邮件服务器使用 SMTP 发送和 POP 接收邮件相互通信。</p>\n<ol>\n<li>SMTP (Simple Mail Transfer Protocol) SMTP (简单邮件传输协议) 邮件发送，登录发送等操作</li>\n<li>POP3 (Post Office Protocol version 3) 邮件接收，邮件到达邮件服务端，由客户端和服务端联系接收邮件。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第6讲：会话、表示、应用层_页面_41\" /></p>\n<p>发送者先登录到服务器，通过服务器根据 SMTP 传输到对应的服务器，然后用户登录后通过 POP3 协议收邮件到本地</p>\n<h3 id=\"mime-multipurpose-internet-mail-extensions-因特网协议扩充\"><a class=\"anchor\" href=\"#mime-multipurpose-internet-mail-extensions-因特网协议扩充\">#</a> MIME Multipurpose Internet Mail Extensions 因特网协议扩充</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第6讲：会话、表示、应用层_页面_42\" /></p>\n<p>将非 ASCII 码的文件转换成 ASCII 文件</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第6讲：会话、表示、应用层_页面_43\" /></p>\n<h2 id=\"snmp-simple-network-management-protocol-简单网络管理协议\"><a class=\"anchor\" href=\"#snmp-simple-network-management-protocol-简单网络管理协议\">#</a> SNMP Simple Network Management Protocol 简单网络管理协议</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第6讲：会话、表示、应用层_页面_44\" /></p>\n<p>一种促进管理信息交换的应用层协议</p>\n<p>网管，通过下发请求对上网的所有的主机关于流量等等信息进行管理 (监控)</p>\n<h2 id=\"dns-domain-name-system域名系统\"><a class=\"anchor\" href=\"#dns-domain-name-system域名系统\">#</a> DNS Domain Name System 域名系统</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第6讲：会话、表示、应用层_页面_45\" /></p>\n<p>域名系统 (DNS) 是网络上的服务，该服务管理域名并响应客户端将域名转换为关联 IP 地址的请求。</p>\n<ol>\n<li>早期是用 IP 地址以及 Host 文件来进行访问</li>\n</ol>\n<h3 id=\"domain-name-域名\"><a class=\"anchor\" href=\"#domain-name-域名\">#</a> Domain Name 域名</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第6讲：会话、表示、应用层_页面_46\" /></p>\n<h3 id=\"tld-top-level-domain-顶级域\"><a class=\"anchor\" href=\"#tld-top-level-domain-顶级域\">#</a> TLD Top Level Domain 顶级域</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第6讲：会话、表示、应用层_页面_47\" /></p>\n<p>国家 TLD (nTLD)</p>\n<ol>\n<li>.cn (CHINA) 中国</li>\n<li>.us (United States) 美国</li>\n<li>.uk (United kingdom), etc. 英国等等</li>\n</ol>\n<p>通用 TLD (gTLD)，最早的域包括：</p>\n<ol>\n<li>.com Enterprises and companies 企业和公司</li>\n<li>.net Network services providers 网络服务提供者</li>\n<li>.org Nonprofit organizations 非盈利组织</li>\n<li>.edu Educational facilities 教育机构</li>\n<li>.gov Governments (only for U.S.A) 政府 (美国)</li>\n<li>.mil Military facilities (only for U.S.A) 军方 (美军)</li>\n<li>.int International organizations 国际组织</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第6讲：会话、表示、应用层_页面_48\" /></p>\n<p>Infrastructure domain 基础设施领域</p>\n<ol>\n<li>Only one: arpa, for resolving domain names reversely 仅一个：arpa，用于反向解析域名</li>\n</ol>\n<p>Recently, new TLD domain added:</p>\n<ol>\n<li>.aero (航空运输企业)</li>\n<li>.biz (公司和企业)</li>\n<li>.cat (加泰隆人的语言和文化团体)</li>\n<li>.coop (合作团体)</li>\n<li>.info (各种资讯)</li>\n<li>.jobs (人力资源管理者)</li>\n<li>.mobi (移动产品与服务的用户和提供者)</li>\n<li>.museum (博物馆)</li>\n<li>.name   (个人)</li>\n<li>.pro (经过认证的专业人员)</li>\n<li>.travel  (旅游业)</li>\n</ol>\n<h3 id=\"域名服务器\"><a class=\"anchor\" href=\"#域名服务器\">#</a> 域名服务器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第6讲：会话、表示、应用层_页面_49\" /></p>\n<ul>\n<li>顶级域名底下的域名就是由顶级域名下面进行管理</li>\n<li>根域名服务器存储位置，所以子服务器知道根服务器的地址即可</li>\n</ul>\n<h3 id=\"结合域名服务器查找ip地址\"><a class=\"anchor\" href=\"#结合域名服务器查找ip地址\">#</a> 结合域名服务器查找 IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第6讲：会话、表示、应用层_页面_50\" /></p>\n<ol>\n<li>DNS 系统以层次 (hierarchy) 结构设置，该层次结构创建不同级别的 DNS 服务器。</li>\n<li>此级别的 DNS 服务器判断其自身是否能够将域名转换为关联的 IP 地址：\n<ol>\n<li>如果可以，则将结果返回给客户端</li>\n<li>如果没有，它将请求发送到更高级别。(向上级请求)</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_51.jpg\" alt=\"第6讲：会话、表示、应用层_页面_51\" /></p>\n<ul>\n<li>请求分为两种:\n<ul>\n<li>能够应答</li>\n<li>不能够应答</li>\n</ul>\n</li>\n<li>递归地进行查找：具体过程在上图</li>\n<li>下面递归，上面迭代</li>\n</ul>\n<h3 id=\"应用层通讯方式\"><a class=\"anchor\" href=\"#应用层通讯方式\">#</a> 应用层：通讯方式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6%E8%AE%B2%EF%BC%9A%E4%BC%9A%E8%AF%9D%E3%80%81%E8%A1%A8%E7%A4%BA%E3%80%81%E5%BA%94%E7%94%A8%E5%B1%82_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第6讲：会话、表示、应用层_页面_52\" /></p>\n<ol>\n<li>通信处理发生的一种方式：(无上下文，请求后就断开)\n<ol>\n<li>当浏览器打开时，它将连接到默认页面，并且该页面的文件将传输到客户端。</li>\n<li>处理完成后，连接断开</li>\n</ol>\n</li>\n<li>第二种方式：(有上下文)\n<ol>\n<li>作为 Telnet 和 FTP，建立与服务器的连接并保持该连接，直到执行所有处理。</li>\n<li>当用户确定他 / 她已完成时，客户端将终止连接。</li>\n</ol>\n</li>\n<li>所有的交流活动都属于这两类之一。</li>\n</ol>\n<h2 id=\"dhcp-dynamic-host-configuration-protocol-动态主机配置协议\"><a class=\"anchor\" href=\"#dhcp-dynamic-host-configuration-protocol-动态主机配置协议\">#</a> DHCP Dynamic Host Configuration Protocol 动态主机配置协议</h2>\n<h2 id=\"dhcp工作原理\"><a class=\"anchor\" href=\"#dhcp工作原理\">#</a> DHCP 工作原理</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第6.1讲：dhcp_页面_03\" /></p>\n<h3 id=\"dhcp过程\"><a class=\"anchor\" href=\"#dhcp过程\">#</a> DHCP 过程</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第6.1讲：dhcp_页面_04\" /></p>\n<p>AB 是两个 Server</p>\n<p>Client 先 Discover 去搜索</p>\n<p>Server 返回一个 Offer 报文</p>\n<p>Client 选择优先返回的 Offer 来优先服务</p>\n<p>Client 进行广播，告知到底服务了谁</p>\n<p>然后 B 返回一个 Ack 报文</p>\n<p>到了时间之后，选择 release 或者续租</p>\n<h3 id=\"发现阶段\"><a class=\"anchor\" href=\"#发现阶段\">#</a> 发现阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第6.1讲：dhcp_页面_05\" /></p>\n<h3 id=\"响应阶段\"><a class=\"anchor\" href=\"#响应阶段\">#</a> 响应阶段</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第6.1讲：dhcp_页面_06\" /></p>\n<h3 id=\"选择问题\"><a class=\"anchor\" href=\"#选择问题\">#</a> 选择问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第6.1讲：dhcp_页面_07\" /></p>\n<h3 id=\"租约确认问题\"><a class=\"anchor\" href=\"#租约确认问题\">#</a> 租约确认问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_08.jpg\" alt=\"第6.1讲：dhcp_页面_08\" /></p>\n<h3 id=\"租期续约\"><a class=\"anchor\" href=\"#租期续约\">#</a> 租期续约</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第6.1讲：dhcp_页面_09\" /></p>\n<h3 id=\"租期释放\"><a class=\"anchor\" href=\"#租期释放\">#</a> 租期释放</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第6.1讲：dhcp_页面_10\" /></p>\n<h3 id=\"dhcp报文结构\"><a class=\"anchor\" href=\"#dhcp报文结构\">#</a> DHCP 报文结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第6.1讲：dhcp_页面_11\" /></p>\n<ol>\n<li>op: 报文类型，1 请求，2 应答</li>\n<li>HTYPE: 硬件地址类型，1 表示 10M 以太网地址</li>\n<li>HLEN: 以太网地址长度，10M 为 6</li>\n<li>Hops: 是否使用代理服务器进行处理</li>\n</ol>\n<h3 id=\"报文类型\"><a class=\"anchor\" href=\"#报文类型\">#</a> 报文类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第6.1讲：dhcp_页面_12\" /></p>\n<ol>\n<li>DHCP Discover：发现</li>\n<li>DHCP Offer：提供</li>\n<li>DHCP Request：告知决定</li>\n<li>DHCP ACK：租约确认</li>\n<li>DHCP NAK：租约不确认</li>\n<li>DHCP Release：释放租约</li>\n<li>DHCP Decline: 收到 Ack 后，Client 告诉服务器不接受</li>\n<li>DHCP Inform: 客户端向服务器端请求详细信息</li>\n</ol>\n<h2 id=\"dhcp-欺骗与防范\"><a class=\"anchor\" href=\"#dhcp-欺骗与防范\">#</a> DHCP 欺骗与防范</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第6.1讲：dhcp_页面_14\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第6.1讲：dhcp_页面_15\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第6.1讲：dhcp_页面_16\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第6.1讲：dhcp_页面_17\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC6.1%E8%AE%B2%EF%BC%9Adhcp_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第6.1讲：dhcp_页面_18\" /></p>\n<p>ARP ip-&gt;mac</p>\n<p>RARP mac-&gt;ip</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture05-%E4%BC%A0%E8%BE%93%E5%B1%82/",
            "title": "Lecture05-传输层",
            "date_published": "2023-02-08T09:52:20.000Z",
            "content_html": "<h1 id=\"lecture05-第四层传输层\"><a class=\"anchor\" href=\"#lecture05-第四层传输层\">#</a> Lecture05 - 第四层传输层</h1>\n<p>第四层运输层主要是实现了主机之间的通信。数据通信是服务于主机上的<strong>进程</strong> (Session)。</p>\n<h2 id=\"第四层概述\"><a class=\"anchor\" href=\"#第四层概述\">#</a> 第四层概述</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_03.jpg\" alt=\"第5讲：传输层原理与技术_页面_03\" /></p>\n<ol>\n<li>\n<p>分割上层应用程序数据 (新的数据单元 - 数据段)</p>\n</li>\n<li>\n<p>建立端到端 (end to end) 的通讯</p>\n</li>\n<li>\n<p>从一个终端主机向另一个终端主机发送<strong>段 segment</strong></p>\n<p>(第三层和第二层不进行可靠性检验，第四层完成可靠性检验，接受方认为数据错误，在第四层进行要求重传)</p>\n</li>\n<li>\n<p>流量控制和可靠性</p>\n<ol>\n<li>可以比喻为与外国人交谈：通常，您会要求外国人重复他 / 她的话 (可靠性) 并慢声说话 (流量控制)</li>\n<li>双方主机的网络的处理能力不同，缓存能力不同</li>\n</ol>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_04.jpg\" alt=\"第5讲：传输层原理与技术_页面_04\" /></p>\n<ol>\n<li>传输控制协议 (TCP, Transmission Control Protocol)</li>\n<li>用户数据报协议 (UDP, User Datagram Protocol)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_05.jpg\" alt=\"第5讲：传输层原理与技术_页面_05\" /></p>\n<p>将传出邮件分成多个部分</p>\n<p>在目标站重新组合消息</p>\n<p>TCP: 可靠 (效率比较低，早期网络应用少，需要可靠性)</p>\n<ol>\n<li>面向连接</li>\n<li>软件检查段 segment</li>\n<li>重新发送丢失或错误的任何内容</li>\n<li>使用确认机制</li>\n<li>提供流量控制</li>\n</ol>\n<p>UDP: 不可靠</p>\n<ol>\n<li>无连接</li>\n<li>不提供段的软件检查</li>\n<li>不使用确认</li>\n<li>不进行流量控制</li>\n<li>直接丢弃错误的报文，而不进行其他操作。</li>\n</ol>\n<h3 id=\"服务模型\"><a class=\"anchor\" href=\"#服务模型\">#</a> 服务模型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_06.jpg\" alt=\"第5讲：传输层原理与技术_页面_06\" /></p>\n<ol>\n<li>\n<p>TCP 和 UDP 都使用<strong>端口</strong>来跟踪 (track) 同时穿越网络的不同会话</p>\n</li>\n<li>\n<p>应用软件开发人员已同意使用 RFC1700 中定义的知名端口号</p>\n</li>\n<li>\n<p>低于 255 的端口号 (0-255) 保留给 TCP 和 UDP 公共应用程序使用。</p>\n<p>0-1023 是知名端口，有分发的规范，不应当被随意使用</p>\n<p>1024-49151 的端口号进行登记使用，有的是应用程序已经的使用端口号，避免冲突</p>\n</li>\n</ol>\n<h3 id=\"套接字\"><a class=\"anchor\" href=\"#套接字\">#</a> 套接字</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_07.jpg\" alt=\"第5讲：传输层原理与技术_页面_07\" /></p>\n<ol>\n<li>套接字表示为 (IP 地址，端口)</li>\n<li>每个连接都表示为 (socket  source ，socket  destination)，这是一个点对点全双工通道</li>\n<li><strong>TCP 不支持多播和广播</strong></li>\n</ol>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_09.jpg\" alt=\"第5讲：传输层原理与技术_页面_09\" /></p>\n<ol>\n<li>可靠传输</li>\n<li>流控制\n<ol>\n<li>滑动窗口 (窗口进行通信，一次数据传输是有上限发的，缓存问题，拥塞问题)</li>\n<li>避免拥塞</li>\n</ol>\n</li>\n<li>连接控制\n<ol>\n<li>建立连接 ——<strong> 三次</strong>握手</li>\n<li>断开连接 ——<strong> 四次</strong>握手</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"tcp数据段格式\"><a class=\"anchor\" href=\"#tcp数据段格式\">#</a> TCP 数据段格式</h3>\n<h4 id=\"源端口-目的端口\"><a class=\"anchor\" href=\"#源端口-目的端口\">#</a> 源端口 目的端口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_10.jpg\" alt=\"第5讲：传输层原理与技术_页面_10\" /></p>\n<p>socket</p>\n<h4 id=\"序号\"><a class=\"anchor\" href=\"#序号\">#</a> 序号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_11.jpg\" alt=\"第5讲：传输层原理与技术_页面_11\" /></p>\n<p>我们从小向大进行使用，如果使用到最大之后，我们会从小再次重新开始分配。</p>\n<h4 id=\"确认号\"><a class=\"anchor\" href=\"#确认号\">#</a> 确认号</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_12.jpg\" alt=\"第5讲：传输层原理与技术_页面_12\" /></p>\n<p>发数据的同时，对对方上一次的传输做确认</p>\n<h4 id=\"数据偏移\"><a class=\"anchor\" href=\"#数据偏移\">#</a> 数据偏移</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_13.jpg\" alt=\"第5讲：传输层原理与技术_页面_13\" /></p>\n<h4 id=\"保留\"><a class=\"anchor\" href=\"#保留\">#</a> 保留</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_14.jpg\" alt=\"第5讲：传输层原理与技术_页面_14\" /></p>\n<h4 id=\"标记位urg\"><a class=\"anchor\" href=\"#标记位urg\">#</a> 标记位 ——URG</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_15.jpg\" alt=\"第5讲：传输层原理与技术_页面_15\" /></p>\n<p>比如说按 Ctrl+C 终止程序的信息可能会将 URG 置为 1</p>\n<h4 id=\"标记位ack\"><a class=\"anchor\" href=\"#标记位ack\">#</a> 标记位 ——ACK</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_16.jpg\" alt=\"第5讲：传输层原理与技术_页面_16\" /></p>\n<h4 id=\"标记位psh\"><a class=\"anchor\" href=\"#标记位psh\">#</a> 标记位 ——PSH</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_17.jpg\" alt=\"第5讲：传输层原理与技术_页面_17\" /></p>\n<p>根据网络条件调整，正常情况下缓存满了才会传输</p>\n<h4 id=\"标记位rst\"><a class=\"anchor\" href=\"#标记位rst\">#</a> 标记位 ——RST</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_18.jpg\" alt=\"第5讲：传输层原理与技术_页面_18\" /></p>\n<p>连接失败</p>\n<h4 id=\"标记位syn\"><a class=\"anchor\" href=\"#标记位syn\">#</a> 标记位 ——SYN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_19.jpg\" alt=\"第5讲：传输层原理与技术_页面_19\" /></p>\n<h4 id=\"标记位fin\"><a class=\"anchor\" href=\"#标记位fin\">#</a> 标记位 ——FIN</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_20.jpg\" alt=\"第5讲：传输层原理与技术_页面_20\" /></p>\n<h4 id=\"窗口\"><a class=\"anchor\" href=\"#窗口\">#</a> 窗口</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_21.jpg\" alt=\"第5讲：传输层原理与技术_页面_21\" /></p>\n<h4 id=\"检验和\"><a class=\"anchor\" href=\"#检验和\">#</a> 检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_22.jpg\" alt=\"第5讲：传输层原理与技术_页面_22\" /></p>\n<h4 id=\"紧急指针\"><a class=\"anchor\" href=\"#紧急指针\">#</a> 紧急指针</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_23.jpg\" alt=\"第5讲：传输层原理与技术_页面_23\" /></p>\n<h4 id=\"可选部分\"><a class=\"anchor\" href=\"#可选部分\">#</a> 可选部分</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_24.jpg\" alt=\"第5讲：传输层原理与技术_页面_24\" /></p>\n<p>MSS Maximum Segment Size 最大报文段长度</p>\n<h4 id=\"填充\"><a class=\"anchor\" href=\"#填充\">#</a> 填充</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_25.jpg\" alt=\"第5讲：传输层原理与技术_页面_25\" /></p>\n<h3 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_26.jpg\" alt=\"第5讲：传输层原理与技术_页面_26\" /></p>\n<p>主机使用网段 (TPDU) 交换数据</p>\n<p>每个段都有：</p>\n<ol>\n<li>首部为 20 个字节 (可选部分除外)</li>\n<li>0 或更多数据字节 (请求连接的时候)</li>\n</ol>\n<p>段的大小必须与 IP 数据包匹配，并且还必须满足底层的需求</p>\n<ol>\n<li>例如，以太网的 MTU (最大传输单位) 为 1500 字节</li>\n<li>是面向字节的传输。</li>\n</ol>\n<p>每个字节都有一个 32 位序号</p>\n<h3 id=\"可靠连接两军问题\"><a class=\"anchor\" href=\"#可靠连接两军问题\">#</a> 可靠连接 —— 两军问题</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_27.jpg\" alt=\"第5讲：传输层原理与技术_页面_27\" /></p>\n<p>蓝军必须一起攻打才能打败白军</p>\n<p>蓝军信息可能被白军篡改或者阻碍</p>\n<p>结论：无论通信多少次，都不能有一个完全可信的消息（进入死循环）</p>\n<h3 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h3>\n<h4 id=\"第一次握手\"><a class=\"anchor\" href=\"#第一次握手\">#</a> 第一次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_28.jpg\" alt=\"第5讲：传输层原理与技术_页面_28\" /></p>\n<ol>\n<li>服务器：执行 LISTEN 和 ACCEPT 原语，并进行被动监视</li>\n<li>客户端：执行 CONNECT 原语，生成 SYN = 1 和 ACK = 0 的 TCP 段，代表连接请求</li>\n</ol>\n<h4 id=\"第二次握手\"><a class=\"anchor\" href=\"#第二次握手\">#</a> 第二次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_29.jpg\" alt=\"第5讲：传输层原理与技术_页面_29\" /></p>\n<p>服务器检查是否存在监视端口的服务进程</p>\n<ol>\n<li>如果没有任何进程，请使用 RST = 1 回答一个 TCP 段</li>\n<li>如果存在进程，则决定拒绝或接受请求</li>\n<li>如果接受连接请求，则发送 SYN = 1 和 ACK = 1 的网段</li>\n</ol>\n<h4 id=\"第三次握手\"><a class=\"anchor\" href=\"#第三次握手\">#</a> 第三次握手</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_30.jpg\" alt=\"第5讲：传输层原理与技术_页面_30\" /></p>\n<p>客户端发送一个 SYN = 0 和 ACK = 1 的段以确认连接</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_31.jpg\" alt=\"第5讲：传输层原理与技术_页面_31\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_32.jpg\" alt=\"第5讲：传输层原理与技术_页面_32\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_33.jpg\" alt=\"第5讲：传输层原理与技术_页面_33\" /></p>\n<h3 id=\"传输控制\"><a class=\"anchor\" href=\"#传输控制\">#</a> 传输控制</h3>\n<p>数据传输 —— 停止等待协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_34.jpg\" alt=\"第5讲：传输层原理与技术_页面_34\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_35.jpg\" alt=\"第5讲：传输层原理与技术_页面_35\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_36.jpg\" alt=\"第5讲：传输层原理与技术_页面_36\" /></p>\n<h3 id=\"可靠通信arq\"><a class=\"anchor\" href=\"#可靠通信arq\">#</a> 可靠通信 ARQ</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_37.jpg\" alt=\"第5讲：传输层原理与技术_页面_37\" /></p>\n<p>ARQ (Automatic Repeat reQuest) 自动重传请求：这表示 &quot;重新发送请求&quot; 为自动发送并且接收方无需请求发送方重新发送错误段</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_38.jpg\" alt=\"第5讲：传输层原理与技术_页面_38\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_39.jpg\" alt=\"第5讲：传输层原理与技术_页面_39\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_40.jpg\" alt=\"第5讲：传输层原理与技术_页面_40\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_41.jpg\" alt=\"第5讲：传输层原理与技术_页面_41\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_42.jpg\" alt=\"第5讲：传输层原理与技术_页面_42\" /></p>\n<h3 id=\"tcp-释放连接\"><a class=\"anchor\" href=\"#tcp-释放连接\">#</a> TCP 释放连接</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_43.jpg\" alt=\"第5讲：传输层原理与技术_页面_43\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_44.jpg\" alt=\"第5讲：传输层原理与技术_页面_44\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_45.jpg\" alt=\"第5讲：传输层原理与技术_页面_45\" /></p>\n<p>server 持续发完数据</p>\n<p>FIN = 1，表示数据处理完成</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_46.jpg\" alt=\"第5讲：传输层原理与技术_页面_46\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_47.jpg\" alt=\"第5讲：传输层原理与技术_页面_47\" /></p>\n<h3 id=\"为什么必须等待2msl\"><a class=\"anchor\" href=\"#为什么必须等待2msl\">#</a> 为什么必须等待 2MSL</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_48.jpg\" alt=\"第5讲：传输层原理与技术_页面_48\" /></p>\n<ol>\n<li>\n<p>为了确保 A 发送的最后一个 ACK 可以到达 B</p>\n</li>\n<li>\n<p>防止出现任何无效的连接请求段</p>\n<p>等待 2 MSL 之后，我们可以确保连接上的所有段均已消失</p>\n</li>\n</ol>\n<h3 id=\"tcp中的计时器\"><a class=\"anchor\" href=\"#tcp中的计时器\">#</a> Tcp 中的计时器</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_49.jpg\" alt=\"第5讲：传输层原理与技术_页面_49\" /></p>\n<ol>\n<li>\n<p>重传计时器：多长时间进行重传</p>\n</li>\n<li>\n<p>坚持计时器：避免死锁 (WIN = 0 的时候修改 WIN 但是没有办法发送过去)：收到 WIN = 0 的时候，开始进行计时，到时间主动询问</p>\n</li>\n<li>\n<p>保持计时器:</p>\n<ol>\n<li>发送数据段后，刷新</li>\n<li>如果到达一定的时间，则再次询问是不是还要保持连接。</li>\n<li>长期没有数据，和对方协商是否可以终止</li>\n</ol>\n</li>\n<li>\n<p>时间等待计时器</p>\n</li>\n</ol>\n<h3 id=\"tcp的有限状态机\"><a class=\"anchor\" href=\"#tcp的有限状态机\">#</a> TCP 的有限状态机</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_50.jpg\" alt=\"第5讲：传输层原理与技术_页面_50\" /></p>\n<ol>\n<li>粗线：正常的服务器端</li>\n<li>虚线：正常客户端</li>\n<li>细线：异常状态的问题</li>\n</ol>\n<h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_52.jpg\" alt=\"第5讲：传输层原理与技术_页面_52\" /></p>\n<p>为什么我们需要 UDP？</p>\n<ol>\n<li>没有建立连接 (避免延时)</li>\n<li>简单：发送方，接收方无连接状态</li>\n<li>小段 header</li>\n<li>没有拥塞控制：UDP 可以按照期望的速度传输</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_53.jpg\" alt=\"第5讲：传输层原理与技术_页面_53\" /></p>\n<p>无连接：没有复杂控制，头部简单</p>\n<ol>\n<li>UDP 发送方，接收方之间没有握手 (HandShake，包含进程等信息的)</li>\n<li>每个 UDP 段都独立处理</li>\n</ol>\n<p>常用于流媒体 (Stream) 多媒体 (multimedia) 应用</p>\n<ol>\n<li>容忍损失：无非就是降低帧率</li>\n<li>这类应用是<strong>速率敏感</strong>的应用，而不一定是质量敏感的应用。</li>\n</ol>\n<p>UDP 用于：</p>\n<ol>\n<li>RIP: 定期发送路由信息 (periodically)</li>\n<li>DNS: 避免延迟建立 TCP 连接 (DNS 需要快速找到)</li>\n<li>SNMP:SNMP：拥塞时 (congestion)，SNMP 必须仍然可运行。在没有拥塞和可靠性控制机制的情况下，UDP 在这种情况下的性能要优于 TCP。(主播和多播，大量信息传输)</li>\n<li>其他协议包括 TFTP，DHCP</li>\n</ol>\n<h3 id=\"udp帧结构\"><a class=\"anchor\" href=\"#udp帧结构\">#</a> UDP 帧结构</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_54.jpg\" alt=\"第5讲：传输层原理与技术_页面_54\" /></p>\n<ol>\n<li>UDP 的数据段很简单</li>\n<li>UDP 只有 8 个字节的首部</li>\n<li>源端口、目的端口、长度、校验 (data)、Data</li>\n<li>校验也要对 data 一并校验，如果出现错误，直接丢弃。</li>\n<li>应用层进行数据切片，决定如何进行发送，UDP 直接发送</li>\n</ol>\n<h2 id=\"应用nat和pat\"><a class=\"anchor\" href=\"#应用nat和pat\">#</a> 应用：NAT 和 PAT</h2>\n<h3 id=\"什么是nat\"><a class=\"anchor\" href=\"#什么是nat\">#</a> 什么是 NAT？</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_56.jpg\" alt=\"第5讲：传输层原理与技术_页面_56\" /></p>\n<ol>\n<li>NAT，是在 IP 数据包头中将一个地址交换为另一个地址的过程\n<ol>\n<li>网络地址转换</li>\n<li>是网络地址即将用完的解决方案</li>\n</ol>\n</li>\n<li>实际上，NAT 用于允许私下寻址的主机访问 Internet。</li>\n<li>IP 地址耗尽的解决方案之一\n<ol>\n<li>保留注册 (合法) 地址</li>\n<li>连接到 Internet 时增加灵活性</li>\n</ol>\n</li>\n<li>RFC 1631 - Network Address Translator (NAT)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_57.jpg\" alt=\"第5讲：传输层原理与技术_页面_57\" /></p>\n<h3 id=\"nat类型\"><a class=\"anchor\" href=\"#nat类型\">#</a> NAT 类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_58.jpg\" alt=\"第5讲：传输层原理与技术_页面_58\" /></p>\n<h3 id=\"nat地址类型\"><a class=\"anchor\" href=\"#nat地址类型\">#</a> NAT 地址类型</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_59.jpg\" alt=\"第5讲：传输层原理与技术_页面_59\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_60.jpg\" alt=\"第5讲：传输层原理与技术_页面_60\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_61.jpg\" alt=\"第5讲：传输层原理与技术_页面_61\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_62.jpg\" alt=\"第5讲：传输层原理与技术_页面_62\" /></p>\n<h3 id=\"nat优缺点\"><a class=\"anchor\" href=\"#nat优缺点\">#</a> NAT 优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC5%E8%AE%B2%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF_%E9%A1%B5%E9%9D%A2_63.jpg\" alt=\"第5讲：传输层原理与技术_页面_63\" /></p>\n<ol>\n<li>优点：由于并非每个内部主机都需要同时进行外部访问，因此您可以使用少量的全局唯一地址池来服务相对大量的私有寻址主机。</li>\n<li>缺点：一一映射，并没有从根本上解决地址短缺的问题。</li>\n<li>也就是说，如果专用地址空间为 / 8，但公用地址为 / 24，则一次只能有 254 个主机可以访问 Internet，主要内网不是同时有很多主机上网，就可以如上操作，进一步降低地址压力 (类似并行和穿行的区别)</li>\n</ol>\n<p>TCP 不支持多播和广播</p>\n<p>**</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        },
        {
            "id": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "url": "https://quas-modo.github.io/2023/02/08/internet-computer/Lecture04-%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "title": "Lecture04-网络层",
            "date_published": "2023-02-08T09:52:09.000Z",
            "content_html": "<h1 id=\"lecture04-网络层\"><a class=\"anchor\" href=\"#lecture04-网络层\">#</a> Lecture04 - 网络层</h1>\n<h2 id=\"网络层概述\"><a class=\"anchor\" href=\"#网络层概述\">#</a> 网络层概述</h2>\n<h3 id=\"网络层职责\"><a class=\"anchor\" href=\"#网络层职责\">#</a> 网络层职责</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_003.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_003\" /></p>\n<ol>\n<li>通过网络移动数据：不同网段之间的通信，不同的广播域，两个广播域之间的进行了划分，互不干扰</li>\n<li>使用分层寻址方案 (与 MAC 寻址相反，后者没有层次)</li>\n<li>细分网络并控制流量</li>\n<li>减少交通拥堵，基于 IP 做分段和传达，用来减少拥塞</li>\n<li>与其他网络通讯</li>\n</ol>\n<h3 id=\"网络层设备\"><a class=\"anchor\" href=\"#网络层设备\">#</a> 网络层设备</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_004.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_004\" /></p>\n<ol>\n<li>路由器\n<ol>\n<li>互连网段或网络 (不同网段的分割)</li>\n<li>根据 IP 地址做出合理的决定</li>\n<li>确定最佳路径，根据路由表。</li>\n<li>将数据包从入站端口切换到出站端口</li>\n</ol>\n</li>\n<li>如果 A 网段的设备向路由器发送了一个 B 网段的广播地址，那么路由器会进行转发，然而如果 A 网段设备发送的是本网段的广播地址，路由器则不会进行转发。(广播域划分)</li>\n</ol>\n<h2 id=\"ip地址和子网划分\"><a class=\"anchor\" href=\"#ip地址和子网划分\">#</a> IP 地址和子网划分</h2>\n<h3 id=\"第三层数据报格式\"><a class=\"anchor\" href=\"#第三层数据报格式\">#</a> 第三层数据报格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_006.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_006\" /></p>\n<h3 id=\"报文详解\"><a class=\"anchor\" href=\"#报文详解\">#</a> 报文详解</h3>\n<h4 id=\"首部\"><a class=\"anchor\" href=\"#首部\">#</a> 首部</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_007.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_007\" /></p>\n<h4 id=\"首部部分\"><a class=\"anchor\" href=\"#首部部分\">#</a> 首部部分</h4>\n<p>上面蓝框部分的整体是首部部分，包括固定部分和可变部分</p>\n<h4 id=\"版本号\"><a class=\"anchor\" href=\"#版本号\">#</a> 版本号</h4>\n<p>占 4 bit，指 IP 协议的版本。</p>\n<p>目前的 IP 协议版本号为 4 (即 IPv4)(6 也就对应 IPv6)</p>\n<h4 id=\"首部长度\"><a class=\"anchor\" href=\"#首部长度\">#</a> 首部长度</h4>\n<p>占 4 bit，可表示的最大数值是 15 个单位 (一个单位为 4 字节) 因此 IP 的首部长度的最大值是 60 字节。</p>\n<p>一行是 5 个字节，固定部分有 20 个字节，可变部分最多有 40 个字节。</p>\n<h4 id=\"服务类型\"><a class=\"anchor\" href=\"#服务类型\">#</a> 服务类型</h4>\n<p>占 8bit，用来获得更好的服务，这个字段以前一直没有被人们使用。</p>\n<h4 id=\"总长度\"><a class=\"anchor\" href=\"#总长度\">#</a> 总长度</h4>\n<p>占 16 bit，指<strong>首部和数据</strong>之和的长度，单位为字节，因此数据报的最大长度为 65535 字节 (由于放到帧里面，所以大多数不比 1500 字节长)。总长度必须不超过最大传送单元 MTU。</p>\n<h4 id=\"标识\"><a class=\"anchor\" href=\"#标识\">#</a> 标识</h4>\n<p>标识 (identification)：占 16 bit，它是一个计数器，用来产生数据报的标识。</p>\n<p>解决<strong>报文分片</strong>的问题。相同的标识可以合并成一个大报文。</p>\n<h4 id=\"标志\"><a class=\"anchor\" href=\"#标志\">#</a> 标志</h4>\n<p>标志占 3 bit，最高位为 0</p>\n<ol>\n<li>让发送方对报文进行控制，让中间路由器对其进行控制</li>\n<li>DF (Don’t fragment)：是否允许做分片，0 允许做分片，1 不允许做分片</li>\n<li>MF (More Fragment)：MF 为 0 表示最后一个分片，1 是指后面还有分片</li>\n</ol>\n<h4 id=\"片偏移\"><a class=\"anchor\" href=\"#片偏移\">#</a> 片偏移</h4>\n<p>片偏移 (13 bit) 指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以<strong> 8 个字节</strong>为偏移单位。</p>\n<ol>\n<li>相同标识号，然后根据片偏移进行重排</li>\n<li>因为 16-3 = 13，2^3 = 8 (因为单位是字节，所以用 13 位就可以补齐)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102115026718.png\" alt=\"image-20230102115026718\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_017.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_017\" /></p>\n<h4 id=\"生存时间\"><a class=\"anchor\" href=\"#生存时间\">#</a> 生存时间</h4>\n<p>生存时间 (8 bit) 记为 TTL (Time To Live) 数据报在网络中可通过的<strong>路由器数</strong>的最大值。</p>\n<p>是通过计数的方式来进行统计，最大值是<strong> 255</strong> (最多经过 255 个路由器)，路由器每转发一次，就会对生存时间 - 1，减小为 0 后，就会丢弃掉，并且通知给发送方我已经丢弃掉这个报文。</p>\n<p>防止在环上进行传输，避免由于回路问题，造成过大的网络资源浪费</p>\n<h4 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h4>\n<p>协议 (8 bit) 字段指出此数据报携带的数据使用何种协议以便目的主机的 IP 层将数据部分上交给哪个处理过程</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_020.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_020\" /></p>\n<p>有的协议是上层的，有的协议是第三层协议，具体协议的情况如上</p>\n<h4 id=\"首部检验和\"><a class=\"anchor\" href=\"#首部检验和\">#</a> 首部检验和</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_022.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_022\" /></p>\n<p>首部检验和 (16 bit) 字段：只检验数据报的首部，不包括数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p>\n<p>一般不用，一是只检验首部，不检验数据；二是消耗性能</p>\n<h4 id=\"源地址和目的地址\"><a class=\"anchor\" href=\"#源地址和目的地址\">#</a> 源地址和目的地址</h4>\n<p>各占 4 个字节</p>\n<h3 id=\"网络层地址\"><a class=\"anchor\" href=\"#网络层地址\">#</a> 网络层地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_024.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_024\" /></p>\n<ol>\n<li>\n<p>IP 地址为 32 位长 (Ipv4 中)</p>\n</li>\n<li>\n<p>它们以点分十进制格式表示为四个八位字节：133.14.17.0</p>\n</li>\n<li>\n<p>IP 地址包含两个组成部分：</p>\n<ul>\n<li>\n<p>网络 ID</p>\n</li>\n<li>\n<p>主机 ID</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_025.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_025\" /></p>\n<h4 id=\"网络地址用来标识网段\"><a class=\"anchor\" href=\"#网络地址用来标识网段\">#</a> 网络地址：用来标识网段</h4>\n<p>一个网络中，共享一个网络地址</p>\n<ol>\n<li>原来由 ARIN (美国互联网号码注册机构，<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hcmluLm5ldA==\">www.arin.net</span>) 分配，现在已经更换</li>\n<li>标识设备所连接 (attached) 的网络</li>\n<li>可以由前三个八位位组 (octets) 中的一个，两个或三个来标识</li>\n</ol>\n<h4 id=\"主机idip地址后面占据1-3个字节\"><a class=\"anchor\" href=\"#主机idip地址后面占据1-3个字节\">#</a> 主机 ID：IP 地址后面占据 1-3 个字节</h4>\n<ol>\n<li>由网络管理员分配</li>\n<li>识别该网络上的特定设备</li>\n<li>可以由最后三个八位位组中的一个，两个或三个来标识</li>\n</ol>\n<h3 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_026.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_026\" /></p>\n<p>不同的类地址为地址的网络部分和主机部分保留不同数量的位</p>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_027.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_027\" /></p>\n<p><strong>A 类第一位必为 0，B 开头为 10，C 为 110</strong></p>\n<p>根据第一个地址的数值确定是哪类地址</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_028.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_028\" /></p>\n<ol>\n<li>\n<p>每个类别的最大主机数量各不相同。(不包含网络号)</p>\n<ul>\n<li>\n<p>A 类拥有 16,777,214 个可用主机 (2<sup>24</sup> – 2)</p>\n</li>\n<li>\n<p>Class B has 65,534 available hosts (2<sup>16</sup> – 2) B 类具有 65,534 个可用主机 (2<sup>16</sup> – 2)</p>\n</li>\n<li>\n<p>Class C has 254 available hosts (2<sup>8</sup> – 2) C 类具有 254 个可用主机 (2<sup>8</sup> –2)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>为什么每一类地址中都要减去 2？</p>\n<ul>\n<li>\n<p>每个网络中的第一个地址都保留用于该网络地址</p>\n</li>\n<li>\n<p>最后一个地址是为广播地址保留的。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"保留地址\"><a class=\"anchor\" href=\"#保留地址\">#</a> 保留地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_029.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_029\" /></p>\n<p>网络地址：在地址的主机部分中以二进制 0 结尾的 IP 地址</p>\n<ol>\n<li>A 类网络地址示例：113.0.0.0</li>\n<li>网络上的主机只有具有相同网络 ID 的其他主机才能直接通信。(用来确定是不是在一个网段里面)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_030.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_030\" /></p>\n<p>广播地址：用于将数据发送到网络上的所有设备。(一般是一个网段之间的)</p>\n<ol>\n<li>广播 IP 地址在地址的主机部分中以二进制 1 结尾。</li>\n<li>B 类地址的广播地址的示例：176.10.255.255 (decimal 255 = binary 11111111)</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_031.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_031\" /></p>\n<p>例子</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_032.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_032\" /></p>\n<p>用于局域网内部使用</p>\n<p>IP 地址耗尽（IP address delpetion）</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/image-20230102123731364.png\" alt=\"image-20230102123731364\" /></p>\n<h3 id=\"子网划分\"><a class=\"anchor\" href=\"#子网划分\">#</a> 子网划分</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_033.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_033\" /></p>\n<p>网络管理员有时需要将网络划分为较小的网络，称为<strong>子网</strong>，以提供<strong>额外的灵活性</strong>.</p>\n<p>从主机字段借来的位被指定为子网字段 (Subnet Fields)</p>\n<h4 id=\"子网的基本概念\"><a class=\"anchor\" href=\"#子网的基本概念\">#</a> 子网的基本概念</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_034.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_034\" /></p>\n<ol>\n<li>子网是网络的较小部分\n<ul>\n<li>提供寻址灵活性</li>\n</ul>\n</li>\n<li>子网地址通常由网络管理员在本地分配</li>\n<li>子网减少了广播域：使得广播域变小，提高网络利用率，避免接受到大量的无用的广播，广播只能在对应子网中进行广播。</li>\n</ol>\n<h4 id=\"我们可以借多少位\"><a class=\"anchor\" href=\"#我们可以借多少位\">#</a> 我们可以借多少位？</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_035.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_035\" /></p>\n<p>最少借 2 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_036.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_036\" /></p>\n<ol>\n<li>\n<p>借用的最小位数是 2，为什么？</p>\n<p>I 如果只借用 1 位以创建一个子网，那么您将只有一个网络号 -.0 网络 - 和广播号 -.1 网络，没有可以使用的专用网络。</p>\n<p>两位的时候，01 和 10 给 Host，00 给网络 ID，11 位广播地址</p>\n</li>\n<li>\n<p>可以借用的最大位数可以是保留至少 2 位主机号的任何数字 (给 Host 至少保留 2 位，因为 1 位的话，要么一个是 NET 无法使用，要么一个是广播地址)</p>\n</li>\n</ol>\n<h4 id=\"副作用浪费地址\"><a class=\"anchor\" href=\"#副作用浪费地址\">#</a> 副作用：浪费地址</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_037.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_037\" /></p>\n<p>我们必须在所需的子网数，每个子网可接受的主机以及地址的浪费之间取得平衡 (strike a balance)。</p>\n<h4 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_038.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_038\" /></p>\n<p>别名：扩展网络前缀</p>\n<p>定义我们用来构建网络的位数，以及描述主机地址的位数</p>\n<h4 id=\"计算一个子网\"><a class=\"anchor\" href=\"#计算一个子网\">#</a> 计算一个子网</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_039.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_039\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_040.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_040\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_041.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_041\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_042.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_042\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_043.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_043\" /><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_044.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_044\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_045.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_045\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_046.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_046\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_047.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_047\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_048.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_048\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_049.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_049\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_050.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_050\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_051.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_051\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_052.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_052\" /></p>\n<p>路由器需要做一个与运算，交换机不用</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_053.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_053\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_054.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_054\" /></p>\n<h2 id=\"第三层设备路由器\"><a class=\"anchor\" href=\"#第三层设备路由器\">#</a> 第三层设备 —— 路由器</h2>\n<h3 id=\"路径选择\"><a class=\"anchor\" href=\"#路径选择\">#</a> 路径选择</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_056.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_056\" /></p>\n<p>路由器选择下一路径，根据带宽、跳数、延迟等</p>\n<h3 id=\"ip地址-2\"><a class=\"anchor\" href=\"#ip地址-2\">#</a> IP 地址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_057.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_057\" /></p>\n<ol>\n<li>IP 地址是用软件实现的，是指设备所在的网络。</li>\n<li>路由器连接网络，每个网络必须具有<strong>唯一的网络号</strong>才能成功进行寻找路径。</li>\n<li>唯一的网络号包含在分配 (incorporated) 给该网络上每个设备的 IP 地址中</li>\n<li>IP 地址是逻辑的，是我们配置的。(不同于 MAC 地址)</li>\n<li>IP 地址是有层次，做转发的依据是网段而不是具体的 IP，同一网段设备都有相同的 IP 地址，也就是我们只要到达网段即可</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_058.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_058\" /></p>\n<p>路由器每个端口需要配一个地址，和所连接的网段是同一个信息的</p>\n<h3 id=\"路由器转发实例\"><a class=\"anchor\" href=\"#路由器转发实例\">#</a> 路由器转发实例</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_059.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_059\" /></p>\n<p>A5 发到 B5</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_060.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_060\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_061.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_061\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_062.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_062\" /></p>\n<p>查询路由表</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_063.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_063\" /></p>\n<p>形成一个新的帧，MAC 地址是 B1 的</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_064.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_064\" /></p>\n<ol>\n<li>\n<p>接口是路由器连接到网络的附加装置，在 IP 路由中也可以称为端口。这个 IP 地址往往被作为这个网络的网关</p>\n</li>\n<li>\n<p>每个接口必须具有一个单独的唯一网络地址。</p>\n<p>比如上图中 S1 和 S2 不能是相同的 IP 地址，否则会发生歧义，S0 不知道转发给谁，路由器的连接的网段一定要是不同的</p>\n</li>\n</ol>\n<h3 id=\"ip地址分配\"><a class=\"anchor\" href=\"#ip地址分配\">#</a> IP 地址分配</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_065.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_065\" /></p>\n<ol>\n<li>\n<p>静态地址分配 (Static addressing)</p>\n<ol>\n<li>为每个单独的设备配置一个 IP 地址</li>\n<li>您应该保留非常细致的记录，因为如果使用重复的 IP 地址，可能会出现问题。</li>\n</ol>\n</li>\n<li>\n<p>动态地址分配 (Dynamic addressing)</p>\n<p>有几种不同的方法可用于动态分配 IP 地址：</p>\n<ul>\n<li>RARP: Reverse Address Resolution Protocol. RARP：反向地址解析协议。发起请求</li>\n<li>BOOTP: BOOTstrap Protocol. BOOTP：BOOTstrap 协议。用于工作栈</li>\n<li>DHCP: Dynamic Host Configuration Protocol. (<strong>比较多用</strong>) DHCP：动态主机配置协议</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"arp-协议\"><a class=\"anchor\" href=\"#arp-协议\">#</a> ARP 协议</h2>\n<p>Address Resolution Protocol 地址解析协议</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_067.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_067\" /></p>\n<ol>\n<li>为了使设备进行通信，发送设备需要目标设备的<strong> IP 地址和 MAC 地址</strong>。</li>\n<li>ARP 使计算机能够查找与 IP 地址关联的计算机的 MAC 地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_068.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_068\" /></p>\n<ol>\n<li>目的方 IP 地址 -&gt; 目的方 MAC 地址</li>\n<li>需要知道对方的 MAC 地址，来形成数据地址。</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_069.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_069\" /></p>\n<p>ARP Table</p>\n<p>ARP 缓存</p>\n<h3 id=\"arp操作mac地址解析\"><a class=\"anchor\" href=\"#arp操作mac地址解析\">#</a> ARP 操作，MAC 地址解析</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_070.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_070\" /></p>\n<p>此时目的地 MAC 地址不知道</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_071.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_071\" /></p>\n<p>向目的地地址请求，发出广播</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_072.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_072\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_073.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_073\" /></p>\n<p>C 回应</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_074.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_074\" /></p>\n<p>写入 ARP 缓存，发送正常的帧</p>\n<h3 id=\"目的地本地\"><a class=\"anchor\" href=\"#目的地本地\">#</a> 目的地本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_075.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_075\" /></p>\n<h3 id=\"网络交流\"><a class=\"anchor\" href=\"#网络交流\">#</a> 网络交流</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_076.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_076\" /></p>\n<h4 id=\"默认网关\"><a class=\"anchor\" href=\"#默认网关\">#</a> 默认网关</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_077.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_077\" /></p>\n<ol>\n<li>为了使设备与另一网络上的另一设备通信，您必须为其<strong>提供默认网关</strong>。</li>\n<li><strong>默认网关是路由器上连接到源主机所在网段的接口的 IP 地址。</strong></li>\n<li>为了使设备将数据发送到另一个网段上的设备的地址，源设备将数据<strong>发送到默认网关</strong>。</li>\n</ol>\n<h4 id=\"代理\"><a class=\"anchor\" href=\"#代理\">#</a> 代理</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_078.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_078\" /></p>\n<p>无法设置默认网关的情况</p>\n<ol>\n<li>代理 ARP 是 ARP 的一种变体 (variation)。</li>\n<li>如果源主机未配置默认网关。</li>\n</ol>\n<h3 id=\"目的地址不是本地\"><a class=\"anchor\" href=\"#目的地址不是本地\">#</a> 目的地址不是本地</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_079.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_079\" /></p>\n<p>路由器把自己的 MAC 地址给 Host Y</p>\n<h3 id=\"arp流程图\"><a class=\"anchor\" href=\"#arp流程图\">#</a> ARP 流程图</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_080.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_080\" /></p>\n<h2 id=\"网络层服务\"><a class=\"anchor\" href=\"#网络层服务\">#</a> 网络层服务</h2>\n<h3 id=\"面向连接的网络服务\"><a class=\"anchor\" href=\"#面向连接的网络服务\">#</a> 面向连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_082.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_082\" /></p>\n<ol>\n<li>\n<p>面向连接的网络服务 —— 在数据传输之前，在传输方和接收方之间建立连接</p>\n<ul>\n<li>\n<p>就是任何发送数据的行为之前，先要建立好连接，协商好参数才会开始传输，所有数据进行有序传输</p>\n</li>\n<li>\n<p>网络情况导致数据出现问题，需要接受方进行一定处理来保证数据正确</p>\n</li>\n</ul>\n</li>\n<li>\n<p>传输过程中要保持连接距离，只有完成传输后才能断开连接。</p>\n</li>\n<li>\n<p>传输比较可靠，代价高。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_083.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_083\" /></p>\n<ol>\n<li>\n<p>（虚）电路交换 vs 面向连接的网络服务</p>\n<p>但是，两个名词并不一样。</p>\n</li>\n<li>\n<p>面向连接：在数据传输之前，与接收方建立一个连接</p>\n</li>\n<li>\n<p>所有 packet（报文）在同一条道路上依次传输，更普遍的，是在同一条虚电路上</p>\n</li>\n</ol>\n<p>虚电路要强于面向连接的，传输更加可靠，保证<strong>传输先后关系</strong>。</p>\n<h3 id=\"无连接的网络服务\"><a class=\"anchor\" href=\"#无连接的网络服务\">#</a> 无连接的网络服务</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_084.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_084\" /></p>\n<p>他们分别对待每个数据包。</p>\n<p>IP 是<strong>无连接系统</strong>。</p>\n<h3 id=\"报文交换\"><a class=\"anchor\" href=\"#报文交换\">#</a> 报文交换</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_085.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_085\" /></p>\n<ol>\n<li>无连接网络与数据包交换：这两个词都不一样</li>\n<li>当数据包从源传递到目标时，它们可以：\n<ol>\n<li>切换到其他路径。(每一报文有各自的发送方和接收方，可以根据当前的网络情况，进行路由选择)</li>\n<li>乱序到达。</li>\n</ol>\n</li>\n<li>设备根据<strong>各种标准</strong>为每个数据包<strong>进行路径选择</strong>。不同的报文可能有不同的标准。</li>\n</ol>\n<p>大部分的 Connetionless network 都是基于 packet switched 进行实现，控制网络拥塞。</p>\n<h2 id=\"路由协议\"><a class=\"anchor\" href=\"#路由协议\">#</a> 路由协议</h2>\n<h3 id=\"网络协议操作\"><a class=\"anchor\" href=\"#网络协议操作\">#</a> 网络协议操作</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_087.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_087\" /></p>\n<p>ABC 之间都是通过帧进行计算的，直到第三层。</p>\n<h3 id=\"被动路由协议\"><a class=\"anchor\" href=\"#被动路由协议\">#</a> 被动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_088.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_088\" /></p>\n<ol>\n<li>为网络层提供支持的协议称为路由协议或可路由协议。</li>\n<li>IP 是网络层协议，因此，它可以通过互联网络进行路由。</li>\n</ol>\n<h3 id=\"不可路由协议\"><a class=\"anchor\" href=\"#不可路由协议\">#</a> 不可路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_089.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_089\" /></p>\n<ol>\n<li>\n<p>不可路由协议是不支持第 3 层的协议。</p>\n</li>\n<li>\n<p>这些不可路由协议中最常见的是 NetBEUI。</p>\n<ul>\n<li>\n<p>直接根据目的方的地址在局域网中进行生成定位</p>\n</li>\n<li>\n<p>这个协议不支持第三层，也就是跨局域网是不可以的。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>NetBEUI 是一种小型，快速且高效的协议，仅限于在一个网段上运行</p>\n</li>\n</ol>\n<h3 id=\"可路由协议的寻址\"><a class=\"anchor\" href=\"#可路由协议的寻址\">#</a> 可路由协议的寻址</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_090.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_090\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_091.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_091\" /></p>\n<h3 id=\"分类1静态vs动态\"><a class=\"anchor\" href=\"#分类1静态vs动态\">#</a> 分类 1：静态 vs 动态</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_092.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_092\" /></p>\n<ol>\n<li>\n<p>静态路由：网络管理员在路由器中手动输入路由信息。</p>\n</li>\n<li>\n<p>动态路由</p>\n<ul>\n<li>\n<p>路由器可以在运行过程中互相学习信息。</p>\n</li>\n<li>\n<p>使用路由协议更新路由信息。</p>\n</li>\n<li>\n<p>RIP, IGRP, EIGRP, OSPF …</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_093.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_093\" /></p>\n<ol>\n<li>\n<p>静态路由</p>\n<ol>\n<li>\n<p>用于<strong>隐藏</strong>部分网络。</p>\n<p>安全 (不必进行路由表的交换)</p>\n</li>\n<li>\n<p>测试网络中的特定链接。</p>\n</li>\n<li>\n<p>在到达目标网络的路径只有一条通路时，维护路由表。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>动态路由</p>\n<ol>\n<li>维护路由表。</li>\n<li>以路由更新的形式及时分发信息。</li>\n<li>依靠路由协议共享知识。</li>\n<li>路由器可以调整以适应不断变化的网络状况。</li>\n<li>打开后会启动<strong>进程</strong>，按照不同的协议，和网上的不同设备学习信息，然后根据<strong>算法</strong>生成路由表</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"主动路由协议\"><a class=\"anchor\" href=\"#主动路由协议\">#</a> 主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_094.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_094\" /></p>\n<h3 id=\"被动路由协议和主动路由协议\"><a class=\"anchor\" href=\"#被动路由协议和主动路由协议\">#</a> 被动路由协议和主动路由协议</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_095.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_095\" /></p>\n<ol>\n<li>Routed Portocol 用于路由器之间，用来保证路由器之间连通 (完成转发)。</li>\n<li>Routing Protocol 用于做各自的路由表的生成：路由器彼此交换信息。</li>\n<li>Routing Protocol 决定 Routed Protocals</li>\n</ol>\n<h3 id=\"分类2igp-vs-egp\"><a class=\"anchor\" href=\"#分类2igp-vs-egp\">#</a> 分类 2：IGP VS EGP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_096.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_096\" /></p>\n<ol>\n<li>\n<p>动态路由</p>\n</li>\n<li>\n<p>内部网关协议 Interior Gateway  Protocols</p>\n<p>RIP，IGRP，EIGRP，OSPF</p>\n<p>可在自治系统 (autonomous  system，大的单位或者管理方) 中使用，该系统是一个主管部门下的路由器网络，例如公司 (corporate) 网络，学区的网络或政府机构的网络。</p>\n</li>\n<li>\n<p>外部网关协议 Exterior Gateway Protocols</p>\n<p>EGP，BGP</p>\n<p>用于在自治系统之间路由数据包。</p>\n</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_097.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_097\" /></p>\n<p>自治系统是<strong>逻辑</strong>的划分，而未必是物理层次的划分。</p>\n<h3 id=\"分类3igp分为两类dvp-vs-lsp\"><a class=\"anchor\" href=\"#分类3igp分为两类dvp-vs-lsp\">#</a> 分类 3：IGP 分为两类：DVP VS LSP</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_098.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_098\" /></p>\n<p><strong>DVP</strong></p>\n<p>距离矢量协议 Distance-Vector Protocols</p>\n<p>RIP, IGRP</p>\n<ol>\n<li>从<strong>邻居</strong>的角度查看网络拓扑。(注意不基于全局)</li>\n<li>在路由器之间添加距离向量。(根据跳数来决定，经过一个路由器 + 1 一次)</li>\n<li>经常定期 (periodic) 更新。（<strong>定时</strong>）</li>\n<li>将路由表的<strong>副本</strong>传递到邻居路由器。</li>\n</ol>\n<p><strong>LVP</strong></p>\n<p>链路状态协议 Link State Protocols</p>\n<p>OSPF</p>\n<ol>\n<li>获取<strong>全局</strong>网络拓扑的通用视图。</li>\n<li>计算到其他路由器的<strong>最短路径</strong>。(基于带宽计算出来的 cost，形成 cost 拓扑图，然后计算出对应的路径代价作为评判依据)</li>\n<li><strong>事件</strong>触发的更新。</li>\n<li>将链接状态路由更新传递给其他路由器</li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_099.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_099\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_100.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_100\" /></p>\n<p>Link State</p>\n<p>用 SPF 算法</p>\n<h3 id=\"rip路由信息协议dvp\"><a class=\"anchor\" href=\"#rip路由信息协议dvp\">#</a> RIP 路由信息协议（DVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_101.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_101\" /></p>\n<ol>\n<li>很受欢迎</li>\n<li>内部网关协议</li>\n<li>距离矢量协议</li>\n<li>基于跳数</li>\n<li>最远可达跳数 15</li>\n<li>每 30 秒更新</li>\n<li>不选择最快路径（选择跳数最短的路径）</li>\n<li>产生很多网络流量（network traffic)</li>\n<li>v2 是 v1 的一个进阶版本</li>\n</ol>\n<h3 id=\"igrp-vs-eigrpdvp\"><a class=\"anchor\" href=\"#igrp-vs-eigrpdvp\">#</a> IGRP vs EIGRP(DVP)</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_102.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_102\" /></p>\n<ol>\n<li>思科知识产权的。</li>\n<li>内部网关协议。</li>\n<li>距离矢量协议</li>\n<li>指标由 ** 带宽 (bandwidth)，负载 (load)，延迟 (delay) 和可靠性 (reliability)** 组成。加权进行运算。</li>\n<li>IGRP 最大跳数为 255。</li>\n<li>每 90 秒更新一次。</li>\n<li>EIGRP 是 IGRP 的高级版本，它是<strong>混合</strong>路由协议 (不全是根据跳数来计算)。</li>\n</ol>\n<p>比 RIP 性能好很多</p>\n<h3 id=\"ospflvp\"><a class=\"anchor\" href=\"#ospflvp\">#</a> OSPF（LVP）</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_103.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_103\" /></p>\n<ol>\n<li>最短路径优先协议</li>\n<li>内部网关协议</li>\n<li>链路状态协议，消耗内存和 CPU</li>\n<li>指标由带宽，速度，流量，可靠性和安全性组成，本科阶段只考虑带宽的。</li>\n<li>事件触发的更新。</li>\n<li>最快和什么有关？(最快指的是带宽)\n<ol>\n<li>和实时各条链路上的通信冗余有关，也和管理方案有关，简单来说是和带宽有关</li>\n<li>带宽表示为代价，带宽和代价成<strong>反比</strong>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"vlsmvariable-length-subnet-mask-可变长度子网掩码\"><a class=\"anchor\" href=\"#vlsmvariable-length-subnet-mask-可变长度子网掩码\">#</a> VLSM (Variable Length Subnet Mask) 可变长度子网掩码</h2>\n<h3 id=\"经典路由和可变长度子网掩码\"><a class=\"anchor\" href=\"#经典路由和可变长度子网掩码\">#</a> 经典路由和可变长度子网掩码</h3>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_105.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_105\" /></p>\n<ul>\n<li>\n<p>有类路由</p>\n<p>有类的路由协议要求单个网络使用相同的子网掩码。</p>\n<p>例如：网络 192.168.187.0 必须仅使用一个子网掩码，例如 255.255.255.0。</p>\n</li>\n<li>\n<p>可变长度子网掩码</p>\n<p>VLSM 只是一个特征，它允许单个自治系统的网络具有不同的子网掩码。</p>\n<p>可有效解决网络号浪费的问题</p>\n</li>\n</ul>\n<p><img data-src=\"C:/docu/%E5%A4%A7%E4%BA%8C%E4%B8%8A/cxy/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/%E8%AF%BE%E7%A8%8BPPT/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_106.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_106\" /></p>\n<ol>\n<li>使用 VLSM，网络管理员可以在主机少的网络上使用长掩码，而在主机多的子网上使用短掩码。(提供了很高的灵活性)</li>\n<li>如果路由协议允许 VLSM\n<ol>\n<li>在路由网络连接上使用 30 位子网掩码 255.255.255.252（两个路由器相连）</li>\n<li>用户网络的 24 位掩码 255.255.255.0</li>\n<li>或者，对于最多 1000 个用户的网络，甚至是 22 位掩码 255.255.252.0。(保留 10 位)</li>\n</ol>\n</li>\n<li>在 CIDR 的基础上发展的，报文中包含有子网掩码。</li>\n</ol>\n<h3 id=\"为什么使用vlsm\"><a class=\"anchor\" href=\"#为什么使用vlsm\">#</a> 为什么使用 VLSM</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_107.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_107\" /></p>\n<ol>\n<li>VLSM 允许组织在同一网络地址空间内使用多个子网掩码。</li>\n<li>实施 VLSM 通常被称为 &quot;子网划分&quot;，可用于最大化寻址效率。</li>\n<li>VLSM 是有助于缩小 IPv4 和 IPv6 之间差距的修改 (modifications) 之一。</li>\n</ol>\n<h3 id=\"vlsm的优缺点\"><a class=\"anchor\" href=\"#vlsm的优缺点\">#</a> VLSM 的优缺点</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_108.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_108\" /></p>\n<ol>\n<li>高效使用 IP 地址</li>\n<li>更好的路由聚合 (aggregation): 构建超网</li>\n</ol>\n<p>很多协议都支持 VLSM 协议，只有 RIP v1 不支持</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_109.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_109\" /></p>\n<p>会导致地址空间的浪费：广播地址和网络号都无法被使用。</p>\n<ol>\n<li>过去，建议不要使用第一个和最后一个子网。但是我们可以使用 Cisco IOS ver12.0 中的子网 0。</li>\n<li>从 IOS ver12.0 起，Cisco 路由器默认使用零子网。</li>\n<li>如果想要禁止零子网，使用该指令: <code>router(config)#no ip subnet-zero()</code></li>\n</ol>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_110.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_110\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_111.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_111\" /></p>\n<p>路由器之间不需要那么多地址，可以进行优化</p>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_112.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_112\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_113.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_113\" /></p>\n<p>为了计算 VLSM 子网，各个主机首先从地址范围分配最大的需求。需求级别应从<strong>最大到最小</strong>列出。</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_114.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_114\" /></p>\n<p>Octet 八位字节</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_115.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_115\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_116.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_116\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_117.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_117\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_118.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_118\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_119.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_119\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_120.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_120\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_121.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_121\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_122.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_122\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_123.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_123\" /></p>\n<p>没被用过的子网才能进一步划分</p>\n<h3 id=\"路由聚集\"><a class=\"anchor\" href=\"#路由聚集\">#</a> 路由聚集</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_124.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_124\" /></p>\n<p>Classless InterDomain Routing (CIDR) 无类域间路由</p>\n<p>将 3 个 / 24 的子网合并成一个 / 16 的网络</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_125.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_125\" /></p>\n<p>多层聚集</p>\n<h4 id=\"如何计算路由聚集\"><a class=\"anchor\" href=\"#如何计算路由聚集\">#</a> 如何计算路由聚集</h4>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_126.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_126\" /></p>\n<p>提取尽可能多的相同的位作为 net 位，其他作为 host 位</p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_127.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_127\" /></p>\n<ul>\n<li>\n<p>减少路由表条目的数量。</p>\n</li>\n<li>\n<p>可用于隔离拓扑更改</p>\n</li>\n</ul>\n<h2 id=\"icmp\"><a class=\"anchor\" href=\"#icmp\">#</a> ICMP</h2>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_129.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_129\" /></p>\n<p>Internet Control Message Protocol 因特网控制报文协议</p>\n<h3 id=\"icmp报文格式\"><a class=\"anchor\" href=\"#icmp报文格式\">#</a> ICMP 报文格式</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_130.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_130\" /></p>\n<h3 id=\"两种icmp报文\"><a class=\"anchor\" href=\"#两种icmp报文\">#</a> 两种 ICMP 报文</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_131.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_131\" /></p>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_132.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_132\" /></p>\n<h3 id=\"icmp差错报告报文的数据字段的内容\"><a class=\"anchor\" href=\"#icmp差错报告报文的数据字段的内容\">#</a> ICMP 差错报告报文的数据字段的内容</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_133.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_133\" /></p>\n<h3 id=\"不应发送icmp差错报告报文的几种情况\"><a class=\"anchor\" href=\"#不应发送icmp差错报告报文的几种情况\">#</a> 不应发送 ICMP 差错报告报文的几种情况</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_134.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_134\" /></p>\n<h3 id=\"ping\"><a class=\"anchor\" href=\"#ping\">#</a> PING</h3>\n<p><img data-src=\"https://quasdo.oss-cn-hangzhou.aliyuncs.com/img/%E7%AC%AC4%E8%AE%B2%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF20200416_%E9%A1%B5%E9%9D%A2_135.jpg\" alt=\"第4讲：网络层原理与技术20200416_页面_135\" /></p>\n<p>PING Packet InterNet Groper</p>\n<h2 id=\"一些其他\"><a class=\"anchor\" href=\"#一些其他\">#</a> 一些其他</h2>\n<p>基于 IP 地址，而不是 MAC 地址。</p>\n<p>【IP 地址和 MAC 地址的区别】IP 地址是一个框架，有逻辑和层次。MAC 地址较为平坦（谁生产的商品）</p>\n<p>G 0/0/0 模块 板子 接口</p>\n<p>s 0/1/0 模块 板子 接口</p>\n<p>802.3</p>\n<p>The maximum size of the L-PDU for a 10Mbps network is 1500 bytes. Because 8 bytes are used within the L-PDU for the LLC header, this means that the maximum size of the data field is <strong>1492 bytes</strong>.</p>\n<p>802.11</p>\n<p>The frame body of the 802.11 packet can range from 0-<strong>2312 bytes</strong>.</p>\n<p>Routed protocol</p>\n<p>被动路由协议</p>\n<p>基于路由表</p>\n<p>Non-routable protobal</p>\n<p>不基于路由表</p>\n<p>多播地址</p>\n<p>D 类地址，开头为 1110</p>\n<p>多播地址范围为 224.0.0.0～239.255.255.255</p>\n",
            "tags": [
                "NJUSE",
                "互联网计算",
                "计网"
            ]
        }
    ]
}